cscope 15 $HOME/Data/gh_psp_emulator/atari2600-1.1.4/src               0000986948
	@Atari.cpp

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<sys/°©.h
>

23 
	~<p•powî.h
>

24 
	~<SDL/SDL.h
>

25 
	~<SDL/SDL_mixî.h
>

26 
	~<SDL/SDL_image.h
>

27 
	~<SDL/SDL_âf.h
>

28 
	~<p•˘æ.h
>

29 
	~<p•ty≥s.h
>

30 
	~<≤g.h
>

31 
	~<zlib.h
>

32 
	~<uni°d.h
>

34 
	~"globÆ.h
"

35 
	~"Aèri.h
"

36 
	~"p•_sdl.h
"

37 
	~"p•_kbd.h
"

38 
	~"p•_míu.h
"

39 
	~"p•_fmgr.h
"

41 
	~<p•˘æ.h
>

42 
	~<p•kî√l.h
>

43 
	~<p•debug.h
>

44 
	~<p•iofûemgr.h
>

47 #ifde‡
__˝lu•lus


51 
Aèri_t
 
ATARI
;

53 
p•_s¸ìnshŸ_mode
 = 0;

56 
©¨i_upd©e_ßve_«me
(*
Name
)

58 
TmpFûeName
[
MAX_PATH
];

59 #ifde‡
LINUX_MODE


60 
°©
 
aSèt
;

62 
S˚IoSèt
 
aSèt
;

64 
ödex
;

65 *
SaveName
;

66 *
Sˇn1
;

67 *
Sˇn2
;

69 
SaveName
 = 
°ºchr
(
Name
,'/');

70 i‡(
SaveName
 != (*)0) SaveName++;

71 
SaveName
 = 
Name
;

73 i‡(!
°∫ˇ£cmp
(
SaveName
, "sav_", 4)) {

74 
Sˇn1
 = 
SaveName
 + 4;

75 
Sˇn2
 = 
°ºchr
(
Sˇn1
, '_');

76 i‡(
Sˇn2
 && (Scan2[1] >= '0') && (Scan2[1] <= '5')) {

77 
°∫˝y
(
ATARI
.
©¨i_ßve_«me
, 
Sˇn1
, 
MAX_PATH
);

78 
ATARI
.
©¨i_ßve_«me
[
Sˇn2
 - 
Sˇn1
] = '\0';

80 
°∫˝y
(
ATARI
.
©¨i_ßve_«me
, 
SaveName
, 
MAX_PATH
);

83 
°∫˝y
(
ATARI
.
©¨i_ßve_«me
, 
SaveName
, 
MAX_PATH
);

86 i‡(
ATARI
.
©¨i_ßve_«me
[0] == '\0') {

87 
°r˝y
(
ATARI
.
©¨i_ßve_«me
,"default");

90 
ödex
 = 0; index < 
ATARI_MAX_SAVE_STATE
; index++) {

91 
ATARI
.
©¨i_ßve_°©e
[
ödex
].
u£d
 = 0;

92 
mem£t
(&
ATARI
.
©¨i_ßve_°©e
[
ödex
].
d©e
, 0, (
S˚P•D©eTime
));

93 
ATARI
.
©¨i_ßve_°©e
[
ödex
].
thumb
 = 0;

95 
¢¥ötf
(
TmpFûeName
, 
MAX_PATH
, "%s/ßve/ßv_%s_%d.°a", 
ATARI
.
©¨i_home_dú
, ATARI.
©¨i_ßve_«me
, 
ödex
);

96 #ifde‡
LINUX_MODE


97 i‡(! 
°©
(
TmpFûeName
, &
aSèt
))

99 i‡(! 
s˚IoGë°©
(
TmpFûeName
, &
aSèt
))

102 
ATARI
.
©¨i_ßve_°©e
[
ödex
].
u£d
 = 1;

103 
ATARI
.
©¨i_ßve_°©e
[
ödex
].
d©e
 = 
aSèt
.
°_mtime
;

104 
¢¥ötf
(
TmpFûeName
, 
MAX_PATH
, "%s/ßve/ßv_%s_%d.≤g", 
ATARI
.
©¨i_home_dú
, ATARI.
©¨i_ßve_«me
, 
ödex
);

105 #ifde‡
LINUX_MODE


106 i‡(! 
°©
(
TmpFûeName
, &
aSèt
))

108 i‡(! 
s˚IoGë°©
(
TmpFûeName
, &
aSèt
))

111 i‡(
p•_sdl_lﬂd_thumb_≤g
(
ATARI
.
©¨i_ßve_°©e
[
ödex
].
surÁ˚
, 
TmpFûeName
)) {

112 
ATARI
.
©¨i_ßve_°©e
[
ödex
].
thumb
 = 1;

120 
ª£t_ßve_«me
()

122 
©¨i_upd©e_ßve_«me
("");

125 
	sthumb_li°
 {

126 
thumb_li°
 *
√xt
;

127 *
«me
;

128 *
thumb
;

129 } 
	tthumb_li°
;

131 
thumb_li°
* 
loc_hód_thumb
 = 0;

134 
loc_dñ_thumb_li°
()

136 
loc_hód_thumb
 != 0) {

137 
thumb_li°
 *
dñ_ñem
 = 
loc_hód_thumb
;

138 
loc_hód_thumb
 =Üoc_hód_thumb->
√xt
;

139 i‡(
dñ_ñem
->
«me
Ë
‰ì
( del_elem->name );

140 i‡(
dñ_ñem
->
thumb
Ë
‰ì
( del_elem->thumb );

141 
‰ì
(
dñ_ñem
);

146 
loc_add_thumb_li°
(* 
fûíame
)

148 
thumb_li°
 *
√w_ñem
;

149 
tmp_fûíame
[
MAX_PATH
];

151 
°r˝y
(
tmp_fûíame
, 
fûíame
);

152 * 
ßve_«me
 = 
tmp_fûíame
;

155 * 
Sˇn
 = 
°ºchr
(
ßve_«me
, '.');

156 i‡((! 
Sˇn
Ë|| (
°rˇ£cmp
(Scan, ".png"))) ;

157 *
Sˇn
 = 0;

159 i‡(
°∫ˇ£cmp
(
ßve_«me
, "sav_", 4)) ;

160 
ßve_«me
 += 4;

162 
Sˇn
 = 
°ºchr
(
ßve_«me
, '_');

163 i‡(! 
Sˇn
) ;

164 *
Sˇn
 = 0;

167 
√w_ñem
 = 
loc_hód_thumb
;

168 
√w_ñem
 != 0) {

169 i‡(! 
°rˇ£cmp
(
√w_ñem
->
«me
, 
ßve_«me
)) ;

170 
√w_ñem
 =Çew_ñem->
√xt
;

173 
√w_ñem
 = (
thumb_li°
 *)
mÆloc
( (Åhumb_list ) );

174 
√w_ñem
->
√xt
 = 
loc_hód_thumb
;

175 
loc_hód_thumb
 = 
√w_ñem
;

176 
√w_ñem
->
«me
 = 
°rdup
–
ßve_«me
 );

177 
√w_ñem
->
thumb
 = 
°rdup
–
fûíame
 );

181 
lﬂd_thumb_li°
()

183 #i‚de‡
LINUX_MODE


184 
SaveDúName
[
MAX_PATH
];

185 
S˚IoDúít
 
a_dúít
;

186 
fd
 = 0;

188 
loc_dñ_thumb_li°
();

190 
¢¥ötf
(
SaveDúName
, 
MAX_PATH
, "%s/ßve", 
ATARI
.
©¨i_home_dú
);

191 
mem£t
(&
a_dúít
, 0, (a_dirent));

193 
fd
 = 
s˚IoD›í
(
SaveDúName
);

194 i‡(
fd
 < 0) ;

196 
s˚IoDªad
(
fd
, &
a_dúít
) > 0) {

197 if(
a_dúít
.
d_«me
[0] == '.') ;

198 if(! 
FIO_S_ISDIR
(
a_dúít
.
d_°©
.
°_mode
))

200 
loc_add_thumb_li°
–
a_dúít
.
d_«me
 );

203 
s˚IoD˛o£
(
fd
);

205 
SaveDúName
[
MAX_PATH
];

206 
DIR
* 
fd
 = 0;

208 
loc_dñ_thumb_li°
();

210 
¢¥ötf
(
SaveDúName
, 
MAX_PATH
, "%s/ßve", 
ATARI
.
©¨i_home_dú
);

212 
fd
 = 
›ídú
(
SaveDúName
);

213 i‡(!
fd
) ;

215 
dúít
 *
a_dúít
;

216 (
a_dúít
 = 
ªaddú
(
fd
)) != 0) {

217 if(
a_dúít
->
d_«me
[0] == '.') ;

218 i‡(
a_dúít
->
d_ty≥
 !
DT_DIR
)

220 
loc_add_thumb_li°
–
a_dúít
->
d_«me
 );

223 
˛o£dú
(
fd
);

228 
lﬂd_thumb_if_exi°s
(*
Name
)

230 
FûeName
[
MAX_PATH
];

231 
ThumbFûeName
[
MAX_PATH
];

232 #ifde‡
LINUX_MODE


233 
°©
 
aSèt
;

235 
S˚IoSèt
 
aSèt
;

237 *
SaveName
;

238 *
Sˇn
;

240 
°r˝y
(
FûeName
, 
Name
);

241 
SaveName
 = 
°ºchr
(
FûeName
,'/');

242 i‡(
SaveName
 != (*)0) SaveName++;

243 
SaveName
 = 
FûeName
;

245 
Sˇn
 = 
°ºchr
(
SaveName
,'.');

246 i‡(
Sˇn
) *Scan = '\0';

248 i‡(!
SaveName
[0])  0;

250 
thumb_li°
 *
sˇn_li°
 = 
loc_hód_thumb
;

251 
sˇn_li°
 != 0) {

252 i‡(! 
°rˇ£cmp
–
SaveName
, 
sˇn_li°
->
«me
)) {

253 
¢¥ötf
(
ThumbFûeName
, 
MAX_PATH
, "%s/ßve/%s", 
ATARI
.
©¨i_home_dú
, 
sˇn_li°
->
thumb
);

254 #ifde‡
LINUX_MODE


255 i‡(! 
°©
(
ThumbFûeName
, &
aSèt
))

257 i‡(! 
s˚IoGë°©
(
ThumbFûeName
, &
aSèt
))

260 i‡(
p•_sdl_lﬂd_thumb_≤g
(
ßve_surÁ˚
, 
ThumbFûeName
)) {

265 
sˇn_li°
 = sˇn_li°->
√xt
;

272 
©¨i_kbd_lﬂd
()

274 
TmpFûeName
[
MAX_PATH
 + 1];

275 
°©
 
aSèt
;

277 
¢¥ötf
(
TmpFûeName
, 
MAX_PATH
, "%s/kbd/%s.kbd", 
ATARI
.
©¨i_home_dú
, ATARI.
©¨i_ßve_«me
 );

278 i‡(! 
°©
(
TmpFûeName
, &
aSèt
)) {

279 
p•_kbd_lﬂd_m≠pög
(
TmpFûeName
);

284 
©¨i_kbd_ßve
()

286 
TmpFûeName
[
MAX_PATH
 + 1];

287 
¢¥ötf
(
TmpFûeName
, 
MAX_PATH
, "%s/kbd/%s.kbd", 
ATARI
.
©¨i_home_dú
, ATARI.
©¨i_ßve_«me
 );

288 –
p•_kbd_ßve_m≠pög
(
TmpFûeName
) );

292 
©¨i_emuœt‹_ª£t
()

294 
maö_©¨i_emuœt‹_ª£t
();

298 
©¨i_deÁu…_£âögs
()

301 
ATARI
.
©¨i_¢d_íabÀ
 = 1;

302 
ATARI
.
©¨i_ªndî_mode
 = 
ATARI_RENDER_NORMAL
;

303 
ATARI
.
©¨i_vsync
 = 0;

304 
ATARI
.
©¨i_Êickî_mode
 = 
ATARI_FLICKER_NONE
;

305 
ATARI
.
©¨i_∑ddÀ_íabÀ
 = 1;

306 
ATARI
.
©¨i_∑ddÀ_•ìd
 = 2;

307 
ATARI
.
©¨i_•ìd_limôî
 = 60;

308 
ATARI
.
©¨i_auto_fúe
 = 0;

309 
ATARI
.
©¨i_auto_fúe_≥riod
 = 6;

310 
ATARI
.
©¨i_auto_fúe_¥es£d
 = 0;

311 
ATARI
.
p•_ªvî£_™Æog
 = 0;

312 
ATARI
.
p•_a˘ive_joy°ick
 = 0;

313 
ATARI
.
p•_˝u_˛ock
 = 222;

314 
ATARI
.
p•_s¸ìnshŸ_id
 = 0;

315 
ATARI
.
p•_di•œy_Ã
 = 0;

316 
ATARI
.
©¨i_võw_Âs
 = 0;

318 
s˚PowîSëClockFªquícy
(
ATARI
.
p•_˝u_˛ock
, ATARI.psp_cpu_clock, ATARI.psp_cpu_clock/2);

322 
loc_©¨i_ßve_£âögs
(*
chFûeName
)

324 
FILE
* 
FûeDesc
;

325 
îr‹
 = 0;

327 
FûeDesc
 = 
f›í
(
chFûeName
, "w");

328 i‡(
FûeDesc
 !(
FILE
 *)0 ) {

330 
Ârötf
(
FûeDesc
, "p•_˝u_˛ock=%d\n" , 
ATARI
.
p•_˝u_˛ock
);

331 
Ârötf
(
FûeDesc
, "p•_ªvî£_™Æog=%d\n" , 
ATARI
.
p•_ªvî£_™Æog
);

332 
Ârötf
(
FûeDesc
, "p•_di•œy_Ã=%d\n" , 
ATARI
.
p•_di•œy_Ã
);

333 
Ârötf
(
FûeDesc
, "p•_skù_max_‰ame=%d\n" , 
ATARI
.
p•_skù_max_‰ame
);

334 
Ârötf
(
FûeDesc
, "©¨i_võw_Âs=%d\n" , 
ATARI
.
©¨i_võw_Âs
);

335 
Ârötf
(
FûeDesc
, "©¨i_¢d_íabÀ=%d\n" , 
ATARI
.
©¨i_¢d_íabÀ
);

336 
Ârötf
(
FûeDesc
, "©¨i_ªndî_mode=%d\n" , 
ATARI
.
©¨i_ªndî_mode
);

337 
Ârötf
(
FûeDesc
, "©¨i_vsync=%d\n" , 
ATARI
.
©¨i_vsync
);

338 
Ârötf
(
FûeDesc
, "©¨i_Êickî_mode=%d\n" , 
ATARI
.
©¨i_Êickî_mode
);

339 
Ârötf
(
FûeDesc
, "©¨i_∑ddÀ_•ìd=%d\n" , 
ATARI
.
©¨i_∑ddÀ_•ìd
);

340 
Ârötf
(
FûeDesc
, "©¨i_∑ddÀ_íabÀ=%d\n", 
ATARI
.
©¨i_∑ddÀ_íabÀ
);

341 
Ârötf
(
FûeDesc
, "©¨i_•ìd_limôî=%d\n", 
ATARI
.
©¨i_•ìd_limôî
);

342 
Ârötf
(
FûeDesc
, "©¨i_auto_fúe_≥riod=%d\n", 
ATARI
.
©¨i_auto_fúe_≥riod
);

344 
f˛o£
(
FûeDesc
);

347 
îr‹
 = 1;

350  
îr‹
;

354 
©¨i_ßve_£âögs
()

356 
FûeName
[
MAX_PATH
+1];

357 
îr‹
;

359 
îr‹
 = 1;

361 
¢¥ötf
(
FûeName
, 
MAX_PATH
, "%s/£t/%s.£t", 
ATARI
.
©¨i_home_dú
, ATARI.
©¨i_ßve_«me
);

362 
îr‹
 = 
loc_©¨i_ßve_£âögs
(
FûeName
);

364  
îr‹
;

368 
loc_©¨i_lﬂd_£âögs
(*
chFûeName
)

370 
Buf„r
[512];

371 *
Sˇn
;

372 
VÆue
;

373 
FILE
* 
FûeDesc
;

375 
FûeDesc
 = 
f›í
(
chFûeName
, "r");

376 i‡(
FûeDesc
 =(
FILE
 *)0 )  0;

378 
fgës
(
Buf„r
,512, 
FûeDesc
) != (*)0) {

380 
Sˇn
 = 
°rchr
(
Buf„r
,'\n');

381 i‡(
Sˇn
) *Scan = '\0';

383 
Sˇn
 = 
°rchr
(
Buf„r
,'\r');

384 i‡(
Sˇn
) *Scan = '\0';

385 i‡(
Buf„r
[0] == '#') ;

387 
Sˇn
 = 
°rchr
(
Buf„r
,'=');

388 i‡(! 
Sˇn
) ;

390 *
Sˇn
 = '\0';

391 
VÆue
 = 
©oi
(
Sˇn
+1);

393 i‡(!
°rˇ£cmp
(
Buf„r
,"p•_˝u_˛ock")Ë
ATARI
.
p•_˝u_˛ock
 = 
VÆue
;

395 i‡(!
°rˇ£cmp
(
Buf„r
,"p•_ªvî£_™Æog")Ë
ATARI
.
p•_ªvî£_™Æog
 = 
VÆue
;

397 i‡(!
°rˇ£cmp
(
Buf„r
,"p•_di•œy_Ã")Ë
ATARI
.
p•_di•œy_Ã
 = 
VÆue
;

399 i‡(!
°rˇ£cmp
(
Buf„r
,"©¨i_võw_Âs")Ë
ATARI
.
©¨i_võw_Âs
 = 
VÆue
;

401 i‡(!
°rˇ£cmp
(
Buf„r
,"p•_skù_max_‰ame")Ë
ATARI
.
p•_skù_max_‰ame
 = 
VÆue
;

403 i‡(!
°rˇ£cmp
(
Buf„r
,"©¨i_¢d_íabÀ")Ë
ATARI
.
©¨i_¢d_íabÀ
 = 
VÆue
;

405 i‡(!
°rˇ£cmp
(
Buf„r
,"©¨i_ªndî_mode")Ë
ATARI
.
©¨i_ªndî_mode
 = 
VÆue
;

407 i‡(!
°rˇ£cmp
(
Buf„r
,"©¨i_vsync")Ë
ATARI
.
©¨i_vsync
 = 
VÆue
;

409 i‡(!
°rˇ£cmp
(
Buf„r
,"©¨i_Êickî_mode")Ë
ATARI
.
©¨i_Êickî_mode
 = 
VÆue
;

411 i‡(!
°rˇ£cmp
(
Buf„r
,"©¨i_∑ddÀ_íabÀ")Ë
ATARI
.
©¨i_∑ddÀ_íabÀ
 = 
VÆue
;

413 i‡(!
°rˇ£cmp
(
Buf„r
,"©¨i_∑ddÀ_•ìd")Ë
ATARI
.
©¨i_∑ddÀ_•ìd
 = 
VÆue
;

415 i‡(!
°rˇ£cmp
(
Buf„r
,"©¨i_•ìd_limôî")Ë
ATARI
.
©¨i_•ìd_limôî
 = 
VÆue
;

417 i‡(!
°rˇ£cmp
(
Buf„r
,"©¨i_auto_fúe_≥riod")Ë
ATARI
.
©¨i_auto_fúe_≥riod
 = 
VÆue
;

420 
f˛o£
(
FûeDesc
);

422 
s˚PowîSëClockFªquícy
(
ATARI
.
p•_˝u_˛ock
, ATARI.psp_cpu_clock, ATARI.psp_cpu_clock/2);

428 
©¨i_lﬂd_£âögs
()

430 
FûeName
[
MAX_PATH
+1];

431 
îr‹
;

433 
îr‹
 = 1;

435 
¢¥ötf
(
FûeName
, 
MAX_PATH
, "%s/£t/%s.£t", 
ATARI
.
©¨i_home_dú
, ATARI.
©¨i_ßve_«me
);

436 
îr‹
 = 
loc_©¨i_lﬂd_£âögs
(
FûeName
);

438  
îr‹
;

442 
©¨i_lﬂd_fûe_£âögs
(*
FûeName
)

444  
loc_©¨i_lﬂd_£âögs
(
FûeName
);

448 
©¨i_audio_∑u£
()

450 i‡(
ATARI
.
©¨i_¢d_íabÀ
) {

451 
SDL_Pau£Audio
(1);

456 
©¨i_audio_ªsume
()

458 i‡(
ATARI
.
©¨i_¢d_íabÀ
) {

459 
SDL_Pau£Audio
(0);

466 *
pchZùFûe
;

467 *
pchExãnsi⁄
;

468 *
pchFûeNames
;

469 *
pchSñe˘i⁄
;

470 
iFûes
;

471 
dwOff£t
;

472 } 
	tt_zù_öfo
;

474 
t_zù_öfo
 
zù_öfo
;

476 
	tdw‹d
;

477 
	tw‹d
;

478 
	tbyã
;

480 
	#ERR_FILE_NOT_FOUND
 13

	)

481 
	#ERR_FILE_BAD_ZIP
 14

	)

482 
	#ERR_FILE_EMPTY_ZIP
 15

	)

483 
	#ERR_FILE_UNZIP_FAILED
 16

	)

485 
FILE
 *
pfûeObje˘
;

486 *
pbGPBuf„r
 = 
NULL
;

488 
dw‹d


489 
loc_gë_dw‹d
(
byã
 *
buff
)

491  ( (((
dw‹d
)
buff
[3]) << 24) |

492 (((
dw‹d
)
buff
[2]) << 16) |

493 (((
dw‹d
)
buff
[1]) << 8) |

494 (((
dw‹d
)
buff
[0]) << 0) );

498 
loc_£t_dw‹d
(
byã
 *
buff
, 
dw‹d
 
vÆue
)

500 
buff
[3] = (
vÆue
 >> 24) & 0xff;

501 
buff
[2] = (
vÆue
 >> 16) & 0xff;

502 
buff
[1] = (
vÆue
 >> 8) & 0xff;

503 
buff
[0] = (
vÆue
 >> 0) & 0xff;

506 
w‹d


507 
loc_gë_w‹d
(
byã
 *
buff
)

509 –(((
w‹d
)
buff
[1]) << 8) |

510 (((
w‹d
)
buff
[0]) << 0) );

515 
zù_dú
(
t_zù_öfo
 *
zi
)

517 
n
, 
iFûeCou¡
;

518 
lFûePosôi⁄
;

519 
dw‹d
 
dwCíåÆDúPosôi⁄
, 
dwNextE¡ry
;

520 
w‹d
 
wCíåÆDúE¡rõs
, 
wCíåÆDúSize
, 
wFûíameLígth
;

521 
byã
 *
pbPå
;

522 *
pchSåPå
;

523 
dw‹d
 
dwOff£t
;

525 
iFûeCou¡
 = 0;

526 i‡((
pfûeObje˘
 = 
f›í
(
zi
->
pchZùFûe
, "rb")Ë=
NULL
) {

527  
ERR_FILE_NOT_FOUND
;

530 i‡(
pbGPBuf„r
 == (*)0) {

531 
pbGPBuf„r
 = (*)
mÆloc
–(
byã
) * 128*1024);

534 
wCíåÆDúE¡rõs
 = 0;

535 
wCíåÆDúSize
 = 0;

536 
dwCíåÆDúPosôi⁄
 = 0;

537 
lFûePosôi⁄
 = -256;

539 
f£ek
(
pfûeObje˘
, 
lFûePosôi⁄
, 
SEEK_END
);

540 i‡(
‰ód
(
pbGPBuf„r
, 256, 1, 
pfûeObje˘
) == 0) {

541 
f˛o£
(
pfûeObje˘
);

542  
ERR_FILE_BAD_ZIP
;

544 
pbPå
 = (
byã
*)(
pbGPBuf„r
 + (256 - 22));

545 
pbPå
 !(
byã
 *)
pbGPBuf„r
) {

546 i‡(
loc_gë_dw‹d
(
pbPå
) == 0x06054b50) {

547 
wCíåÆDúE¡rõs
 = 
loc_gë_w‹d
(
pbPå
 + 10);

548 
wCíåÆDúSize
 = 
loc_gë_w‹d
(
pbPå
 + 12);

549 
dwCíåÆDúPosôi⁄
 = 
loc_gë_dw‹d
(
pbPå
 + 16);

552 
pbPå
--;

554 
lFûePosôi⁄
 -= 256;

555 } 
wCíåÆDúE¡rõs
 == 0);

556 i‡(
wCíåÆDúSize
 == 0) {

557 
f˛o£
(
pfûeObje˘
);

558  
ERR_FILE_BAD_ZIP
;

560 
f£ek
(
pfûeObje˘
, 
dwCíåÆDúPosôi⁄
, 
SEEK_SET
);

561 i‡(
‰ód
(
pbGPBuf„r
, 
wCíåÆDúSize
, 1, 
pfûeObje˘
) == 0) {

562 
f˛o£
(
pfûeObje˘
);

563  
ERR_FILE_BAD_ZIP
;

566 
pbPå
 = (
byã
 *)
pbGPBuf„r
;

567 i‡(
zi
->
pchFûeNames
) {

568 
‰ì
(
zi
->
pchFûeNames
);

570 
zi
->
pchFûeNames
 = (*)
mÆloc
(
wCíåÆDúSize
);

571 
pchSåPå
 = 
zi
->
pchFûeNames
;

573 
n
 = 
wCíåÆDúE¡rõs
;Ç;Ç--) {

574 
wFûíameLígth
 = 
loc_gë_w‹d
(
pbPå
 + 28);

575 
dwOff£t
 = 
loc_gë_dw‹d
(
pbPå
 + 42);

576 
dwNextE¡ry
 = 
wFûíameLígth
 + 
loc_gë_w‹d
(
pbPå
 + 30) +Üoc_get_word(pbPtr + 32);

577 
pbPå
 += 46;

578 *
pchThisExãnsi⁄
 = 
zi
->
pchExãnsi⁄
;

579 *
pchThisExãnsi⁄
 != '\0') {

580 i‡(
°∫ˇ£cmp
((*)
pbPå
 + (
wFûíameLígth
 - 4), 
pchThisExãnsi⁄
, 4) == 0) {

581 
°∫˝y
(
pchSåPå
, (*)
pbPå
, 
wFûíameLígth
);

582 
pchSåPå
[
wFûíameLígth
] = 0;

583 
pchSåPå
 +
wFûíameLígth
+1;

584 
loc_£t_dw‹d
((
byã
*)
pchSåPå
, 
dwOff£t
);

585 
pchSåPå
 += 4;

586 
iFûeCou¡
++;

589 
pchThisExãnsi⁄
 += 4;

591 
pbPå
 +
dwNextE¡ry
;

593 
f˛o£
(
pfûeObje˘
);

595 i‡(
iFûeCou¡
 == 0) {

596  
ERR_FILE_EMPTY_ZIP
;

599 
zi
->
iFûes
 = 
iFûeCou¡
;

604 
zù_exåa˘
(*
pchZùFûe
, *
pchFûeName
, 
dw‹d
 
dwOff£t
, *
ext
)

606 
iSètus
, 
iCou¡
;

607 
dw‹d
 
dwSize
;

608 
byã
 *
pbI≈utBuf„r
, *
pbOuçutBuf„r
;

609 
FILE
 *
pfûeOut
, *
pfûeIn
;

610 
z_°ªam
 
z
;

612 
°r˝y
(
pchFûeName
, 
ATARI
.
©¨i_home_dú
);

613 
°rˇt
(
pchFûeName
, "/unzip.");

614 
°rˇt
(
pchFûeName
, 
ext
);

616 i‡(!(
pfûeOut
 = 
f›í
(
pchFûeName
, "wb"))) {

617  
ERR_FILE_UNZIP_FAILED
;

619 i‡(
pbGPBuf„r
 == (*)0) {

620 
pbGPBuf„r
 = (*)
mÆloc
–(
byã
) * 128*1024);

622 
pfûeIn
 = 
f›í
(
pchZùFûe
, "rb");

623 
f£ek
(
pfûeIn
, 
dwOff£t
, 
SEEK_SET
);

624 
‰ód
(
pbGPBuf„r
, 30, 1, 
pfûeIn
);

625 
dwSize
 = 
loc_gë_dw‹d
((
byã
 *)(
pbGPBuf„r
 + 18));

626 
dwOff£t
 +30 + 
loc_gë_w‹d
((
byã
 *)(
pbGPBuf„r
 + 26)) +Üoc_get_word((byte *)(pbGPBuffer + 28));

627 
f£ek
(
pfûeIn
, 
dwOff£t
, 
SEEK_SET
);

629 
pbI≈utBuf„r
 = (
byã
 *)
pbGPBuf„r
;

630 
pbOuçutBuf„r
 = 
pbI≈utBuf„r
 + 16384;

631 
z
.
zÆloc
 = (
Æloc_func
)0;

632 
z
.
z‰ì
 = (
‰ì_func
)0;

633 
z
.
›aque
 = (
voidpf
)0;

634 
iSètus
 = 
öÊ©eInô2
(&
z
, -
MAX_WBITS
);

636 
z
.
√xt_ö
 = 
pbI≈utBuf„r
;

637 i‡(
dwSize
 > 16384) {

638 
z
.
avaû_ö
 = 16384;

640 
z
.
avaû_ö
 = 
dwSize
;

642 
z
.
avaû_ö
 = 
‰ód
(
pbI≈utBuf„r
, 1, z.avaû_ö, 
pfûeIn
);

643 (
z
.
avaû_ö
Ë&& (
iSètus
 =
Z_OK
)) {

644 
z
.
√xt_out
 = 
pbOuçutBuf„r
;

645 
z
.
avaû_out
 = 16384;

646 
iSètus
 = 
öÊ©e
(&
z
, 
Z_NO_FLUSH
);

647 
iCou¡
 = 16384 - 
z
.
avaû_out
;

648 i‡(
iCou¡
) {

649 
fwrôe
(
pbOuçutBuf„r
, 1, 
iCou¡
, 
pfûeOut
);

652 
dwSize
 -= 16384;

653 } (
dwSize
 > 0Ë&& (
iSètus
 =
Z_OK
)) ;

654 i‡(
iSètus
 !
Z_STREAM_END
) {

655  
ERR_FILE_UNZIP_FAILED
;

657 
iSètus
 = 
öÊ©eEnd
(&
z
);

658 
f˛o£
(
pfûeIn
);

659 
f˛o£
(
pfûeOut
);

665 
loc_©¨i_ßve_°©e
(*
fûíame
)

667  
maö_©¨i_ßve_°©e
(
fûíame
);

671 
©¨i_lﬂd_rom
(*
FûeName
, 
zù_f‹m©
)

673 *
pchPå
;

674 *
sˇn
;

675 
SaveName
[
MAX_PATH
+1];

676 
TmpFûeName
[
MAX_PATH
 + 1];

677 
dw‹d
 
n
;

678 
f‹m©
;

679 
îr‹
;

681 
îr‹
 = 1;

683 i‡(
zù_f‹m©
) {

685 
zù_öfo
.
pchZùFûe
 = 
FûeName
;

686 
zù_öfo
.
pchExãnsi⁄
 = ".rom.a26.bin";

688 i‡(!
zù_dú
(&
zù_öfo
))

690 
pchPå
 = 
zù_öfo
.
pchFûeNames
;

691 
n
 = 
zù_öfo
.
iFûes
;Ç != 0;Ç--)

693 
f‹m©
 = 
p•_fmgr_gëExtId
(
pchPå
);

694 i‡(
f‹m©
 =
FMGR_FORMAT_ROM
) ;

695 
pchPå
 +
°æí
(pchPtr) + 5;

697 i‡(
n
) {

698 
°∫˝y
(
SaveName
,
pchPå
,
MAX_PATH
);

699 
sˇn
 = 
°ºchr
(
SaveName
,'.');

700 i‡(
sˇn
) *scan = '\0';

701 
©¨i_upd©e_ßve_«me
(
SaveName
);

702 
zù_öfo
.
dwOff£t
 = 
loc_gë_dw‹d
((
byã
 *)(
pchPå
 + (
°æí
(pchPtr)+1)));

703 i‡(!
zù_exåa˘
(
FûeName
, 
TmpFûeName
, 
zù_öfo
.
dwOff£t
, 
sˇn
+1)) {

704 
îr‹
 = ! 
maö_©¨i_lﬂd_rom
(
TmpFûeName
);

705 
ªmove
(
TmpFûeName
);

711 
°∫˝y
(
SaveName
,
FûeName
,
MAX_PATH
);

712 
sˇn
 = 
°ºchr
(
SaveName
,'.');

713 i‡(
sˇn
) *scan = '\0';

714 
©¨i_upd©e_ßve_«me
(
SaveName
);

715 
îr‹
 = ! 
maö_©¨i_lﬂd_rom
(
FûeName
);

718 i‡(! 
îr‹
 ) {

719 
©¨i_emuœt‹_ª£t
();

720 
©¨i_kbd_lﬂd
();

721 
©¨i_lﬂd_£âögs
();

724  
îr‹
;

728 
©¨i_¢≠shŸ_ßve_¶Ÿ
(
ßve_id
)

730 
FûeName
[
MAX_PATH
+1];

731 #ifde‡
LINUX_MODE


732 
°©
 
aSèt
;

734 
S˚IoSèt
 
aSèt
;

736 
îr‹
;

738 
îr‹
 = 1;

740 i‡(
ßve_id
 < 
ATARI_MAX_SAVE_STATE
) {

741 
¢¥ötf
(
FûeName
, 
MAX_PATH
, "%s/ßve/ßv_%s_%d.°a", 
ATARI
.
©¨i_home_dú
, ATARI.
©¨i_ßve_«me
, 
ßve_id
);

742 
îr‹
 = 
loc_©¨i_ßve_°©e
(
FûeName
);

743 i‡(! 
îr‹
) {

744 #ifde‡
LINUX_MODE


745 i‡(! 
°©
(
FûeName
, &
aSèt
))

747 i‡(! 
s˚IoGë°©
(
FûeName
, &
aSèt
))

750 
ATARI
.
©¨i_ßve_°©e
[
ßve_id
].
u£d
 = 1;

751 
ATARI
.
©¨i_ßve_°©e
[
ßve_id
].
thumb
 = 0;

752 
ATARI
.
©¨i_ßve_°©e
[
ßve_id
].
d©e
 = 
aSèt
.
°_mtime
;

753 
¢¥ötf
(
FûeName
, 
MAX_PATH
, "%s/ßve/ßv_%s_%d.≤g", 
ATARI
.
©¨i_home_dú
, ATARI.
©¨i_ßve_«me
, 
ßve_id
);

754 i‡(
p•_sdl_ßve_thumb_≤g
(
ATARI
.
©¨i_ßve_°©e
[
ßve_id
].
surÁ˚
, 
FûeName
)) {

755 
ATARI
.
©¨i_ßve_°©e
[
ßve_id
].
thumb
 = 1;

761  
îr‹
;

765 
©¨i_¢≠shŸ_lﬂd_¶Ÿ
(
lﬂd_id
)

767 
FûeName
[
MAX_PATH
+1];

768 
îr‹
;

770 
îr‹
 = 1;

772 i‡(
lﬂd_id
 < 
ATARI_MAX_SAVE_STATE
) {

773 
¢¥ötf
(
FûeName
, 
MAX_PATH
, "%s/ßve/ßv_%s_%d.°a", 
ATARI
.
©¨i_home_dú
, ATARI.
©¨i_ßve_«me
, 
lﬂd_id
);

774 
îr‹
 = 
maö_©¨i_lﬂd_°©e
(
FûeName
);

776  
îr‹
;

780 
©¨i_¢≠shŸ_dñ_¶Ÿ
(
ßve_id
)

782 
FûeName
[
MAX_PATH
+1];

783 #ifde‡
LINUX_MODE


784 
°©
 
aSèt
;

786 
S˚IoSèt
 
aSèt
;

788 
îr‹
;

790 
îr‹
 = 1;

792 i‡(
ßve_id
 < 
ATARI_MAX_SAVE_STATE
) {

793 
¢¥ötf
(
FûeName
, 
MAX_PATH
, "%s/ßve/ßv_%s_%d.°a", 
ATARI
.
©¨i_home_dú
, ATARI.
©¨i_ßve_«me
, 
ßve_id
);

794 
îr‹
 = 
ªmove
(
FûeName
);

795 i‡(! 
îr‹
) {

796 
ATARI
.
©¨i_ßve_°©e
[
ßve_id
].
u£d
 = 0;

797 
ATARI
.
©¨i_ßve_°©e
[
ßve_id
].
thumb
 = 0;

798 
mem£t
(&
ATARI
.
©¨i_ßve_°©e
[
ßve_id
].
d©e
, 0, (
S˚P•D©eTime
));

801 i‡(
ßve_id
 != 0) {

802 
¢¥ötf
(
FûeName
, 
MAX_PATH
, "%s/ßve/ßv_%s_%d.≤g", 
ATARI
.
©¨i_home_dú
, ATARI.
©¨i_ßve_«me
, 
ßve_id
);

803 #ifde‡
LINUX_MODE


804 i‡(! 
°©
(
FûeName
, &
aSèt
))

806 i‡(! 
s˚IoGë°©
(
FûeName
, &
aSèt
))

809 
ªmove
(
FûeName
);

815  
îr‹
;

819 
©¨i_åót_comm™d_key
(
©¨i_idx
)

821 
√w_ªndî
;

823 
©¨i_idx
)

825 
ATARIC_FPS
: 
ATARI
.
©¨i_võw_Âs
 = ! ATARI.atari_view_fps;

827 
ATARIC_JOY
: 
ATARI
.
p•_ªvî£_™Æog
 = ! ATARI.psp_reverse_analog;

829 
ATARIC_RENDER
:

830 
p•_sdl_bœck_s¸ìn
();

831 
√w_ªndî
 = 
ATARI
.
©¨i_ªndî_mode
 + 1;

832 i‡(
√w_ªndî
 > 
ATARI_LAST_RENDER
)Çew_render = 0;

833 
ATARI
.
©¨i_ªndî_mode
 = 
√w_ªndî
;

835 
ATARIC_LOAD
: 
p•_maö_míu_lﬂd_cuºít
();

837 
ATARIC_SAVE
: 
p•_maö_míu_ßve_cuºít
();

839 
ATARIC_RESET
:

840 
p•_sdl_bœck_s¸ìn
();

841 
maö_©¨i_emuœt‹_ª£t
();

842 
ª£t_ßve_«me
();

844 
ATARIC_AUTOFIRE
:

845 
kbd_ch™ge_auto_fúe
(! 
ATARI
.
©¨i_auto_fúe
);

847 
ATARIC_DECFIRE
:

848 i‡(
ATARI
.
©¨i_auto_fúe_≥riod
 > 0) ATARI.atari_auto_fire_period--;

850 
ATARIC_INCFIRE
:

851 i‡(
ATARI
.
©¨i_auto_fúe_≥riod
 < 19) ATARI.atari_auto_fire_period++;

853 
ATARIC_SCREEN
: 
p•_s¸ìnshŸ_mode
 = 10;

859 
p•_globÆ_öôülize
()

861 
mem£t
(&
ATARI
, 0, (
Aèri_t
));

862 
gëcwd
(
ATARI
.
©¨i_home_dú
,
MAX_PATH
);

863 
©¨i_deÁu…_£âögs
();

865 
p•_sdl_öô
();

867 
©¨i_upd©e_ßve_«me
("");

868 
©¨i_lﬂd_£âögs
();

870 
s˚PowîSëClockFªquícy
(
ATARI
.
p•_˝u_˛ock
, ATARI.psp_cpu_clock, ATARI.psp_cpu_clock/2);

874 #ifde‡
__˝lu•lus


878 
©¨iMaö
(
¨gc
, * 
¨gv
[]);

881 
	$SDL_maö
(
¨gc
,**
¨gv
)

883 
	`p•_globÆ_öôülize
();

885 
	`©¨iMaö
(
¨gc
, 
¨gv
);

888 
	}
}

	@Atari.h

1 #i‚de‡
_ATARI_H_


2 
	#_ATARI_H_


	)

4 #ifde‡
__˝lu•lus


9 
	#ATARI_RENDER_NORMAL
 0

	)

10 
	#ATARI_RENDER_X125
 1

	)

11 
	#ATARI_RENDER_MAX
 2

	)

12 
	#ATARI_LAST_RENDER
 2

	)

14 
	#ATARI_FLICKER_NONE
 0

	)

15 
	#ATARI_FLICKER_SIMPLE
 1

	)

16 
	#ATARI_FLICKER_AVERAGE
 2

	)

17 
	#ATARI_FLICKER_PHOSPHOR
 3

	)

18 
	#ATARI_LAST_FLICKER
 3

	)

20 
	#MAX_PATH
 256

	)

21 
	#ATARI_MAX_SAVE_STATE
 5

	)

23 
	~<p•ty≥s.h
>

25 
	sAèri_ßve_t
 {

27 
SDL_SurÁ˚
 *
surÁ˚
;

28 
u£d
;

29 
thumb
;

30 
S˚P•D©eTime
 
d©e
;

32 } 
	tAèri_ßve_t
;

34 
	sAèri_t
 {

36 
Aèri_ßve_t
 
©¨i_ßve_°©e
[
ATARI_MAX_SAVE_STATE
];

38 
©¨i_ßve_«me
[
MAX_PATH
];

39 
©¨i_home_dú
[
MAX_PATH
];

40 
p•_s¸ìnshŸ_id
;

41 
p•_˝u_˛ock
;

42 
p•_ªvî£_™Æog
;

43 
p•_di•œy_Ã
;

44 
©¨i_võw_Âs
;

45 
©¨i_cuºít_Âs
;

46 
p•_a˘ive_joy°ick
;

47 
©¨i_Êickî_mode
;

48 
©¨i_¢d_íabÀ
;

49 
©¨i_ªndî_mode
;

50 
©¨i_vsync
;

51 
©¨i_•ìd_limôî
;

52 
p•_skù_max_‰ame
;

53 
p•_skù_cur_‰ame
;

54 
©¨i_¶ow_down_max
;

55 
©¨i_∑ddÀ_íabÀ
;

56 
©¨i_∑ddÀ_•ìd
;

57 
©¨i_auto_fúe
;

58 
©¨i_auto_fúe_¥es£d
;

59 
©¨i_auto_fúe_≥riod
;

61 } 
	tAèri_t
;

63 
Aèri_t
 
ATARI
;

65 
maö_©¨i_£nd_key_evít
(
©¨i_idx
, 
key_¥ess
);

66 
maö_©¨i_lﬂd_°©e
(*
fûíame
);

67 
maö_©¨i_f‹˚_døw_blô
();

68 
maö_©¨i_ßve_°©e
(*
fûíame
);

69 
maö_©¨i_lﬂd_rom
(*
fûíame
);

70 
maö_©¨i_emuœt‹_ª£t
();

72 #ifde‡
__˝lu•lus


	@common/Array.hxx

22 #i‚de‡
ARRAY_HXX


23 
	#ARRAY_HXX


	)

25 
	~<as£π.h
>

27 
	~"b•f.hxx
"

29 
«me•a˚
 
	gComm⁄
 {

31 
	gãm∂©e
 <
˛ass
 
	gT
>

32 ˛as†
	cAºay


34 
	g¥Ÿe˘ed
:

35 
_ˇ∑côy
;

36 
	g_size
;

37 
T
 *
	g_d©a
;

39 
	gpublic
:

40 
T
 *
	tôî©‹
;

41 c⁄° 
	tT
 *
	tc⁄°_ôî©‹
;

43 
	gpublic
:

44 
Aºay
<
T
>(Ë: 
_ˇ∑côy
(0), 
_size
(0), 
_d©a
(0) {}

45 
	gAºay
<
	gT
>(c⁄° Aºay<T>& 
	g¨øy
Ë: 
_ˇ∑côy
(0), 
_size
(0), 
_d©a
(0)

47 
	g_size
 = 
¨øy
.
_size
;

48 
	g_ˇ∑côy
 = 
_size
 + 128;

49 
	g_d©a
 = 
√w
 
T
[
_ˇ∑côy
];

50 
	gi
 = 0; i < 
	g_size
; i++)

51 
	g_d©a
[
i
] = 
¨øy
.
_d©a
[i];

54 ~
	gAºay
<
	gT
>()

56 i‡(
	g_d©a
)

57 
	gdñëe
 [] 
	g_d©a
;

60 
push_back
(c⁄° 
T
& 
ñemít
)

62 
ísuªC≠acôy
(
_size
 + 1);

63 
	g_d©a
[
_size
++] = 
ñemít
;

66 
push_back
(c⁄° 
Aºay
<
T
>& 
¨øy
)

68 
ísuªC≠acôy
(
_size
 + 
¨øy
._size);

69 
	gi
 = 0; i < 
	g¨øy
.
	g_size
; i++)

70 
	g_d©a
[
_size
++] = 
¨øy
.
_d©a
[
i
];

73 
ö£π_©
(
idx
, c⁄° 
T
& 
ñemít
)

75 
as£π
(
idx
 >0 && idx <
_size
);

76 
ísuªC≠acôy
(
_size
 + 1);

82 
	gi
 = 
_size
; i > 
	gidx
; i--)

83 
	g_d©a
[
i
] = 
_d©a
[i-1];

85 
	g_d©a
[
idx
] = 
ñemít
;

86 
	g_size
++;

89 
T
 
ªmove_©
(
idx
)

91 
as£π
(
idx
 >0 && idx < 
_size
);

92 
T
 
	gtmp
 = 
_d©a
[
idx
];

93 
	gi
 = 
idx
; i < 
	g_size
 - 1; i++)

94 
	g_d©a
[
i
] = 
_d©a
[i+1];

95 
	g_size
--;

96  
	gtmp
;

101 
	gT
& 
	g›î©‹
 [](
	gidx
)

103 
as£π
(
idx
 >0 && idx < 
_size
);

104  
	g_d©a
[
idx
];

107 c⁄° 
	gT
& 
	g›î©‹
 [](
	gidx
) const

109 
as£π
(
idx
 >0 && idx < 
_size
);

110  
	g_d©a
[
idx
];

113 
	gAºay
<
	gT
>& 
	g›î©‹
 =(c⁄° 
Aºay
<
T
>& 
¨øy
)

115 i‡(
_d©a
)

116 
dñëe
 [] 
_d©a
;

117 
	g_size
 = 
¨øy
.
_size
;

118 
	g_ˇ∑côy
 = 
_size
 + 128;

119 
	g_d©a
 = 
√w
 
T
[
_ˇ∑côy
];

120 
	gi
 = 0; i < 
	g_size
; i++)

121 
	g_d©a
[
i
] = 
¨øy
.
_d©a
[i];

123  *
	gthis
;

126 
size
(Ëc⁄° {  
	g_size
; }

128 
˛ór
()

130 if(
	g_d©a
)

132 
	gdñëe
 [] 
	g_d©a
;

133 
	g_d©a
 = 0;

135 
	g_size
 = 0;

136 
	g_ˇ∑côy
 = 0;

139 
boﬁ
 
isEm±y
() const

141  (
	g_size
 == 0);

144 
ôî©‹
 
begö
()

146  
	g_d©a
;

149 
ôî©‹
 
íd
()

151  
	g_d©a
 + 
	g_size
;

154 
c⁄°_ôî©‹
 
begö
() const

156  
	g_d©a
;

159 
c⁄°_ôî©‹
 
íd
() const

161  
	g_d©a
 + 
	g_size
;

164 
boﬁ
 
c⁄èös
(c⁄° 
T
 &
key
) const

166 
c⁄°_ôî©‹
 
	gi
 = 
begö
(); i !
íd
(); ++i) {

167 i‡(*
	gi
 =
key
)

168  
åue
;

170  
	gÁl£
;

173 
	g¥Ÿe˘ed
:

174 
ísuªC≠acôy
(
√w_Àn
)

176 i‡(
√w_Àn
 <
_ˇ∑côy
)

179 
T
 *
	gﬁd_d©a
 = 
_d©a
;

180 
	g_ˇ∑côy
 = 
√w_Àn
 + 128;

181 
	g_d©a
 = 
√w
 
T
[
_ˇ∑côy
];

183 i‡(
	gﬁd_d©a
)

186 
	gi
 = 0; i < 
	g_size
; i++)

187 
	g_d©a
[
i
] = 
ﬁd_d©a
[i];

188 
	gdñëe
 [] 
	gﬁd_d©a
;

195 
	gComm⁄
::
	tAºay
<> 
	tI¡Aºay
;

196 
	gComm⁄
::
	tAºay
<
	tboﬁ
> 
	tBoﬁAºay
;

197 
	gComm⁄
::
	tAºay
<
	tuI¡8
> 
	tByãAºay
;

	@common/FrameBufferSoft.cpp

19 
	~<SDL.h
>

20 
	~<SDL_syswm.h
>

21 
	~<s°ªam
>

23 
	~"Aèri.h
"

24 
	~"p•_sdl.h
"

26 
	~"C⁄sﬁe.hxx
"

27 
	~"FømeBuf„r.hxx
"

28 
	~"FømeBuf„rSo·.hxx
"

29 
	~"MedüSrc.hxx
"

30 
	~"Sëtögs.hxx
"

31 
	~"OSy°em.hxx
"

33 
	~"F⁄t.hxx
"

35 
	~"GuiUtûs.hxx
"

38 
	gFømeBuf„rSo·
::
	$FømeBuf„rSo·
(
OSy°em
* 
osy°em
)

39 : 
	`FømeBuf„r
(
osy°em
),

40 
	`myRe˘Li°
(
NULL
),

41 
	`myOvîœyRe˘Li°
(
NULL
),

42 
	$myRídîTy≥
(
kSo·Zoom
)

44 
	}
}

47 
	gFømeBuf„rSo·
::~
	$FømeBuf„rSo·
()

49 
dñëe
 
myRe˘Li°
;

50 
dñëe
 
myOvîœyRe˘Li°
;

51 
	}
}

54 
boﬁ
 
	gFømeBuf„rSo·
::
	$öôSubsy°em
()

57 
dñëe
 
myRe˘Li°
;

58 
myRe˘Li°
 = 
√w
 
	`Re˘Li°
();

59 
dñëe
 
myOvîœyRe˘Li°
;

60 
myOvîœyRe˘Li°
 = 
√w
 
	`Re˘Li°
();

62 if(!
myRe˘Li°
 || !
myOvîœyRe˘Li°
)

64 
˚º
 << "ERROR: U«bÀÅÿgë mem‹y f‹ SDLÑe˘s" << 
ídl
;

65  
Ál£
;

69 if(!
	`¸óãS¸ìn
())

70  
Ál£
;

74 if(
myOSy°em
->
	`£âögs
().
	`gëBoﬁ
("showinfo"))

75 
cout
 << "Videÿªndîög: So·w¨êmode" << 
ídl
 <<Éndl;

78  
åue
;

79 
	}
}

82 
	gFømeBuf„rSo·
::
	$£tA•e˘R©io
()

85 
theA•e˘R©io
 = 1.0;

86 
	}
}

89 
boﬁ
 
	gFømeBuf„rSo·
::
	$¸óãS¸ìn
()

91 
myS¸ìnDim
.
x
 = myS¸ìnDim.
y
 = 0;

93 
myS¸ìnDim
.
w
 = 
myBa£Dim
.w * 
theZoomLevñ
;

94 
myS¸ìnDim
.
h
 = 
myBa£Dim
.h * 
theZoomLevñ
;

97 
myImageDim
 = 
myS¸ìnDim
;

100 
myS¸ìn
 = 
	`SDL_SëVideoMode
(
myS¸ìnDim
.
w
, myS¸ìnDim.
h
, 0, 
mySDLFœgs
);

101 if(
myS¸ìn
 =
NULL
)

103 
˚º
 << "ERROR: U«bÀÅÿ›í SDL wödow: " << 
	`SDL_GëEº‹
(Ë<< 
ídl
;

104  
Ál£
;

107 
SDL_SurÁ˚
 *
back_surÁ˚
;

108 
mySDLFœgs
 = 
SDL_HWSURFACE
;

109 
myS¸ìnDim
.
w
 = 
myDeskt›Dim
.w;

110 
myS¸ìnDim
.
h
 = 
myDeskt›Dim
.
w
;

111 
myS¸ìn
 = 
back_surÁ˚
;

112 
myS¸ìn
->
f‹m©
->
BôsPîPixñ
)

115 
myPôch
 = 
myS¸ìn
->
pôch
/2;

118 
myPôch
 = 
myS¸ìn
->
pôch
;

121 
myPôch
 = 
myS¸ìn
->
pôch
/4;

126 
myOSy°em
->
	`evítH™dÀr
().
	`ª‰eshDi•œy
();

128  
åue
;

129 
	}
}

133 
	tbyã
;

134 
	tw‹d
;

135 
	tdw‹d
;

143 
ölöe
 
w‹d
 
	$loc_cﬁ‹avîage
(
w‹d
 
a
, w‹d 
b
)

145  (
w‹d
)(((
a
 ^ 
b
) & 0xf7deU) >> 1) + (a & b);

146 
	}
}

148 
ölöe
 

149 
	$ªndî16bµ_X15_pixñ
(
w‹d
 *
di°
, c⁄° 
byã
 *
b_§c
, 
Uöt32
* 
my_∑Àâe
)

151 
w‹d
 
§c
[4];

153 
§c
[0] = 
my_∑Àâe
[
b_§c
[0]];

154 
§c
[1] = 
my_∑Àâe
[
b_§c
[1]];

155 
§c
[2] = 
my_∑Àâe
[
b_§c
[2]];

156 
§c
[3] = 
my_∑Àâe
[
b_§c
[3]];

158 
di°
[0] = 
§c
[0];

159 
di°
[1] = dist[0];

161 
di°
[2] = 
	`loc_cﬁ‹avîage
(
§c
[0], src[1]);

162 
di°
[3] = dist[2];

164 
di°
[4] = 
§c
[1];

165 
di°
[5] = dist[4];

167 
di°
[6] = 
§c
[2];

168 
di°
[7] = dist[6];

170 
di°
[8] = 
	`loc_cﬁ‹avîage
(
§c
[2], src[3]);

171 
di°
[9] = dist[8];

173 
di°
[10] = 
§c
[3];

174 
di°
[11] = dist[10];

175 
	}
}

177 
ölöe
 

178 
	$ªndî16bµ_X15_pixñSim∂e
(
w‹d
 *
di°
, c⁄° 
byã
 *
b_§c
, c⁄° byã *
b_¥ev
, 
Uöt32
* 
my_∑Àâe
)

180 
w‹d
 
§c
[4];

182 
§c
[0] = 
my_∑Àâe
[
b_§c
[0] ? b_§c[0] : 
b_¥ev
[0] ];

183 
§c
[1] = 
my_∑Àâe
[
b_§c
[1] ? b_§c[1] : 
b_¥ev
[1] ];

184 
§c
[2] = 
my_∑Àâe
[
b_§c
[2] ? b_§c[2] : 
b_¥ev
[2] ];

185 
§c
[3] = 
my_∑Àâe
[
b_§c
[3] ? b_§c[3] : 
b_¥ev
[3] ];

187 
di°
[0] = 
§c
[0];

188 
di°
[1] = dist[0];

190 
di°
[2] = 
	`loc_cﬁ‹avîage
(
§c
[0], src[1]);

191 
di°
[3] = dist[2];

193 
di°
[4] = 
§c
[1];

194 
di°
[5] = dist[4];

196 
di°
[6] = 
§c
[2];

197 
di°
[7] = dist[6];

199 
di°
[8] = 
	`loc_cﬁ‹avîage
(
§c
[2], src[3]);

200 
di°
[9] = dist[8];

202 
di°
[10] = 
§c
[3];

203 
di°
[11] = dist[10];

204 
	}
}

206 
ölöe
 

207 
	$ªndî16bµ_X15_pixñPhos
(
w‹d
 *
di°
, c⁄° 
byã
 *
b_§c
, c⁄° byã *
b_¥ev
, 
Uöt32
* 
my_∑Àâe
)

209 
w‹d
 
§c
[4];

211 
§c
[0] = 
my_∑Àâe
[(
b_§c
[0] << 8Ë+ 
b_¥ev
[0]];

212 
§c
[1] = 
my_∑Àâe
[(
b_§c
[1] << 8Ë+ 
b_¥ev
[1]];

213 
§c
[2] = 
my_∑Àâe
[(
b_§c
[2] << 8Ë+ 
b_¥ev
[2]];

214 
§c
[3] = 
my_∑Àâe
[(
b_§c
[3] << 8Ë+ 
b_¥ev
[3]];

216 
di°
[0] = 
§c
[0];

217 
di°
[1] = dist[0];

219 
di°
[2] = 
	`loc_cﬁ‹avîage
(
§c
[0], src[1]);

220 
di°
[3] = dist[2];

222 
di°
[4] = 
§c
[1];

223 
di°
[5] = dist[4];

225 
di°
[6] = 
§c
[2];

226 
di°
[7] = dist[6];

228 
di°
[8] = 
	`loc_cﬁ‹avîage
(
§c
[2], src[3]);

229 
di°
[9] = dist[8];

231 
di°
[10] = 
§c
[3];

232 
di°
[11] = dist[10];

233 
	}
}

235 
ölöe
 

236 
	$ªndî16bµ_X15_pixñAvg
(
w‹d
 *
di°
, c⁄° 
byã
 *
b_§c
, c⁄° byã *
b_¥ev
, 
Uöt32
* 
my_∑Àâe
)

238 
w‹d
 
§c
[4];

240 
§c
[0] = 
	`loc_cﬁ‹avîage
(
my_∑Àâe
[
b_§c
[0]], my_∑Àâe[
b_¥ev
[0]]);

241 
§c
[1] = 
	`loc_cﬁ‹avîage
(
my_∑Àâe
[
b_§c
[1]], my_∑Àâe[
b_¥ev
[1]]);

242 
§c
[2] = 
	`loc_cﬁ‹avîage
(
my_∑Àâe
[
b_§c
[2]], my_∑Àâe[
b_¥ev
[2]]);

243 
§c
[3] = 
	`loc_cﬁ‹avîage
(
my_∑Àâe
[
b_§c
[3]], my_∑Àâe[
b_¥ev
[3]]);

245 
di°
[0] = 
§c
[0];

246 
di°
[1] = dist[0];

248 
di°
[2] = 
	`loc_cﬁ‹avîage
(
§c
[0], src[1]);

249 
di°
[3] = dist[2];

251 
di°
[4] = 
§c
[1];

252 
di°
[5] = dist[4];

254 
di°
[6] = 
§c
[2];

255 
di°
[7] = dist[6];

257 
di°
[8] = 
	`loc_cﬁ‹avîage
(
§c
[2], src[3]);

258 
di°
[9] = dist[8];

260 
di°
[10] = 
§c
[3];

261 
di°
[11] = dist[10];

262 
	}
}

264 
ölöe
 

265 
	$ªndî16bµ_X125_pixñ
(
w‹d
 *
di°
, c⁄° 
byã
 *
b_§c
, 
Uöt32
* 
my_∑Àâe
)

267 
w‹d
 
§c
[4];

269 
§c
[0] = 
my_∑Àâe
[
b_§c
[0]];

270 
§c
[1] = 
my_∑Àâe
[
b_§c
[1]];

271 
§c
[2] = 
my_∑Àâe
[
b_§c
[2]];

272 
§c
[3] = 
my_∑Àâe
[
b_§c
[3]];

274 
di°
[0] = 
§c
[0];

275 
di°
[1] = dist[0];

277 
di°
[2] = 
	`loc_cﬁ‹avîage
(
§c
[0], src[1]);

278 
di°
[3] = dist[2];

280 
di°
[4] = 
§c
[1];

281 
di°
[5] = dist[4];

283 
di°
[6] = 
§c
[2];

284 
di°
[7] = dist[6];

286 
di°
[8] = 
§c
[3];

287 
di°
[9] = dist[8];

288 
	}
}

290 
ölöe
 

291 
	$ªndî16bµ_X125_pixñSim∂e
(
w‹d
 *
di°
, c⁄° 
byã
 *
b_§c
, c⁄° byã *
b_¥ev
, 
Uöt32
* 
my_∑Àâe
)

293 
w‹d
 
§c
[4];

295 
§c
[0] = 
my_∑Àâe
[
b_§c
[0] ? b_§c[0] : 
b_¥ev
[0] ];

296 
§c
[1] = 
my_∑Àâe
[
b_§c
[1] ? b_§c[1] : 
b_¥ev
[1] ];

297 
§c
[2] = 
my_∑Àâe
[
b_§c
[2] ? b_§c[2] : 
b_¥ev
[2] ];

298 
§c
[3] = 
my_∑Àâe
[
b_§c
[3] ? b_§c[3] : 
b_¥ev
[3] ];

300 
di°
[0] = 
§c
[0];

301 
di°
[1] = dist[0];

303 
di°
[2] = 
	`loc_cﬁ‹avîage
(
§c
[0], src[1]);

304 
di°
[3] = dist[2];

306 
di°
[4] = 
§c
[1];

307 
di°
[5] = dist[4];

309 
di°
[6] = 
§c
[2];

310 
di°
[7] = dist[6];

312 
di°
[8] = 
§c
[3];

313 
di°
[9] = dist[8];

314 
	}
}

316 
ölöe
 

317 
	$ªndî16bµ_X125_pixñPhos
(
w‹d
 *
di°
, c⁄° 
byã
 *
b_§c
, c⁄° byã *
b_¥ev
, 
Uöt32
* 
my_∑Àâe
)

319 
w‹d
 
§c
[4];

321 
§c
[0] = 
my_∑Àâe
[(
b_§c
[0] << 8Ë+ 
b_¥ev
[0]];

322 
§c
[1] = 
my_∑Àâe
[(
b_§c
[1] << 8Ë+ 
b_¥ev
[1]];

323 
§c
[2] = 
my_∑Àâe
[(
b_§c
[2] << 8Ë+ 
b_¥ev
[2]];

324 
§c
[3] = 
my_∑Àâe
[(
b_§c
[3] << 8Ë+ 
b_¥ev
[3]];

326 
di°
[0] = 
§c
[0];

327 
di°
[1] = dist[0];

329 
di°
[2] = 
	`loc_cﬁ‹avîage
(
§c
[0], src[1]);

330 
di°
[3] = dist[2];

332 
di°
[4] = 
§c
[1];

333 
di°
[5] = dist[4];

335 
di°
[6] = 
§c
[2];

336 
di°
[7] = dist[6];

338 
di°
[8] = 
§c
[3];

339 
di°
[9] = dist[8];

340 
	}
}

342 
ölöe
 

343 
	$ªndî16bµ_X125_pixñAvg
(
w‹d
 *
di°
, c⁄° 
byã
 *
b_§c
, c⁄° byã *
b_¥ev
, 
Uöt32
* 
my_∑Àâe
)

345 
w‹d
 
§c
[4];

347 
§c
[0] = 
	`loc_cﬁ‹avîage
(
my_∑Àâe
[
b_§c
[0]], my_∑Àâe[
b_¥ev
[0]]);

348 
§c
[1] = 
	`loc_cﬁ‹avîage
(
my_∑Àâe
[
b_§c
[1]], my_∑Àâe[
b_¥ev
[1]]);

349 
§c
[2] = 
	`loc_cﬁ‹avîage
(
my_∑Àâe
[
b_§c
[2]], my_∑Àâe[
b_¥ev
[2]]);

350 
§c
[3] = 
	`loc_cﬁ‹avîage
(
my_∑Àâe
[
b_§c
[3]], my_∑Àâe[
b_¥ev
[3]]);

352 
di°
[0] = 
§c
[0];

353 
di°
[1] = dist[0];

355 
di°
[2] = 
	`loc_cﬁ‹avîage
(
§c
[0], src[1]);

356 
di°
[3] = dist[2];

358 
di°
[4] = 
§c
[1];

359 
di°
[5] = dist[4];

361 
di°
[6] = 
§c
[2];

362 
di°
[7] = dist[6];

364 
di°
[8] = 
§c
[3];

365 
di°
[9] = dist[8];

366 
	}
}

371 
	gFømeBuf„rSo·
::
	$døwMedüSour˚BlôSurÁ˚
()

373 
uI¡16
* 
buf„r
 = (uI¡16*)
blô_surÁ˚
->
pixñs
;

374 
uI¡16
 
pôch
 = 320;

376 
MedüSour˚
& 
medü§c
 = 
myOSy°em
->
	`c⁄sﬁe
().
	`medüSour˚
();

377 
uI¡8
* 
cuºítFøme
 = 
medü§c
.
	`cuºítFømeBuf„r
();

378 
uI¡8
* 
¥eviousFøme
 = 
medü§c
.
	`¥eviousFømeBuf„r
();

380 c⁄° 
uI¡16
 
width
 = 
medü§c
.
	`width
();

381 c⁄° 
uI¡16
 
height
 = 
medü§c
.
	`height
();

383 i‡(
ATARI
.
©¨i_Êickî_mode
 && 
¥eviousFøme
) {

385 i‡(
ATARI
.
©¨i_Êickî_mode
 =
ATARI_FLICKER_PHOSPHOR
) {

387 
uI¡16
 
y
 = 
height
;

388 
y
-- > 0)

390 
uI¡16
 
x
 = 
width
;

391 
x
-- > 0)

393 
byã
 
v
 = *
cuºítFøme
++;

394 
byã
 
w
 = *
¥eviousFøme
++;

395 
uI¡16
 
c
 = 
myAvgPÆëã
[
v
][
w
];

396 *
buf„r
++ = 
c
;

397 *
buf„r
++ = 
c
;

399 
buf„r
 +(
pôch
 - (
width
 << 1));

403 i‡(
ATARI
.
©¨i_Êickî_mode
 =
ATARI_FLICKER_AVERAGE
) {

405 
uI¡16
 
y
 = 
height
;

406 
y
-- > 0)

408 
uI¡16
 
x
 = 
width
;

409 
x
-- > 0)

411 
byã
 
v
 = *
cuºítFøme
++;

412 
byã
 
w
 = *
¥eviousFøme
++;

413 
uI¡16
 
c
 = 
	`loc_cﬁ‹avîage
(
myDefPÆëã
[
v
], myDefPÆëã[
w
]);

414 *
buf„r
++ = 
c
;

415 *
buf„r
++ = 
c
;

417 
buf„r
 +(
pôch
 - (
width
 << 1));

422 
uI¡16
 
y
 = 
height
;

423 
y
-- > 0)

425 
uI¡16
 
x
 = 
width
;

426 
x
-- > 0)

428 
byã
 
v
 = *
cuºítFøme
++;

429 
byã
 
w
 = *
¥eviousFøme
++;

430 
uI¡16
 
c
 = 
v
 ? 
myDefPÆëã
[v] : myDefPÆëã[
w
];

431 *
buf„r
++ = 
c
;

432 *
buf„r
++ = 
c
;

434 
buf„r
 +(
pôch
 - (
width
 << 1));

440 
uI¡16
 
y
 = 
height
;

441 
y
-- > 0)

443 
uI¡16
 
x
 = 
width
;

444 
x
-- > 0)

446 
uI¡16
 
c
 = 
myDefPÆëã
[ *
cuºítFøme
++ ];

447 *
buf„r
++ = 
c
;

448 *
buf„r
++ = 
c
;

450 
buf„r
 +(
pôch
 - (
width
 << 1));

453 
	}
}

457 
SDL_SurÁ˚
* 
blô_surÁ˚
;

460 
	gFømeBuf„rSo·
::
	$døwMedüSour˚N‹mÆ
()

462 
MedüSour˚
& 
medü§c
 = 
myOSy°em
->
	`c⁄sﬁe
().
	`medüSour˚
();

463 
uI¡8
* 
cuºítFøme
 = 
medü§c
.
	`cuºítFømeBuf„r
();

464 
uI¡8
* 
¥eviousFøme
 = 
medü§c
.
	`¥eviousFømeBuf„r
();

466 
uI¡32
 
width
 = 
medü§c
.
	`width
();

467 
uI¡32
 
height
 = 
medü§c
.
	`height
();

469 
	`døwMedüSour˚BlôSurÁ˚
();

471 
SDL_Re˘
 
§cRe˘
;

472 
SDL_Re˘
 
d°Re˘
;

474 
§cRe˘
.
x
 = 0;

475 
§cRe˘
.
y
 = 0;

476 
§cRe˘
.
w
 = 
width
 * 2;

477 
§cRe˘
.
h
 = 
height
;

478 
d°Re˘
.
x
 = 80;

479 
d°Re˘
.
y
 = 30;

480 
d°Re˘
.
w
 = 
width
 * 2;

481 
d°Re˘
.
h
 = 
height
;

483 
	`p•_sdl_gu_°ªtch
(&
§cRe˘
, &
d°Re˘
);

484 
	}
}

488 
	gFømeBuf„rSo·
::
	$døwMedüSour˚X125
()

490 
MedüSour˚
& 
medü§c
 = 
myOSy°em
->
	`c⁄sﬁe
().
	`medüSour˚
();

491 
uI¡8
* 
§c_vøm
 = 
medü§c
.
	`cuºítFømeBuf„r
();

492 
uI¡8
* 
¥ev_vøm
 = 
medü§c
.
	`¥eviousFømeBuf„r
();

494 
uI¡32
 
width
 = 
medü§c
.
	`width
();

495 
uI¡32
 
height
 = 
medü§c
.
	`height
();

497 
	`døwMedüSour˚BlôSurÁ˚
();

499 
SDL_Re˘
 
§cRe˘
;

500 
SDL_Re˘
 
d°Re˘
;

502 
§cRe˘
.
x
 = 0;

503 
§cRe˘
.
y
 = 0;

504 
§cRe˘
.
w
 = 
width
 * 2;

505 
§cRe˘
.
h
 = 
height
;

506 
d°Re˘
.
x
 = 40;

507 
d°Re˘
.
y
 = 0;

508 
d°Re˘
.
w
 = 400;

509 
d°Re˘
.
h
 = 272;

511 
	`p•_sdl_gu_°ªtch
(&
§cRe˘
, &
d°Re˘
);

512 
	}
}

514 
	gfú°
 = 1;

517 
	gFømeBuf„rSo·
::
	$døwMedüSour˚Max
()

519 
MedüSour˚
& 
medü§c
 = 
myOSy°em
->
	`c⁄sﬁe
().
	`medüSour˚
();

520 
uI¡8
* 
§c_vøm
 = 
medü§c
.
	`cuºítFømeBuf„r
();

521 
uI¡8
* 
¥ev_vøm
 = 
medü§c
.
	`¥eviousFømeBuf„r
();

523 
uI¡32
 
width
 = 
medü§c
.
	`width
();

524 
uI¡32
 
height
 = 
medü§c
.
	`height
();

526 
	`døwMedüSour˚BlôSurÁ˚
();

528 
SDL_Re˘
 
§cRe˘
;

529 
SDL_Re˘
 
d°Re˘
;

531 
§cRe˘
.
x
 = 0;

532 
§cRe˘
.
y
 = 0;

533 
§cRe˘
.
w
 = 
width
 * 2;

534 
§cRe˘
.
h
 = 
height
;

535 
d°Re˘
.
x
 = 0;

536 
d°Re˘
.
y
 = 0;

537 
d°Re˘
.
w
 = 480;

538 
d°Re˘
.
h
 = 272;

540 
	`p•_sdl_gu_°ªtch
(&
§cRe˘
, &
d°Re˘
);

541 
	}
}

544 
	gFømeBuf„rSo·
::
	$¥eFømeUpd©e
()

548 
myRe˘Li°
->
	`°¨t
();

551 
SDL_Re˘
* 
dútyOvîœyRe˘s
 = 
myOvîœyRe˘Li°
->
	`ª˘s
();

552 
i
 = 0; i < 
myOvîœyRe˘Li°
->
	`numRe˘s
(); ++i)

553 
myRe˘Li°
->
	`add
(&
dútyOvîœyRe˘s
[
i
]);

554 
myOvîœyRe˘Li°
->
	`°¨t
();

556 
	}
}

559 
	gFømeBuf„rSo·
::
	$po°FømeUpd©e
()

565 if(
myU£DútyRe˘s
)

566 
	`SDL_Upd©eRe˘s
(
myS¸ìn
, 
myRe˘Li°
->
	`numRe˘s
(), myRe˘Li°->
	`ª˘s
());

567 if(
myRe˘Li°
->
	`numRe˘s
() > 0)

569 
	`SDL_Flù
(
myS¸ìn
);

570 
myRe˘Li°
->
	`°¨t
();

573 
	}
}

577 
	gFømeBuf„rSo·
::
	$sˇ∆öe
(
uI¡32
 
row
, 
uI¡8
* 
d©a
)

580 
	`SDL_LockSurÁ˚
(
myS¸ìn
);

582 
uI¡32
 
bµ
 = 
myS¸ìn
->
f‹m©
->
ByãsPîPixñ
;

583 
uI¡8
* 
°¨t
 = (uI¡8*Ë
myS¸ìn
->
pixñs
;

584 
uI¡32
 
yoff£t
 = 
row
 * 
myS¸ìn
->
pôch
;

585 
uI¡32
 
pixñ
 = 0;

586 
uI¡8
 *
p
, 
r
, 
g
, 
b
;

588 
I¡32
 
x
 = 0; x < 
myS¸ìn
->
w
; x++)

590 
p
 = (
Uöt8
*Ë(
°¨t
 +

591 (
yoff£t
) +

592 (
x
 * 
bµ
));

594 
bµ
)

597 
pixñ
 = *
p
;

601 
pixñ
 = *(
Uöt16
*Ë
p
;

605 if(
SDL_BYTEORDER
 =
SDL_BIG_ENDIAN
)

606 
pixñ
 = 
p
[0] << 16 |Ö[1] << 8 |Ö[2];

608 
pixñ
 = 
p
[0] |Ö[1] << 8 |Ö[2] << 16;

612 
pixñ
 = *(
Uöt32
*Ë
p
;

616 
	`SDL_GëRGB
(
pixñ
, 
myS¸ìn
->
f‹m©
, &
r
, &
g
, &
b
);

618 
d©a
[
x
 * 3 + 0] = 
r
;

619 
d©a
[
x
 * 3 + 1] = 
g
;

620 
d©a
[
x
 * 3 + 2] = 
b
;

623 
	`SDL_U∆ockSurÁ˚
(
myS¸ìn
);

624 
	}
}

627 
	gFømeBuf„rSo·
::
	$toggÀFûãr
()

630 
	}
}

633 
FømeBuf„rSo·
::
	$hLöe
(
uI¡32
 
x
, uI¡32 
y
, uI¡32 
x2
, 
cﬁ‹
)

635 
SDL_Re˘
 
tmp
;

638 
tmp
.
x
 = x * 
theZoomLevñ
;

639 
tmp
.
y
 = y * 
theZoomLevñ
;

640 
tmp
.
w
 = (
x2
 - 
x
 + 1Ë* 
theZoomLevñ
;

641 
tmp
.
h
 = 
theZoomLevñ
;

642 
	`SDL_FûlRe˘
(
myS¸ìn
, &
tmp
, 
myDefPÆëã
[
cﬁ‹
]);

643 
	}
}

646 
	gFømeBuf„rSo·
::
	$vLöe
(
uI¡32
 
x
, uI¡32 
y
, uI¡32 
y2
, 
cﬁ‹
)

648 
SDL_Re˘
 
tmp
;

651 
tmp
.
x
 = x * 
theZoomLevñ
;

652 
tmp
.
y
 = y * 
theZoomLevñ
;

653 
tmp
.
w
 = 
theZoomLevñ
;

654 
tmp
.
h
 = (
y2
 - 
y
 + 1Ë* 
theZoomLevñ
;

655 
	`SDL_FûlRe˘
(
myS¸ìn
, &
tmp
, 
myDefPÆëã
[
cﬁ‹
]);

656 
	}
}

659 
	gFømeBuf„rSo·
::
	$fûlRe˘
(
uI¡32
 
x
, uI¡32 
y
, uI¡32 
w
, uI¡32 
h
,

660 
cﬁ‹
)

662 
SDL_Re˘
 
tmp
;

665 
tmp
.
x
 = x * 
theZoomLevñ
;

666 
tmp
.
y
 = y * 
theZoomLevñ
;

667 
tmp
.
w
 = w * 
theZoomLevñ
;

668 
tmp
.
h
 = h * 
theZoomLevñ
;

669 
	`SDL_FûlRe˘
(
myS¸ìn
, &
tmp
, 
myDefPÆëã
[
cﬁ‹
]);

670 
	}
}

674 
	gFømeBuf„rSo·
::
	$døwCh¨
(c⁄° 
GUI
::
F⁄t
* 
FONT
, 
uI¡8
 
chr
,

675 
uI¡32
 
x‹ig
, uI¡32 
y‹ig
, 
cﬁ‹
)

677 
GUI
::
F⁄t
* 
f⁄t
 = (GUI::F⁄t*)
FONT
;

678 c⁄° 
F⁄tDesc
& 
desc
 = 
f⁄t
->
	`desc
();

681 if(
chr
 < 
desc
.
fú°ch¨
 || ch∏>desc.fú°ch¨ + desc.
size
)

683 i‡(
chr
 == ' ')

685 
chr
 = 
desc
.
deÁu…ch¨
;

688 c⁄° 
I¡32
 
w
 = 
f⁄t
->
	`gëCh¨Width
(
chr
);

689 c⁄° 
I¡32
 
h
 = 
f⁄t
->
	`gëF⁄tHeight
();

690 
chr
 -
desc
.
fú°ch¨
;

691 c⁄° 
uI¡16
* 
tmp
 = 
desc
.
bôs
 + (desc.
off£t
 ? desc.off£t[
chr
] : (ch∏* 
h
));

693 
SDL_Re˘
 
ª˘
;

694 
y
 = 0; y < 
h
; y++)

696 c⁄° 
uI¡16
 
buf„r
 = *
tmp
++;

697 
uI¡16
 
mask
 = 0x8000;

699 
x
 = 0; x < 
w
; x++, 
mask
 >>= 1)

701 i‡((
buf„r
 & 
mask
) != 0)

703 
ª˘
.
x
 = (x + 
x‹ig
Ë* 
theZoomLevñ
;

704 
ª˘
.
y
 = (y + 
y‹ig
Ë* 
theZoomLevñ
;

705 
ª˘
.
w
 =Ñe˘.
h
 = 
theZoomLevñ
;

706 
	`SDL_FûlRe˘
(
myS¸ìn
, &
ª˘
, 
myDefPÆëã
[
cﬁ‹
]);

710 
	}
}

714 
	gFømeBuf„rSo·
::
	$døwBôm≠
(
uI¡32
* 
bôm≠
, 
I¡32
 
x‹ig
, I¡32 
y‹ig
,

715 
cﬁ‹
, 
I¡32
 
h
)

717 
SDL_Re˘
 
ª˘
;

718 
y
 = 0; y < 
h
; y++)

720 
uI¡32
 
mask
 = 0xF0000000;

722 
x
 = 0; x < 8; x++, 
mask
 >>= 4)

724 if(
bôm≠
[
y
] & 
mask
)

726 
ª˘
.
x
 = (x + 
x‹ig
Ë* 
theZoomLevñ
;

727 
ª˘
.
y
 = (y + 
y‹ig
Ë* 
theZoomLevñ
;

728 
ª˘
.
w
 =Ñe˘.
h
 = 
theZoomLevñ
;

729 
	`SDL_FûlRe˘
(
myS¸ìn
, &
ª˘
, 
myDefPÆëã
[
cﬁ‹
]);

733 
	}
}

736 
	gFømeBuf„rSo·
::
	$å™¶©eCo‹ds
(
I¡32
* 
x
, I¡32* 
y
)

740 *
x
 /
theZoomLevñ
;

741 *
y
 /
theZoomLevñ
;

742 
	}
}

745 
	gFømeBuf„rSo·
::
	$addDútyRe˘
(
uI¡32
 
x
, uI¡32 
y
, uI¡32 
w
, uI¡32 
h
)

747 
x
 *
theZoomLevñ
;

748 
y
 *
theZoomLevñ
;

749 
w
 *
theZoomLevñ
;

750 
h
 *
theZoomLevñ
;

755 
x1
 = 
x
, 
y1
 = 
y
, 
x2
 = x + 
w
, 
y2
 = y + 
h
;

756 
sx1
 = 
myS¸ìnDim
.
x
, 
sy1
 = myS¸ìnDim.
y
,

757 
sx2
 = 
myS¸ìnDim
.
x
 + myS¸ìnDim.
w
, 
sy2
 = myS¸ìnDim.
y
 + myS¸ìnDim.
h
;

758 if(
x1
 < 
sx1
 || 
y1
 < 
sy1
 || 
x2
 > 
sx2
 || 
y2
 > 
sy2
)

764 
SDL_Re˘
 
ãmp
;

765 
ãmp
.
x
 = x;

766 
ãmp
.
y
 = y;

767 
ãmp
.
w
 = w;

768 
ãmp
.
h
 = h;

770 
myOvîœyRe˘Li°
->
	`add
(&
ãmp
);

774 
	}
}

777 
	gFømeBuf„rSo·
::
	$íabÀPho•h‹
(
boﬁ
 
íabÀ
)

780 
myU£Pho•h‹
 = 
íabÀ
;

781 
myPho•h‹BÀnd
 = 
myOSy°em
->
	`£âögs
().
	`gëI¡
("ppblend");

783 if(
myU£Pho•h‹
)

785 
myS¸ìn
->
f‹m©
->
BôsPîPixñ
)

788 
myPôch
 = 
myS¸ìn
->
pôch
/2;

789 
myRídîTy≥
 = 
kPho•h‹_16
;

792 
myPôch
 = 
myS¸ìn
->
pôch
;

793 
myRídîTy≥
 = 
kPho•h‹_24
;

796 
myPôch
 = 
myS¸ìn
->
pôch
/4;

797 
myRídîTy≥
 = 
kPho•h‹_32
;

800 
myRídîTy≥
 = 
kSo·Zoom
;

805 
myRídîTy≥
 = 
kSo·Zoom
;

807 
	}
}

810 
	gFømeBuf„rSo·
::
	$˛s
()

812 if(
myS¸ìn
)

814 
	`SDL_FûlRe˘
(
myS¸ìn
, 
NULL
, 0);

815 
	`SDL_Upd©eRe˘
(
myS¸ìn
, 0, 0, 0, 0);

817 
	}
}

820 
	gRe˘Li°
::
	$Re˘Li°
(
Uöt32
 
size
)

822 
cuºítSize
 = 
size
;

823 
cuºítRe˘
 = 0;

825 
ª˘Aºay
 = 
√w
 
SDL_Re˘
[
cuºítSize
];

826 
	}
}

829 
	gRe˘Li°
::~
	$Re˘Li°
()

831 
dñëe
[] 
ª˘Aºay
;

832 
	}
}

835 
	gRe˘Li°
::
	$add
(
SDL_Re˘
* 
√wRe˘
)

837 if(
cuºítRe˘
 >
cuºítSize
)

839 
cuºítSize
 = currentSize * 2;

840 
SDL_Re˘
 *
ãmp
 = 
√w
 SDL_Re˘[
cuºítSize
];

842 
Uöt32
 
i
 = 0; i < 
cuºítRe˘
; ++i)

843 
ãmp
[
i
] = 
ª˘Aºay
[i];

845 
dñëe
[] 
ª˘Aºay
;

846 
ª˘Aºay
 = 
ãmp
;

852 
ª˘Aºay
[
cuºítRe˘
].
x
 = 
√wRe˘
->x;

853 
ª˘Aºay
[
cuºítRe˘
].
y
 = 
√wRe˘
->y;

854 
ª˘Aºay
[
cuºítRe˘
].
w
 = 
√wRe˘
->w;

855 
ª˘Aºay
[
cuºítRe˘
].
h
 = 
√wRe˘
->h;

857 ++
cuºítRe˘
;

858 
	}
}

861 
SDL_Re˘
* 
	gRe˘Li°
::
	$ª˘s
()

863  
ª˘Aºay
;

864 
	}
}

867 
Uöt32
 
	gRe˘Li°
::
	$numRe˘s
()

869  
cuºítRe˘
;

870 
	}
}

873 
	gRe˘Li°
::
	$°¨t
()

875 
cuºítRe˘
 = 0;

876 
	}
}

	@common/FrameBufferSoft.hxx

19 #i‚de‡
FRAMEBUFFER_SOFT_HXX


20 
	#FRAMEBUFFER_SOFT_HXX


	)

22 
	~<SDL.h
>

23 
	~<SDL_syswm.h
>

25 
˛ass
 
	gOSy°em
;

27 
˛ass
 
	gGUI
::
F⁄t
;

29 
˛ass
 
	gRe˘Li°
;

31 
	~"b•f.hxx
"

32 
	~"GuiUtûs.hxx
"

33 
	~"FømeBuf„r.hxx
"

42 ˛as†
	cFømeBuf„rSo·
 : 
public
 
FømeBuf„r


44 
public
:

48 
FømeBuf„rSo·
(
OSy°em
* 
osy°em
);

53 
	mvútuÆ
 ~
FømeBuf„rSo·
();

62 
vútuÆ
 
boﬁ
 
öôSubsy°em
();

67 
vútuÆ
 
Buf„rTy≥
 
	$ty≥
(Ë{  
kSo·Buf„r
; }

72 
vútuÆ
 
	`£tA•e˘R©io
();

78 
vútuÆ
 
boﬁ
 
	`¸óãS¸ìn
();

84 
vútuÆ
 
	`toggÀFûãr
();

91 
vútuÆ
 
	`døwMedüSour˚
();

93 
vútuÆ
 
	`døwMedüSour˚N‹mÆ
();

94 
vútuÆ
 
	`døwMedüSour˚X125
();

95 
vútuÆ
 
	`døwMedüSour˚Max
();

96 
vútuÆ
 
	`døwMedüSour˚BlôSurÁ˚
();

102 
vútuÆ
 
	`¥eFømeUpd©e
();

107 
vútuÆ
 
	`po°FømeUpd©e
();

115 
vútuÆ
 
	`sˇ∆öe
(
uI¡32
 
row
, 
uI¡8
* 
d©a
);

124 
vútuÆ
 
Uöt32
 
	$m≠RGB
(
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
)

125 {  
	`SDL_M≠RGB
(
myS¸ìn
->
f‹m©
, 
r
, 
g
, 
b
); 
	}
}

135 
vútuÆ
 
hLöe
(
uI¡32
 
x
, uI¡32 
y
, uI¡32 
x2
, 
cﬁ‹
);

145 
vútuÆ
 
vLöe
(
uI¡32
 
x
, uI¡32 
y
, uI¡32 
y2
, 
cﬁ‹
);

156 
vútuÆ
 
fûlRe˘
(
uI¡32
 
x
, uI¡32 
y
, uI¡32 
w
, uI¡32 
h
,

157 
cﬁ‹
);

169 
vútuÆ
 
døwCh¨
(c⁄° 
GUI
::
F⁄t
* 
f⁄t
, 
uI¡8
 
c
, 
uI¡32
 
x
, uI¡32 
y
,

170 
cﬁ‹
);

182 
vútuÆ
 
døwBôm≠
(
uI¡32
* 
bôm≠
, 
I¡32
 
x
, I¡32 
y
, 
cﬁ‹
,

183 
I¡32
 
h
 = 8);

192 
ölöe
 
vútuÆ
 
å™¶©eCo‹ds
(
I¡32
* 
x
, I¡32* 
y
);

203 
vútuÆ
 
addDútyRe˘
(
uI¡32
 
x
, uI¡32 
y
, uI¡32 
w
, uI¡32 
h
);

208 
vútuÆ
 
íabÀPho•h‹
(
boﬁ
 
íabÀ
);

213 
vútuÆ
 
˛s
();

215 
	g¥Ÿe˘ed
:

217 
Re˘Li°
* 
myRe˘Li°
;

220 
Re˘Li°
* 
	gmyOvîœyRe˘Li°
;

222 
	g¥iv©e
:

223 
myPôch
;

225 
	eRídîTy≥
 {

226 
	gkSo·Zoom
,

227 
	gkPho•h‹_16
,

228 
	gkPho•h‹_24
,

229 
	gkPho•h‹_32


231 
RídîTy≥
 
	gmyRídîTy≥
;

234 ˛as†
	cRe˘Li°


236 
	mpublic
:

237 
Re˘Li°
(
Uöt32
 
size
 = 512);

238 ~
Re˘Li°
();

240 
add
(
SDL_Re˘
* 
ª˘
);

242 
SDL_Re˘
* 
ª˘s
();

243 
Uöt32
 
numRe˘s
();

244 
°¨t
();

246 
	m¥iv©e
:

247 
Uöt32
 
cuºítSize
, 
	mcuºítRe˘
;

249 
SDL_Re˘
* 
	mª˘Aºay
;

	@common/GuiUtils.hxx

22 #i‚de‡
UTILITIES_HXX


23 
	#UTILITIES_HXX


	)

25 
	~"b•f.hxx
"

35 
	#kS¸ﬁlB¨Width
 9

	)

40 
	mkOKCmd
 = 'OK ',

41 
	mkClo£Cmd
 = 'CLOS',

42 
	mkNextCmd
 = 'NEXT',

43 
	mkPªvCmd
 = 'PREV',

44 
	mkEdôCmd
 = 'EDIT',

45 
	mkDeÁu…sCmd
 = 'DEFA',

46 
	mkSëPosôi⁄Cmd
 = 'SETP',

47 
	mkTabCh™gedCmd
 = 'TBCH',

48 
	mkCheckA˘i⁄Cmd
 = 'CBAC',

49 
	mkRe‰eshAŒCmd
 = 'REFA'

53 c⁄° 
°rög
 
Em±ySåög
("");

55 
	gãm∂©e
<
ty≥«me
 
	gT
> 
ölöe
 
	$SWAP
(
T
 &
a
, T &
b
Ë{ T 
tmp
 =á;á = b; b =Åmp; 
	}
}

56 
	gãm∂©e
<
ty≥«me
 
	gT
> 
ölöe
 
T
 
	$ABS
 (
T
 
x
Ë{  (x>=0Ë? x : -x; 
	}
}

58 #i‡!
deföed
(
MIN
)

59 
	gãm∂©e
<
ty≥«me
 
	gT
> 
ölöe
 
T
 
	$MIN
 (
T
 
a
, T 
b
Ë{  (a<bË?á : b; 
	}
}

62 #i‡!
deföed
(
MAX
)

63 
	gãm∂©e
<
ty≥«me
 
	gT
> 
ölöe
 
T
 
	$MAX
 (
T
 
a
, T 
b
Ë{  (a>bË?á : b; 
	}
}

66 
	#ARRAYSIZE
(
x
Ë(()((xË/ (x[0])))

	)

	@common/Snapshot.cpp

19 #ifde‡
SNAPSHOT_SUPPORT


21 
	~<≤g.h
>

22 
	~<io°ªam
>

23 
	~<f°ªam
>

25 
	~"b•f.hxx
"

26 
	~"FømeBuf„r.hxx
"

27 
	~"S«pshŸ.hxx
"

30 
	gS«pshŸ
::
	$S«pshŸ
(
FømeBuf„r
& 
‰amebuf„r
)

31 : 
	$myFømeBuf„r
(
‰amebuf„r
)

33 
	}
}

36 
S«pshŸ
::~
	$S«pshŸ
()

38 
	}
}

41 
S«pshŸ
::
	$≤g_wrôe_d©a
(
≤g_°ru˘p
 
˘x
, 
≤g_byãp
 
¨ó
, 
≤g_size_t
 
size
)

43 
of°ªam
* 
out
 = (of°ªam *Ë
	`≤g_gë_io_±r
(
˘x
);

44 
out
->
	`wrôe
((c⁄° *)
¨ó
, 
size
);

45 
	}
}

48 
	gS«pshŸ
::
	$≤g_io_Êush
(
≤g_°ru˘p
 
˘x
)

50 
of°ªam
* 
out
 = (of°ªam *Ë
	`≤g_gë_io_±r
(
˘x
);

51 
out
->
	`Êush
();

52 
	}
}

55 
	gS«pshŸ
::
	$≤g_u£r_w¨n
(
≤g_°ru˘p
 
˘x
, 
≤g_c⁄°_ch¨p
 
°r
)

57 
˚º
 << "S«pshŸ:Üib≤g w¨nög: " << 
°r
 << 
ídl
;

58 
	}
}

61 
	gS«pshŸ
::
	$≤g_u£r_îr‹
(
≤g_°ru˘p
 
˘x
, 
≤g_c⁄°_ch¨p
 
°r
)

63 
˚º
 << "S«pshŸ:Üib≤gÉº‹: " << 
°r
 << 
ídl
;

64 
	}
}

67 
°rög
 
	gS«pshŸ
::
	$ßvePNG
(
°rög
 
fûíame
)

69 
≤g_°ru˘p
 
≤g_±r
 = 0;

70 
≤g_öf›
 
öfo_±r
 = 0;

74 
uI¡32
 
width
 = 
myFømeBuf„r
.
	`imageWidth
();

75 
uI¡32
 
height
 = 
myFømeBuf„r
.
	`imageHeight
();

79 
of°ªam
* 
out
 = 
√w
 
	`of°ªam
(
fûíame
.
	`c_°r
(), 
ios_ba£
::
bö¨y
);

80 if(!
out
)

83 
≤g_±r
 = 
	`≤g_¸óã_wrôe_°ru˘
(
PNG_LIBPNG_VER_STRING
, 
NULL
, 
≤g_u£r_îr‹
, 
≤g_u£r_w¨n
);

84 if(
≤g_±r
 =
NULL
)

88 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

89 if(
öfo_±r
 =
NULL
)

91 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, (
≤g_öf›p
)
NULL
);

92 
out
->
	`˛o£
();

97 
	`≤g_£t_wrôe_‚
(
≤g_±r
, 
out
, 
≤g_wrôe_d©a
, 
≤g_io_Êush
);

99 
	`≤g_£t_IHDR
(
≤g_±r
, 
öfo_±r
, 
width
, 
height
, 8,

100 
PNG_COLOR_TYPE_RGB
, 
PNG_INTERLACE_NONE
,

101 
PNG_COMPRESSION_TYPE_DEFAULT
, 
PNG_FILTER_TYPE_DEFAULT
);

104 
	`≤g_wrôe_öfo
(
≤g_±r
, 
öfo_±r
);

107 
	`≤g_£t_∑ckög
(
≤g_±r
);

110 
uI¡8
* 
d©a
 = 
√w
 uI¡8[
width
 * 3];

113 
uI¡32
 
row
 = 0;Ñow < 
height
;Ñow++)

115 
myFømeBuf„r
.
	`sˇ∆öe
(
row
, 
d©a
);

116 
	`≤g_wrôe_row
(
≤g_±r
, (
≤g_byãp
Ë
d©a
);

120 
	`≤g_wrôe_íd
(
≤g_±r
, 
öfo_±r
);

121 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, (
≤g_öf›p
)
NULL
);

122 
dñëe
[] 
d©a
;

124 
out
->
	`˛o£
();

125 
dñëe
 
out
;

128 
	}
}

	@common/Snapshot.hxx

19 #i‚de‡
SNAPSHOT_HXX


20 
	#SNAPSHOT_HXX


	)

22 #ifde‡
SNAPSHOT_SUPPORT


24 
˛ass
 
	gFømeBuf„r
;

26 
	~<≤g.h
>

27 
	~"b•f.hxx
"

29 ˛as†
	cS«pshŸ


31 
	mpublic
:

37 
S«pshŸ
(
FømeBuf„r
& 
‰amebuf„r
);

42 ~
S«pshŸ
();

51 
°rög
 
ßvePNG
(°rög 
fûíame
);

53 
	m¥iv©e
:

54 
≤g_wrôe_d©a
(
≤g_°ru˘p
 
˘x
, 
≤g_byãp
 
¨ó
, 
≤g_size_t
 
size
);

56 
≤g_io_Êush
(
≤g_°ru˘p
 
˘x
);

58 
≤g_u£r_w¨n
(
≤g_°ru˘p
 
˘x
, 
≤g_c⁄°_ch¨p
 
°r
);

60 
≤g_u£r_îr‹
(
≤g_°ru˘p
 
˘x
, 
≤g_c⁄°_ch¨p
 
°r
);

62 
	m¥iv©e
:

64 
FømeBuf„r
& 
myFømeBuf„r
;

	@common/SoundNull.cpp

19 
	~"Sîülizî.hxx
"

20 
	~"De£rülizî.hxx
"

22 
	~"b•f.hxx
"

24 
	~"OSy°em.hxx
"

25 
	~"Sëtögs.hxx
"

26 
	~"SoundNuŒ.hxx
"

29 
	gSoundNuŒ
::
	$SoundNuŒ
(
OSy°em
* 
osy°em
)

30 : 
	$Sound
(
osy°em
)

33 if(
myOSy°em
->
	`£âögs
().
	`gëBoﬁ
("showinfo"))

34 
cout
 << "Sound dißbÀd." << 
ídl
 <<Éndl;

35 
	}
}

38 
	gSoundNuŒ
::~
	$SoundNuŒ
()

40 
	}
}

43 
boﬁ
 
SoundNuŒ
::
	$lﬂd
(
De£rülizî
& 
ö
)

45 
°rög
 
soundDevi˚
 = "TIASound";

46 if(
ö
.
	`gëSåög
(Ë!
soundDevi˚
)

47  
Ál£
;

49 
uI¡8
 
ªg
;

50 
ªg
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

51 
ªg
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

52 
ªg
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

53 
ªg
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

54 
ªg
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

55 
ªg
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

58 
ö
.
	`gëI¡
();

60  
åue
;

61 
	}
}

64 
boﬁ
 
	gSoundNuŒ
::
	$ßve
(
Sîülizî
& 
out
)

66 
out
.
	`putSåög
("TIASound");

68 
uI¡8
 
ªg
 = 0;

69 
out
.
	`putI¡
(
ªg
);

70 
out
.
	`putI¡
(
ªg
);

71 
out
.
	`putI¡
(
ªg
);

72 
out
.
	`putI¡
(
ªg
);

73 
out
.
	`putI¡
(
ªg
);

74 
out
.
	`putI¡
(
ªg
);

77 
out
.
	`putI¡
(0);

79  
åue
;

80 
	}
}

	@common/SoundNull.hxx

19 #i‚de‡
SOUND_NULL_HXX


20 
	#SOUND_NULL_HXX


	)

22 
˛ass
 
	gOSy°em
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

27 
	~"Sound.hxx
"

36 ˛as†
	cSoundNuŒ
 : 
public
 
Sound


38 
public
:

43 
SoundNuŒ
(
OSy°em
* 
osy°em
);

48 
	mvútuÆ
 ~
SoundNuŒ
();

50 
	mpublic
:

57 
	$£tE«bÀd
(
boﬁ
 
íabÀ
) { }

65 
	$adju°Cy˛eCou¡î
(
I¡32
 
amou¡
Ë{ 
	}
}

72 
	$£tCh™√ls
(
uI¡32
 
ch™√ls
Ë{ 
	}
}

80 
	$£tFømeR©e
(
uI¡32
 
‰amî©e
Ë{ 
	}
}

86 
	$öôülize
(Ë{ 
	}
}

92 
	$˛o£
(Ë{ 
	}
}

99 
boﬁ
 
	$isSuc˚ssfuŒyInôülized
(Ëc⁄° {  
Ál£
; 
	}
}

106 
	$muã
(
boﬁ
 
°©e
Ë{ 
	}
}

111 
	$ª£t
(Ë{ 
	}
}

120 
	$£t
(
uI¡16
 
addr
, 
uI¡8
 
vÆue
, 
I¡32
 
cy˛e
Ë{ 
	}
}

129 
	$£tVﬁume
(
I¡32
 
≥r˚¡
Ë{ 
	}
}

137 
	$adju°Vﬁume
(
I¡8
 
dúe˘i⁄
Ë{ 
	}
}

139 
	gpublic
:

146 
boﬁ
 
lﬂd
(
De£rülizî
& 
ö
);

154 
boﬁ
 
ßve
(
Sîülizî
& 
out
);

	@common/SoundSDL.cpp

19 #ifde‡
SOUND_SUPPORT


21 
	~<s°ªam
>

22 
	~<ˇs£π
>

23 
	~<cm©h
>

24 
	~<SDL.h
>

26 
	~"TIASnd.hxx
"

27 
	~"FømeBuf„r.hxx
"

28 
	~"Sîülizî.hxx
"

29 
	~"De£rülizî.hxx
"

30 
	~"Sëtögs.hxx
"

31 
	~"Sy°em.hxx
"

32 
	~"OSy°em.hxx
"

34 
	~"SoundSDL.hxx
"

37 
	gSoundSDL
::
	$SoundSDL
(
OSy°em
* 
osy°em
)

38 : 
	`Sound
(
osy°em
),

39 
	`myIsE«bÀd
(
osy°em
->
	`£âögs
().
	`gëBoﬁ
("sound")),

40 
	`myIsInôülizedFœg
(
Ál£
),

41 
	`myLa°Regi°îSëCy˛e
(0),

42 
	`myDi•œyFømeR©e
(60),

43 
	`myNumCh™√ls
(1),

44 
	`myFøgmítSizeLogBa£2
(0),

45 
	`myIsMuãd
(
Ál£
),

46 
	$myVﬁume
(100)

48 
	}
}

51 
	gSoundSDL
::~
	$SoundSDL
()

54 
	`˛o£
();

55 
	}
}

58 
	gSoundSDL
::
	$£tE«bÀd
(
boﬁ
 
°©e
)

60 
myIsE«bÀd
 = 
°©e
;

61 
myOSy°em
->
	`£âögs
().
	`£tBoﬁ
("sound", 
°©e
);

62 
	}
}

65 
	gSoundSDL
::
	$öôülize
()

68 if(!
myIsE«bÀd
)

70 
	`˛o£
();

71 if(
myOSy°em
->
	`£âögs
().
	`gëBoﬁ
("showinfo"))

72 
cout
 << "Sound dißbÀd." << 
ídl
 <<Éndl;

77 
myRegWrôeQueue
.
	`˛ór
();

78 
myTIASound
.
	`ª£t
();

80 if(!((
	`SDL_WasInô
(
SDL_INIT_AUDIO
) & SDL_INIT_AUDIO) > 0))

82 
myIsInôülizedFœg
 = 
Ál£
;

83 
myIsMuãd
 = 
Ál£
;

84 
myLa°Regi°îSëCy˛e
 = 0;

86 if(
	`SDL_InôSubSy°em
(
SDL_INIT_AUDIO
) < 0)

88 
˚º
 << "WARNING: Couldn'àöôülizêSDLáudiÿsy°em! " << 
ídl
;

89 
˚º
 << " " << 
	`SDL_GëEº‹
(Ë<< 
ídl
;

94 
uI¡32
 
‰agsize
 = 
myOSy°em
->
	`£âögs
().
	`gëI¡
("fragsize");

95 
I¡32
 
‰equícy
 = 
myOSy°em
->
	`£âögs
().
	`gëI¡
("freq");

96 
I¡32
 
tü‰eq
 = 
myOSy°em
->
	`£âögs
().
	`gëI¡
("tiafreq");

98 
SDL_AudioS≥c
 
desúed
;

99 #i‚de‡
PSP


100 
desúed
.
‰eq
 = 
‰equícy
;

101 
desúed
.
f‹m©
 = 
AUDIO_U8
;

103 
desúed
.
‰eq
 = 44100;

104 
desúed
.
f‹m©
 = 
AUDIO_U16
;

106 
desúed
.
ch™√ls
 = 
myNumCh™√ls
;

107 
desúed
.
ßm∂es
 = 
‰agsize
;

108 
desúed
.
ˇŒback
 = callback;

109 
desúed
.
u£rd©a
 = (*)
this
;

111 if(
	`SDL_O≥nAudio
(&
desúed
, &
myH¨dw¨eS≥c
) < 0)

113 
˚º
 << "WARNING: Couldn'à›í SDLáudiÿsy°em! " << 
ídl
;

114 
˚º
 << " " << 
	`SDL_GëEº‹
(Ë<< 
ídl
;

120 if((()
myH¨dw¨eS≥c
.
ßm∂es
 / ()myH¨dw¨eS≥c.
‰eq
) >= 0.25)

122 
˚º
 << "WARNING: Sound device doesn't supportÑealtimeáudio! Make ";

123 
˚º
 << "suªá sound" << 
ídl
;

124 
˚º
 << " sîvî i¢'àru¬ög. Audiÿi†dißbÀd." << 
ídl
;

126 
	`SDL_Clo£Audio
();

130 
myIsInôülizedFœg
 = 
åue
;

131 
myIsMuãd
 = 
Ál£
;

132 
myFøgmítSizeLogBa£2
 = 
	`log
(()
myH¨dw¨eS≥c
.
ßm∂es
) /Üog(2.0);

135 
˚º
 << "Fªq: " << ()
myH¨dw¨eS≥c
.
‰eq
 << 
ídl
;

136 
˚º
 << "F‹m©: " << ()
myH¨dw¨eS≥c
.
f‹m©
 << 
ídl
;

137 
˚º
 << "Ch™√ls: " << ()
myH¨dw¨eS≥c
.
ch™√ls
 << 
ídl
;

138 
˚º
 << "Sûí˚: " << ()
myH¨dw¨eS≥c
.
sûí˚
 << 
ídl
;

139 
˚º
 << "Sam∂es: " << ()
myH¨dw¨eS≥c
.
ßm∂es
 << 
ídl
;

140 
˚º
 << "Size: " << ()
myH¨dw¨eS≥c
.
size
 << 
ídl
;

144 
myTIASound
.
	`ouçutFªquícy
(
myH¨dw¨eS≥c
.
‰eq
);

145 
myTIASound
.
	`tüFªquícy
(
tü‰eq
);

146 
myTIASound
.
	`ch™√ls
(
myH¨dw¨eS≥c
.
ch™√ls
);

148 
boﬁ
 
˛ùvﬁ
 = 
myOSy°em
->
	`£âögs
().
	`gëBoﬁ
("clipvol");

149 
myTIASound
.
	`˛ùVﬁume
(
˛ùvﬁ
);

152 
myVﬁume
 = 
myOSy°em
->
	`£âögs
().
	`gëI¡
("volume");

153 
	`£tVﬁume
(
myVﬁume
);

156 if(
myOSy°em
->
	`£âögs
().
	`gëBoﬁ
("showinfo"))

157 
cout
 << "SoundÉ«bÀd:" << 
ídl


158 << " Vﬁumê : " << 
myVﬁume
 << 
ídl


159 << " Føg sizê : " << 
‰agsize
 << 
ídl


160 << " Fªquícy : " << 
myH¨dw¨eS≥c
.
‰eq
 << 
ídl


161 << " TIA Fªq. : " << 
tü‰eq
 << 
ídl


162 << " Ch™√l† : " << 
myNumCh™√ls
 << 
ídl


163 << " Clù vﬁume: " << ()
˛ùvﬁ
 << 
ídl
 <<Éndl;

169 if(
myIsInôülizedFœg
)

171 
	`SDL_Pau£Audio
(0);

174 
	}
}

177 
	gSoundSDL
::
	$˛o£
()

179 if(
myIsInôülizedFœg
)

181 
	`SDL_Clo£Audio
();

182 
myIsInôülizedFœg
 = 
Ál£
;

184 
	}
}

187 
boﬁ
 
	gSoundSDL
::
	$isSuc˚ssfuŒyInôülized
() const

189  
myIsInôülizedFœg
;

190 
	}
}

193 
	gSoundSDL
::
	$muã
(
boﬁ
 
°©e
)

195 if(
myIsInôülizedFœg
)

198 if(
myIsMuãd
 =
°©e
)

203 
myIsMuãd
 = 
°©e
;

206 
	`SDL_Pau£Audio
(
myIsMuãd
 ? 1 : 0);

208 
myRegWrôeQueue
.
	`˛ór
();

210 
	}
}

213 
	gSoundSDL
::
	$ª£t
()

215 if(
myIsInôülizedFœg
)

218 
	`SDL_Pau£Audio
(1);

220 
myIsMuãd
 = 
Ál£
;

221 
myLa°Regi°îSëCy˛e
 = 0;

222 
myRegWrôeQueue
.
	`˛ór
();

224 
	`SDL_Pau£Audio
(0);

227 
	}
}

230 
	gSoundSDL
::
	$£tVﬁume
(
I¡32
 
≥r˚¡
)

232 if(
myIsInôülizedFœg
)

234 if((
≥r˚¡
 >= 0) && (percent <= 100))

236 
myOSy°em
->
	`£âögs
().
	`£tI¡
("vﬁume", 
≥r˚¡
);

237 
	`SDL_LockAudio
();

238 
myVﬁume
 = 
≥r˚¡
;

239 
myTIASound
.
	`vﬁume
(
≥r˚¡
);

240 
	`SDL_U∆ockAudio
();

243 
	}
}

246 
	gSoundSDL
::
	$adju°Vﬁume
(
I¡8
 
dúe˘i⁄
)

248 
o°rög°ªam
 
°rvÆ
;

249 
°rög
 
mesßge
;

251 
I¡32
 
≥r˚¡
 = 
myVﬁume
;

253 if(
dúe˘i⁄
 == -1)

254 
≥r˚¡
 -= 2;

255 if(
dúe˘i⁄
 == 1)

256 
≥r˚¡
 += 2;

258 if((
≥r˚¡
 < 0) || (percent > 100))

261 
	`£tVﬁume
(
≥r˚¡
);

264 
°rvÆ
 << 
≥r˚¡
;

265 
mesßge
 = "Volume setÅo ";

266 
mesßge
 +
°rvÆ
.
	`°r
();

268 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
(
mesßge
);

269 
	}
}

272 
	gSoundSDL
::
	$adju°Cy˛eCou¡î
(
I¡32
 
amou¡
)

274 
myLa°Regi°îSëCy˛e
 +
amou¡
;

275 
	}
}

278 
	gSoundSDL
::
	$£tCh™√ls
(
uI¡32
 
ch™√ls
)

280 if(
ch™√ls
 == 1 || channels == 2)

282 
myNumCh™√ls
 = 
ch™√ls
;

283 
myOSy°em
->
	`£âögs
().
	`£tI¡
("ch™√ls", 
myNumCh™√ls
);

285 
	}
}

288 
	gSoundSDL
::
	$£tFømeR©e
(
uI¡32
 
‰amî©e
)

291 
myDi•œyFømeR©e
 = 
‰amî©e
;

292 
myLa°Regi°îSëCy˛e
 = 0;

293 
	}
}

296 
	gSoundSDL
::
	$£t
(
uI¡16
 
addr
, 
uI¡8
 
vÆue
, 
I¡32
 
cy˛e
)

298 
	`SDL_LockAudio
();

302 
dñè
 = ((()(
cy˛e
 - 
myLa°Regi°îSëCy˛e
)) /

309 
dñè
 = dñè * (
myDi•œyFømeR©e
 / ()
myOSy°em
->
	`‰ameR©e
());

310 
RegWrôe
 
öfo
;

311 
öfo
.
addr
 =áddr;

312 
öfo
.
vÆue
 = value;

313 
öfo
.
dñè
 = delta;

314 
myRegWrôeQueue
.
	`íqueue
(
öfo
);

317 
myLa°Regi°îSëCy˛e
 = 
cy˛e
;

319 
	`SDL_U∆ockAudio
();

320 
	}
}

323 
	gSoundSDL
::
	$¥o˚ssFøgmít
(
uI¡8
* 
°ªam
, 
I¡32
 
Àngth
)

325 if(!
myIsInôülizedFœg
)

328 
uI¡32
 
ch™√ls
 = 
myH¨dw¨eS≥c
.channels;

329 
Àngth
 =Üígth / 
ch™√ls
;

332 if(
myRegWrôeQueue
.
	`duøti⁄
() >

333 (
myFøgmítSizeLogBa£2
 / 
myDi•œyFømeR©e
))

335 
ªmoved
 = 0.0;

336 
ªmoved
 < ((
myFøgmítSizeLogBa£2
 - 1Ë/ 
myDi•œyFømeR©e
))

338 
RegWrôe
& 
öfo
 = 
myRegWrôeQueue
.
	`‰⁄t
();

339 
ªmoved
 +
öfo
.
dñè
;

340 
myTIASound
.
	`£t
(
öfo
.
addr
, info.
vÆue
);

341 
myRegWrôeQueue
.
	`dequeue
();

346 
posôi⁄
 = 0.0;

347 
ªmaöög
 = 
Àngth
;

349 
ªmaöög
 > 0.0)

351 if(
myRegWrôeQueue
.
	`size
() == 0)

356 
myTIASound
.
	`¥o˚ss
(
°ªam
 + ((
uI¡32
)
posôi⁄
 * 
ch™√ls
),

357 
Àngth
 - (
uI¡32
)
posôi⁄
);

363 
myLa°Regi°îSëCy˛e
 = 0;

370 
RegWrôe
& 
öfo
 = 
myRegWrôeQueue
.
	`‰⁄t
();

373 
duøti⁄
 = 
ªmaöög
 / ()
myH¨dw¨eS≥c
.
‰eq
;

376 if(
öfo
.
dñè
 <
duøti⁄
)

380 if(
öfo
.
dñè
 > 0.0)

384 
ßm∂es
 = (
myH¨dw¨eS≥c
.
‰eq
 * 
öfo
.
dñè
);

388 
myTIASound
.
	`¥o˚ss
(
°ªam
 + ((
uI¡32
)
posôi⁄
 * 
ch™√ls
),

389 (
uI¡32
)
ßm∂es
 + (uI¡32)(
posôi⁄
 + samples) -

390 ((
uI¡32
)
posôi⁄
 + (uI¡32)
ßm∂es
));

392 
posôi⁄
 +
ßm∂es
;

393 
ªmaöög
 -
ßm∂es
;

395 
myTIASound
.
	`£t
(
öfo
.
addr
, info.
vÆue
);

396 
myRegWrôeQueue
.
	`dequeue
();

404 
myTIASound
.
	`¥o˚ss
(
°ªam
 + ((
uI¡32
)
posôi⁄
 * 
ch™√ls
),

405 
Àngth
 - (
uI¡32
)
posôi⁄
);

406 
öfo
.
dñè
 -
duøti⁄
;

411 
	}
}

413 
uI¡8
 
	gsound_buf„r
[2048];

415 
	gSoundSDL
::
	$ˇŒback
(* 
ud©a
, 
uI¡8
* 
°ªam
, 
Àn
)

417 
SoundSDL
* 
sound
 = (SoundSDL*)
ud©a
;

418 
sound
->
	`¥o˚ssFøgmít
(
sound_buf„r
, 
Àn
 >> 1);

420 
ödex
 = 0; index < 
Àn
; index++) {

421 
°ªam
[
ödex
] = 
sound_buf„r
[index >> 1];

423 
	}
}

426 
boﬁ
 
	gSoundSDL
::
	$lﬂd
(
De£rülizî
& 
ö
)

428 
°rög
 
devi˚
 = "TIASound";

430 
__åy


432 if(
ö
.
	`gëSåög
(Ë!
devi˚
)

433  
Ál£
;

435 
uI¡8
 
ªg1
 = 0, 
ªg2
 = 0, 
ªg3
 = 0, 
ªg4
 = 0, 
ªg5
 = 0, 
ªg6
 = 0;

436 
ªg1
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

437 
ªg2
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

438 
ªg3
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

439 
ªg4
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

440 
ªg5
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

441 
ªg6
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

443 
myLa°Regi°îSëCy˛e
 = (
I¡32
Ë
ö
.
	`gëI¡
();

447 if(
myIsInôülizedFœg
)

450 
	`SDL_Pau£Audio
(1);

452 
myRegWrôeQueue
.
	`˛ór
();

453 
myTIASound
.
	`£t
(0x15, 
ªg1
);

454 
myTIASound
.
	`£t
(0x16, 
ªg2
);

455 
myTIASound
.
	`£t
(0x17, 
ªg3
);

456 
myTIASound
.
	`£t
(0x18, 
ªg4
);

457 
myTIASound
.
	`£t
(0x19, 
ªg5
);

458 
myTIASound
.
	`£t
(0x1a, 
ªg6
);

460 
	`SDL_Pau£Audio
(0);

465 
	`ˇtch
(*
msg
)

467 
˚º
 << 
msg
 << 
ídl
;

468  
Ál£
;

471 
	`__ˇtch
(...)

473 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
devi˚
 << 
ídl
;

474  
Ál£
;

477  
åue
;

478 
	}
}

481 
boﬁ
 
	gSoundSDL
::
	$ßve
(
Sîülizî
& 
out
)

483 
°rög
 
devi˚
 = "TIASound";

485 
__åy


487 
out
.
	`putSåög
(
devi˚
);

489 
uI¡8
 
ªg1
 = 0, 
ªg2
 = 0, 
ªg3
 = 0, 
ªg4
 = 0, 
ªg5
 = 0, 
ªg6
 = 0;

492 if(
myIsInôülizedFœg
)

494 
ªg1
 = 
myTIASound
.
	`gë
(0x15);

495 
ªg2
 = 
myTIASound
.
	`gë
(0x16);

496 
ªg3
 = 
myTIASound
.
	`gë
(0x17);

497 
ªg4
 = 
myTIASound
.
	`gë
(0x18);

498 
ªg5
 = 
myTIASound
.
	`gë
(0x19);

499 
ªg6
 = 
myTIASound
.
	`gë
(0x1a);

502 
out
.
	`putI¡
(
ªg1
);

503 
out
.
	`putI¡
(
ªg2
);

504 
out
.
	`putI¡
(
ªg3
);

505 
out
.
	`putI¡
(
ªg4
);

506 
out
.
	`putI¡
(
ªg5
);

507 
out
.
	`putI¡
(
ªg6
);

509 
out
.
	`putI¡
(
myLa°Regi°îSëCy˛e
);

512 
	`ˇtch
(*
msg
)

514 
˚º
 << 
msg
 << 
ídl
;

515  
Ál£
;

518 
	`__ˇtch
(...)

520 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
devi˚
 << 
ídl
;

521  
Ál£
;

524  
åue
;

525 
	}
}

528 
	gSoundSDL
::
RegWrôeQueue
::
	$RegWrôeQueue
(
uI¡32
 
ˇ∑côy
)

529 : 
	`myC≠acôy
(
ˇ∑côy
),

530 
	`myBuf„r
(0),

531 
	`mySize
(0),

532 
	`myHód
(0),

533 
	$myTaû
(0)

535 
myBuf„r
 = 
√w
 
RegWrôe
[
myC≠acôy
];

536 
	}
}

539 
	gSoundSDL
::
RegWrôeQueue
::~
	$RegWrôeQueue
()

541 
dñëe
[] 
myBuf„r
;

542 
	}
}

545 
	gSoundSDL
::
RegWrôeQueue
::
	$˛ór
()

547 
myHód
 = 
myTaû
 = 
mySize
 = 0;

548 
	}
}

551 
	gSoundSDL
::
RegWrôeQueue
::
	$dequeue
()

553 if(
mySize
 > 0)

555 
myHód
 = (myHód + 1Ë% 
myC≠acôy
;

556 --
mySize
;

558 
	}
}

561 
	gSoundSDL
::
RegWrôeQueue
::
	$duøti⁄
()

563 
duøti⁄
 = 0.0;

564 
uI¡32
 
i
 = 0; i < 
mySize
; ++i)

566 
duøti⁄
 +
myBuf„r
[(
myHód
 + 
i
Ë% 
myC≠acôy
].
dñè
;

568  
duøti⁄
;

569 
	}
}

572 
	gSoundSDL
::
RegWrôeQueue
::
	$íqueue
(c⁄° 
RegWrôe
& 
öfo
)

576 if(
mySize
 =
myC≠acôy
)

578 
	`grow
();

581 
myBuf„r
[
myTaû
] = 
öfo
;

582 
myTaû
 = (myTaû + 1Ë% 
myC≠acôy
;

583 ++
mySize
;

584 
	}
}

587 
	gSoundSDL
::
RegWrôe
& 
SoundSDL
::
RegWrôeQueue
::
	$‰⁄t
()

589 
	`as£π
(
mySize
 != 0);

590  
myBuf„r
[
myHód
];

591 
	}
}

594 
uI¡32
 
	gSoundSDL
::
RegWrôeQueue
::
	$size
() const

596  
mySize
;

597 
	}
}

600 
	gSoundSDL
::
RegWrôeQueue
::
	$grow
()

602 
RegWrôe
* 
buf„r
 = 
√w
 RegWrôe[
myC≠acôy
 * 2];

603 
uI¡32
 
i
 = 0; i < 
mySize
; ++i)

605 
buf„r
[
i
] = 
myBuf„r
[(
myHód
 + iË% 
myC≠acôy
];

607 
myHód
 = 0;

608 
myTaû
 = 
mySize
;

609 
myC≠acôy
 = myCapacity * 2;

610 
dñëe
[] 
myBuf„r
;

611 
myBuf„r
 = 
buf„r
;

612 
	}
}

	@common/SoundSDL.hxx

19 #i‚de‡
SOUND_SDL_HXX


20 
	#SOUND_SDL_HXX


	)

22 #ifde‡
SOUND_SUPPORT


24 
˛ass
 
	gOSy°em
;

26 
	~<SDL.h
>

28 
	~"Sound.hxx
"

29 
	~"b•f.hxx
"

30 
	~"MedüSrc.hxx
"

31 
	~"TIASnd.hxx
"

39 ˛as†
	cSoundSDL
 : 
public
 
Sound


41 
public
:

46 
SoundSDL
(
OSy°em
* 
osy°em
);

51 
	mvútuÆ
 ~
SoundSDL
();

53 
	mpublic
:

59 
£tE«bÀd
(
boﬁ
 
°©e
);

67 
adju°Cy˛eCou¡î
(
I¡32
 
amou¡
);

74 
£tCh™√ls
(
uI¡32
 
ch™√ls
);

82 
£tFømeR©e
(
uI¡32
 
‰amî©e
);

88 
öôülize
();

94 
˛o£
();

101 
boﬁ
 
	$isSuc˚ssfuŒyInôülized
() const;

108 
	`muã
(
boﬁ
 
°©e
);

113 
	`ª£t
();

122 
	`£t
(
uI¡16
 
addr
, 
uI¡8
 
vÆue
, 
I¡32
 
cy˛e
);

131 
	`£tVﬁume
(
I¡32
 
≥r˚¡
);

139 
	`adju°Vﬁume
(
I¡8
 
dúe˘i⁄
);

141 
public
:

148 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

156 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

158 
¥Ÿe˘ed
:

165 
	`¥o˚ssFøgmít
(
uI¡8
* 
°ªam
, 
I¡32
 
Àngth
);

167 
¥Ÿe˘ed
:

169 
	sRegWrôe


171 
uI¡16
 
addr
;

172 
uI¡8
 
vÆue
;

173 
dñè
;

180 ˛as†
	cRegWrôeQueue


182 
public
:

188 
	`RegWrôeQueue
(
uI¡32
 
ˇ∑côy
 = 512);

193 
vútuÆ
 ~
	`RegWrôeQueue
();

195 
public
:

199 
	`˛ór
();

204 
	`dequeue
();

209 
	`duøti⁄
();

214 
	`íqueue
(c⁄° 
RegWrôe
& 
öfo
);

221 
RegWrôe
& 
	`‰⁄t
();

228 
uI¡32
 
	`size
() const;

230 
¥iv©e
:

232 
	`grow
();

234 
¥iv©e
:

235 
uI¡32
 
myC≠acôy
;

236 
RegWrôe
* 
myBuf„r
;

237 
uI¡32
 
mySize
;

238 
uI¡32
 
myHód
;

239 
uI¡32
 
myTaû
;

240 
	}
};

242 
	g¥iv©e
:

244 
TIASound
 
myTIASound
;

247 
boﬁ
 
	gmyIsE«bÀd
;

250 
boﬁ
 
	gmyIsInôülizedFœg
;

253 
I¡32
 
	gmyLa°Regi°îSëCy˛e
;

256 
uI¡32
 
	gmyDi•œyFømeR©e
;

259 
uI¡32
 
	gmyNumCh™√ls
;

262 
	gmyFøgmítSizeLogBa£2
;

265 
boﬁ
 
	gmyIsMuãd
;

268 
uI¡32
 
	gmyVﬁume
;

271 
SDL_AudioS≥c
 
	gmyH¨dw¨eS≥c
;

274 
RegWrôeQueue
 
	gmyRegWrôeQueue
;

276 
	g¥iv©e
:

278 
ˇŒback
(* 
ud©a
, 
uI¡8
* 
°ªam
, 
Àn
);

	@common/StringList.hxx

22 #i‚de‡
STRING_LIST_HXX


23 
	#STRING_LIST_HXX


	)

25 
	~"Aºay.hxx
"

26 
	~"b•f.hxx
"

29 
˛ass
 
	gSåögLi°
 : 
public
 
Comm⁄
::
Aºay
<
°rög
>

31 
public
:

32 
push_back
(c⁄° *
°r
)

34 
ísuªC≠acôy
(
_size
 + 1);

35 
	g_d©a
[
_size
++] = 
°r
;

38 
push_back
(c⁄° 
°rög
& 
°r
)

40 
ísuªC≠acôy
(
_size
 + 1);

41 
	g_d©a
[
_size
++] = 
°r
;

44 
°rög
 
ªmoveP©ã∫
(c⁄° såög& 
°r
, c⁄° såög& 
∑âîn
)

47 
°rög
 
	gtmp
;

48 
	gi
 = 0; i < 
	g°r
.
Àngth
(); ++i)

50 
boﬁ
 
	gm©ch
 = 
Ál£
;

51 
	gj
 = 0; j < 
	g∑âîn
.
Àngth
(); ++j)

53 if(
	g°r
[
i
] =
∑âîn
[
j
])

55 
m©ch
 = 
åue
;

59 if(!
	gm©ch
Ë
	gtmp
 +
°r
[
i
];

61  
	gtmp
;

	@common/Version.hxx

19 #i‚de‡
VERSION_HXX


20 
	#VERSION_HXX


	)

22 
	#STELLA_BASE_VERSION
 "2.2"

	)

24 #ifde‡
NIGHTLY_BUILD


25 
	#STELLA_VERSION
 
STELLA_BASE_VERSION
 "¥e-" 
NIGHTLY_BUILD


	)

27 
	#STELLA_VERSION
 
STELLA_BASE_VERSION


	)

	@common/mainSDL.cpp

19 
	~<s°ªam
>

21 
	~<SDL.h
>

22 
	~"p•_sdl.h
"

24 
	~"b•f.hxx
"

25 
	~"C⁄sﬁe.hxx
"

26 
	~"Evít.hxx
"

27 
	~"De£rülizî.hxx
"

28 
	~"EvítH™dÀr.hxx
"

29 
	~"FømeBuf„r.hxx
"

30 
	~"Pr›sSë.hxx
"

31 
	~"Sound.hxx
"

32 
	~"Sy°em.hxx
"

33 
	~"Sëtögs.hxx
"

34 
	~"FSNode.hxx
"

35 
	~"OSy°em.hxx
"

36 
	~"Aèri.h
"

38 #i‡
deföed
(
UNIX
)

39 
	~"SëtögsUNIX.hxx
"

40 
	~"OSy°emUNIX.hxx
"

41 #ñi‡
deföed
(
WIN32
)

42 
	~"SëtögsWö32.hxx
"

43 
	~"OSy°emWö32.hxx
"

44 #ñi‡
deföed
(
MAC_OSX
)

45 
	~"SëtögsMACOSX.hxx
"

46 
	~"OSy°emMACOSX.hxx
"

49 
©¨iMaö
(
¨gc
, * 
¨gv
[]);

51 #ñi‡
deföed
(
GP2X
)

52 
	~"SëtögsGP2X.hxx
"

53 
	~"OSy°emGP2X.hxx
"

54 #ñi‡
deföed
(
PSP
)

55 
	~"SëtögsPSP.hxx
"

56 
	~"OSy°emPSP.hxx
"

58 
SDL_maö
(
¨gc
, * 
¨gv
[]);

61 #îr‹ 
Unsuµ‹ãd
 
∂©f‹m
!

64 #ifde‡
DEVELOPER_SUPPORT


65 
	~"Debuggî.hxx
"

68 #ifde‡
CHEATCODE_SUPPORT


69 
	~"ChótM™agî.hxx
"

72 
SëupPr›îtõs
(
Pr›îtõsSë
& 
£t
);

73 
CÀ™up
();

76 
OSy°em
* 
	gtheOSy°em
 = (OSy°em*Ë
NULL
;

82 
maö_©¨i_£nd_key_evít
(
©¨i_idx
, 
key_¥ess
)

84 
theOSy°em
->
evítH™dÀr
().
h™dÀEvít
(
Evít
::
Ty≥
(
©¨i_idx
), (
I¡32
)
key_¥ess
);

88 
maö_©¨i_£nd_∑ddÀ_evít
(
©¨i_idx
, 
ªsi°™˚
)

90 
theOSy°em
->
evítH™dÀr
().
h™dÀEvít
(
Evít
::
Ty≥
(
©¨i_idx
), (
I¡32
)
ªsi°™˚
);

94 
maö_©¨i_emuœt‹_ª£t
()

96 
theOSy°em
->
c⁄sﬁe
().
sy°em
().
ª£t
();

100 
maö_©¨i_ßve_°©e
(*
fûíame
)

102 
°rög
 
md5
 = 
theOSy°em
->
c⁄sﬁe
().
¥›îtõs
().
gë
–
C¨åidge_MD5
);

103 
Sîülizî
 
out
;

104 if(!
out
.
›í
(
°rög
(
fûíame
))) {

107 
ªsu…
 = 
theOSy°em
->
c⁄sﬁe
().
sy°em
().
ßveSèã
(
md5
, 
out
);

109  (
ªsu…
 != 1);

113 
maö_©¨i_lﬂd_°©e
(*
fûíame
)

115 
°rög
 
md5
 = 
theOSy°em
->
c⁄sﬁe
().
¥›îtõs
().
gë
(
C¨åidge_MD5
);

116 
De£rülizî
 
ö
;

117 if(!
ö
.
›í
(
°rög
(
fûíame
))) {

120 
ªsu…
 = 
theOSy°em
->
c⁄sﬁe
().
sy°em
().
lﬂdSèã
(
md5
, 
ö
);

122  (
ªsu…
 != 1);

126 
maö_©¨i_lﬂd_rom
(*
fûíame
)

128 i‡(
theOSy°em
->
¸óãC⁄sﬁe
(
fûíame
)) {

135 
maö_©¨i_f‹˚_døw_blô
()

137 
theOSy°em
->
‰ameBuf„r
().
døwMedüSour˚BlôSurÁ˚
();

148 
	$SëupPr›îtõs
(
Pr›îtõsSë
& 
£t
)

156 
o°rög°ªam
 
buf
;

158 
°rög
 
Æçro
 = 
theOSy°em
->
	`£âögs
().
	`gëSåög
("pro");

159 if(
Æçro
 != "")

161 
buf
 << "U£∏gamê¥›îtõs: \'" << 
Æçro
 << "\'\n";

162 
£t
.
	`lﬂd
(
Æçro
, 
Ál£
);

166 c⁄° 
°rög
& 
¥›s
 = 
theOSy°em
->
	`¥›îtõsFûe
();

167 
buf
 << "U£∏gamê¥›îtõs: \'" << 
¥›s
 << "\'\n";

168 
£t
.
	`lﬂd
(
¥›s
, 
åue
);

172 if(
theOSy°em
->
	`£âögs
().
	`gëBoﬁ
("showinfo"))

173 
cout
 << 
buf
.
	`°r
(Ë<< 
ídl
;

175 
	}
}

181 
	$CÀ™up
()

183 if(
theOSy°em
)

184 
dñëe
 
theOSy°em
;

186 if(
	`SDL_WasInô
(
SDL_INIT_VIDEO
) & SDL_INIT_VIDEO)

187 
	`SDL_Quô
();

188 
	}
}

193 
	$©¨iMaö
(
¨gc
, * 
¨gv
[])

196 
theOSy°em
 = 
√w
 
	`OSy°emPSP
();

197 
SëtögsPSP
 
	`£âögs
(
theOSy°em
);

200 
theOSy°em
->
	`£âögs
().
	`lﬂdC⁄fig
();

203 if(!
theOSy°em
->
	`£âögs
().
	`lﬂdComm™dLöe
(
¨gc
, 
¨gv
))

205 
	`CÀ™up
();

211 
theOSy°em
->
	`£âögs
().
	`vÆid©e
();

216 
theOSy°em
->
	`¸óã
();

219 
EvítH™dÀr
 
	`h™dÀr
(
theOSy°em
);

222 
Pr›îtõsSë
 
	`¥›îtõsSë
(
theOSy°em
);

223 
	`SëupPr›îtõs
(
¥›îtõsSë
);

224 
theOSy°em
->
	`©èch
(&
¥›îtõsSë
);

229 if(
theOSy°em
->
	`£âögs
().
	`gëBoﬁ
("listrominfo"))

231 
¥›îtõsSë
.
	`¥öt
();

232 
	`CÀ™up
();

239 if(
theOSy°em
->
	`£âögs
().
	`gëBoﬁ
("center"))

240 
	`puãnv
("SDL_VIDEO_CENTERED=1");

244 if(!
theOSy°em
->
	`¸óãFømeBuf„r
())

246 
˚º
 << "ERROR: Couldn't set up display.\n";

247 
	`CÀ™up
();

252 
theOSy°em
->
	`¸óãSound
();

256 
theOSy°em
->
	`evítH™dÀr
().
	`£tupJoy°icks
();

259 #ifde‡
CHEATCODE_SUPPORT


261 
theOSy°em
->
	`chót
().
	`lﬂdChótD©aba£
();

270 
°rög
 
romfûe
 = 
¨gv
[
¨gc
 - 1];

271 if(
¨gc
 =1 || !
Fûesy°emNode
::
	`fûeExi°s
(
romfûe
))

272 
theOSy°em
->
	`¸óãLaunchî
();

273 if(
theOSy°em
->
	`¸óãC⁄sﬁe
(
romfûe
))

275 if(
theOSy°em
->
	`£âögs
().
	`gëBoﬁ
("holdreset"))

276 
theOSy°em
->
	`evítH™dÀr
().
	`h™dÀEvít
(
Evít
::
C⁄sﬁeRe£t
, 1);

278 if(
theOSy°em
->
	`£âögs
().
	`gëBoﬁ
("holdselect"))

279 
theOSy°em
->
	`evítH™dÀr
().
	`h™dÀEvít
(
Evít
::
C⁄sﬁeSñe˘
, 1);

281 if(
theOSy°em
->
	`£âögs
().
	`gëBoﬁ
("holdbutton0"))

282 
theOSy°em
->
	`evítH™dÀr
().
	`h™dÀEvít
(
Evít
::
Joy°ickZîoFúe
, 1);

284 #ifde‡
DEVELOPER_SUPPORT


285 
Debuggî
& 
dbg
 = 
theOSy°em
->
	`debuggî
();

289 
°rög
 
öôBªak
 = 
theOSy°em
->
	`£âögs
().
	`gëSåög
("break");

290 if(
öôBªak
 != "")

292 
bp
 = 
dbg
.
	`°rögToVÆue
(
öôBªak
);

293 
dbg
.
	`£tBªakPoöt
(
bp
, 
åue
);

294 
theOSy°em
->
	`£âögs
().
	`£tSåög
("break", "");

297 if(
theOSy°em
->
	`£âögs
().
	`gëBoﬁ
("debug"))

298 
h™dÀr
.
	`íãrDebugMode
();

303 
	`CÀ™up
();

308 
theOSy°em
->
	`¸óãC⁄sﬁe
("./default.bin");

314 
SDL_Evít
 
evít
;

315 
	`SDL_PﬁlEvít
(&
evít
)) ;

319 
theOSy°em
->
	`maöLo›
();

322 
	`CÀ™up
();

324 
	}
}

	@emucore/Booster.cpp

19 
	~"Evít.hxx
"

20 
	~"Boo°î.hxx
"

23 
	gBoo°îGrù
::
	$Boo°îGrù
(
Jack
 
jack
, c⁄° 
Evít
& 
evít
)

24 : 
	$C⁄åﬁÀr
(
jack
, 
evít
)

26 
myTy≥
 = 
C⁄åﬁÀr
::
Boo°îGrù
;

27 
	}
}

30 
	gBoo°îGrù
::~
	$Boo°îGrù
()

32 
	}
}

35 
boﬁ
 
Boo°îGrù
::
	$ªad
(
DigôÆPö
 
pö
)

37 
pö
)

39 
O√
:

40  (
myJack
 =
Le·
Ë? (
myEvít
.
	`gë
(
Evít
::
Joy°ickZîoUp
) == 0) :

41 (
myEvít
.
	`gë
(
Evít
::
Joy°ickO√Up
) == 0);

43 
Two
:

44  (
myJack
 =
Le·
Ë? (
myEvít
.
	`gë
(
Evít
::
Joy°ickZîoDown
) == 0) :

45 (
myEvít
.
	`gë
(
Evít
::
Joy°ickO√Down
) == 0);

47 
Thªe
:

48  (
myJack
 =
Le·
Ë? (
myEvít
.
	`gë
(
Evít
::
Joy°ickZîoLe·
) == 0) :

49 (
myEvít
.
	`gë
(
Evít
::
Joy°ickO√Le·
) == 0);

51 
Four
:

52  (
myJack
 =
Le·
Ë? (
myEvít
.
	`gë
(
Evít
::
Joy°ickZîoRight
) == 0) :

53 (
myEvít
.
	`gë
(
Evít
::
Joy°ickO√Right
) == 0);

55 
Six
:

56  (
myJack
 =
Le·
Ë? (
myEvít
.
	`gë
(
Evít
::
Joy°ickZîoFúe
) == 0) :

57 (
myEvít
.
	`gë
(
Evít
::
Joy°ickO√Fúe
) == 0);

60  
åue
;

62 
	}
}

65 
I¡32
 
	gBoo°îGrù
::
	$ªad
(
A«logPö
 
pö
)

70 
pö
)

72 
Five
:

73 if(
myJack
 =
Le·
)

75  (
myEvít
.
	`gë
(
Evít
::
Boo°îGrùZîoBoo°î
) != 0) ?

76 
möimumResi°™˚
 : 
maximumResi°™˚
;

80  (
myEvít
.
	`gë
(
Evít
::
Boo°îGrùO√Boo°î
) != 0) ?

81 
möimumResi°™˚
 : 
maximumResi°™˚
;

84 
Nöe
:

85 if(
myJack
 =
Le·
)

87  (
myEvít
.
	`gë
(
Evít
::
Boo°îGrùZîoTriggî
) != 0) ?

88 
möimumResi°™˚
 : 
maximumResi°™˚
;

92  (
myEvít
.
	`gë
(
Evít
::
Boo°îGrùO√Triggî
) != 0) ?

93 
möimumResi°™˚
 : 
maximumResi°™˚
;

97  
maximumResi°™˚
;

99 
	}
}

102 
	gBoo°îGrù
::
	$wrôe
(
DigôÆPö
, 
boﬁ
)

105 
	}
}

	@emucore/Booster.hxx

19 #i‚de‡
BOOSTERGRIP_HXX


20 
	#BOOSTERGRIP_HXX


	)

22 
	~"b•f.hxx
"

23 
	~"C⁄åﬁ.hxx
"

33 ˛as†
	cBoo°îGrù
 : 
public
 
C⁄åﬁÀr


35 
public
:

42 
Boo°îGrù
(
Jack
 
jack
, c⁄° 
Evít
& 
evít
);

47 
	mvútuÆ
 ~
Boo°îGrù
();

49 
	mpublic
:

56 
vútuÆ
 
boﬁ
 
ªad
(
DigôÆPö
 
pö
);

65 
vútuÆ
 
I¡32
 
ªad
(
A«logPö
 
pö
);

75 
vútuÆ
 
wrôe
(
DigôÆPö
 
pö
, 
boﬁ
 
vÆue
);

	@emucore/Cart.cpp

19 
	~<as£π.h
>

20 
	~<°rög.h
>

22 
	~"b•f.hxx
"

23 
	~"C¨t.hxx
"

24 
	~"C¨t2K.hxx
"

25 
	~"C¨t3E.hxx
"

26 
	~"C¨t3F.hxx
"

27 
	~"C¨t4K.hxx
"

28 
	~"C¨tAR.hxx
"

29 
	~"C¨tDPC.hxx
"

30 
	~"C¨tE0.hxx
"

31 
	~"C¨tE7.hxx
"

32 
	~"C¨tF4.hxx
"

33 
	~"C¨tF4SC.hxx
"

34 
	~"C¨tF6.hxx
"

35 
	~"C¨tF6SC.hxx
"

36 
	~"C¨tF8.hxx
"

37 
	~"C¨tF8SC.hxx
"

38 
	~"C¨tFASC.hxx
"

39 
	~"C¨tFE.hxx
"

40 
	~"C¨tMC.hxx
"

41 
	~"C¨tMB.hxx
"

42 
	~"C¨tCV.hxx
"

43 
	~"C¨tUA.hxx
"

44 
	~"MD5.hxx
"

45 
	~"Pr›s.hxx
"

48 
C¨åidge
* 
	gC¨åidge
::
	$¸óã
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
,

49 c⁄° 
Pr›îtõs
& 
¥›îtõs
)

51 
C¨åidge
* 
ˇπridge
 = 0;

54 
°rög
 
ty≥
 = 
¥›îtõs
.
	`gë
(
C¨åidge_Ty≥
);

57 if(
ty≥
 == "AUTO-DETECT")

58 
ty≥
 = 
	`autodëe˘Ty≥
(
image
, 
size
);

61 if(
ty≥
 == "2K")

62 
ˇπridge
 = 
√w
 
	`C¨åidge2K
(
image
);

63 if(
ty≥
 == "3E")

64 
ˇπridge
 = 
√w
 
	`C¨åidge3E
(
image
, 
size
);

65 if(
ty≥
 == "3F")

66 
ˇπridge
 = 
√w
 
	`C¨åidge3F
(
image
, 
size
);

67 if(
ty≥
 == "4K")

68 
ˇπridge
 = 
√w
 
	`C¨åidge4K
(
image
);

69 if(
ty≥
 == "AR")

70 
ˇπridge
 = 
√w
 
	`C¨åidgeAR
(
image
, 
size
);

71 if(
ty≥
 == "DPC")

72 
ˇπridge
 = 
√w
 
	`C¨åidgeDPC
(
image
, 
size
);

73 if(
ty≥
 == "E0")

74 
ˇπridge
 = 
√w
 
	`C¨åidgeE0
(
image
);

75 if(
ty≥
 == "E7")

76 
ˇπridge
 = 
√w
 
	`C¨åidgeE7
(
image
);

77 if(
ty≥
 == "F4")

78 
ˇπridge
 = 
√w
 
	`C¨åidgeF4
(
image
);

79 if(
ty≥
 == "F4SC")

80 
ˇπridge
 = 
√w
 
	`C¨åidgeF4SC
(
image
);

81 if(
ty≥
 == "F6")

82 
ˇπridge
 = 
√w
 
	`C¨åidgeF6
(
image
);

83 if(
ty≥
 == "F6SC")

84 
ˇπridge
 = 
√w
 
	`C¨åidgeF6SC
(
image
);

85 if(
ty≥
 == "F8")

86 
ˇπridge
 = 
√w
 
	`C¨åidgeF8
(
image
);

87 if(
ty≥
 == "F8SC")

88 
ˇπridge
 = 
√w
 
	`C¨åidgeF8SC
(
image
);

89 if(
ty≥
 == "FASC")

90 
ˇπridge
 = 
√w
 
	`C¨åidgeFASC
(
image
);

91 if(
ty≥
 == "FE")

92 
ˇπridge
 = 
√w
 
	`C¨åidgeFE
(
image
);

93 if(
ty≥
 == "MC")

94 
ˇπridge
 = 
√w
 
	`C¨åidgeMC
(
image
, 
size
);

95 if(
ty≥
 == "MB")

96 
ˇπridge
 = 
√w
 
	`C¨åidgeMB
(
image
);

97 if(
ty≥
 == "CV")

98 
ˇπridge
 = 
√w
 
	`C¨åidgeCV
(
image
, 
size
);

99 if(
ty≥
 == "UA")

100 
ˇπridge
 = 
√w
 
	`C¨åidgeUA
(
image
);

102 
˚º
 << "ERROR: InvÆid c¨åidgêty≥ " << 
ty≥
 << " ..." << 
ídl
;

104  
ˇπridge
;

105 
	}
}

108 
	gC¨åidge
::
	$C¨åidge
()

110 
	`u∆ockB™k
();

111 
	}
}

114 
	gC¨åidge
::~
	$C¨åidge
()

116 
	}
}

119 
°rög
 
C¨åidge
::
	$autodëe˘Ty≥
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
)

122 c⁄° * 
ty≥
 = 0;

124 if((
size
 % 8448) == 0)

126 
ty≥
 = "AR";

128 if((
size
 =2048Ë|| (
	`memcmp
(
image
, image + 2048, 2048) == 0))

130 
ty≥
 = "2K";

132 if((
size
 =4096Ë|| (
	`memcmp
(
image
, image + 4096, 4096) == 0))

134 
ty≥
 = "4K";

136 if((
size
 =8192Ë|| (
	`memcmp
(
image
, image + 8192, 8192) == 0))

138 
ty≥
 = 
	`isProbably3F
(
image
, 
size
) ? "3F" : "F8";

140 if((
size
 == 10495) || (size == 10240))

142 
ty≥
 = "DPC";

144 if(
size
 == 12288)

146 
ty≥
 = "FASC";

148 if(
size
 == 32768)

151 
ty≥
 = "F4SC";

153 
uI¡8
 
fú°
 = 
image
[0];

154 
uI¡32
 
i
 = 0; i < 256; ++i)

156 if(
image
[
i
] !
fú°
)

159 
ty≥
 = 
	`isProbably3F
(
image
, 
size
) ? "3F" : "F4";

164 if(
size
 == 65536)

166 
ty≥
 = 
	`isProbably3F
(
image
, 
size
) ? "3F" : "MB";

168 if(
size
 == 131072)

170 
ty≥
 = 
	`isProbably3F
(
image
, 
size
) ? "3F" : "MC";

175 
ty≥
 = "F6SC";

177 
uI¡8
 
fú°
 = 
image
[0];

178 
uI¡32
 
i
 = 0; i < 256; ++i)

180 if(
image
[
i
] !
fú°
)

183 
ty≥
 = 
	`isProbably3F
(
image
, 
size
) ? "3F" : "F6";

192 if(
ty≥
 ="3F" && 
	`isProbably3E
(
image
, 
size
))

193 
ty≥
 = "3E";

195  
ty≥
;

196 
	}
}

199 
	gC¨åidge
::
	$£¨chF‹Byãs
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
, uI¡8 
byã1
, uI¡8 
byã2
)

201 
uI¡32
 
cou¡
 = 0;

202 
uI¡32
 
i
 = 0; i < 
size
 - 1; ++i)

204 if((
image
[
i
] =
byã1
Ë&& (image[ò+ 1] =
byã2
))

206 ++
cou¡
;

210  
cou¡
;

211 
	}
}

214 
boﬁ
 
	gC¨åidge
::
	$isProbably3F
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
)

216  (
	`£¨chF‹Byãs
(
image
, 
size
, 0x85, 0x3F) > 2);

217 
	}
}

220 
boﬁ
 
	gC¨åidge
::
	$isProbably3E
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
)

222  (
	`£¨chF‹Byãs
(
image
, 
size
, 0x85, 0x3E) > 2);

223 
	}
}

226 
	gC¨åidge
::
	$C¨åidge
(c⁄° 
C¨åidge
&)

228 
	`as£π
(
Ál£
);

229 
	}
}

232 
	gC¨åidge
& C¨åidge::
›î©‹
 = (c⁄° 
C¨åidge
&)

234 
as£π
(
Ál£
);

235  *
	gthis
;

243 
	gC¨åidge
::
	$b™k
(
uI¡16
 
b
)

246 
	}
}

249 
C¨åidge
::
	$b™k
()

252 
	}
}

255 
	gC¨åidge
::
	$b™kCou¡
()

258 
	}
}

261 
boﬁ
 
	gC¨åidge
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

263  
Ál£
;

264 
	}
}

267 
boﬁ
 
	gC¨åidge
::
	$ßve
(
of°ªam
& 
out
)

269 
size
 = -1;

271 
uI¡8
* 
image
 = 
	`gëImage
(
size
);

272 if(
image
 =0 || 
size
 <= 0)

274 
˚º
 << "ßvênŸ suµ‹ãd" << 
ídl
;

275  
Ál£
;

278 
i
=0; i<
size
; i++)

279 
out
 << 
image
[
i
];

281  
åue
;

282 
	}
}

285 
uI¡8
* 
	gC¨åidge
::
	$gëImage
(& 
size
)

287 
size
 = 0;

289 
	}
}

	@emucore/Cart.hxx

19 #i‚de‡
CARTRIDGE_HXX


20 
	#CARTRIDGE_HXX


	)

22 
˛ass
 
	gC¨åidge
;

23 
˛ass
 
	gPr›îtõs
;

24 
˛ass
 
	gSy°em
;

26 
	~<f°ªam
>

27 
	~"b•f.hxx
"

28 
	~"Devi˚.hxx
"

37 ˛as†
	cC¨åidge
 : 
public
 
Devi˚


39 
public
:

49 
C¨åidge
* 
¸óã
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
,

50 c⁄° 
Pr›îtõs
& 
¥›îtõs
);

52 
	mpublic
:

56 
C¨åidge
();

61 
	mvútuÆ
 ~
C¨åidge
();

63 
vútuÆ
 
b™k
(
uI¡16
 
b
);

64 
vútuÆ
 
b™k
();

65 
vútuÆ
 
b™kCou¡
();

66 
vútuÆ
 
boﬁ
 
∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

67 
boﬁ
 
ßve
(
of°ªam
& 
out
);

68 
vútuÆ
 
uI¡8
* 
gëImage
(& 
size
);

69 
	$lockB™k
(Ë{ 
b™kLocked
 = 
åue
; }

70 
	$u∆ockB™k
(Ë{ 
b™kLocked
 = 
Ál£
; 
	}
}

72 
	g¥Ÿe˘ed
:

75 
boﬁ
 
b™kLocked
;

77 
	g¥iv©e
:

86 
°rög
 
autodëe˘Ty≥
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
);

91 
boﬁ
 
isProbably3F
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
);

96 
boﬁ
 
isProbably3E
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
);

101 
£¨chF‹Byãs
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
, uI¡8 
byã1
, uI¡8 
byã2
);

103 
	g¥iv©e
:

105 
C¨åidge
(const Cartridge&);

108 
	gC¨åidge
& 
	g›î©‹
 = (c⁄° 
C¨åidge
&);

	@emucore/Cart2K.cpp

19 
	~<as£π.h
>

20 
	~"C¨t2K.hxx
"

21 
	~"Sy°em.hxx
"

22 
	~"Sîülizî.hxx
"

23 
	~"De£rülizî.hxx
"

24 
	~<io°ªam
>

27 
	gC¨åidge2K
::
	$C¨åidge2K
(c⁄° 
uI¡8
* 
image
)

30 
uI¡32
 
addr
 = 0;áddr < 2048; ++addr)

32 
myImage
[
addr
] = 
image
[addr];

34 
	}
}

37 
	gC¨åidge2K
::~
	$C¨åidge2K
()

39 
	}
}

42 c⁄° * 
C¨åidge2K
::
	$«me
() const

45 
	}
}

48 
	gC¨åidge2K
::
	$ª£t
()

50 
	}
}

53 
C¨åidge2K
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

55 
mySy°em
 = &
sy°em
;

56 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

57 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

60 
	`as£π
((0x1000 & 
mask
) == 0);

62 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

63 
ac˚ss
.
dúe˘PokeBa£
 = 0;

64 
ac˚ss
.
devi˚
 = 
this
;

67 
uI¡32
 
addªss
 = 0x1000;áddªs†< 0x2000;áddªs†+(1 << 
shi·
))

69 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[
addªss
 & 0x07FF];

70 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> mySy°em->
	`∑geShi·
(), 
ac˚ss
);

72 
	}
}

75 
uI¡8
 
	gC¨åidge2K
::
	$≥ek
(
uI¡16
 
addªss
)

77  
myImage
[
addªss
 & 0x07FF];

78 
	}
}

81 
	gC¨åidge2K
::
	$poke
(
uI¡16
, 
uI¡8
)

84 
	}
}

87 
boﬁ
 
	gC¨åidge2K
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

89 
myImage
[
addªss
 & 0x07FF] = 
vÆue
;

90  
åue
;

91 
	}
}

94 
boﬁ
 
	gC¨åidge2K
::
	$ßve
(
Sîülizî
& 
out
)

96 
°rög
 
ˇπ
 = 
	`«me
();

98 
__åy


100 
out
.
	`putSåög
(
ˇπ
);

103 
	`ˇtch
(*
msg
)

105 
˚º
 << 
msg
 << 
ídl
;

106  
Ál£
;

109 
	`__ˇtch
(...)

111 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
ˇπ
 << 
ídl
;

112  
Ál£
;

115  
åue
;

116 
	}
}

119 
boﬁ
 
	gC¨åidge2K
::
	$lﬂd
(
De£rülizî
& 
ö
)

121 
°rög
 
ˇπ
 = 
	`«me
();

123 
__åy


125 if(
ö
.
	`gëSåög
(Ë!
ˇπ
)

126  
Ál£
;

129 
	`ˇtch
(*
msg
)

131 
˚º
 << 
msg
 << 
ídl
;

132  
Ál£
;

135 
	`__ˇtch
(...)

137 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
ˇπ
 << 
ídl
;

138  
Ál£
;

141  
åue
;

142 
	}
}

145 
uI¡8
* 
	gC¨åidge2K
::
	$gëImage
(& 
size
) {

146 
size
 = 2048;

147  &
myImage
[0];

148 
	}
}

	@emucore/Cart2K.hxx

19 #i‚de‡
CARTRIDGE2K_HXX


20 
	#CARTRIDGE2K_HXX


	)

22 
˛ass
 
	gC¨åidge2K
;

23 
˛ass
 
	gSy°em
;

24 
˛ass
 
	gSîülizî
;

25 
˛ass
 
	gDe£rülizî
;

27 
	~"b•f.hxx
"

28 
	~"C¨t.hxx
"

38 ˛as†
	cC¨åidge2K
 : 
public
 
C¨åidge


40 
public
:

46 
C¨åidge2K
(c⁄° 
uI¡8
* 
image
);

51 
	mvútuÆ
 ~
C¨åidge2K
();

53 
	mpublic
:

59 
vútuÆ
 c⁄° * 
	$«me
() const;

64 
vútuÆ
 
	`ª£t
();

72 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

80 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

88 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

90 
vútuÆ
 
uI¡8
* 
	`gëImage
(& 
size
);

92 
public
:

98 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

106 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

108 
boﬁ
 
	`∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

110 
¥iv©e
:

112 
uI¡8
 
myImage
[2048];

	@emucore/Cart3E.cpp

19 
	~<as£π.h
>

20 
	~"C¨t3E.hxx
"

21 
	~"R™dom.hxx
"

22 
	~"Sy°em.hxx
"

23 
	~"TIA.hxx
"

24 
	~"Sîülizî.hxx
"

25 
	~"De£rülizî.hxx
"

26 
	~<io°ªam
>

29 
	gC¨åidge3E
::
	$C¨åidge3E
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
)

30 : 
	$mySize
(
size
)

33 
myImage
 = 
√w
 
uI¡8
[
mySize
];

36 
uI¡32
 
addr
 = 0;ádd∏< 
mySize
; ++addr)

38 
myImage
[
addr
] = 
image
[addr];

42 
˛ass
 
R™dom
 
øndom
;

43 
uI¡32
 
i
 = 0; i < 32768; ++i)

45 
myRam
[
i
] = 
øndom
.
	`√xt
();

47 
	}
}

50 
	gC¨åidge3E
::~
	$C¨åidge3E
()

52 
dñëe
[] 
myImage
;

53 
	}
}

56 c⁄° * 
	gC¨åidge3E
::
	$«me
() const

59 
	}
}

62 
	gC¨åidge3E
::
	$ª£t
()

65 
	`b™k
(0);

66 
	}
}

69 
	gC¨åidge3E
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

71 
mySy°em
 = &
sy°em
;

72 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

73 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

76 
	`as£π
((0x1800 & 
mask
) == 0);

81 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

82 
uI¡32
 
i
 = 0x00; i < 0x40; i +(1 << 
shi·
))

84 
ac˚ss
.
dúe˘PìkBa£
 = 0;

85 
ac˚ss
.
dúe˘PokeBa£
 = 0;

86 
ac˚ss
.
devi˚
 = 
this
;

87 
mySy°em
->
	`£tPageAc˚ss
(
i
 >> 
shi·
, 
ac˚ss
);

91 
uI¡32
 
j
 = 0x1800; j < 0x2000; j +(1 << 
shi·
))

93 
ac˚ss
.
devi˚
 = 
this
;

94 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[(
mySize
 - 2048Ë+ (
j
 & 0x07FF)];

95 
ac˚ss
.
dúe˘PokeBa£
 = 0;

96 
mySy°em
->
	`£tPageAc˚ss
(
j
 >> 
shi·
, 
ac˚ss
);

100 
	`b™k
(0);

101 
	}
}

104 
uI¡8
 
	gC¨åidge3E
::
	$≥ek
(
uI¡16
 
addªss
)

106 
addªss
 =áddress & 0x0FFF;

108 if(
addªss
 < 0x0800)

110 if(
myCuºítB™k
 < 256)

111  
myImage
[(
addªss
 & 0x07FFË+ 
myCuºítB™k
 * 2048];

113  
myRam
[(
addªss
 & 0x03FFË+ (
myCuºítB™k
 - 256) * 1024];

117  
myImage
[(
addªss
 & 0x07FFË+ 
mySize
 - 2048];

119 
	}
}

122 
	gC¨åidge3E
::
	$poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

124 
addªss
 =áddress & 0x0FFF;

128 if(
addªss
 == 0x003F)

130 
	`b™k
(
vÆue
);

132 if(
addªss
 == 0x003E)

134 
	`b™k
(
vÆue
 + 256);

141 
mySy°em
->
	`tü
().
	`poke
(
addªss
, 
vÆue
);

142 
	}
}

145 
boﬁ
 
	gC¨åidge3E
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

147 
addªss
 =áddress & 0x0FFF;

148 if(
addªss
 < 0x0800)

150 if(
myCuºítB™k
 < 256)

151 
myImage
[(
addªss
 & 0x07FFË+ 
myCuºítB™k
 * 2048] = 
vÆue
;

153 
myRam
[(
addªss
 & 0x03FFË+ (
myCuºítB™k
 - 256Ë* 1024] = 
vÆue
;

157 
myImage
[(
addªss
 & 0x07FFË+ 
mySize
 - 2048] = 
vÆue
;

159  
åue
;

160 
	}
}

163 
	gC¨åidge3E
::
	$b™k
(
uI¡16
 
b™k
)

165 if(
b™kLocked
) ;

167 if(
b™k
 < 256)

170 if((
uI¡32
)
b™k
 * 2048 < 
mySize
)

172 
myCuºítB™k
 = 
b™k
;

178 
myCuºítB™k
 = 
b™k
 % (
mySize
 / 2048);

181 
uI¡32
 
off£t
 = 
myCuºítB™k
 * 2048;

182 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

185 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

186 
ac˚ss
.
devi˚
 = 
this
;

187 
ac˚ss
.
dúe˘PokeBa£
 = 0;

190 
uI¡32
 
addªss
 = 0x1000;áddªs†< 0x1800;áddªs†+(1 << 
shi·
))

192 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[
off£t
 + (
addªss
 & 0x07FF)];

193 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> 
shi·
, 
ac˚ss
);

198 
b™k
 -= 256;

199 
b™k
 %= 32;

200 
myCuºítB™k
 = 
b™k
 + 256;

202 
uI¡32
 
off£t
 = 
b™k
 * 1024;

203 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

204 
uI¡32
 
addªss
;

207 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

208 
ac˚ss
.
devi˚
 = 
this
;

209 
ac˚ss
.
dúe˘PokeBa£
 = 0;

212 
addªss
 = 0x1000;áddªs†< 0x1400;áddªs†+(1 << 
shi·
))

214 
ac˚ss
.
dúe˘PìkBa£
 = &
myRam
[
off£t
 + (
addªss
 & 0x03FF)];

215 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> 
shi·
, 
ac˚ss
);

218 
ac˚ss
.
dúe˘PìkBa£
 = 0;

221 
addªss
 = 0x1400;áddªs†< 0x1800;áddªs†+(1 << 
shi·
))

223 
ac˚ss
.
dúe˘PokeBa£
 = &
myRam
[
off£t
 + (
addªss
 & 0x03FF)];

224 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> 
shi·
, 
ac˚ss
);

227 
	}
}

230 
	gC¨åidge3E
::
	$b™k
() {

231  
myCuºítB™k
;

232 
	}
}

235 
	gC¨åidge3E
::
	$b™kCou¡
() {

236  
mySize
/2048;

237 
	}
}

241 
boﬁ
 
	gC¨åidge3E
::
	$ßve
(
Sîülizî
& 
out
)

243 
°rög
 
ˇπ
 = 
	`«me
();

245 
__åy


247 
out
.
	`putSåög
(
ˇπ
);

248 
out
.
	`putI¡
(
myCuºítB™k
);

251 
out
.
	`putI¡
(32768);

252 
uI¡32
 
addr
 = 0;áddr < 32768; ++addr)

253 
out
.
	`putI¡
(
myRam
[
addr
]);

256 
	`ˇtch
(*
msg
)

258 
˚º
 << 
msg
 << 
ídl
;

259  
Ál£
;

262 
	`__ˇtch
(...)

264 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
ˇπ
 << 
ídl
;

265  
Ál£
;

268  
åue
;

269 
	}
}

272 
boﬁ
 
	gC¨åidge3E
::
	$lﬂd
(
De£rülizî
& 
ö
)

274 
°rög
 
ˇπ
 = 
	`«me
();

276 
__åy


278 if(
ö
.
	`gëSåög
(Ë!
ˇπ
)

279  
Ál£
;

281 
myCuºítB™k
 = (
uI¡16
Ë
ö
.
	`gëI¡
();

284 
uI¡32
 
limô
 = (uI¡32Ë
ö
.
	`gëI¡
();

285 
uI¡32
 
addr
 = 0;ádd∏< 
limô
; ++addr)

286 
myRam
[
addr
] = (
uI¡8
Ë
ö
.
	`gëI¡
();

289 
	`ˇtch
(*
msg
)

291 
˚º
 << 
msg
 << 
ídl
;

292  
Ál£
;

295 
	`__ˇtch
(...)

297 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
ˇπ
 << 
ídl
;

298  
Ál£
;

302 
	`b™k
(
myCuºítB™k
);

304  
åue
;

305 
	}
}

308 
uI¡8
* 
	gC¨åidge3E
::
	$gëImage
(& 
size
) {

309 
size
 = 
mySize
;

310  &
myImage
[0];

311 
	}
}

	@emucore/Cart3E.hxx

19 #i‚de‡
CARTRIDGE3E_HXX


20 
	#CARTRIDGE3E_HXX


	)

22 
˛ass
 
	gC¨åidge3E
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

27 
	~"C¨t.hxx
"

65 ˛as†
	cC¨åidge3E
 : 
public
 
C¨åidge


67 
public
:

74 
C¨åidge3E
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
);

79 
	mvútuÆ
 ~
C¨åidge3E
();

81 
	mpublic
:

87 
vútuÆ
 c⁄° * 
	$«me
() const;

92 
vútuÆ
 
	`ª£t
();

100 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

108 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

116 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

118 
vútuÆ
 
uI¡8
* 
	`gëImage
(& 
size
);

120 
public
:

126 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

134 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

136 
boﬁ
 
	`∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

143 
	`b™k
(
uI¡16
 
b™k
);

145 
	`b™k
();

146 
	`b™kCou¡
();

148 
¥iv©e
:

150 
uI¡16
 
myCuºítB™k
;

153 
uI¡8
* 
myImage
;

156 
uI¡8
 
myRam
[32768];

159 
uI¡32
 
mySize
;

	@emucore/Cart3F.cpp

19 
	~<as£π.h
>

20 
	~"C¨t3F.hxx
"

21 
	~"Sy°em.hxx
"

22 
	~"TIA.hxx
"

23 
	~"Sîülizî.hxx
"

24 
	~"De£rülizî.hxx
"

25 
	~<io°ªam
>

28 
	gC¨åidge3F
::
	$C¨åidge3F
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
)

29 : 
	$mySize
(
size
)

32 
myImage
 = 
√w
 
uI¡8
[
mySize
];

35 
uI¡32
 
addr
 = 0;ádd∏< 
mySize
; ++addr)

37 
myImage
[
addr
] = 
image
[addr];

39 
	}
}

42 
	gC¨åidge3F
::~
	$C¨åidge3F
()

44 
dñëe
[] 
myImage
;

45 
	}
}

48 c⁄° * 
	gC¨åidge3F
::
	$«me
() const

51 
	}
}

54 
	gC¨åidge3F
::
	$ª£t
()

57 
	`b™k
(0);

58 
	}
}

61 
	gC¨åidge3F
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

63 
mySy°em
 = &
sy°em
;

64 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

65 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

68 
	`as£π
((0x1800 & 
mask
) == 0);

74 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

75 
uI¡32
 
i
 = 0x00; i < 0x40; i +(1 << 
shi·
))

77 
ac˚ss
.
dúe˘PìkBa£
 = 0;

78 
ac˚ss
.
dúe˘PokeBa£
 = 0;

79 
ac˚ss
.
devi˚
 = 
this
;

80 
mySy°em
->
	`£tPageAc˚ss
(
i
 >> 
shi·
, 
ac˚ss
);

84 
uI¡32
 
j
 = 0x1800; j < 0x2000; j +(1 << 
shi·
))

86 
ac˚ss
.
devi˚
 = 
this
;

87 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[(
mySize
 - 2048Ë+ (
j
 & 0x07FF)];

88 
ac˚ss
.
dúe˘PokeBa£
 = 0;

89 
mySy°em
->
	`£tPageAc˚ss
(
j
 >> 
shi·
, 
ac˚ss
);

93 
	`b™k
(0);

94 
	}
}

97 
uI¡8
 
	gC¨åidge3F
::
	$≥ek
(
uI¡16
 
addªss
)

99 
addªss
 =áddress & 0x0FFF;

101 if(
addªss
 < 0x0800)

103  
myImage
[(
addªss
 & 0x07FFË+ 
myCuºítB™k
 * 2048];

107  
myImage
[(
addªss
 & 0x07FFË+ 
mySize
 - 2048];

109 
	}
}

112 
	gC¨åidge3F
::
	$poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

114 
addªss
 =áddress & 0x0FFF;

117 if(
addªss
 <= 0x003F)

119 
	`b™k
(
vÆue
);

122 
mySy°em
->
	`tü
().
	`poke
(
addªss
, 
vÆue
);

123 
	}
}

126 
boﬁ
 
	gC¨åidge3F
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

128 
addªss
 =áddress & 0x0FFF;

129 if(
addªss
 < 0x0800)

131 
myImage
[(
addªss
 & 0x07FFË+ 
myCuºítB™k
 * 2048] = 
vÆue
;

135 
myImage
[(
addªss
 & 0x07FFË+ 
mySize
 - 2048] = 
vÆue
;

137  
åue
;

138 
	}
}

141 
	gC¨åidge3F
::
	$b™k
(
uI¡16
 
b™k
)

143 if(
b™kLocked
) ;

146 if((
uI¡32
)
b™k
 * 2048 < 
mySize
)

148 
myCuºítB™k
 = 
b™k
;

154 
myCuºítB™k
 = 
b™k
 % (
mySize
 / 2048);

157 
uI¡32
 
off£t
 = 
myCuºítB™k
 * 2048;

158 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

161 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

162 
ac˚ss
.
devi˚
 = 
this
;

163 
ac˚ss
.
dúe˘PokeBa£
 = 0;

166 
uI¡32
 
addªss
 = 0x1000;áddªs†< 0x1800;áddªs†+(1 << 
shi·
))

168 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[
off£t
 + (
addªss
 & 0x07FF)];

169 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> 
shi·
, 
ac˚ss
);

171 
	}
}

174 
	gC¨åidge3F
::
	$b™k
() {

175  
myCuºítB™k
;

176 
	}
}

179 
	gC¨åidge3F
::
	$b™kCou¡
() {

180  
mySize
/2048;

181 
	}
}

185 
boﬁ
 
	gC¨åidge3F
::
	$ßve
(
Sîülizî
& 
out
)

187 
°rög
 
ˇπ
 = 
	`«me
();

189 
__åy


191 
out
.
	`putSåög
(
ˇπ
);

192 
out
.
	`putI¡
(
myCuºítB™k
);

195 
	`ˇtch
(*
msg
)

197 
˚º
 << 
msg
 << 
ídl
;

198  
Ál£
;

201 
	`__ˇtch
(...)

203 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
ˇπ
 << 
ídl
;

204  
Ál£
;

207  
åue
;

208 
	}
}

211 
boﬁ
 
	gC¨åidge3F
::
	$lﬂd
(
De£rülizî
& 
ö
)

213 
°rög
 
ˇπ
 = 
	`«me
();

215 
__åy


217 if(
ö
.
	`gëSåög
(Ë!
ˇπ
)

218  
Ál£
;

220 
myCuºítB™k
 = (
uI¡16
Ë
ö
.
	`gëI¡
();

223 
	`ˇtch
(*
msg
)

225 
˚º
 << 
msg
 << 
ídl
;

226  
Ál£
;

229 
	`__ˇtch
(...)

231 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
ˇπ
 << 
ídl
;

232  
Ál£
;

236 
	`b™k
(
myCuºítB™k
);

238  
åue
;

239 
	}
}

242 
uI¡8
* 
	gC¨åidge3F
::
	$gëImage
(& 
size
) {

243 
size
 = 
mySize
;

244  &
myImage
[0];

245 
	}
}

	@emucore/Cart3F.hxx

19 #i‚de‡
CARTRIDGE3F_HXX


20 
	#CARTRIDGE3F_HXX


	)

22 
˛ass
 
	gC¨åidge3F
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

27 
	~"C¨t.hxx
"

42 ˛as†
	cC¨åidge3F
 : 
public
 
C¨åidge


44 
public
:

51 
C¨åidge3F
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
);

56 
	mvútuÆ
 ~
C¨åidge3F
();

58 
	mpublic
:

64 
vútuÆ
 c⁄° * 
	$«me
() const;

69 
vútuÆ
 
	`ª£t
();

77 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

85 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

93 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

95 
public
:

101 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

109 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

111 
boﬁ
 
	`∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

118 
	`b™k
(
uI¡16
 
b™k
);

120 
	`b™k
();

121 
	`b™kCou¡
();

123 
vútuÆ
 
uI¡8
* 
	`gëImage
(& 
size
);

125 
¥iv©e
:

127 
uI¡16
 
myCuºítB™k
;

130 
uI¡8
* 
myImage
;

133 
uI¡32
 
mySize
;

	@emucore/Cart4K.cpp

19 
	~<as£π.h
>

20 
	~"C¨t4K.hxx
"

21 
	~"Sy°em.hxx
"

22 
	~"Sîülizî.hxx
"

23 
	~"De£rülizî.hxx
"

24 
	~<io°ªam
>

27 
	gC¨åidge4K
::
	$C¨åidge4K
(c⁄° 
uI¡8
* 
image
)

30 
uI¡32
 
addr
 = 0;áddr < 4096; ++addr)

32 
myImage
[
addr
] = 
image
[addr];

34 
	}
}

37 
	gC¨åidge4K
::~
	$C¨åidge4K
()

39 
	}
}

42 c⁄° * 
C¨åidge4K
::
	$«me
() const

45 
	}
}

48 
	gC¨åidge4K
::
	$ª£t
()

50 
	}
}

53 
C¨åidge4K
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

55 
mySy°em
 = &
sy°em
;

56 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

57 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

60 
	`as£π
((0x1000 & 
mask
) == 0);

62 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

63 
ac˚ss
.
dúe˘PokeBa£
 = 0;

64 
ac˚ss
.
devi˚
 = 
this
;

67 
uI¡32
 
addªss
 = 0x1000;áddªs†< 0x2000;áddªs†+(1 << 
shi·
))

69 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[
addªss
 & 0x0FFF];

70 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> mySy°em->
	`∑geShi·
(), 
ac˚ss
);

72 
	}
}

75 
uI¡8
 
	gC¨åidge4K
::
	$≥ek
(
uI¡16
 
addªss
)

77  
myImage
[
addªss
 & 0x0FFF];

78 
	}
}

81 
	gC¨åidge4K
::
	$poke
(
uI¡16
, 
uI¡8
)

84 
	}
}

87 
boﬁ
 
	gC¨åidge4K
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

89 
myImage
[
addªss
 & 0x0FFF] = 
vÆue
;

90  
åue
;

91 
	}
}

94 
boﬁ
 
	gC¨åidge4K
::
	$ßve
(
Sîülizî
& 
out
)

96 
°rög
 
ˇπ
 = 
	`«me
();

98 
__åy


100 
out
.
	`putSåög
(
ˇπ
);

103 
	`ˇtch
(*
msg
)

105 
˚º
 << 
msg
 << 
ídl
;

106  
Ál£
;

109 
	`__ˇtch
(...)

111 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
ˇπ
 << 
ídl
;

112  
Ál£
;

115  
åue
;

116 
	}
}

119 
boﬁ
 
	gC¨åidge4K
::
	$lﬂd
(
De£rülizî
& 
ö
)

121 
°rög
 
ˇπ
 = 
	`«me
();

123 
__åy


125 if(
ö
.
	`gëSåög
(Ë!
ˇπ
)

126  
Ál£
;

129 
	`ˇtch
(*
msg
)

131 
˚º
 << 
msg
 << 
ídl
;

132  
Ál£
;

135 
	`__ˇtch
(...)

137 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
ˇπ
 << 
ídl
;

138  
Ál£
;

141  
åue
;

142 
	}
}

145 
uI¡8
* 
	gC¨åidge4K
::
	$gëImage
(& 
size
) {

146 
size
 = 4096;

147  &
myImage
[0];

148 
	}
}

	@emucore/Cart4K.hxx

19 #i‚de‡
CARTRIDGE4K_HXX


20 
	#CARTRIDGE4K_HXX


	)

22 
˛ass
 
	gC¨åidge4K
;

23 
˛ass
 
	gSy°em
;

24 
˛ass
 
	gSîülizî
;

25 
˛ass
 
	gDe£rülizî
;

27 
	~"b•f.hxx
"

28 
	~"C¨t.hxx
"

37 ˛as†
	cC¨åidge4K
 : 
public
 
C¨åidge


39 
public
:

45 
C¨åidge4K
(c⁄° 
uI¡8
* 
image
);

50 
	mvútuÆ
 ~
C¨åidge4K
();

52 
	mpublic
:

58 
vútuÆ
 c⁄° * 
	$«me
() const;

63 
vútuÆ
 
	`ª£t
();

71 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

79 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

87 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

89 
vútuÆ
 
uI¡8
* 
	`gëImage
(& 
size
);

91 
public
:

97 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

105 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

107 
boﬁ
 
	`∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

109 
¥iv©e
:

111 
uI¡8
 
myImage
[4096];

	@emucore/CartAR.cpp

19 
	~<as£π.h
>

20 
	~<°rög.h
>

21 
	~"C¨tAR.hxx
"

22 
	~"M6502Hi.hxx
"

23 
	~"R™dom.hxx
"

24 
	~"Sy°em.hxx
"

25 
	~"Sîülizî.hxx
"

26 
	~"De£rülizî.hxx
"

27 
	~<io°ªam
>

30 
	gC¨åidgeAR
::
	$C¨åidgeAR
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
)

31 : 
	$my6502
(0)

33 
uI¡32
 
i
;

36 
myLﬂdImages
 = 
√w
 
uI¡8
[
size
];

37 
myNumbîOfLﬂdImages
 = 
size
 / 8448;

38 
	`mem˝y
(
myLﬂdImages
, 
image
, 
size
);

41 
˛ass
 
R™dom
 
øndom
;

42 
i
 = 0; i < 6 * 1024; ++i)

44 
myImage
[
i
] = 
øndom
.
	`√xt
();

48 
	`öôülizeROM
();

49 
	}
}

52 
	gC¨åidgeAR
::~
	$C¨åidgeAR
()

54 
dñëe
[] 
myLﬂdImages
;

55 
	}
}

58 c⁄° * 
	gC¨åidgeAR
::
	$«me
() const

61 
	}
}

64 
	gC¨åidgeAR
::
	$ª£t
()

66 
myPowî
 = 
åue
;

67 
myPowîRomCy˛e
 = 
mySy°em
->
	`cy˛es
();

68 
myWrôeE«bÀd
 = 
Ál£
;

70 
myD©aHﬁdRegi°î
 = 0;

71 
myNumbîOfDi°ö˘Ac˚s£s
 = 0;

72 
myWrôePídög
 = 
Ál£
;

75 
	`b™kC⁄figuøti⁄
(0);

76 
	}
}

79 
	gC¨åidgeAR
::
	$sy°emCy˛esRe£t
()

82 
uI¡32
 
cy˛es
 = 
mySy°em
->
	`cy˛es
();

85 
myPowîRomCy˛e
 -
cy˛es
;

86 
	}
}

89 
	gC¨åidgeAR
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

91 
mySy°em
 = &
sy°em
;

92 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

93 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

95 
my6502
 = &(
M6502High
&)
mySy°em
->
	`m6502
();

98 
	`as£π
((0x1000 & 
mask
) == 0);

100 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

101 
uI¡32
 
i
 = 0x1000; i < 0x2000; i +(1 << 
shi·
))

103 
ac˚ss
.
dúe˘PìkBa£
 = 0;

104 
ac˚ss
.
dúe˘PokeBa£
 = 0;

105 
ac˚ss
.
devi˚
 = 
this
;

106 
mySy°em
->
	`£tPageAc˚ss
(
i
 >> 
shi·
, 
ac˚ss
);

109 
	`b™kC⁄figuøti⁄
(0);

110 
	}
}

113 
uI¡8
 
	gC¨åidgeAR
::
	$≥ek
(
uI¡16
 
addr
)

116 if(((
addr
 & 0x1FFFË=0x1850Ë&& (
myImageOff£t
[1] == (3 * 2048)))

119 
uI¡8
 
lﬂd
 = 
mySy°em
->
	`≥ek
(0x0080);

122 
	`lﬂdI¡oRAM
(
lﬂd
);

124  
myImage
[(
addr
 & 0x07FFË+ 
myImageOff£t
[1]];

129 if(
myWrôePídög
 &&

130 (
my6502
->
	`di°ö˘Ac˚s£s
(Ë> 
myNumbîOfDi°ö˘Ac˚s£s
 + 5))

132 
myWrôePídög
 = 
Ál£
;

136 if(!(
addr
 & 0x0F00Ë&& (!
myWrôeE«bÀd
 || !
myWrôePídög
))

138 
myD©aHﬁdRegi°î
 = 
addr
;

139 
myNumbîOfDi°ö˘Ac˚s£s
 = 
my6502
->
	`di°ö˘Ac˚s£s
();

140 
myWrôePídög
 = 
åue
;

143 if((
addr
 & 0x1FFF) == 0x1FF8)

146 
myWrôePídög
 = 
Ál£
;

147 
	`b™kC⁄figuøti⁄
(
myD©aHﬁdRegi°î
);

150 if(
myWrôeE«bÀd
 && 
myWrôePídög
 &&

151 (
my6502
->
	`di°ö˘Ac˚s£s
(Ë=(
myNumbîOfDi°ö˘Ac˚s£s
 + 5)))

153 if((
addr
 & 0x0800) == 0)

154 
myImage
[(
addr
 & 0x07FFË+ 
myImageOff£t
[0]] = 
myD©aHﬁdRegi°î
;

155 if(
myImageOff£t
[1] != 3 * 2048)

156 
myImage
[(
addr
 & 0x07FFË+ 
myImageOff£t
[1]] = 
myD©aHﬁdRegi°î
;

157 
myWrôePídög
 = 
Ál£
;

160  
myImage
[(
addr
 & 0x07FFË+ 
myImageOff£t
[(addr & 0x0800) ? 1 : 0]];

161 
	}
}

164 
	gC¨åidgeAR
::
	$poke
(
uI¡16
 
addr
, 
uI¡8
)

168 if(
myWrôePídög
 &&

169 (
my6502
->
	`di°ö˘Ac˚s£s
(Ë> 
myNumbîOfDi°ö˘Ac˚s£s
 + 5))

171 
myWrôePídög
 = 
Ál£
;

175 if(!(
addr
 & 0x0F00Ë&& (!
myWrôeE«bÀd
 || !
myWrôePídög
))

177 
myD©aHﬁdRegi°î
 = 
addr
;

178 
myNumbîOfDi°ö˘Ac˚s£s
 = 
my6502
->
	`di°ö˘Ac˚s£s
();

179 
myWrôePídög
 = 
åue
;

182 if((
addr
 & 0x1FFF) == 0x1FF8)

185 
myWrôePídög
 = 
Ál£
;

186 
	`b™kC⁄figuøti⁄
(
myD©aHﬁdRegi°î
);

189 if(
myWrôeE«bÀd
 && 
myWrôePídög
 &&

190 (
my6502
->
	`di°ö˘Ac˚s£s
(Ë=(
myNumbîOfDi°ö˘Ac˚s£s
 + 5)))

192 if((
addr
 & 0x0800) == 0)

193 
myImage
[(
addr
 & 0x07FFË+ 
myImageOff£t
[0]] = 
myD©aHﬁdRegi°î
;

194 if(
myImageOff£t
[1] != 3 * 2048)

195 
myImage
[(
addr
 & 0x07FFË+ 
myImageOff£t
[1]] = 
myD©aHﬁdRegi°î
;

196 
myWrôePídög
 = 
Ál£
;

198 
	}
}

201 
boﬁ
 
	gC¨åidgeAR
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

204  
Ál£
;

205 
	}
}

208 
	gC¨åidgeAR
::
	$b™kC⁄figuøti⁄
(
uI¡8
 
c⁄figuøti⁄
)

228 
myCuºítB™k
 = 
c⁄figuøti⁄
 & 0x1f;

231 
myPowî
 = !(
c⁄figuøti⁄
 & 0x01);

233 if(
myPowî
)

235 
myPowîRomCy˛e
 = 
mySy°em
->
	`cy˛es
();

238 
myWrôeE«bÀd
 = 
c⁄figuøti⁄
 & 0x02;

240 (
c⁄figuøti⁄
 >> 2) & 0x07)

244 
myImageOff£t
[0] = 2 * 2048;

245 
myImageOff£t
[1] = 3 * 2048;

251 
myImageOff£t
[0] = 0 * 2048;

252 
myImageOff£t
[1] = 3 * 2048;

258 
myImageOff£t
[0] = 2 * 2048;

259 
myImageOff£t
[1] = 0 * 2048;

265 
myImageOff£t
[0] = 0 * 2048;

266 
myImageOff£t
[1] = 2 * 2048;

272 
myImageOff£t
[0] = 2 * 2048;

273 
myImageOff£t
[1] = 3 * 2048;

279 
myImageOff£t
[0] = 1 * 2048;

280 
myImageOff£t
[1] = 3 * 2048;

286 
myImageOff£t
[0] = 2 * 2048;

287 
myImageOff£t
[1] = 1 * 2048;

293 
myImageOff£t
[0] = 1 * 2048;

294 
myImageOff£t
[1] = 2 * 2048;

298 
	}
}

301 
	gC¨åidgeAR
::
	$b™k
(
uI¡16
 
b
)

303 if(
b™kLocked
)

306 
	`b™kC⁄figuøti⁄
(
b
);

307 
	}
}

310 
	gC¨åidgeAR
::
	$b™k
()

312  
myCuºítB™k
;

313 
	}
}

316 
	gC¨åidgeAR
::
	$b™kCou¡
()

319 
	}
}

322 
	gC¨åidgeAR
::
	$öôülizeROM
()

324 
uI¡8
 
dummyROMCode
[] = {

364 
uI¡32
 
size
 = (
dummyROMCode
);

367 
uI¡32
 
i
 = 0; i < 2048; ++i)

369 
myImage
[3 * 2048 + 
i
] = 0x02;

373 
uI¡32
 
j
 = 0; j < 
size
; ++j)

375 
myImage
[3 * 2048 + 
j
] = 
dummyROMCode
[j];

379 
myImage
[3 * 2048 + 2044] = 0x0A;

380 
myImage
[3 * 2048 + 2045] = 0xF8;

381 
myImage
[3 * 2048 + 2046] = 0x0A;

382 
myImage
[3 * 2048 + 2047] = 0xF8;

383 
	}
}

386 
uI¡8
 
	gC¨åidgeAR
::
	$checksum
(
uI¡8
* 
s
, 
uI¡16
 
Àngth
)

388 
uI¡8
 
sum
 = 0;

390 
uI¡32
 
i
 = 0; i < 
Àngth
; ++i)

392 
sum
 +
s
[
i
];

395  
sum
;

396 
	}
}

399 
	gC¨åidgeAR
::
	$lﬂdI¡oRAM
(
uI¡8
 
lﬂd
)

401 
uI¡16
 
image
;

404 
image
 = 0; imagê< 
myNumbîOfLﬂdImages
; ++image)

407 if(
myLﬂdImages
[(
image
 * 8448Ë+ 8192 + 5] =
lﬂd
)

410 
	`mem˝y
(
myHódî
, 
myLﬂdImages
 + (
image
 * 8448) + 8192, 256);

413 if(
	`checksum
(
myHódî
, 8) != 0x55)

415 
˚º
 << "WARNING: The Supercharger header checksum is invalid...\n";

419 
boﬁ
 
övÆidPageChecksumSìn
 = 
Ál£
;

420 
uI¡32
 
j
 = 0; j < 
myHódî
[3]; ++j)

422 
uI¡32
 
b™k
 = 
myHódî
[16 + 
j
] & 0x03;

423 
uI¡32
 
∑ge
 = (
myHódî
[16 + 
j
] >> 2) & 0x07;

424 
uI¡8
* 
§c
 = 
myLﬂdImages
 + (
image
 * 8448Ë+ (
j
 * 256);

425 
uI¡8
 
sum
 = 
	`checksum
(
§c
, 256Ë+ 
myHódî
[16 + 
j
] + myHeader[64 + j];

427 if(!
övÆidPageChecksumSìn
 && (
sum
 != 0x55))

429 
˚º
 << "WARNING: Some SuperchargerÖage checksumsáre invalid...\n";

430 
övÆidPageChecksumSìn
 = 
åue
;

434 if(
b™k
 < 3)

436 
	`mem˝y
(
myImage
 + (
b™k
 * 2048Ë+ (
∑ge
 * 256), 
§c
, 256);

442 
mySy°em
->
	`poke
(0x„, 
myHódî
[0]);

443 
mySy°em
->
	`poke
(0xff, 
myHódî
[1]);

444 
mySy°em
->
	`poke
(0x80, 
myHódî
[2]);

452 
˚º
 << "ERROR: SuperchargerÜoad is missing from ROM image...\n";

453 
	}
}

456 
boﬁ
 
	gC¨åidgeAR
::
	$ßve
(
Sîülizî
& 
out
)

458 
°rög
 
ˇπ
 = 
	`«me
();

460 
__åy


462 
uI¡32
 
i
;

464 
out
.
	`putSåög
(
ˇπ
);

467 
out
.
	`putI¡
(2);

468 
i
 = 0; i < 2; ++i)

469 
out
.
	`putI¡
(
myImageOff£t
[
i
]);

472 
out
.
	`putI¡
(8192);

473 
i
 = 0; i < 8192; ++i)

474 
out
.
	`putI¡
(
myImage
[
i
]);

477 
out
.
	`putI¡
(256);

478 
i
 = 0; i < 256; ++i)

479 
out
.
	`putI¡
(
myHódî
[
i
]);

483 
out
.
	`putI¡
(
myNumbîOfLﬂdImages
 * 8448);

484 
i
 = 0; i < (
uI¡32
Ë
myNumbîOfLﬂdImages
 * 8448; ++i)

485 
out
.
	`putI¡
(
myLﬂdImages
[
i
]);

488 
out
.
	`putI¡
(
myNumbîOfLﬂdImages
);

491 
out
.
	`putBoﬁ
(
myWrôeE«bÀd
);

494 
out
.
	`putBoﬁ
(
myPowî
);

497 
out
.
	`putI¡
(
myPowîRomCy˛e
);

500 
out
.
	`putI¡
(
myD©aHﬁdRegi°î
);

503 
out
.
	`putI¡
(
myNumbîOfDi°ö˘Ac˚s£s
);

506 
out
.
	`putBoﬁ
(
myWrôePídög
);

509 
	`ˇtch
(*
msg
)

511 
˚º
 << 
msg
 << 
ídl
;

512  
Ál£
;

515 
	`__ˇtch
(...)

517 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
ˇπ
 << 
ídl
;

518  
Ál£
;

521  
åue
;

522 
	}
}

525 
boﬁ
 
	gC¨åidgeAR
::
	$lﬂd
(
De£rülizî
& 
ö
)

527 
°rög
 
ˇπ
 = 
	`«me
();

529 
__åy


531 if(
ö
.
	`gëSåög
(Ë!
ˇπ
)

532  
Ál£
;

534 
uI¡32
 
i
, 
limô
;

537 
limô
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

538 
i
 = 0; i < 
limô
; ++i)

539 
myImageOff£t
[
i
] = (
uI¡32
Ë
ö
.
	`gëI¡
();

542 
limô
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

543 
i
 = 0; i < 
limô
; ++i)

544 
myImage
[
i
] = (
uI¡8
Ë
ö
.
	`gëI¡
();

547 
limô
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

548 
i
 = 0; i < 
limô
; ++i)

549 
myHódî
[
i
] = (
uI¡8
Ë
ö
.
	`gëI¡
();

553 
limô
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

554 
i
 = 0; i < 
limô
; ++i)

555 
myLﬂdImages
[
i
] = (
uI¡8
Ë
ö
.
	`gëI¡
();

558 
myNumbîOfLﬂdImages
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

561 
myWrôeE«bÀd
 = 
ö
.
	`gëBoﬁ
();

564 
myPowî
 = 
ö
.
	`gëBoﬁ
();

567 
myPowîRomCy˛e
 = (
I¡32
Ë
ö
.
	`gëI¡
();

570 
myD©aHﬁdRegi°î
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

573 
myNumbîOfDi°ö˘Ac˚s£s
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

576 
myWrôePídög
 = 
ö
.
	`gëBoﬁ
();

579 
	`ˇtch
(*
msg
)

581 
˚º
 << 
msg
 << 
ídl
;

582  
Ál£
;

585 
	`__ˇtch
(...)

587 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
ˇπ
 << 
ídl
;

588  
Ál£
;

591  
åue
;

592 
	}
}

595 
uI¡8
* 
	gC¨åidgeAR
::
	$gëImage
(& 
size
)

597 
size
 = 
myNumbîOfLﬂdImages
 * 8448;

598  &
myLﬂdImages
[0];

599 
	}
}

	@emucore/CartAR.hxx

19 #i‚de‡
CARTRIDGEAR_HXX


20 
	#CARTRIDGEAR_HXX


	)

22 
˛ass
 
	gC¨åidgeAR
;

23 
˛ass
 
	gM6502High
;

24 
˛ass
 
	gSîülizî
;

25 
˛ass
 
	gDe£rülizî
;

27 
	~"b•f.hxx
"

28 
	~"C¨t.hxx
"

42 ˛as†
	cC¨åidgeAR
 : 
public
 
C¨åidge


44 
public
:

51 
C¨åidgeAR
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
);

56 
	mvútuÆ
 ~
C¨åidgeAR
();

58 
	mpublic
:

64 
vútuÆ
 c⁄° * 
	$«me
() const;

69 
vútuÆ
 
	`ª£t
();

76 
vútuÆ
 
	`sy°emCy˛esRe£t
();

84 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

92 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

100 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

102 
public
:

108 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

116 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

118 
boﬁ
 
	`∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

125 
	`b™k
(
uI¡16
 
b™k
);

127 
	`b™k
();

128 
	`b™kCou¡
();

130 
vútuÆ
 
uI¡8
* 
	`gëImage
(& 
size
);

132 
¥iv©e
:

134 
	`b™kC⁄figuøti⁄
(
uI¡8
 
c⁄figuøti⁄
);

137 
uI¡8
 
	`checksum
(uI¡8* 
s
, 
uI¡16
 
Àngth
);

140 
	`lﬂdI¡oRAM
(
uI¡8
 
lﬂd
);

143 
	`öôülizeROM
();

145 
¥iv©e
:

147 
M6502High
* 
my6502
;

150 
uI¡32
 
myImageOff£t
[2];

153 
uI¡8
 
myImage
[8192];

156 
uI¡8
 
myHódî
[256];

159 
uI¡8
* 
myLﬂdImages
;

162 
uI¡8
 
myNumbîOfLﬂdImages
;

165 
boﬁ
 
myWrôeE«bÀd
;

168 
boﬁ
 
myPowî
;

171 
I¡32
 
myPowîRomCy˛e
;

174 
uI¡8
 
myD©aHﬁdRegi°î
;

177 
uI¡32
 
myNumbîOfDi°ö˘Ac˚s£s
;

180 
boﬁ
 
myWrôePídög
;

182 
uI¡16
 
myCuºítB™k
;

	@emucore/CartCV.cpp

19 
	~<as£π.h
>

20 
	~"C¨tCV.hxx
"

21 
	~"R™dom.hxx
"

22 
	~"Sy°em.hxx
"

23 
	~"Sîülizî.hxx
"

24 
	~"De£rülizî.hxx
"

25 
	~<io°ªam
>

28 
	gC¨åidgeCV
::
	$C¨åidgeCV
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
)

30 
uI¡32
 
addr
;

31 if(
size
 == 2048)

34 
uI¡32
 
addr
 = 0;áddr < 2048; ++addr)

36 
myImage
[
addr
] = 
image
[addr];

40 
˛ass
 
R™dom
 
øndom
;

41 
uI¡32
 
i
 = 0; i < 1024; ++i)

43 
myRAM
[
i
] = 
øndom
.
	`√xt
();

46 if(
size
 == 4096)

52 
addr
 = 0;áddr < 2048; ++addr)

54 
myImage
[
addr
] = 
image
[addr + 2048];

58 
addr
 = 0;áddr < 1024; ++addr)

60 
myRAM
[
addr
] = 
image
[addr];

64 
	}
}

67 
	gC¨åidgeCV
::~
	$C¨åidgeCV
()

69 
	}
}

72 c⁄° * 
C¨åidgeCV
::
	$«me
() const

75 
	}
}

78 
	gC¨åidgeCV
::
	$ª£t
()

80 
	}
}

83 
C¨åidgeCV
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

85 
mySy°em
 = &
sy°em
;

86 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

87 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

90 
	`as£π
((0x1800 & 
mask
) == 0);

92 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

93 
ac˚ss
.
dúe˘PokeBa£
 = 0;

94 
ac˚ss
.
devi˚
 = 
this
;

97 
uI¡32
 
addªss
 = 0x1800;áddªs†< 0x2000;áddªs†+(1 << 
shi·
))

99 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[
addªss
 & 0x07FF];

100 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> mySy°em->
	`∑geShi·
(), 
ac˚ss
);

104 
uI¡32
 
j
 = 0x1400; j < 0x1800; j +(1 << 
shi·
))

106 
ac˚ss
.
devi˚
 = 
this
;

107 
ac˚ss
.
dúe˘PìkBa£
 = 0;

108 
ac˚ss
.
dúe˘PokeBa£
 = &
myRAM
[
j
 & 0x03FF];

109 
mySy°em
->
	`£tPageAc˚ss
(
j
 >> 
shi·
, 
ac˚ss
);

113 
uI¡32
 
k
 = 0x1000; k < 0x1400; k +(1 << 
shi·
))

115 
ac˚ss
.
devi˚
 = 
this
;

116 
ac˚ss
.
dúe˘PìkBa£
 = &
myRAM
[
k
 & 0x03FF];

117 
ac˚ss
.
dúe˘PokeBa£
 = 0;

118 
mySy°em
->
	`£tPageAc˚ss
(
k
 >> 
shi·
, 
ac˚ss
);

120 
	}
}

123 
uI¡8
 
	gC¨åidgeCV
::
	$≥ek
(
uI¡16
 
addªss
)

125  
myImage
[
addªss
 & 0x07FF];

126 
	}
}

129 
	gC¨åidgeCV
::
	$poke
(
uI¡16
, 
uI¡8
)

132 
	}
}

135 
boﬁ
 
	gC¨åidgeCV
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

137 
myImage
[
addªss
 & 0x07FF] = 
vÆue
;

138  
åue
;

139 
	}
}

142 
boﬁ
 
	gC¨åidgeCV
::
	$ßve
(
Sîülizî
& 
out
)

144 
°rög
 
ˇπ
 = 
	`«me
();

146 
__åy


148 
out
.
	`putSåög
(
ˇπ
);

151 
out
.
	`putI¡
(1024);

152 
uI¡32
 
addr
 = 0;áddr < 1024; ++addr)

153 
out
.
	`putI¡
(
myRAM
[
addr
]);

156 
	`ˇtch
(*
msg
)

158 
˚º
 << 
msg
 << 
ídl
;

159  
Ál£
;

162 
	`__ˇtch
(...)

164 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
ˇπ
 << 
ídl
;

165  
Ál£
;

168  
åue
;

169 
	}
}

172 
boﬁ
 
	gC¨åidgeCV
::
	$lﬂd
(
De£rülizî
& 
ö
)

174 
°rög
 
ˇπ
 = 
	`«me
();

176 
__åy


178 if(
ö
.
	`gëSåög
(Ë!
ˇπ
)

179  
Ál£
;

182 
uI¡32
 
limô
 = (uI¡32Ë
ö
.
	`gëI¡
();

183 
uI¡32
 
addr
 = 0;ádd∏< 
limô
; ++addr)

184 
myRAM
[
addr
] = (
uI¡8
Ë
ö
.
	`gëI¡
();

187 
	`ˇtch
(*
msg
)

189 
˚º
 << 
msg
 << 
ídl
;

190  
Ál£
;

193 
	`__ˇtch
(...)

195 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
ˇπ
 << 
ídl
;

196  
Ál£
;

199  
åue
;

200 
	}
}

203 
uI¡8
* 
	gC¨åidgeCV
::
	$gëImage
(& 
size
) {

204 
size
 = 2048;

205  &
myImage
[0];

206 
	}
}

	@emucore/CartCV.hxx

19 #i‚de‡
CARTRIDGECV_HXX


20 
	#CARTRIDGECV_HXX


	)

22 
˛ass
 
	gC¨åidgeCV
;

23 
˛ass
 
	gSy°em
;

24 
˛ass
 
	gSîülizî
;

25 
˛ass
 
	gDe£rülizî
;

27 
	~"b•f.hxx
"

28 
	~"C¨t.hxx
"

40 ˛as†
	cC¨åidgeCV
 : 
public
 
C¨åidge


42 
public
:

48 
C¨åidgeCV
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
);

53 
	mvútuÆ
 ~
C¨åidgeCV
();

55 
	mpublic
:

61 
vútuÆ
 c⁄° * 
	$«me
() const;

66 
vútuÆ
 
	`ª£t
();

74 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

82 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

90 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

92 
vútuÆ
 
uI¡8
* 
	`gëImage
(& 
size
);

94 
public
:

100 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

108 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

110 
boﬁ
 
	`∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

112 
¥iv©e
:

114 
uI¡8
 
myImage
[2048];

117 
uI¡8
 
myRAM
[1024];

	@emucore/CartDPC.cpp

19 
	~<as£π.h
>

20 
	~<io°ªam
>

21 
	~"C¨tDPC.hxx
"

22 
	~"Sy°em.hxx
"

23 
	~"Sîülizî.hxx
"

24 
	~"De£rülizî.hxx
"

27 
	gC¨åidgeDPC
::
	$C¨åidgeDPC
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
)

29 
uI¡32
 
addr
;

33 
addr
 = 0;ádd∏< 
size
; ++addr)

34 
myImageC›y
[
addr
] = 
image
[addr];

37 
addr
 = 0;áddr < 8192; ++addr)

39 
myProgømImage
[
addr
] = 
image
[addr];

43 
addr
 = 0;áddr < 2048; ++addr)

45 
myDi•œyImage
[
addr
] = 
image
[8192 +áddr];

49 
uI¡16
 
i
 = 0; i < 8; ++i)

51 
myT›s
[
i
] = 
myBŸtoms
[i] = 
myCou¡îs
[i] = 
myFœgs
[i] = 0;

55 
myMusicMode
[0] = myMusicMode[1] = myMusicMode[2] = 
Ál£
;

58 
myR™domNumbî
 = 1;

61 
mySy°emCy˛es
 = 0;

62 
myFø˘i⁄ÆClocks
 = 0.0;

63 
	}
}

66 
	gC¨åidgeDPC
::~
	$C¨åidgeDPC
()

68 
	}
}

71 c⁄° * 
C¨åidgeDPC
::
	$«me
() const

74 
	}
}

77 
	gC¨åidgeDPC
::
	$ª£t
()

80 
mySy°emCy˛es
 = 
mySy°em
->
	`cy˛es
();

81 
myFø˘i⁄ÆClocks
 = 0.0;

84 
	`b™k
(1);

85 
	}
}

88 
	gC¨åidgeDPC
::
	$sy°emCy˛esRe£t
()

91 
uI¡32
 
cy˛es
 = 
mySy°em
->
	`cy˛es
();

94 
mySy°emCy˛es
 -
cy˛es
;

95 
	}
}

98 
	gC¨åidgeDPC
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

100 
mySy°em
 = &
sy°em
;

101 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

102 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

105 
	`as£π
(((0x1080 & 
mask
) == 0) && ((0x1100 & mask) == 0));

108 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

109 
uI¡32
 
i
 = (0x1FF8 & ~
mask
); i < 0x2000; i +(1 << 
shi·
))

111 
ac˚ss
.
dúe˘PìkBa£
 = 0;

112 
ac˚ss
.
dúe˘PokeBa£
 = 0;

113 
ac˚ss
.
devi˚
 = 
this
;

114 
mySy°em
->
	`£tPageAc˚ss
(
i
 >> 
shi·
, 
ac˚ss
);

118 
uI¡32
 
j
 = 0x1000; j < 0x1080; j +(1 << 
shi·
))

120 
ac˚ss
.
dúe˘PìkBa£
 = 0;

121 
ac˚ss
.
dúe˘PokeBa£
 = 0;

122 
ac˚ss
.
devi˚
 = 
this
;

123 
mySy°em
->
	`£tPageAc˚ss
(
j
 >> 
shi·
, 
ac˚ss
);

127 
	`b™k
(1);

128 
	}
}

131 
ölöe
 
	gC¨åidgeDPC
::
	$˛ockR™domNumbîGíî©‹
()

136 c⁄° 
uI¡8
 
f
[16] = {

142 
uI¡8
 
bô
 = 
f
[((
myR™domNumbî
 >> 3) & 0x07) |

143 ((
myR™domNumbî
 & 0x80) ? 0x08 : 0x00)];

145 c⁄° 
uI¡8
 
bô
 = 0x9669 & (1 << (
myR™domNumbî
 & 0x0f));

149 
myR™domNumbî
 = (myR™domNumbî << 1Ë| 
bô
;

150 
	}
}

153 
ölöe
 
	gC¨åidgeDPC
::
	$upd©eMusicModeD©aFëchîs
()

156 
I¡32
 
cy˛es
 = 
mySy°em
->
	`cy˛es
(Ë- 
mySy°emCy˛es
;

157 
mySy°emCy˛es
 = 
mySy°em
->
	`cy˛es
();

160 
˛ocks
 = ((15750.0 * 
cy˛es
Ë/ 1193191.66666667Ë+ 
myFø˘i⁄ÆClocks
;

161 
I¡32
 
whﬁeClocks
 = (I¡32)
˛ocks
;

162 
myFø˘i⁄ÆClocks
 = 
˛ocks
 - ()
whﬁeClocks
;

164 if(
whﬁeClocks
 <= 0)

170 
x
 = 5; x <= 7; ++x)

173 if(
myMusicMode
[
x
 - 5])

175 
I¡32
 
t›
 = 
myT›s
[
x
] + 1;

176 
I¡32
 
√wLow
 = (I¡32)(
myCou¡îs
[
x
] & 0x00ff);

178 if(
myT›s
[
x
] != 0)

180 
√wLow
 -(
whﬁeClocks
 % 
t›
);

181 if(
√wLow
 < 0)

183 
√wLow
 +
t›
;

188 
√wLow
 = 0;

192 if(
√wLow
 <
myBŸtoms
[
x
])

194 
myFœgs
[
x
] = 0x00;

196 if(
√wLow
 <
myT›s
[
x
])

198 
myFœgs
[
x
] = 0xff;

201 
myCou¡îs
[
x
] = (myCou¡îs[x] & 0x0700Ë| (
uI¡16
)
√wLow
;

204 
	}
}

207 
uI¡8
 
	gC¨åidgeDPC
::
	$≥ek
(
uI¡16
 
addªss
)

209 
addªss
 =áddress & 0x0FFF;

214 
	`˛ockR™domNumbîGíî©‹
();

216 if(
addªss
 < 0x0040)

218 
uI¡8
 
ªsu…
 = 0;

221 
uI¡8
 
ödex
 = 
addªss
 & 0x07;

222 
uI¡8
 
fun˘i⁄
 = (
addªss
 >> 3) & 0x07;

225 if((
myCou¡îs
[
ödex
] & 0x00ffË=
myT›s
[index])

227 
myFœgs
[
ödex
] = 0xff;

229 if((
myCou¡îs
[
ödex
] & 0x00ffË=
myBŸtoms
[index])

231 
myFœgs
[
ödex
] = 0x00;

234 
fun˘i⁄
)

239 if(
ödex
 < 4)

241 
ªsu…
 = 
myR™domNumbî
;

246 c⁄° 
uI¡8
 
musicAm∂ôudes
[8] = {

251 
	`upd©eMusicModeD©aFëchîs
();

253 
uI¡8
 
i
 = 0;

254 if(
myMusicMode
[0] && 
myFœgs
[5])

256 
i
 |= 0x01;

258 if(
myMusicMode
[1] && 
myFœgs
[6])

260 
i
 |= 0x02;

262 if(
myMusicMode
[2] && 
myFœgs
[7])

264 
i
 |= 0x04;

267 
ªsu…
 = 
musicAm∂ôudes
[
i
];

275 
ªsu…
 = 
myDi•œyImage
[2047 - 
myCou¡îs
[
ödex
]];

282 
ªsu…
 = 
myDi•œyImage
[2047 - 
myCou¡îs
[
ödex
]] & 
myFœgs
[index];

289 
ªsu…
 = 
myFœgs
[
ödex
];

295 
ªsu…
 = 0;

300 if((
ödex
 < 5Ë|| ((ödex >5Ë&& (!
myMusicMode
[index - 5])))

302 
myCou¡îs
[
ödex
] = (myCounters[index] - 1) & 0x07ff;

305  
ªsu…
;

310 
addªss
)

314 
	`b™k
(0);

319 
	`b™k
(1);

325  
myProgømImage
[
myCuºítB™k
 * 4096 + 
addªss
];

327 
	}
}

330 
	gC¨åidgeDPC
::
	$poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

332 
addªss
 =áddress & 0x0FFF;

337 
	`˛ockR™domNumbîGíî©‹
();

339 if((
addªss
 >= 0x0040) && (address < 0x0080))

342 
uI¡32
 
ödex
 = 
addªss
 & 0x07;

343 
uI¡32
 
fun˘i⁄
 = (
addªss
 >> 3) & 0x07;

345 
fun˘i⁄
)

350 
myT›s
[
ödex
] = 
vÆue
;

351 
myFœgs
[
ödex
] = 0x00;

358 
myBŸtoms
[
ödex
] = 
vÆue
;

365 if((
ödex
 >5Ë&& 
myMusicMode
[index - 5])

369 
myCou¡îs
[
ödex
] = (myCounters[index] & 0x0700) |

370 (
uI¡16
)
myT›s
[
ödex
];

377 
myCou¡îs
[
ödex
] = (myCou¡îs[ödex] & 0x0700Ë| (
uI¡16
)
vÆue
;

385 
myCou¡îs
[
ödex
] = (((
uI¡16
)
vÆue
 & 0x07) << 8) |

386 (
myCou¡îs
[
ödex
] & 0x00ff);

389 if(
ödex
 >= 5)

391 
myMusicMode
[
ödex
 - 5] = (
vÆue
 & 0x10);

403 
myR™domNumbî
 = 1;

416 
addªss
)

420 
	`b™k
(0);

425 
	`b™k
(1);

432 
	}
}

435 
boﬁ
 
	gC¨åidgeDPC
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

437 
addªss
 =áddress & 0x0FFF;

438 
myProgømImage
[
myCuºítB™k
 * 4096 + 
addªss
] = 
vÆue
;

439  
åue
;

440 
	}
}

443 
	gC¨åidgeDPC
::
	$b™k
(
uI¡16
 
b™k
)

445 if(
b™kLocked
) ;

448 
myCuºítB™k
 = 
b™k
;

449 
uI¡16
 
off£t
 = 
myCuºítB™k
 * 4096;

450 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

451 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

454 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

455 
ac˚ss
.
devi˚
 = 
this
;

456 
ac˚ss
.
dúe˘PokeBa£
 = 0;

459 
uI¡32
 
addªss
 = 0x1080;áddªs†< (0x1FF8U & ~
mask
);

460 
addªss
 +(1 << 
shi·
))

462 
ac˚ss
.
dúe˘PìkBa£
 = &
myProgømImage
[
off£t
 + (
addªss
 & 0x0FFF)];

463 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> 
shi·
, 
ac˚ss
);

465 
	}
}

468 
	gC¨åidgeDPC
::
	$b™k
() {

469  
myCuºítB™k
;

470 
	}
}

473 
	gC¨åidgeDPC
::
	$b™kCou¡
() {

475 
	}
}

479 
boﬁ
 
	gC¨åidgeDPC
::
	$ßve
(
Sîülizî
& 
out
)

481 
°rög
 
ˇπ
 = 
	`«me
();

483 
__åy


485 
uI¡32
 
i
;

487 
out
.
	`putSåög
(
ˇπ
);

490 
out
.
	`putI¡
(
myCuºítB™k
);

493 
out
.
	`putI¡
(8);

494 
i
 = 0; i < 8; ++i)

495 
out
.
	`putI¡
(
myT›s
[
i
]);

498 
out
.
	`putI¡
(8);

499 
i
 = 0; i < 8; ++i)

500 
out
.
	`putI¡
(
myBŸtoms
[
i
]);

503 
out
.
	`putI¡
(8);

504 
i
 = 0; i < 8; ++i)

505 
out
.
	`putI¡
(
myCou¡îs
[
i
]);

508 
out
.
	`putI¡
(8);

509 
i
 = 0; i < 8; ++i)

510 
out
.
	`putI¡
(
myFœgs
[
i
]);

513 
out
.
	`putI¡
(3);

514 
i
 = 0; i < 3; ++i)

515 
out
.
	`putBoﬁ
(
myMusicMode
[
i
]);

518 
out
.
	`putI¡
(
myR™domNumbî
);

520 
out
.
	`putI¡
(
mySy°emCy˛es
);

521 
out
.
	`putI¡
((
uI¡32
)(
myFø˘i⁄ÆClocks
 * 100000000.0));

524 
	`ˇtch
(*
msg
)

526 
˚º
 << 
msg
 << 
ídl
;

527  
Ál£
;

530 
	`__ˇtch
(...)

532 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
ˇπ
 << 
ídl
;

533  
Ál£
;

536  
åue
;

537 
	}
}

540 
boﬁ
 
	gC¨åidgeDPC
::
	$lﬂd
(
De£rülizî
& 
ö
)

542 
°rög
 
ˇπ
 = 
	`«me
();

544 
__åy


546 if(
ö
.
	`gëSåög
(Ë!
ˇπ
)

547  
Ál£
;

549 
uI¡32
 
i
, 
limô
;

552 
myCuºítB™k
 = (
uI¡16
Ë
ö
.
	`gëI¡
();

555 
limô
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

556 
i
 = 0; i < 
limô
; ++i)

557 
myT›s
[
i
] = (
uI¡8
Ë
ö
.
	`gëI¡
();

560 
limô
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

561 
i
 = 0; i < 
limô
; ++i)

562 
myBŸtoms
[
i
] = (
uI¡8
Ë
ö
.
	`gëI¡
();

565 
limô
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

566 
i
 = 0; i < 
limô
; ++i)

567 
myCou¡îs
[
i
] = (
uI¡16
Ë
ö
.
	`gëI¡
();

570 
limô
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

571 
i
 = 0; i < 
limô
; ++i)

572 
myFœgs
[
i
] = (
uI¡8
Ë
ö
.
	`gëI¡
();

575 
limô
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

576 
i
 = 0; i < 
limô
; ++i)

577 
myMusicMode
[
i
] = 
ö
.
	`gëBoﬁ
();

580 
myR™domNumbî
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

583 
mySy°emCy˛es
 = 
ö
.
	`gëI¡
();

584 
myFø˘i⁄ÆClocks
 = ()
ö
.
	`gëI¡
() / 100000000.0;

587 
	`ˇtch
(*
msg
)

589 
˚º
 << 
msg
 << 
ídl
;

590  
Ál£
;

593 
	`__ˇtch
(...)

595 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
ˇπ
 << 
ídl
;

596  
Ál£
;

600 
	`b™k
(
myCuºítB™k
);

602  
åue
;

603 
	}
}

606 
uI¡8
* 
	gC¨åidgeDPC
::
	$gëImage
(& 
size
)

608 
size
 = 8192 + 2048 + 255;

610 
i
;

611 
i
 = 0; i < 8192; i++)

612 
myImageC›y
[
i
] = 
myProgømImage
[i];

614 
i
 = 0; i < 2048; i++)

615 
myImageC›y
[
i
 + 8192] = 
myDi•œyImage
[i];

617  &
myImageC›y
[0];

618 
	}
}

	@emucore/CartDPC.hxx

19 #i‚de‡
CARTRIDGEDCP_HXX


20 
	#CARTRIDGEDCP_HXX


	)

22 
˛ass
 
	gC¨åidgeDPC
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

27 
	~"C¨t.hxx
"

37 ˛as†
	cC¨åidgeDPC
 : 
public
 
C¨åidge


39 
public
:

45 
C¨åidgeDPC
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
);

50 
	mvútuÆ
 ~
C¨åidgeDPC
();

52 
	mpublic
:

58 
vútuÆ
 c⁄° * 
	$«me
() const;

63 
vútuÆ
 
	`ª£t
();

70 
vútuÆ
 
	`sy°emCy˛esRe£t
();

78 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

86 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

94 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

96 
vútuÆ
 
uI¡8
* 
	`gëImage
(& 
size
);

98 
public
:

104 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

112 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

119 
	`b™k
(
uI¡16
 
b™k
);

120 
	`b™k
();

121 
	`b™kCou¡
();

122 
boﬁ
 
	`∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

124 
¥iv©e
:

129 
	`˛ockR™domNumbîGíî©‹
();

135 
	`upd©eMusicModeD©aFëchîs
();

137 
¥iv©e
:

139 
uI¡16
 
myCuºítB™k
;

142 
uI¡8
 
myProgømImage
[8192];

145 
uI¡8
 
myDi•œyImage
[2048];

148 
uI¡8
 
myImageC›y
[8192 + 2048 + 255];

151 
uI¡8
 
myT›s
[8];

154 
uI¡8
 
myBŸtoms
[8];

157 
uI¡16
 
myCou¡îs
[8];

160 
uI¡8
 
myFœgs
[8];

163 
boﬁ
 
myMusicMode
[3];

166 
uI¡8
 
myR™domNumbî
;

169 
I¡32
 
mySy°emCy˛es
;

172 
myFø˘i⁄ÆClocks
;

	@emucore/CartE0.cpp

19 
	~<as£π.h
>

20 
	~"C¨tE0.hxx
"

21 
	~"Sy°em.hxx
"

22 
	~"Sîülizî.hxx
"

23 
	~"De£rülizî.hxx
"

24 
	~<io°ªam
>

27 
	gC¨åidgeE0
::
	$C¨åidgeE0
(c⁄° 
uI¡8
* 
image
)

30 
uI¡32
 
addr
 = 0;áddr < 8192; ++addr)

32 
myImage
[
addr
] = 
image
[addr];

34 
	}
}

37 
	gC¨åidgeE0
::~
	$C¨åidgeE0
()

39 
	}
}

42 c⁄° * 
C¨åidgeE0
::
	$«me
() const

45 
	}
}

48 
	gC¨åidgeE0
::
	$ª£t
()

51 
	`£gmítZîo
(4);

52 
	`£gmítO√
(5);

53 
	`£gmítTwo
(6);

54 
	}
}

57 
	gC¨åidgeE0
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

59 
mySy°em
 = &
sy°em
;

60 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

61 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

64 
	`as£π
(((0x1000 & 
mask
) == 0) && ((0x1400 & mask) == 0) &&

65 ((0x1800 & 
mask
) == 0) && ((0x1C00 & mask) == 0));

68 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

69 
ac˚ss
.
dúe˘PokeBa£
 = 0;

70 
ac˚ss
.
devi˚
 = 
this
;

71 
uI¡32
 
i
 = 0x1C00; i < (0x1FE0U & ~
mask
); i +(1 << 
shi·
))

73 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[7168 + (
i
 & 0x03FF)];

74 
mySy°em
->
	`£tPageAc˚ss
(
i
 >> 
shi·
, 
ac˚ss
);

76 
myCuºítSli˚
[3] = 7;

79 
ac˚ss
.
dúe˘PìkBa£
 = 0;

80 
ac˚ss
.
dúe˘PokeBa£
 = 0;

81 
ac˚ss
.
devi˚
 = 
this
;

82 
uI¡32
 
j
 = (0x1FE0 & ~
mask
); j < 0x2000; j +(1 << 
shi·
))

84 
mySy°em
->
	`£tPageAc˚ss
(
j
 >> 
shi·
, 
ac˚ss
);

88 
	`£gmítZîo
(4);

89 
	`£gmítO√
(5);

90 
	`£gmítTwo
(6);

91 
	}
}

94 
uI¡8
 
	gC¨åidgeE0
::
	$≥ek
(
uI¡16
 
addªss
)

96 
addªss
 =áddress & 0x0FFF;

98 if(!
b™kLocked
) {

100 if((
addªss
 >= 0x0FE0) && (address <= 0x0FE7))

102 
	`£gmítZîo
(
addªss
 & 0x0007);

104 if((
addªss
 >= 0x0FE8) && (address <= 0x0FEF))

106 
	`£gmítO√
(
addªss
 & 0x0007);

108 if((
addªss
 >= 0x0FF0) && (address <= 0x0FF7))

110 
	`£gmítTwo
(
addªss
 & 0x0007);

114  
myImage
[(
myCuºítSli˚
[
addªss
 >> 10] << 10) + (address & 0x03FF)];

115 
	}
}

118 
	gC¨åidgeE0
::
	$poke
(
uI¡16
 
addªss
, 
uI¡8
)

120 
addªss
 =áddress & 0x0FFF;

122 if(!
b™kLocked
) {

124 if((
addªss
 >= 0x0FE0) && (address <= 0x0FE7))

126 
	`£gmítZîo
(
addªss
 & 0x0007);

128 if((
addªss
 >= 0x0FE8) && (address <= 0x0FEF))

130 
	`£gmítO√
(
addªss
 & 0x0007);

132 if((
addªss
 >= 0x0FF0) && (address <= 0x0FF7))

134 
	`£gmítTwo
(
addªss
 & 0x0007);

137 
	}
}

140 
boﬁ
 
	gC¨åidgeE0
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

142 
addªss
 =áddress & 0x0FFF;

143 
myImage
[(
myCuºítSli˚
[
addªss
 >> 10] << 10Ë+ (addªs†& 0x03FF)] = 
vÆue
;

144  
åue
;

145 
	}
}

148 
	gC¨åidgeE0
::
	$£gmítZîo
(
uI¡16
 
¶i˚
)

151 
myCuºítSli˚
[0] = 
¶i˚
;

152 
uI¡16
 
off£t
 = 
¶i˚
 << 10;

153 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

156 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

157 
ac˚ss
.
devi˚
 = 
this
;

158 
ac˚ss
.
dúe˘PokeBa£
 = 0;

160 
uI¡32
 
addªss
 = 0x1000;áddªs†< 0x1400;áddªs†+(1 << 
shi·
))

162 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[
off£t
 + (
addªss
 & 0x03FF)];

163 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> 
shi·
, 
ac˚ss
);

165 
	}
}

168 
	gC¨åidgeE0
::
	$£gmítO√
(
uI¡16
 
¶i˚
)

171 
myCuºítSli˚
[1] = 
¶i˚
;

172 
uI¡16
 
off£t
 = 
¶i˚
 << 10;

173 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

176 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

177 
ac˚ss
.
devi˚
 = 
this
;

178 
ac˚ss
.
dúe˘PokeBa£
 = 0;

180 
uI¡32
 
addªss
 = 0x1400;áddªs†< 0x1800;áddªs†+(1 << 
shi·
))

182 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[
off£t
 + (
addªss
 & 0x03FF)];

183 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> 
shi·
, 
ac˚ss
);

185 
	}
}

188 
	gC¨åidgeE0
::
	$£gmítTwo
(
uI¡16
 
¶i˚
)

191 
myCuºítSli˚
[2] = 
¶i˚
;

192 
uI¡16
 
off£t
 = 
¶i˚
 << 10;

193 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

196 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

197 
ac˚ss
.
devi˚
 = 
this
;

198 
ac˚ss
.
dúe˘PokeBa£
 = 0;

200 
uI¡32
 
addªss
 = 0x1800;áddªs†< 0x1C00;áddªs†+(1 << 
shi·
))

202 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[
off£t
 + (
addªss
 & 0x03FF)];

203 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> 
shi·
, 
ac˚ss
);

205 
	}
}

208 
boﬁ
 
	gC¨åidgeE0
::
	$ßve
(
Sîülizî
& 
out
)

210 
°rög
 
ˇπ
 = 
	`«me
();

212 
__åy


214 
out
.
	`putSåög
(
ˇπ
);

216 
out
.
	`putI¡
(4);

217 
uI¡32
 
i
 = 0; i < 4; ++i)

218 
out
.
	`putI¡
(
myCuºítSli˚
[
i
]);

221 
	`ˇtch
(*
msg
)

223 
˚º
 << 
msg
 << 
ídl
;

224  
Ál£
;

227 
	`__ˇtch
(...)

229 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
ˇπ
 << 
ídl
;

230  
Ál£
;

233  
åue
;

234 
	}
}

237 
boﬁ
 
	gC¨åidgeE0
::
	$lﬂd
(
De£rülizî
& 
ö
)

239 
°rög
 
ˇπ
 = 
	`«me
();

241 
__åy


243 if(
ö
.
	`gëSåög
(Ë!
ˇπ
)

244  
Ál£
;

246 
uI¡32
 
limô
 = (uI¡32Ë
ö
.
	`gëI¡
();

247 
uI¡32
 
i
 = 0; i < 
limô
; ++i)

248 
myCuºítSli˚
[
i
] = (
uI¡16
Ë
ö
.
	`gëI¡
();

251 
	`ˇtch
(*
msg
)

253 
˚º
 << 
msg
 << 
ídl
;

254  
Ál£
;

257 
	`__ˇtch
(...)

259 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
ˇπ
 << 
ídl
;

260  
Ál£
;

263  
åue
;

264 
	}
}

268 
uI¡8
* 
	gC¨åidgeE0
::
	$gëImage
(& 
size
) {

269 
size
 = 8192;

270  &
myImage
[0];

271 
	}
}

	@emucore/CartE0.hxx

19 #i‚de‡
CARTRIDGEE0_HXX


20 
	#CARTRIDGEE0_HXX


	)

22 
˛ass
 
	gC¨åidgeF8
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

27 
	~"C¨t.hxx
"

41 ˛as†
	cC¨åidgeE0
 : 
public
 
C¨åidge


43 
public
:

49 
C¨åidgeE0
(c⁄° 
uI¡8
* 
image
);

54 
	mvútuÆ
 ~
C¨åidgeE0
();

56 
	mpublic
:

62 
vútuÆ
 c⁄° * 
	$«me
() const;

67 
vútuÆ
 
	`ª£t
();

75 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

83 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

91 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

93 
vútuÆ
 
uI¡8
* 
	`gëImage
(& 
size
);

95 
public
:

101 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

109 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

111 
boﬁ
 
	`∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

113 
¥iv©e
:

119 
	`£gmítZîo
(
uI¡16
 
¶i˚
);

126 
	`£gmítO√
(
uI¡16
 
¶i˚
);

133 
	`£gmítTwo
(
uI¡16
 
¶i˚
);

135 
¥iv©e
:

137 
uI¡16
 
myCuºítSli˚
[4];

140 
uI¡8
 
myImage
[8192];

	@emucore/CartE7.cpp

19 
	~<as£π.h
>

20 
	~"C¨tE7.hxx
"

21 
	~"R™dom.hxx
"

22 
	~"Sy°em.hxx
"

23 
	~"Sîülizî.hxx
"

24 
	~"De£rülizî.hxx
"

25 
	~<io°ªam
>

28 
	gC¨åidgeE7
::
	$C¨åidgeE7
(c⁄° 
uI¡8
* 
image
)

31 
uI¡32
 
addr
 = 0;áddr < 16384; ++addr)

33 
myImage
[
addr
] = 
image
[addr];

37 
˛ass
 
R™dom
 
øndom
;

38 
uI¡32
 
i
 = 0; i < 2048; ++i)

40 
myRAM
[
i
] = 
øndom
.
	`√xt
();

42 
	}
}

45 
	gC¨åidgeE7
::~
	$C¨åidgeE7
()

47 
	}
}

50 c⁄° * 
C¨åidgeE7
::
	$«me
() const

53 
	}
}

56 
	gC¨åidgeE7
::
	$ª£t
()

59 
	`b™kRAM
(0);

60 
	`b™k
(0);

61 
	}
}

64 
	gC¨åidgeE7
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

66 
mySy°em
 = &
sy°em
;

67 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

68 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

71 
	`as£π
(((0x1400 & 
mask
) == 0) && ((0x1800 & mask) == 0) &&

72 ((0x1900 & 
mask
) == 0) && ((0x1A00 & mask) == 0));

75 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

76 
uI¡32
 
i
 = (0x1FE0 & ~
mask
); i < 0x2000; i +(1 << 
shi·
))

78 
ac˚ss
.
dúe˘PìkBa£
 = 0;

79 
ac˚ss
.
dúe˘PokeBa£
 = 0;

80 
ac˚ss
.
devi˚
 = 
this
;

81 
mySy°em
->
	`£tPageAc˚ss
(
i
 >> 
shi·
, 
ac˚ss
);

85 
uI¡32
 
j
 = 0x1A00; j < (0x1FE0U & ~
mask
); j +(1 << 
shi·
))

87 
ac˚ss
.
devi˚
 = 
this
;

88 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[7 * 2048 + (
j
 & 0x07FF)];

89 
ac˚ss
.
dúe˘PokeBa£
 = 0;

90 
mySy°em
->
	`£tPageAc˚ss
(
j
 >> 
shi·
, 
ac˚ss
);

92 
myCuºítSli˚
[1] = 7;

95 
	`b™kRAM
(0);

96 
	`b™k
(0);

97 
	}
}

100 
uI¡8
 
	gC¨åidgeE7
::
	$≥ek
(
uI¡16
 
addªss
)

102 
addªss
 =áddress & 0x0FFF;

105 if((
addªss
 >= 0x0FE0) && (address <= 0x0FE7))

107 
	`b™k
(
addªss
 & 0x0007);

109 if((
addªss
 >= 0x0FE8) && (address <= 0x0FEB))

111 
	`b™kRAM
(
addªss
 & 0x0003);

117  
myImage
[(
myCuºítSli˚
[
addªss
 >> 11] << 11) + (address & 0x07FF)];

118 
	}
}

121 
	gC¨åidgeE7
::
	$poke
(
uI¡16
 
addªss
, 
uI¡8
)

123 
addªss
 =áddress & 0x0FFF;

126 if((
addªss
 >= 0x0FE0) && (address <= 0x0FE7))

128 
	`b™k
(
addªss
 & 0x0007);

130 if((
addªss
 >= 0x0FE8) && (address <= 0x0FEB))

132 
	`b™kRAM
(
addªss
 & 0x0003);

138 
	}
}

141 
boﬁ
 
	gC¨åidgeE7
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

143 
addªss
 =áddress & 0x0FFF;

144 
myImage
[(
myCuºítSli˚
[
addªss
 >> 11] << 11Ë+ (addªs†& 0x07FF)] = 
vÆue
;

145 
	`b™k
(
myCuºítSli˚
[0]);

146  
åue
;

147 
	}
}

150 
	gC¨åidgeE7
::
	$b™k
(
uI¡16
 
¶i˚
)

152 if(
b™kLocked
) ;

155 
myCuºítSli˚
[0] = 
¶i˚
;

156 
uI¡16
 
off£t
 = 
¶i˚
 << 11;

157 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

160 if(
¶i˚
 != 7)

162 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

163 
ac˚ss
.
devi˚
 = 
this
;

164 
ac˚ss
.
dúe˘PokeBa£
 = 0;

167 
uI¡32
 
addªss
 = 0x1000;áddªs†< 0x1800;áddªs†+(1 << 
shi·
))

169 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[
off£t
 + (
addªss
 & 0x07FF)];

170 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> 
shi·
, 
ac˚ss
);

175 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

176 
ac˚ss
.
devi˚
 = 
this
;

179 
ac˚ss
.
dúe˘PìkBa£
 = 0;

180 
ac˚ss
.
dúe˘PokeBa£
 = 0;

181 
uI¡32
 
j
 = 0x1000; j < 0x1400; j +(1 << 
shi·
))

183 
ac˚ss
.
dúe˘PokeBa£
 = &
myRAM
[
j
 & 0x03FF];

184 
mySy°em
->
	`£tPageAc˚ss
(
j
 >> 
shi·
, 
ac˚ss
);

188 
ac˚ss
.
dúe˘PìkBa£
 = 0;

189 
ac˚ss
.
dúe˘PokeBa£
 = 0;

190 
uI¡32
 
k
 = 0x1400; k < 0x1800; k +(1 << 
shi·
))

192 
ac˚ss
.
dúe˘PìkBa£
 = &
myRAM
[
k
 & 0x03FF];

193 
mySy°em
->
	`£tPageAc˚ss
(
k
 >> 
shi·
, 
ac˚ss
);

196 
	}
}

199 
	gC¨åidgeE7
::
	$b™k
() {

200  
myCuºítSli˚
[0];

201 
	}
}

204 
	gC¨åidgeE7
::
	$b™kCou¡
() {

206 
	}
}

209 
	gC¨åidgeE7
::
	$b™kRAM
(
uI¡16
 
b™k
)

212 
myCuºítRAM
 = 
b™k
;

213 
uI¡16
 
off£t
 = 
b™k
 << 8;

214 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

217 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

218 
ac˚ss
.
devi˚
 = 
this
;

221 
ac˚ss
.
dúe˘PìkBa£
 = 0;

222 
ac˚ss
.
dúe˘PokeBa£
 = 0;

223 
uI¡32
 
j
 = 0x1800; j < 0x1900; j +(1 << 
shi·
))

225 
ac˚ss
.
dúe˘PokeBa£
 = &
myRAM
[1024 + 
off£t
 + (
j
 & 0x00FF)];

226 
mySy°em
->
	`£tPageAc˚ss
(
j
 >> 
shi·
, 
ac˚ss
);

230 
ac˚ss
.
dúe˘PìkBa£
 = 0;

231 
ac˚ss
.
dúe˘PokeBa£
 = 0;

232 
uI¡32
 
k
 = 0x1900; k < 0x1A00; k +(1 << 
shi·
))

234 
ac˚ss
.
dúe˘PìkBa£
 = &
myRAM
[1024 + 
off£t
 + (
k
 & 0x00FF)];

235 
mySy°em
->
	`£tPageAc˚ss
(
k
 >> 
shi·
, 
ac˚ss
);

237 
	}
}

240 
boﬁ
 
	gC¨åidgeE7
::
	$ßve
(
Sîülizî
& 
out
)

242 
°rög
 
ˇπ
 = 
	`«me
();

244 
__åy


246 
uI¡32
 
i
;

248 
out
.
	`putSåög
(
ˇπ
);

250 
out
.
	`putI¡
(2);

251 
i
 = 0; i < 2; ++i)

252 
out
.
	`putI¡
(
myCuºítSli˚
[
i
]);

254 
out
.
	`putI¡
(
myCuºítRAM
);

257 
out
.
	`putI¡
(2048);

258 
i
 = 0; i < 2048; ++i)

259 
out
.
	`putI¡
(
myRAM
[
i
]);

262 
	`ˇtch
(*
msg
)

264 
˚º
 << 
msg
 << 
ídl
;

265  
Ál£
;

268 
	`__ˇtch
(...)

270 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
ˇπ
 << 
ídl
;

271  
Ál£
;

274  
åue
;

275 
	}
}

278 
boﬁ
 
	gC¨åidgeE7
::
	$lﬂd
(
De£rülizî
& 
ö
)

280 
°rög
 
ˇπ
 = 
	`«me
();

282 
__åy


284 if(
ö
.
	`gëSåög
(Ë!
ˇπ
)

285  
Ál£
;

287 
uI¡32
 
i
, 
limô
;

289 
limô
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

290 
i
 = 0; i < 
limô
; ++i)

291 
myCuºítSli˚
[
i
] = (
uI¡16
Ë
ö
.
	`gëI¡
();

293 
myCuºítRAM
 = (
uI¡16
Ë
ö
.
	`gëI¡
();

296 
limô
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

297 
i
 = 0; i < 
limô
; ++i)

298 
myRAM
[
i
] = (
uI¡8
Ë
ö
.
	`gëI¡
();

301 
	`ˇtch
(*
msg
)

303 
˚º
 << 
msg
 << 
ídl
;

304  
Ál£
;

307 
	`__ˇtch
(...)

309 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
ˇπ
 << 
ídl
;

310  
Ál£
;

314 
	`b™kRAM
(
myCuºítRAM
);

315 
	`b™k
(
myCuºítSli˚
[0]);

317  
åue
;

318 
	}
}

321 
uI¡8
* 
	gC¨åidgeE7
::
	$gëImage
(& 
size
) {

322 
size
 = 16384;

323  &
myImage
[0];

324 
	}
}

	@emucore/CartE7.hxx

19 #i‚de‡
CARTRIDGEE7_HXX


20 
	#CARTRIDGEE7_HXX


	)

22 
˛ass
 
	gC¨åidgeE7
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

27 
	~"C¨t.hxx
"

58 ˛as†
	cC¨åidgeE7
 : 
public
 
C¨åidge


60 
public
:

66 
C¨åidgeE7
(c⁄° 
uI¡8
* 
image
);

71 
	mvútuÆ
 ~
C¨åidgeE7
();

73 
	mpublic
:

79 
vútuÆ
 c⁄° * 
	$«me
() const;

84 
vútuÆ
 
	`ª£t
();

92 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

100 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

108 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

110 
vútuÆ
 
uI¡8
* 
	`gëImage
(& 
size
);

112 
public
:

118 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

126 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

128 
boﬁ
 
	`∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

135 
	`b™k
(
uI¡16
 
b™k
);

137 
	`b™k
();

138 
	`b™kCou¡
();

140 
¥iv©e
:

146 
	`b™kRAM
(
uI¡16
 
b™k
);

148 
¥iv©e
:

150 
uI¡16
 
myCuºítSli˚
[2];

153 
uI¡16
 
myCuºítRAM
;

156 
uI¡8
 
myImage
[16384];

159 
uI¡8
 
myRAM
[2048];

	@emucore/CartF4.cpp

19 
	~<as£π.h
>

20 
	~<io°ªam
>

21 
	~"C¨tF4.hxx
"

22 
	~"R™dom.hxx
"

23 
	~"Sy°em.hxx
"

24 
	~"Sîülizî.hxx
"

25 
	~"De£rülizî.hxx
"

28 
	gC¨åidgeF4
::
	$C¨åidgeF4
(c⁄° 
uI¡8
* 
image
)

31 
uI¡32
 
addr
 = 0;áddr < 32768; ++addr)

33 
myImage
[
addr
] = 
image
[addr];

35 
	}
}

38 
	gC¨åidgeF4
::~
	$C¨åidgeF4
()

40 
	}
}

43 c⁄° * 
C¨åidgeF4
::
	$«me
() const

46 
	}
}

49 
	gC¨åidgeF4
::
	$ª£t
()

52 
	`b™k
(7);

53 
	}
}

56 
	gC¨åidgeF4
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

58 
mySy°em
 = &
sy°em
;

59 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

60 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

63 
	`as£π
((0x1000 & 
mask
) == 0);

66 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

67 
uI¡32
 
i
 = (0x1FF4 & ~
mask
); i < 0x2000; i +(1 << 
shi·
))

69 
ac˚ss
.
dúe˘PìkBa£
 = 0;

70 
ac˚ss
.
dúe˘PokeBa£
 = 0;

71 
ac˚ss
.
devi˚
 = 
this
;

72 
mySy°em
->
	`£tPageAc˚ss
(
i
 >> 
shi·
, 
ac˚ss
);

76 
	`b™k
(7);

77 
	}
}

80 
uI¡8
 
	gC¨åidgeF4
::
	$≥ek
(
uI¡16
 
addªss
)

82 
addªss
 =áddress & 0x0FFF;

85 if((
addªss
 >= 0x0FF4) && (address <= 0x0FFB))

87 
	`b™k
(
addªss
 - 0x0FF4);

90  
myImage
[
myCuºítB™k
 * 4096 + 
addªss
];

91 
	}
}

94 
	gC¨åidgeF4
::
	$poke
(
uI¡16
 
addªss
, 
uI¡8
)

96 
addªss
 =áddress & 0x0FFF;

99 if((
addªss
 >= 0x0FF4) && (address <= 0x0FFB))

101 
	`b™k
(
addªss
 - 0x0FF4);

103 
	}
}

106 
boﬁ
 
	gC¨åidgeF4
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

108 
addªss
 =áddress & 0x0FFF;

109 
myImage
[
myCuºítB™k
 * 4096 + 
addªss
] = 
vÆue
;

110  
åue
;

111 
	}
}

114 
	gC¨åidgeF4
::
	$b™k
(
uI¡16
 
b™k
)

116 if(
b™kLocked
) ;

119 
myCuºítB™k
 = 
b™k
;

120 
uI¡16
 
off£t
 = 
myCuºítB™k
 * 4096;

121 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

122 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

125 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

126 
ac˚ss
.
devi˚
 = 
this
;

127 
ac˚ss
.
dúe˘PokeBa£
 = 0;

130 
uI¡32
 
addªss
 = 0x1000;áddªs†< (0x1FF4U & ~
mask
);

131 
addªss
 +(1 << 
shi·
))

133 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[
off£t
 + (
addªss
 & 0x0FFF)];

134 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> 
shi·
, 
ac˚ss
);

136 
	}
}

139 
	gC¨åidgeF4
::
	$b™k
() {

140  
myCuºítB™k
;

141 
	}
}

144 
	gC¨åidgeF4
::
	$b™kCou¡
() {

146 
	}
}

149 
boﬁ
 
	gC¨åidgeF4
::
	$ßve
(
Sîülizî
& 
out
)

151 
°rög
 
ˇπ
 = 
	`«me
();

153 
__åy


155 
out
.
	`putSåög
(
ˇπ
);

156 
out
.
	`putI¡
(
myCuºítB™k
);

159 
	`ˇtch
(* 
msg
)

161 
˚º
 << 
msg
 << 
ídl
;

162  
Ál£
;

165 
	`__ˇtch
(...)

167 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
ˇπ
 << 
ídl
;

168  
Ál£
;

171  
åue
;

172 
	}
}

175 
boﬁ
 
	gC¨åidgeF4
::
	$lﬂd
(
De£rülizî
& 
ö
)

177 
°rög
 
ˇπ
 = 
	`«me
();

179 
__åy


181 if(
ö
.
	`gëSåög
(Ë!
ˇπ
)

183  
Ál£
;

186 
myCuºítB™k
 = (
uI¡16
)
ö
.
	`gëI¡
();

189 
	`ˇtch
(* 
msg
)

191 
˚º
 << 
msg
 << 
ídl
;

192  
Ál£
;

195 
	`__ˇtch
(...)

197 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
ˇπ
 << 
ídl
;

198  
Ál£
;

202 
	`b™k
(
myCuºítB™k
);

204  
åue
;

205 
	}
}

209 
uI¡8
* 
	gC¨åidgeF4
::
	$gëImage
(& 
size
) {

210 
size
 = 32768;

211  &
myImage
[0];

212 
	}
}

	@emucore/CartF4.hxx

19 #i‚de‡
CARTRIDGEF4_HXX


20 
	#CARTRIDGEF4_HXX


	)

22 
˛ass
 
	gC¨åidgeF4
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

27 
	~"C¨t.hxx
"

36 ˛as†
	cC¨åidgeF4
 : 
public
 
C¨åidge


38 
public
:

44 
C¨åidgeF4
(c⁄° 
uI¡8
* 
image
);

49 
	mvútuÆ
 ~
C¨åidgeF4
();

51 
	mpublic
:

57 
vútuÆ
 c⁄° * 
	$«me
() const;

62 
vútuÆ
 
	`ª£t
();

70 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

78 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

86 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

88 
vútuÆ
 
uI¡8
* 
	`gëImage
(& 
size
);

90 
public
:

96 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

104 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

106 
boﬁ
 
	`∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

113 
	`b™k
(
uI¡16
 
b™k
);

115 
	`b™k
();

117 
	`b™kCou¡
();

119 
¥iv©e
:

121 
uI¡16
 
myCuºítB™k
;

124 
uI¡8
 
myImage
[32768];

	@emucore/CartF4SC.cpp

19 
	~<as£π.h
>

20 
	~"C¨tF4SC.hxx
"

21 
	~"R™dom.hxx
"

22 
	~"Sy°em.hxx
"

23 
	~"Sîülizî.hxx
"

24 
	~"De£rülizî.hxx
"

25 
	~<io°ªam
>

28 
	gC¨åidgeF4SC
::
	$C¨åidgeF4SC
(c⁄° 
uI¡8
* 
image
)

31 
uI¡32
 
addr
 = 0;áddr < 32768; ++addr)

33 
myImage
[
addr
] = 
image
[addr];

37 
˛ass
 
R™dom
 
øndom
;

38 
uI¡32
 
i
 = 0; i < 128; ++i)

40 
myRAM
[
i
] = 
øndom
.
	`√xt
();

42 
	}
}

45 
	gC¨åidgeF4SC
::~
	$C¨åidgeF4SC
()

47 
	}
}

50 c⁄° * 
C¨åidgeF4SC
::
	$«me
() const

53 
	}
}

56 
	gC¨åidgeF4SC
::
	$ª£t
()

59 
	`b™k
(7);

60 
	}
}

63 
	gC¨åidgeF4SC
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

65 
mySy°em
 = &
sy°em
;

66 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

67 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

70 
	`as£π
(((0x1080 & 
mask
) == 0) && ((0x1100 & mask) == 0));

73 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

74 
uI¡32
 
i
 = (0x1FF4 & ~
mask
); i < 0x2000; i +(1 << 
shi·
))

76 
ac˚ss
.
dúe˘PìkBa£
 = 0;

77 
ac˚ss
.
dúe˘PokeBa£
 = 0;

78 
ac˚ss
.
devi˚
 = 
this
;

79 
mySy°em
->
	`£tPageAc˚ss
(
i
 >> 
shi·
, 
ac˚ss
);

83 
uI¡32
 
j
 = 0x1000; j < 0x1080; j +(1 << 
shi·
))

85 
ac˚ss
.
devi˚
 = 
this
;

86 
ac˚ss
.
dúe˘PìkBa£
 = 0;

87 
ac˚ss
.
dúe˘PokeBa£
 = &
myRAM
[
j
 & 0x007F];

88 
mySy°em
->
	`£tPageAc˚ss
(
j
 >> 
shi·
, 
ac˚ss
);

92 
uI¡32
 
k
 = 0x1080; k < 0x1100; k +(1 << 
shi·
))

94 
ac˚ss
.
devi˚
 = 
this
;

95 
ac˚ss
.
dúe˘PìkBa£
 = &
myRAM
[
k
 & 0x007F];

96 
ac˚ss
.
dúe˘PokeBa£
 = 0;

97 
mySy°em
->
	`£tPageAc˚ss
(
k
 >> 
shi·
, 
ac˚ss
);

101 
	`b™k
(7);

102 
	}
}

105 
uI¡8
 
	gC¨åidgeF4SC
::
	$≥ek
(
uI¡16
 
addªss
)

107 
addªss
 =áddress & 0x0FFF;

110 if((
addªss
 >= 0x0FF4) && (address <= 0x0FFB))

112 
	`b™k
(
addªss
 - 0x0FF4);

118  
myImage
[
myCuºítB™k
 * 4096 + 
addªss
];

119 
	}
}

122 
	gC¨åidgeF4SC
::
	$poke
(
uI¡16
 
addªss
, 
uI¡8
)

125 if((
addªss
 >= 0x0FF4) && (address <= 0x0FFB))

127 
	`b™k
(
addªss
 - 0x0FF4);

133 
	}
}

136 
boﬁ
 
	gC¨åidgeF4SC
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

138 
addªss
 =áddress & 0x0FFF;

139 
myImage
[
myCuºítB™k
 * 4096 + 
addªss
] = 
vÆue
;

140  
åue
;

141 
	}
}

144 
	gC¨åidgeF4SC
::
	$b™k
(
uI¡16
 
b™k
)

146 if(
b™kLocked
) ;

149 
myCuºítB™k
 = 
b™k
;

150 
uI¡16
 
off£t
 = 
myCuºítB™k
 * 4096;

151 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

152 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

155 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

156 
ac˚ss
.
devi˚
 = 
this
;

157 
ac˚ss
.
dúe˘PokeBa£
 = 0;

160 
uI¡32
 
addªss
 = 0x1100;áddªs†< (0x1FF4U & ~
mask
);

161 
addªss
 +(1 << 
shi·
))

163 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[
off£t
 + (
addªss
 & 0x0FFF)];

164 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> 
shi·
, 
ac˚ss
);

166 
	}
}

169 
	gC¨åidgeF4SC
::
	$b™k
() {

170  
myCuºítB™k
;

171 
	}
}

174 
	gC¨åidgeF4SC
::
	$b™kCou¡
() {

176 
	}
}

179 
boﬁ
 
	gC¨åidgeF4SC
::
	$ßve
(
Sîülizî
& 
out
)

181 
°rög
 
ˇπ
 = 
	`«me
();

183 
__åy


185 
out
.
	`putSåög
(
ˇπ
);

187 
out
.
	`putI¡
(
myCuºítB™k
);

190 
out
.
	`putI¡
(128);

191 
uI¡32
 
i
 = 0; i < 128; ++i)

192 
out
.
	`putI¡
(
myRAM
[
i
]);

195 
	`ˇtch
(*
msg
)

197 
˚º
 << 
msg
 << 
ídl
;

198  
Ál£
;

201 
	`__ˇtch
(...)

203 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
ˇπ
 << 
ídl
;

204  
Ál£
;

207  
åue
;

208 
	}
}

211 
boﬁ
 
	gC¨åidgeF4SC
::
	$lﬂd
(
De£rülizî
& 
ö
)

213 
°rög
 
ˇπ
 = 
	`«me
();

215 
__åy


217 if(
ö
.
	`gëSåög
(Ë!
ˇπ
)

218  
Ál£
;

220 
myCuºítB™k
 = (
uI¡16
Ë
ö
.
	`gëI¡
();

222 
uI¡32
 
limô
 = (uI¡32Ë
ö
.
	`gëI¡
();

223 
uI¡32
 
i
 = 0; i < 
limô
; ++i)

224 
myRAM
[
i
] = (
uI¡8
Ë
ö
.
	`gëI¡
();

227 
	`ˇtch
(*
msg
)

229 
˚º
 << 
msg
 << 
ídl
;

230  
Ál£
;

233 
	`__ˇtch
(...)

235 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
ˇπ
 << 
ídl
;

236  
Ál£
;

240 
	`b™k
(
myCuºítB™k
);

242  
åue
;

243 
	}
}

246 
uI¡8
* 
	gC¨åidgeF4SC
::
	$gëImage
(& 
size
) {

247 
size
 = 32768;

248  &
myImage
[0];

249 
	}
}

	@emucore/CartF4SC.hxx

19 #i‚de‡
CARTRIDGEF4SC_HXX


20 
	#CARTRIDGEF4SC_HXX


	)

22 
˛ass
 
	gC¨åidgeF4SC
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

27 
	~"C¨t.hxx
"

36 ˛as†
	cC¨åidgeF4SC
 : 
public
 
C¨åidge


38 
public
:

44 
C¨åidgeF4SC
(c⁄° 
uI¡8
* 
image
);

49 
	mvútuÆ
 ~
C¨åidgeF4SC
();

51 
	mpublic
:

57 
vútuÆ
 c⁄° * 
	$«me
() const;

62 
vútuÆ
 
	`ª£t
();

70 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

78 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

86 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

88 
vútuÆ
 
uI¡8
* 
	`gëImage
(& 
size
);

90 
public
:

96 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

104 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

106 
boﬁ
 
	`∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

113 
	`b™k
(
uI¡16
 
b™k
);

115 
	`b™k
();

116 
	`b™kCou¡
();

118 
¥iv©e
:

120 
uI¡16
 
myCuºítB™k
;

123 
uI¡8
 
myImage
[32768];

126 
uI¡8
 
myRAM
[128];

	@emucore/CartF6.cpp

19 
	~<as£π.h
>

20 
	~"C¨tF6.hxx
"

21 
	~"Sy°em.hxx
"

22 
	~"Sîülizî.hxx
"

23 
	~"De£rülizî.hxx
"

24 
	~<io°ªam
>

27 
	gC¨åidgeF6
::
	$C¨åidgeF6
(c⁄° 
uI¡8
* 
image
)

30 
uI¡32
 
addr
 = 0;áddr < 16384; ++addr)

32 
myImage
[
addr
] = 
image
[addr];

34 
	}
}

37 
	gC¨åidgeF6
::~
	$C¨åidgeF6
()

39 
	}
}

42 c⁄° * 
C¨åidgeF6
::
	$«me
() const

45 
	}
}

48 
	gC¨åidgeF6
::
	$ª£t
()

51 
	`b™k
(0);

52 
	}
}

55 
	gC¨åidgeF6
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

57 
mySy°em
 = &
sy°em
;

58 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

59 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

62 
	`as£π
((0x1000 & 
mask
) == 0);

65 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

66 
uI¡32
 
i
 = (0x1FF6 & ~
mask
); i < 0x2000; i +(1 << 
shi·
))

68 
ac˚ss
.
dúe˘PìkBa£
 = 0;

69 
ac˚ss
.
dúe˘PokeBa£
 = 0;

70 
ac˚ss
.
devi˚
 = 
this
;

71 
mySy°em
->
	`£tPageAc˚ss
(
i
 >> 
shi·
, 
ac˚ss
);

75 
	`b™k
(0);

76 
	}
}

79 
uI¡8
 
	gC¨åidgeF6
::
	$≥ek
(
uI¡16
 
addªss
)

81 
addªss
 =áddress & 0x0FFF;

84 
addªss
)

88 
	`b™k
(0);

93 
	`b™k
(1);

98 
	`b™k
(2);

103 
	`b™k
(3);

110  
myImage
[
myCuºítB™k
 * 4096 + 
addªss
];

111 
	}
}

114 
	gC¨åidgeF6
::
	$poke
(
uI¡16
 
addªss
, 
uI¡8
)

116 
addªss
 =áddress & 0x0FFF;

119 
addªss
)

123 
	`b™k
(0);

128 
	`b™k
(1);

133 
	`b™k
(2);

138 
	`b™k
(3);

144 
	}
}

147 
boﬁ
 
	gC¨åidgeF6
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

149 
addªss
 =áddress & 0x0FFF;

150 
myImage
[
myCuºítB™k
 * 4096 + 
addªss
] = 
vÆue
;

151  
åue
;

152 
	}
}

155 
	gC¨åidgeF6
::
	$b™k
(
uI¡16
 
b™k
)

157 if(
b™kLocked
) ;

160 
myCuºítB™k
 = 
b™k
;

161 
uI¡16
 
off£t
 = 
myCuºítB™k
 * 4096;

162 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

163 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

166 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

167 
ac˚ss
.
devi˚
 = 
this
;

168 
ac˚ss
.
dúe˘PokeBa£
 = 0;

171 
uI¡32
 
addªss
 = 0x1000;áddªs†< (0x1FF6U & ~
mask
);

172 
addªss
 +(1 << 
shi·
))

174 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[
off£t
 + (
addªss
 & 0x0FFF)];

175 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> 
shi·
, 
ac˚ss
);

177 
	}
}

180 
	gC¨åidgeF6
::
	$b™k
() {

181  
myCuºítB™k
;

182 
	}
}

185 
	gC¨åidgeF6
::
	$b™kCou¡
() {

187 
	}
}

190 
boﬁ
 
	gC¨åidgeF6
::
	$ßve
(
Sîülizî
& 
out
)

192 
°rög
 
ˇπ
 = 
	`«me
();

194 
__åy


196 
out
.
	`putSåög
(
ˇπ
);

198 
out
.
	`putI¡
(
myCuºítB™k
);

201 
	`ˇtch
(*
msg
)

203 
˚º
 << 
msg
 << 
ídl
;

204  
Ál£
;

207 
	`__ˇtch
(...)

209 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
ˇπ
 << 
ídl
;

210  
Ál£
;

213  
åue
;

214 
	}
}

217 
boﬁ
 
	gC¨åidgeF6
::
	$lﬂd
(
De£rülizî
& 
ö
)

219 
°rög
 
ˇπ
 = 
	`«me
();

221 
__åy


223 if(
ö
.
	`gëSåög
(Ë!
ˇπ
)

224  
Ál£
;

226 
myCuºítB™k
 = (
uI¡16
Ë
ö
.
	`gëI¡
();

229 
	`ˇtch
(*
msg
)

231 
˚º
 << 
msg
 << 
ídl
;

232  
Ál£
;

235 
	`__ˇtch
(...)

237 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
ˇπ
 << 
ídl
;

238  
Ál£
;

242 
	`b™k
(
myCuºítB™k
);

244  
åue
;

245 
	}
}

248 
uI¡8
* 
	gC¨åidgeF6
::
	$gëImage
(& 
size
) {

249 
size
 = 16384;

250  &
myImage
[0];

251 
	}
}

	@emucore/CartF6.hxx

19 #i‚de‡
CARTRIDGEF6_HXX


20 
	#CARTRIDGEF6_HXX


	)

22 
˛ass
 
	gC¨åidgeF6
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

27 
	~"C¨t.hxx
"

36 ˛as†
	cC¨åidgeF6
 : 
public
 
C¨åidge


38 
public
:

44 
C¨åidgeF6
(c⁄° 
uI¡8
* 
image
);

49 
	mvútuÆ
 ~
C¨åidgeF6
();

51 
	mpublic
:

57 
vútuÆ
 c⁄° * 
	$«me
() const;

62 
vútuÆ
 
	`ª£t
();

70 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

78 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

86 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

88 
vútuÆ
 
uI¡8
* 
	`gëImage
(& 
size
);

90 
public
:

96 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

104 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

106 
boﬁ
 
	`∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

113 
	`b™k
(
uI¡16
 
b™k
);

115 
	`b™k
();

116 
	`b™kCou¡
();

118 
¥iv©e
:

120 
uI¡16
 
myCuºítB™k
;

123 
uI¡8
 
myImage
[16384];

	@emucore/CartF6SC.cpp

19 
	~<as£π.h
>

20 
	~"C¨tF6SC.hxx
"

21 
	~"R™dom.hxx
"

22 
	~"Sy°em.hxx
"

23 
	~"Sîülizî.hxx
"

24 
	~"De£rülizî.hxx
"

25 
	~<io°ªam
>

28 
	gC¨åidgeF6SC
::
	$C¨åidgeF6SC
(c⁄° 
uI¡8
* 
image
)

31 
uI¡32
 
addr
 = 0;áddr < 16384; ++addr)

33 
myImage
[
addr
] = 
image
[addr];

37 
˛ass
 
R™dom
 
øndom
;

38 
uI¡32
 
i
 = 0; i < 128; ++i)

40 
myRAM
[
i
] = 
øndom
.
	`√xt
();

42 
	}
}

45 
	gC¨åidgeF6SC
::~
	$C¨åidgeF6SC
()

47 
	}
}

50 c⁄° * 
C¨åidgeF6SC
::
	$«me
() const

53 
	}
}

56 
	gC¨åidgeF6SC
::
	$ª£t
()

59 
	`b™k
(0);

60 
	}
}

63 
	gC¨åidgeF6SC
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

65 
mySy°em
 = &
sy°em
;

66 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

67 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

70 
	`as£π
(((0x1080 & 
mask
) == 0) && ((0x1100 & mask) == 0));

73 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

74 
uI¡32
 
i
 = (0x1FF6 & ~
mask
); i < 0x2000; i +(1 << 
shi·
))

76 
ac˚ss
.
dúe˘PìkBa£
 = 0;

77 
ac˚ss
.
dúe˘PokeBa£
 = 0;

78 
ac˚ss
.
devi˚
 = 
this
;

79 
mySy°em
->
	`£tPageAc˚ss
(
i
 >> 
shi·
, 
ac˚ss
);

83 
uI¡32
 
j
 = 0x1000; j < 0x1080; j +(1 << 
shi·
))

85 
ac˚ss
.
devi˚
 = 
this
;

86 
ac˚ss
.
dúe˘PìkBa£
 = 0;

87 
ac˚ss
.
dúe˘PokeBa£
 = &
myRAM
[
j
 & 0x007F];

88 
mySy°em
->
	`£tPageAc˚ss
(
j
 >> 
shi·
, 
ac˚ss
);

92 
uI¡32
 
k
 = 0x1080; k < 0x1100; k +(1 << 
shi·
))

94 
ac˚ss
.
devi˚
 = 
this
;

95 
ac˚ss
.
dúe˘PìkBa£
 = &
myRAM
[
k
 & 0x007F];

96 
ac˚ss
.
dúe˘PokeBa£
 = 0;

97 
mySy°em
->
	`£tPageAc˚ss
(
k
 >> 
shi·
, 
ac˚ss
);

101 
	`b™k
(0);

102 
	}
}

105 
uI¡8
 
	gC¨åidgeF6SC
::
	$≥ek
(
uI¡16
 
addªss
)

107 
addªss
 =áddress & 0x0FFF;

110 
addªss
)

114 
	`b™k
(0);

119 
	`b™k
(1);

124 
	`b™k
(2);

129 
	`b™k
(3);

139  
myImage
[
myCuºítB™k
 * 4096 + 
addªss
];

140 
	}
}

143 
	gC¨åidgeF6SC
::
	$poke
(
uI¡16
 
addªss
, 
uI¡8
)

145 
addªss
 =áddress & 0x0FFF;

148 
addªss
)

152 
	`b™k
(0);

157 
	`b™k
(1);

162 
	`b™k
(2);

167 
	`b™k
(3);

177 
	}
}

180 
boﬁ
 
	gC¨åidgeF6SC
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

182 
addªss
 =áddress & 0x0FFF;

183 
myImage
[
myCuºítB™k
 * 4096 + 
addªss
] = 
vÆue
;

184  
åue
;

185 
	}
}

188 
	gC¨åidgeF6SC
::
	$b™k
(
uI¡16
 
b™k
)

190 if(
b™kLocked
) ;

193 
myCuºítB™k
 = 
b™k
;

194 
uI¡16
 
off£t
 = 
myCuºítB™k
 * 4096;

195 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

196 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

199 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

200 
ac˚ss
.
devi˚
 = 
this
;

201 
ac˚ss
.
dúe˘PokeBa£
 = 0;

204 
uI¡32
 
addªss
 = 0x1100;áddªs†< (0x1FF6U & ~
mask
);

205 
addªss
 +(1 << 
shi·
))

207 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[
off£t
 + (
addªss
 & 0x0FFF)];

208 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> 
shi·
, 
ac˚ss
);

210 
	}
}

213 
	gC¨åidgeF6SC
::
	$b™k
() {

214  
myCuºítB™k
;

215 
	}
}

218 
	gC¨åidgeF6SC
::
	$b™kCou¡
() {

220 
	}
}

223 
boﬁ
 
	gC¨åidgeF6SC
::
	$ßve
(
Sîülizî
& 
out
)

225 
°rög
 
ˇπ
 = 
	`«me
();

227 
__åy


229 
out
.
	`putSåög
(
ˇπ
);

231 
out
.
	`putI¡
(
myCuºítB™k
);

234 
out
.
	`putI¡
(128);

235 
uI¡32
 
i
 = 0; i < 128; ++i)

236 
out
.
	`putI¡
(
myRAM
[
i
]);

240 
	`ˇtch
(*
msg
)

242 
˚º
 << 
msg
 << 
ídl
;

243  
Ál£
;

246 
	`__ˇtch
(...)

248 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
ˇπ
 << 
ídl
;

249  
Ál£
;

252  
åue
;

253 
	}
}

256 
boﬁ
 
	gC¨åidgeF6SC
::
	$lﬂd
(
De£rülizî
& 
ö
)

258 
°rög
 
ˇπ
 = 
	`«me
();

260 
__åy


262 if(
ö
.
	`gëSåög
(Ë!
ˇπ
)

263  
Ál£
;

265 
myCuºítB™k
 = (
uI¡16
Ë
ö
.
	`gëI¡
();

268 
uI¡32
 
limô
 = (uI¡32Ë
ö
.
	`gëI¡
();

269 
uI¡32
 
i
 = 0; i < 
limô
; ++i)

270 
myRAM
[
i
] = (
uI¡8
Ë
ö
.
	`gëI¡
();

273 
	`ˇtch
(*
msg
)

275 
˚º
 << 
msg
 << 
ídl
;

276  
Ál£
;

279 
	`__ˇtch
(...)

281 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
ˇπ
 << 
ídl
;

282  
Ál£
;

286 
	`b™k
(
myCuºítB™k
);

288  
åue
;

289 
	}
}

292 
uI¡8
* 
	gC¨åidgeF6SC
::
	$gëImage
(& 
size
) {

293 
size
 = 16384;

294  &
myImage
[0];

295 
	}
}

	@emucore/CartF6SC.hxx

19 #i‚de‡
CARTRIDGEF6SC_HXX


20 
	#CARTRIDGEF6SC_HXX


	)

22 
˛ass
 
	gC¨åidgeF6SC
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

27 
	~"C¨t.hxx
"

36 ˛as†
	cC¨åidgeF6SC
 : 
public
 
C¨åidge


38 
public
:

44 
C¨åidgeF6SC
(c⁄° 
uI¡8
* 
image
);

49 
	mvútuÆ
 ~
C¨åidgeF6SC
();

51 
	mpublic
:

57 
vútuÆ
 c⁄° * 
	$«me
() const;

62 
vútuÆ
 
	`ª£t
();

70 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

78 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

86 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

88 
vútuÆ
 
uI¡8
* 
	`gëImage
(& 
size
);

90 
public
:

96 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

104 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

106 
boﬁ
 
	`∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

113 
	`b™k
(
uI¡16
 
b™k
);

115 
	`b™k
();

116 
	`b™kCou¡
();

118 
¥iv©e
:

120 
uI¡16
 
myCuºítB™k
;

123 
uI¡8
 
myImage
[16384];

126 
uI¡8
 
myRAM
[128];

	@emucore/CartF8.cpp

19 
	~<as£π.h
>

20 
	~"C¨tF8.hxx
"

21 
	~"Sy°em.hxx
"

22 
	~"Sîülizî.hxx
"

23 
	~"De£rülizî.hxx
"

24 
	~<io°ªam
>

27 
	gC¨åidgeF8
::
	$C¨åidgeF8
(c⁄° 
uI¡8
* 
image
)

30 
uI¡32
 
addr
 = 0;áddr < 8192; ++addr)

32 
myImage
[
addr
] = 
image
[addr];

34 
	}
}

37 
	gC¨åidgeF8
::~
	$C¨åidgeF8
()

39 
	}
}

42 c⁄° * 
C¨åidgeF8
::
	$«me
() const

45 
	}
}

48 
	gC¨åidgeF8
::
	$ª£t
()

51 
	`b™k
(1);

52 
	}
}

55 
	gC¨åidgeF8
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

57 
mySy°em
 = &
sy°em
;

58 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

59 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

62 
	`as£π
((0x1000 & 
mask
) == 0);

65 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

66 
uI¡32
 
i
 = (0x1FF8 & ~
mask
); i < 0x2000; i +(1 << 
shi·
))

68 
ac˚ss
.
dúe˘PìkBa£
 = 0;

69 
ac˚ss
.
dúe˘PokeBa£
 = 0;

70 
ac˚ss
.
devi˚
 = 
this
;

71 
mySy°em
->
	`£tPageAc˚ss
(
i
 >> 
shi·
, 
ac˚ss
);

75 
	`b™k
(1);

76 
	}
}

79 
uI¡8
 
	gC¨åidgeF8
::
	$≥ek
(
uI¡16
 
addªss
)

81 
addªss
 =áddress & 0x0FFF;

84 
addªss
)

88 
	`b™k
(0);

93 
	`b™k
(1);

100  
myImage
[
myCuºítB™k
 * 4096 + 
addªss
];

101 
	}
}

104 
	gC¨åidgeF8
::
	$poke
(
uI¡16
 
addªss
, 
uI¡8
)

106 
addªss
 =áddress & 0x0FFF;

109 
addªss
)

113 
	`b™k
(0);

118 
	`b™k
(1);

124 
	}
}

127 
boﬁ
 
	gC¨åidgeF8
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

129 
addªss
 &= 0xfff;

130 
myImage
[
myCuºítB™k
 * 4096 + 
addªss
] = 
vÆue
;

131 
	`b™k
(
myCuºítB™k
);

132  
åue
;

133 
	}
}

136 
	gC¨åidgeF8
::
	$b™k
(
uI¡16
 
b™k
)

138 if(
b™kLocked
) ;

141 
myCuºítB™k
 = 
b™k
;

142 
uI¡16
 
off£t
 = 
myCuºítB™k
 * 4096;

143 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

144 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

147 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

148 
ac˚ss
.
devi˚
 = 
this
;

149 
ac˚ss
.
dúe˘PokeBa£
 = 0;

152 
uI¡32
 
addªss
 = 0x1000;áddªs†< (0x1FF8U & ~
mask
);

153 
addªss
 +(1 << 
shi·
))

155 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[
off£t
 + (
addªss
 & 0x0FFF)];

156 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> 
shi·
, 
ac˚ss
);

158 
	}
}

161 
	gC¨åidgeF8
::
	$b™k
() {

162  
myCuºítB™k
;

163 
	}
}

166 
	gC¨åidgeF8
::
	$b™kCou¡
() {

168 
	}
}

171 
boﬁ
 
	gC¨åidgeF8
::
	$ßve
(
Sîülizî
& 
out
)

173 
°rög
 
ˇπ
 = 
	`«me
();

175 
__åy


177 
out
.
	`putSåög
(
ˇπ
);

179 
out
.
	`putI¡
(
myCuºítB™k
);

182 */
	`ˇtch
(*
msg
)

184 
˚º
 << 
msg
 << 
ídl
;

185  
Ál£
;

188 
	`__ˇtch
(...)

190 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
ˇπ
 << 
ídl
;

191  
Ál£
;

194  
åue
;

195 
	}
}

198 
boﬁ
 
	gC¨åidgeF8
::
	$lﬂd
(
De£rülizî
& 
ö
)

200 
°rög
 
ˇπ
 = 
	`«me
();

202 
__åy


204 if(
ö
.
	`gëSåög
(Ë!
ˇπ
)

205  
Ál£
;

207 
myCuºítB™k
 = (
uI¡16
Ë
ö
.
	`gëI¡
();

210 
	`ˇtch
(*
msg
)

212 
˚º
 << 
msg
 << 
ídl
;

213  
Ál£
;

216 
	`__ˇtch
(...)

218 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
ˇπ
 << 
ídl
;

219  
Ál£
;

223 
	`b™k
(
myCuºítB™k
);

225  
åue
;

226 
	}
}

229 
uI¡8
* 
	gC¨åidgeF8
::
	$gëImage
(& 
size
) {

230 
size
 = 8192;

231  &
myImage
[0];

232 
	}
}

	@emucore/CartF8.hxx

19 #i‚de‡
CARTRIDGEF8_HXX


20 
	#CARTRIDGEF8_HXX


	)

22 
˛ass
 
	gC¨åidgeF8
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

27 
	~"C¨t.hxx
"

36 ˛as†
	cC¨åidgeF8
 : 
public
 
C¨åidge


38 
public
:

44 
C¨åidgeF8
(c⁄° 
uI¡8
* 
image
);

49 
	mvútuÆ
 ~
C¨åidgeF8
();

51 
	mpublic
:

57 
vútuÆ
 c⁄° * 
	$«me
() const;

62 
vútuÆ
 
	`ª£t
();

70 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

78 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

86 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

88 
vútuÆ
 
uI¡8
* 
	`gëImage
(& 
size
);

90 
public
:

96 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

104 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

106 
boﬁ
 
	`∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

113 
	`b™k
(
uI¡16
 
b™k
);

114 
	`b™k
();

115 
	`b™kCou¡
();

117 
¥iv©e
:

119 
uI¡16
 
myCuºítB™k
;

122 
uI¡8
 
myImage
[8192];

	@emucore/CartF8SC.cpp

19 
	~<as£π.h
>

20 
	~"C¨tF8SC.hxx
"

21 
	~"R™dom.hxx
"

22 
	~"Sy°em.hxx
"

23 
	~"Sîülizî.hxx
"

24 
	~"De£rülizî.hxx
"

25 
	~<io°ªam
>

28 
	gC¨åidgeF8SC
::
	$C¨åidgeF8SC
(c⁄° 
uI¡8
* 
image
)

31 
uI¡32
 
addr
 = 0;áddr < 8192; ++addr)

33 
myImage
[
addr
] = 
image
[addr];

37 
˛ass
 
R™dom
 
øndom
;

38 
uI¡32
 
i
 = 0; i < 128; ++i)

40 
myRAM
[
i
] = 
øndom
.
	`√xt
();

42 
	}
}

45 
	gC¨åidgeF8SC
::~
	$C¨åidgeF8SC
()

47 
	}
}

50 c⁄° * 
C¨åidgeF8SC
::
	$«me
() const

53 
	}
}

56 
	gC¨åidgeF8SC
::
	$ª£t
()

59 
	`b™k
(1);

60 
	}
}

63 
	gC¨åidgeF8SC
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

65 
mySy°em
 = &
sy°em
;

66 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

67 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

70 
	`as£π
(((0x1080 & 
mask
) == 0) && ((0x1100 & mask) == 0));

73 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

74 
uI¡32
 
i
 = (0x1FF8 & ~
mask
); i < 0x2000; i +(1 << 
shi·
))

76 
ac˚ss
.
dúe˘PìkBa£
 = 0;

77 
ac˚ss
.
dúe˘PokeBa£
 = 0;

78 
ac˚ss
.
devi˚
 = 
this
;

79 
mySy°em
->
	`£tPageAc˚ss
(
i
 >> 
shi·
, 
ac˚ss
);

83 
uI¡32
 
j
 = 0x1000; j < 0x1080; j +(1 << 
shi·
))

85 
ac˚ss
.
devi˚
 = 
this
;

86 
ac˚ss
.
dúe˘PìkBa£
 = 0;

87 
ac˚ss
.
dúe˘PokeBa£
 = &
myRAM
[
j
 & 0x007F];

88 
mySy°em
->
	`£tPageAc˚ss
(
j
 >> 
shi·
, 
ac˚ss
);

92 
uI¡32
 
k
 = 0x1080; k < 0x1100; k +(1 << 
shi·
))

94 
ac˚ss
.
devi˚
 = 
this
;

95 
ac˚ss
.
dúe˘PìkBa£
 = &
myRAM
[
k
 & 0x007F];

96 
ac˚ss
.
dúe˘PokeBa£
 = 0;

97 
mySy°em
->
	`£tPageAc˚ss
(
k
 >> 
shi·
, 
ac˚ss
);

101 
	`b™k
(1);

102 
	}
}

105 
uI¡8
 
	gC¨åidgeF8SC
::
	$≥ek
(
uI¡16
 
addªss
)

107 
addªss
 =áddress & 0x0FFF;

109 if(!
b™kLocked
) {

111 
addªss
)

115 
	`b™k
(0);

120 
	`b™k
(1);

131  
myImage
[
myCuºítB™k
 * 4096 + 
addªss
];

132 
	}
}

135 
	gC¨åidgeF8SC
::
	$poke
(
uI¡16
 
addªss
, 
uI¡8
)

137 
addªss
 =áddress & 0x0FFF;

139 if(!
b™kLocked
) {

141 
addªss
)

145 
	`b™k
(0);

150 
	`b™k
(1);

161 
	}
}

164 
	gC¨åidgeF8SC
::
	$b™k
() {

165  
myCuºítB™k
;

166 
	}
}

169 
	gC¨åidgeF8SC
::
	$b™kCou¡
() {

171 
	}
}

174 
boﬁ
 
	gC¨åidgeF8SC
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

176 
addªss
 =áddress & 0x0FFF;

177 
myImage
[
myCuºítB™k
 * 4096 + 
addªss
] = 
vÆue
;

178  
åue
;

179 
	}
}

182 
	gC¨åidgeF8SC
::
	$b™k
(
uI¡16
 
b™k
)

185 
myCuºítB™k
 = 
b™k
;

186 
uI¡16
 
off£t
 = 
myCuºítB™k
 << 12;

187 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

188 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

191 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

192 
ac˚ss
.
devi˚
 = 
this
;

193 
ac˚ss
.
dúe˘PokeBa£
 = 0;

196 
uI¡32
 
addªss
 = 0x1100;áddªs†< (0x1FF8U & ~
mask
);

197 
addªss
 +(1 << 
shi·
))

199 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[
off£t
 + (
addªss
 & 0x0FFF)];

200 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> 
shi·
, 
ac˚ss
);

202 
	}
}

205 
boﬁ
 
	gC¨åidgeF8SC
::
	$ßve
(
Sîülizî
& 
out
)

207 
°rög
 
ˇπ
 = 
	`«me
();

209 
__åy


211 
out
.
	`putSåög
(
ˇπ
);

213 
out
.
	`putI¡
(
myCuºítB™k
);

216 
out
.
	`putI¡
(128);

217 
uI¡32
 
i
 = 0; i < 128; ++i)

218 
out
.
	`putI¡
(
myRAM
[
i
]);

221 
	`ˇtch
(*
msg
)

223 
˚º
 << 
msg
 << 
ídl
;

224  
Ál£
;

227 
	`__ˇtch
(...)

229 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
ˇπ
 << 
ídl
;

230  
Ál£
;

233  
åue
;

234 
	}
}

237 
boﬁ
 
	gC¨åidgeF8SC
::
	$lﬂd
(
De£rülizî
& 
ö
)

239 
°rög
 
ˇπ
 = 
	`«me
();

241 
__åy


243 if(
ö
.
	`gëSåög
(Ë!
ˇπ
)

244  
Ál£
;

246 
myCuºítB™k
 = (
uI¡16
Ë
ö
.
	`gëI¡
();

248 
uI¡32
 
limô
 = (uI¡32Ë
ö
.
	`gëI¡
();

249 
uI¡32
 
i
 = 0; i < 
limô
; ++i)

250 
myRAM
[
i
] = (
uI¡8
Ë
ö
.
	`gëI¡
();

253 
	`ˇtch
(*
msg
)

255 
˚º
 << 
msg
 << 
ídl
;

256  
Ál£
;

259 
	`__ˇtch
(...)

261 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
ˇπ
 << 
ídl
;

262  
Ál£
;

266 
	`b™k
(
myCuºítB™k
);

268  
åue
;

269 
	}
}

272 
uI¡8
* 
	gC¨åidgeF8SC
::
	$gëImage
(& 
size
) {

273 
size
 = 8192;

274  &
myImage
[0];

275 
	}
}

	@emucore/CartF8SC.hxx

19 #i‚de‡
CARTRIDGEF8SC_HXX


20 
	#CARTRIDGEF8SC_HXX


	)

22 
˛ass
 
	gC¨åidgeF8SC
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

27 
	~"C¨t.hxx
"

36 ˛as†
	cC¨åidgeF8SC
 : 
public
 
C¨åidge


38 
public
:

44 
C¨åidgeF8SC
(c⁄° 
uI¡8
* 
image
);

49 
	mvútuÆ
 ~
C¨åidgeF8SC
();

51 
	mpublic
:

57 
vútuÆ
 c⁄° * 
	$«me
() const;

62 
vútuÆ
 
	`ª£t
();

70 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

78 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

86 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

88 
vútuÆ
 
uI¡8
* 
	`gëImage
(& 
size
);

90 
public
:

96 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

104 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

106 
boﬁ
 
	`∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

113 
	`b™k
(
uI¡16
 
b™k
);

115 
	`b™k
();

117 
	`b™kCou¡
();

119 
¥iv©e
:

121 
uI¡16
 
myCuºítB™k
;

124 
uI¡8
 
myImage
[8192];

127 
uI¡8
 
myRAM
[128];

	@emucore/CartFASC.cpp

19 
	~<as£π.h
>

20 
	~"C¨tFASC.hxx
"

21 
	~"R™dom.hxx
"

22 
	~"Sy°em.hxx
"

23 
	~"Sîülizî.hxx
"

24 
	~"De£rülizî.hxx
"

25 
	~<io°ªam
>

28 
	gC¨åidgeFASC
::
	$C¨åidgeFASC
(c⁄° 
uI¡8
* 
image
)

31 
uI¡32
 
addr
 = 0;áddr < 12288; ++addr)

33 
myImage
[
addr
] = 
image
[addr];

37 
˛ass
 
R™dom
 
øndom
;

38 
uI¡32
 
i
 = 0; i < 256; ++i)

40 
myRAM
[
i
] = 
øndom
.
	`√xt
();

42 
	}
}

45 
	gC¨åidgeFASC
::~
	$C¨åidgeFASC
()

47 
	}
}

50 c⁄° * 
C¨åidgeFASC
::
	$«me
() const

53 
	}
}

56 
	gC¨åidgeFASC
::
	$ª£t
()

59 
	`b™k
(2);

60 
	}
}

63 
	gC¨åidgeFASC
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

65 
mySy°em
 = &
sy°em
;

66 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

67 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

70 
	`as£π
(((0x1100 & 
mask
) == 0) && ((0x1200 & mask) == 0));

73 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

74 
uI¡32
 
i
 = (0x1FF8 & ~
mask
); i < 0x2000; i +(1 << 
shi·
))

76 
ac˚ss
.
dúe˘PìkBa£
 = 0;

77 
ac˚ss
.
dúe˘PokeBa£
 = 0;

78 
ac˚ss
.
devi˚
 = 
this
;

79 
mySy°em
->
	`£tPageAc˚ss
(
i
 >> 
shi·
, 
ac˚ss
);

83 
uI¡32
 
j
 = 0x1000; j < 0x1100; j +(1 << 
shi·
))

85 
ac˚ss
.
devi˚
 = 
this
;

86 
ac˚ss
.
dúe˘PìkBa£
 = 0;

87 
ac˚ss
.
dúe˘PokeBa£
 = &
myRAM
[
j
 & 0x00FF];

88 
mySy°em
->
	`£tPageAc˚ss
(
j
 >> 
shi·
, 
ac˚ss
);

92 
uI¡32
 
k
 = 0x1100; k < 0x1200; k +(1 << 
shi·
))

94 
ac˚ss
.
devi˚
 = 
this
;

95 
ac˚ss
.
dúe˘PìkBa£
 = &
myRAM
[
k
 & 0x00FF];

96 
ac˚ss
.
dúe˘PokeBa£
 = 0;

97 
mySy°em
->
	`£tPageAc˚ss
(
k
 >> 
shi·
, 
ac˚ss
);

101 
	`b™k
(2);

102 
	}
}

105 
uI¡8
 
	gC¨åidgeFASC
::
	$≥ek
(
uI¡16
 
addªss
)

107 
addªss
 =áddress & 0x0FFF;

110 
addªss
)

114 
	`b™k
(0);

119 
	`b™k
(1);

124 
	`b™k
(2);

134  
myImage
[
myCuºítB™k
 * 4096 + 
addªss
];

135 
	}
}

138 
	gC¨åidgeFASC
::
	$poke
(
uI¡16
 
addªss
, 
uI¡8
)

140 
addªss
 =áddress & 0x0FFF;

143 
addªss
)

147 
	`b™k
(0);

152 
	`b™k
(1);

157 
	`b™k
(2);

167 
	}
}

170 
boﬁ
 
	gC¨åidgeFASC
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

172 
addªss
 =áddress & 0x0FFF;

173 
myImage
[
myCuºítB™k
 * 4096 + 
addªss
] = 
vÆue
;

174  
åue
;

175 
	}
}

178 
	gC¨åidgeFASC
::
	$b™k
(
uI¡16
 
b™k
)

180 if(
b™kLocked
) ;

183 
myCuºítB™k
 = 
b™k
;

184 
uI¡16
 
off£t
 = 
myCuºítB™k
 * 4096;

185 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

186 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

189 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

190 
ac˚ss
.
devi˚
 = 
this
;

191 
ac˚ss
.
dúe˘PokeBa£
 = 0;

194 
uI¡32
 
addªss
 = 0x1200;áddªs†< (0x1FF8U & ~
mask
);

195 
addªss
 +(1 << 
shi·
))

197 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[
off£t
 + (
addªss
 & 0x0FFF)];

198 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> 
shi·
, 
ac˚ss
);

200 
	}
}

203 
	gC¨åidgeFASC
::
	$b™k
() {

204  
myCuºítB™k
;

205 
	}
}

208 
	gC¨åidgeFASC
::
	$b™kCou¡
() {

210 
	}
}

213 
boﬁ
 
	gC¨åidgeFASC
::
	$ßve
(
Sîülizî
& 
out
)

215 
°rög
 
ˇπ
 = 
	`«me
();

217 
__åy


219 
out
.
	`putSåög
(
ˇπ
);

221 
out
.
	`putI¡
(
myCuºítB™k
);

224 
out
.
	`putI¡
(256);

225 
uI¡32
 
i
 = 0; i < 256; ++i)

226 
out
.
	`putI¡
(
myRAM
[
i
]);

229 
	`ˇtch
(*
msg
)

231 
˚º
 << 
msg
 << 
ídl
;

232  
Ál£
;

235 
	`__ˇtch
(...)

237 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
ˇπ
 << 
ídl
;

238  
Ál£
;

241  
åue
;

242 
	}
}

245 
boﬁ
 
	gC¨åidgeFASC
::
	$lﬂd
(
De£rülizî
& 
ö
)

247 
°rög
 
ˇπ
 = 
	`«me
();

249 
__åy


251 if(
ö
.
	`gëSåög
(Ë!
ˇπ
)

252  
Ál£
;

254 
myCuºítB™k
 = (
uI¡16
Ë
ö
.
	`gëI¡
();

256 
uI¡32
 
limô
 = (uI¡32Ë
ö
.
	`gëI¡
();

257 
uI¡32
 
i
 = 0; i < 
limô
; ++i)

258 
myRAM
[
i
] = (
uI¡8
Ë
ö
.
	`gëI¡
();

261 
	`ˇtch
(*
msg
)

263 
˚º
 << 
msg
 << 
ídl
;

264  
Ál£
;

267 
	`__ˇtch
(...)

269 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
ˇπ
 << 
ídl
;

270  
Ál£
;

274 
	`b™k
(
myCuºítB™k
);

276  
åue
;

277 
	}
}

280 
uI¡8
* 
	gC¨åidgeFASC
::
	$gëImage
(& 
size
) {

281 
size
 = 12288;

282  &
myImage
[0];

283 
	}
}

	@emucore/CartFASC.hxx

19 #i‚de‡
CARTRIDGEFASC_HXX


20 
	#CARTRIDGEFASC_HXX


	)

22 
˛ass
 
	gC¨åidgeFASC
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

27 
	~"C¨t.hxx
"

36 ˛as†
	cC¨åidgeFASC
 : 
public
 
C¨åidge


38 
public
:

44 
C¨åidgeFASC
(c⁄° 
uI¡8
* 
image
);

49 
	mvútuÆ
 ~
C¨åidgeFASC
();

51 
	mpublic
:

57 
vútuÆ
 c⁄° * 
	$«me
() const;

62 
vútuÆ
 
	`ª£t
();

70 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

78 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

86 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

88 
vútuÆ
 
uI¡8
* 
	`gëImage
(& 
size
);

90 
public
:

96 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

104 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

106 
boﬁ
 
	`∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

113 
	`b™k
(
uI¡16
 
b™k
);

115 
	`b™k
();

116 
	`b™kCou¡
();

118 
¥iv©e
:

120 
uI¡16
 
myCuºítB™k
;

123 
uI¡8
 
myImage
[12288];

126 
uI¡8
 
myRAM
[256];

	@emucore/CartFE.cpp

19 
	~<as£π.h
>

20 
	~"C¨tFE.hxx
"

21 
	~"Sy°em.hxx
"

22 
	~"Sîülizî.hxx
"

23 
	~"De£rülizî.hxx
"

24 
	~<io°ªam
>

27 
	gC¨åidgeFE
::
	$C¨åidgeFE
(c⁄° 
uI¡8
* 
image
)

30 
uI¡32
 
addr
 = 0;áddr < 8192; ++addr)

32 
myImage
[
addr
] = 
image
[addr];

34 
	}
}

37 
	gC¨åidgeFE
::~
	$C¨åidgeFE
()

39 
	}
}

42 c⁄° * 
C¨åidgeFE
::
	$«me
() const

45 
	}
}

48 
	gC¨åidgeFE
::
	$ª£t
()

50 
	}
}

53 
C¨åidgeFE
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

55 
mySy°em
 = &
sy°em
;

56 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

57 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

60 
	`as£π
((0x1000 & 
mask
) == 0);

63 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

64 
uI¡32
 
i
 = 0x1000; i < 0x2000; i +(1 << 
shi·
))

66 
ac˚ss
.
dúe˘PìkBa£
 = 0;

67 
ac˚ss
.
dúe˘PokeBa£
 = 0;

68 
ac˚ss
.
devi˚
 = 
this
;

69 
mySy°em
->
	`£tPageAc˚ss
(
i
 >> 
shi·
, 
ac˚ss
);

71 
	}
}

74 
uI¡8
 
	gC¨åidgeFE
::
	$≥ek
(
uI¡16
 
addªss
)

77  
myImage
[(
addªss
 & 0x0FFF) + (((address & 0x2000) == 0) ? 4096 : 0)];

78 
	}
}

81 
	gC¨åidgeFE
::
	$poke
(
uI¡16
, 
uI¡8
)

83 
	}
}

86 
boﬁ
 
	gC¨åidgeFE
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

88 
myImage
[(
addªss
 & 0x0FFFË+ ((◊ddªs†& 0x2000Ë=0Ë? 4096 : 0)] = 
vÆue
;

89  
åue
;

90 
	}
}

93 
boﬁ
 
	gC¨åidgeFE
::
	$ßve
(
Sîülizî
& 
out
)

95 
°rög
 
ˇπ
 = 
	`«me
();

97 
__åy


99 
out
.
	`putSåög
(
ˇπ
);

102 
	`ˇtch
(*
msg
)

104 
˚º
 << 
msg
 << 
ídl
;

105  
Ál£
;

108 
	`__ˇtch
(...)

110 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
ˇπ
 << 
ídl
;

111  
Ál£
;

114  
åue
;

115 
	}
}

118 
boﬁ
 
	gC¨åidgeFE
::
	$lﬂd
(
De£rülizî
& 
ö
)

120 
°rög
 
ˇπ
 = 
	`«me
();

122 
__åy


124 if(
ö
.
	`gëSåög
(Ë!
ˇπ
)

125  
Ál£
;

128 
	`ˇtch
(*
msg
)

130 
˚º
 << 
msg
 << 
ídl
;

131  
Ál£
;

134 
	`__ˇtch
(...)

136 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
ˇπ
 << 
ídl
;

137  
Ál£
;

140  
åue
;

141 
	}
}

144 
uI¡8
* 
	gC¨åidgeFE
::
	$gëImage
(& 
size
) {

145 
size
 = 8192;

146  &
myImage
[0];

147 
	}
}

	@emucore/CartFE.hxx

19 #i‚de‡
CARTRIDGEFE_HXX


20 
	#CARTRIDGEFE_HXX


	)

22 
˛ass
 
	gC¨åidgeFE
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

27 
	~"C¨t.hxx
"

48 ˛as†
	cC¨åidgeFE
 : 
public
 
C¨åidge


50 
public
:

56 
C¨åidgeFE
(c⁄° 
uI¡8
* 
image
);

61 
	mvútuÆ
 ~
C¨åidgeFE
();

63 
	mpublic
:

69 
vútuÆ
 c⁄° * 
	$«me
() const;

74 
vútuÆ
 
	`ª£t
();

82 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

90 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

98 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

100 
vútuÆ
 
uI¡8
* 
	`gëImage
(& 
size
);

102 
public
:

108 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

116 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

118 
boﬁ
 
	`∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

120 
¥iv©e
:

122 
uI¡8
 
myImage
[8192];

	@emucore/CartMB.cpp

19 
	~<as£π.h
>

20 
	~"C¨tMB.hxx
"

21 
	~"Sy°em.hxx
"

22 
	~"Sîülizî.hxx
"

23 
	~"De£rülizî.hxx
"

24 
	~<io°ªam
>

27 
	gC¨åidgeMB
::
	$C¨åidgeMB
(c⁄° 
uI¡8
* 
image
)

30 
uI¡32
 
addr
 = 0;áddr < 65536; ++addr)

32 
myImage
[
addr
] = 
image
[addr];

34 
	}
}

37 
	gC¨åidgeMB
::~
	$C¨åidgeMB
()

39 
	}
}

42 c⁄° * 
C¨åidgeMB
::
	$«me
() const

45 
	}
}

48 
	gC¨åidgeMB
::
	$ª£t
()

51 
myCuºítB™k
 = 0;

52 
	`öcb™k
();

53 
	}
}

56 
	gC¨åidgeMB
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

58 
mySy°em
 = &
sy°em
;

59 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

60 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

63 
	`as£π
((0x1000 & 
mask
) == 0);

66 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

67 
uI¡32
 
i
 = (0x1FF0 & ~
mask
); i < 0x2000; i +(1 << 
shi·
))

69 
ac˚ss
.
dúe˘PìkBa£
 = 0;

70 
ac˚ss
.
dúe˘PokeBa£
 = 0;

71 
ac˚ss
.
devi˚
 = 
this
;

72 
mySy°em
->
	`£tPageAc˚ss
(
i
 >> 
shi·
, 
ac˚ss
);

76 
myCuºítB™k
 = 0;

77 
	`öcb™k
();

78 
	}
}

81 
uI¡8
 
	gC¨åidgeMB
::
	$≥ek
(
uI¡16
 
addªss
)

83 
addªss
 =áddress & 0x0FFF;

86 if(
addªss
 =0x0FF0Ë
	`öcb™k
();

88  
myImage
[
myCuºítB™k
 * 4096 + 
addªss
];

89 
	}
}

92 
	gC¨åidgeMB
::
	$poke
(
uI¡16
 
addªss
, 
uI¡8
)

94 
addªss
 =áddress & 0x0FFF;

97 if(
addªss
 =0x0FF0Ë
	`öcb™k
();

98 
	}
}

101 
boﬁ
 
	gC¨åidgeMB
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

103 
addªss
 =áddress & 0x0FFF;

104 
myImage
[
myCuºítB™k
 * 4096 + 
addªss
] = 
vÆue
;

105  
åue
;

106 
	}
}

109 
	gC¨åidgeMB
::
	$öcb™k
()

111 if(
b™kLocked
) ;

114 
myCuºítB™k
 ++;

115 
myCuºítB™k
 &= 0x0F;

116 
uI¡16
 
off£t
 = 
myCuºítB™k
 * 4096;

117 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

118 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

121 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

122 
ac˚ss
.
devi˚
 = 
this
;

123 
ac˚ss
.
dúe˘PokeBa£
 = 0;

126 
uI¡32
 
addªss
 = 0x1000;áddªs†< (0x1FF0U & ~
mask
);

127 
addªss
 +(1 << 
shi·
))

129 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[
off£t
 + (
addªss
 & 0x0FFF)];

130 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> 
shi·
, 
ac˚ss
);

132 
	}
}

135 
	gC¨åidgeMB
::
	$b™k
(
uI¡16
 
b
) {

136 
myCuºítB™k
 = (
b
 - 1);

137 
	`öcb™k
();

138 
	}
}

141 
	gC¨åidgeMB
::
	$b™k
() {

142  
myCuºítB™k
;

143 
	}
}

146 
	gC¨åidgeMB
::
	$b™kCou¡
() {

148 
	}
}

151 
boﬁ
 
	gC¨åidgeMB
::
	$ßve
(
Sîülizî
& 
out
)

153 
°rög
 
ˇπ
 = 
	`«me
();

155 
__åy


157 
out
.
	`putSåög
(
ˇπ
);

159 
out
.
	`putI¡
(
myCuºítB™k
);

162 
	`ˇtch
(*
msg
)

164 
˚º
 << 
msg
 << 
ídl
;

165  
Ál£
;

168 
	`__ˇtch
(...)

170 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
ˇπ
 << 
ídl
;

171  
Ál£
;

174  
åue
;

175 
	}
}

178 
boﬁ
 
	gC¨åidgeMB
::
	$lﬂd
(
De£rülizî
& 
ö
)

180 
°rög
 
ˇπ
 = 
	`«me
();

182 
__åy


184 if(
ö
.
	`gëSåög
(Ë!
ˇπ
)

185  
Ál£
;

187 
myCuºítB™k
 = (
uI¡16
Ë
ö
.
	`gëI¡
();

190 
	`ˇtch
(*
msg
)

192 
˚º
 << 
msg
 << 
ídl
;

193  
Ál£
;

196 
	`__ˇtch
(...)

198 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
ˇπ
 << 
ídl
;

199  
Ál£
;

203 --
myCuºítB™k
;

204 
	`öcb™k
();

206  
åue
;

207 
	}
}

210 
uI¡8
* 
	gC¨åidgeMB
::
	$gëImage
(& 
size
) {

211 
size
 = 65536;

212  &
myImage
[0];

213 
	}
}

	@emucore/CartMB.hxx

19 #i‚de‡
CARTRIDGEMB_HXX


20 
	#CARTRIDGEMB_HXX


	)

22 
˛ass
 
	gC¨åidgeMB
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

27 
	~"C¨t.hxx
"

37 ˛as†
	cC¨åidgeMB
 : 
public
 
C¨åidge


39 
public
:

45 
C¨åidgeMB
(c⁄° 
uI¡8
* 
image
);

50 
	mvútuÆ
 ~
C¨åidgeMB
();

52 
	mpublic
:

58 
vútuÆ
 c⁄° * 
	$«me
() const;

63 
vútuÆ
 
	`ª£t
();

71 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

79 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

87 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

89 
vútuÆ
 
uI¡8
* 
	`gëImage
(& 
size
);

91 
public
:

97 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

105 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

107 
boﬁ
 
	`∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

109 
	`b™k
(
uI¡16
 
b
);

111 
	`b™k
();

113 
	`b™kCou¡
();

115 
¥iv©e
:

119 
	`öcb™k
();

121 
¥iv©e
:

123 
uI¡16
 
myCuºítB™k
;

126 
uI¡8
 
myImage
[65536];

	@emucore/CartMC.cpp

19 
	~<as£π.h
>

20 
	~"C¨tMC.hxx
"

21 
	~"R™dom.hxx
"

22 
	~"Sy°em.hxx
"

23 
	~"Sîülizî.hxx
"

24 
	~"De£rülizî.hxx
"

25 
	~<io°ªam
>

28 
	gC¨åidgeMC
::
	$C¨åidgeMC
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
)

29 : 
	$mySlŸ3Locked
(
Ál£
)

31 
uI¡32
 
i
;

34 
	`as£π
(
size
 <= 128 * 1024);

37 
myRAM
 = 
√w
 
uI¡8
[32 * 1024];

40 
˛ass
 
R™dom
 
øndom
;

41 
i
 = 0; i < 32 * 1024; ++i)

43 
myRAM
[
i
] = 
øndom
.
	`√xt
();

47 
myImage
 = 
√w
 
uI¡8
[128 * 1024];

50 
i
 = 0; i < 128 * 1024; ++i)

52 
myImage
[
i
] = 0;

56 
i
 = 0; i < 
size
; ++i)

58 
myImage
[128 * 1024 - 
size
 + 
i
] = 
image
[i];

60 
	}
}

63 
	gC¨åidgeMC
::~
	$C¨åidgeMC
()

65 
dñëe
[] 
myRAM
;

66 
dñëe
[] 
myImage
;

67 
	}
}

70 c⁄° * 
	gC¨åidgeMC
::
	$«me
() const

73 
	}
}

76 
	gC¨åidgeMC
::
	$ª£t
()

78 
	}
}

81 
C¨åidgeMC
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

83 
mySy°em
 = &
sy°em
;

84 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

85 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

88 
	`as£π
(((0x1000 & 
mask
) == 0) && ((0x1400 & mask) == 0) &&

89 ((0x1800 & 
mask
) == 0) && ((0x1C00 & mask) == 0));

98 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

99 
uI¡32
 
i
 = 0x00; i < 0x40; i +(1 << 
shi·
))

101 
ac˚ss
.
dúe˘PìkBa£
 = 0;

102 
ac˚ss
.
dúe˘PokeBa£
 = 0;

103 
ac˚ss
.
devi˚
 = 
this
;

104 
mySy°em
->
	`£tPageAc˚ss
(
i
 >> 
shi·
, 
ac˚ss
);

108 
uI¡32
 
j
 = 0x1000; j < 0x2000; j +(1 << 
shi·
))

110 
ac˚ss
.
devi˚
 = 
this
;

111 
ac˚ss
.
dúe˘PìkBa£
 = 0;

112 
ac˚ss
.
dúe˘PokeBa£
 = 0;

113 
mySy°em
->
	`£tPageAc˚ss
(
j
 >> 
shi·
, 
ac˚ss
);

115 
	}
}

118 
uI¡8
 
	gC¨åidgeMC
::
	$≥ek
(
uI¡16
 
addªss
)

120 
addªss
 =áddress & 0x1FFF;

123 if((
addªss
 == 0x1FFC) || (address == 0x1FFD))

126 
mySlŸ3Locked
 = 
åue
;

129 if(
mySlŸ3Locked
 && (
addªss
 >= 0x1000) && (address <= 0x1BFF))

132 
mySlŸ3Locked
 = 
Ál£
;

136 if(
addªss
 < 0x1000)

142 
uI¡8
 
block
;

144 if(
mySlŸ3Locked
 && ((
addªss
 & 0x0C00) == 0x0C00))

146 
block
 = 0xFF;

150 
block
 = 
myCuºítBlock
[(
addªss
 & 0x0C00) >> 10];

154 if(
block
 & 0x80)

157  
myImage
[(
uI¡32
)(
block
 & 0x7FË* 1024 + (
addªss
 & 0x03FF)];

162 if(
addªss
 & 0x0200)

165  
myRAM
[(
uI¡32
)(
block
 & 0x3FË* 512 + (
addªss
 & 0x01FF)];

170 
myRAM
[(
uI¡32
)(
block
 & 0x3FË* 512 + (
addªss
 & 0x01FF)] = 0;

175 
	}
}

178 
	gC¨åidgeMC
::
	$poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

180 
addªss
 =áddress & 0x1FFF;

183 if((
addªss
 == 0x1FFC) || (address == 0x1FFD))

186 
mySlŸ3Locked
 = 
åue
;

189 if(
mySlŸ3Locked
 && (
addªss
 >= 0x1000) && (address <= 0x1BFF))

192 
mySlŸ3Locked
 = 
Ál£
;

196 if((
addªss
 >= 0x003C) && (address <= 0x003F))

198 
myCuºítBlock
[
addªss
 - 0x003C] = 
vÆue
;

202 
uI¡8
 
block
;

204 if(
mySlŸ3Locked
 && ((
addªss
 & 0x0C00) == 0x0C00))

206 
block
 = 0xFF;

210 
block
 = 
myCuºítBlock
[(
addªss
 & 0x0C00) >> 10];

214 if(!(
block
 & 0x80Ë&& !(
addªss
 & 0x0200))

217 
myRAM
[(
uI¡32
)(
block
 & 0x3FË* 512 + (
addªss
 & 0x01FF)] = 
vÆue
;

220 
	}
}

223 
boﬁ
 
	gC¨åidgeMC
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

226  
Ál£
;

227 
	}
}

230 
boﬁ
 
	gC¨åidgeMC
::
	$ßve
(
Sîülizî
& 
out
)

232 
uI¡32
 
i
;

233 
°rög
 
ˇπ
 = 
	`«me
();

235 
__åy


237 
out
.
	`putSåög
(
ˇπ
);

240 
out
.
	`putI¡
(4);

241 
i
 = 0; i < 4; ++i)

242 
out
.
	`putI¡
(
myCuºítBlock
[
i
]);

245 
out
.
	`putI¡
(32 * 1024);

246 
i
 = 0; i < 32 * 1024; ++i)

247 
out
.
	`putI¡
(
myRAM
[
i
]);

250 
	`ˇtch
(*
msg
)

252 
˚º
 << 
msg
 << 
ídl
;

253  
Ál£
;

256 
	`__ˇtch
(...)

258 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
ˇπ
 << 
ídl
;

259  
Ál£
;

262  
åue
;

263 
	}
}

266 
boﬁ
 
	gC¨åidgeMC
::
	$lﬂd
(
De£rülizî
& 
ö
)

268 
uI¡32
 
i
;

269 
°rög
 
ˇπ
 = 
	`«me
();

271 
__åy


273 
uI¡32
 
limô
;

275 if(
ö
.
	`gëSåög
(Ë!
ˇπ
)

276  
Ál£
;

279 
limô
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

280 
i
 = 0; i < 
limô
; ++i)

281 
myCuºítBlock
[
i
] = (
uI¡8
Ë
ö
.
	`gëI¡
();

284 
limô
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

285 
i
 = 0; i < 
limô
; ++i)

286 
myRAM
[
i
] = (
uI¡8
Ë
ö
.
	`gëI¡
();

289 
	`ˇtch
(*
msg
)

291 
˚º
 << 
msg
 << 
ídl
;

292  
Ál£
;

295 
	`__ˇtch
(...)

297 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
ˇπ
 << 
ídl
;

298  
Ál£
;

301  
åue
;

302 
	}
}

305 
uI¡8
* 
	gC¨åidgeMC
::
	$gëImage
(& 
size
) {

306 
size
 = 128 * 1024;

307  &
myImage
[0];

308 
	}
}

	@emucore/CartMC.hxx

19 #i‚de‡
CARTRIDGEMC_HXX


20 
	#CARTRIDGEMC_HXX


	)

22 
˛ass
 
	gC¨åidgeMC
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

27 
	~"C¨t.hxx
"

140 ˛as†
	cC¨åidgeMC
 : 
public
 
C¨åidge


142 
public
:

151 
C¨åidgeMC
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
);

156 
	mvútuÆ
 ~
C¨åidgeMC
();

158 
	mpublic
:

164 
vútuÆ
 c⁄° * 
	$«me
() const;

169 
vútuÆ
 
	`ª£t
();

177 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

185 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

193 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

195 
vútuÆ
 
uI¡8
* 
	`gëImage
(& 
size
);

197 
public
:

203 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

211 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

213 
boﬁ
 
	`∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

215 
¥iv©e
:

217 
uI¡8
 
myCuºítBlock
[4];

220 
boﬁ
 
mySlŸ3Locked
;

223 
uI¡8
* 
myRAM
;

226 
uI¡8
* 
myImage
;

	@emucore/CartUA.cpp

19 
	~<ˇs£π
>

20 
	~<io°ªam
>

21 
	~"C¨tUA.hxx
"

22 
	~"Sy°em.hxx
"

23 
	~"Sîülizî.hxx
"

24 
	~"De£rülizî.hxx
"

27 
	gC¨åidgeUA
::
	$C¨åidgeUA
(c⁄° 
uI¡8
* 
image
)

30 
uI¡32
 
addr
 = 0;áddr < 8192; ++addr)

32 
myImage
[
addr
] = 
image
[addr];

34 
	}
}

37 
	gC¨åidgeUA
::~
	$C¨åidgeUA
()

39 
	}
}

42 c⁄° * 
C¨åidgeUA
::
	$«me
() const

45 
	}
}

48 
	gC¨åidgeUA
::
	$ª£t
()

51 
	`b™k
(0);

52 
	}
}

55 
	gC¨åidgeUA
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

57 
mySy°em
 = &
sy°em
;

58 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

59 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

62 
	`as£π
((0x1000 & 
mask
) == 0);

66 
myHŸSpŸPageAc˚ss
 = 
mySy°em
->
	`gëPageAc˚ss
(0x0220 >> 
shi·
);

69 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

70 
ac˚ss
.
dúe˘PìkBa£
 = 0;

71 
ac˚ss
.
dúe˘PokeBa£
 = 0;

72 
ac˚ss
.
devi˚
 = 
this
;

73 
mySy°em
->
	`£tPageAc˚ss
(0x0220 >> 
shi·
, 
ac˚ss
);

74 
mySy°em
->
	`£tPageAc˚ss
(0x0240 >> 
shi·
, 
ac˚ss
);

77 
	`b™k
(0);

78 
	}
}

81 
uI¡8
 
	gC¨åidgeUA
::
	$≥ek
(
uI¡16
 
addªss
)

83 
addªss
 =áddress & 0x1FFF;

86 
addªss
)

90 
	`b™k
(0);

95 
	`b™k
(1);

102 if(!(
addªss
 & 0x1000))

104  
myHŸSpŸPageAc˚ss
.
devi˚
->
	`≥ek
(
addªss
);

110 
	}
}

113 
	gC¨åidgeUA
::
	$poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

115 
addªss
 =áddress & 0x1FFF;

118 
addªss
)

122 
	`b™k
(0);

127 
	`b™k
(1);

134 if(!(
addªss
 & 0x1000))

136 
myHŸSpŸPageAc˚ss
.
devi˚
->
	`poke
(
addªss
, 
vÆue
);

138 
	}
}

141 
boﬁ
 
	gC¨åidgeUA
::
	$∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

143 
addªss
 &= 0x0fff;

144 
myImage
[
myCuºítB™k
 * 4096] = 
vÆue
;

145 
	`b™k
(
myCuºítB™k
);

146  
åue
;

147 
	}
}

150 
	gC¨åidgeUA
::
	$b™k
(
uI¡16
 
b™k
)

152 if(
b™kLocked
) ;

155 
myCuºítB™k
 = 
b™k
;

156 
uI¡16
 
off£t
 = 
myCuºítB™k
 * 4096;

157 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

161 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

162 
ac˚ss
.
devi˚
 = 
this
;

163 
ac˚ss
.
dúe˘PokeBa£
 = 0;

166 
uI¡32
 
addªss
 = 0x1000;áddªs†< 0x2000;áddªs†+(1 << 
shi·
))

168 
ac˚ss
.
dúe˘PìkBa£
 = &
myImage
[
off£t
 + (
addªss
 & 0x0FFF)];

169 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> 
shi·
, 
ac˚ss
);

171 
	}
}

174 
	gC¨åidgeUA
::
	$b™k
() {

175  
myCuºítB™k
;

176 
	}
}

179 
	gC¨åidgeUA
::
	$b™kCou¡
() {

181 
	}
}

184 
boﬁ
 
	gC¨åidgeUA
::
	$ßve
(
Sîülizî
& 
out
)

186 
°rög
 
ˇπ
 = 
	`«me
();

188 
__åy


190 
out
.
	`putSåög
(
ˇπ
);

192 
out
.
	`putI¡
(
myCuºítB™k
);

195 
	`ˇtch
(*
msg
)

197 
˚º
 << 
msg
 << 
ídl
;

198  
Ál£
;

201 
	`__ˇtch
(...)

203 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
ˇπ
 << 
ídl
;

204  
Ál£
;

207  
åue
;

208 
	}
}

211 
boﬁ
 
	gC¨åidgeUA
::
	$lﬂd
(
De£rülizî
& 
ö
)

213 
°rög
 
ˇπ
 = 
	`«me
();

215 
__åy


217 if(
ö
.
	`gëSåög
(Ë!
ˇπ
)

218  
Ál£
;

220 
myCuºítB™k
 = (
uI¡16
)
ö
.
	`gëI¡
();

223 
	`ˇtch
(*
msg
)

225 
˚º
 << 
msg
 << 
ídl
;

226  
Ál£
;

229 
	`__ˇtch
(...)

231 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
ˇπ
 << 
ídl
;

232  
Ál£
;

236 
	`b™k
(
myCuºítB™k
);

238  
åue
;

239 
	}
}

243 
uI¡8
* 
	gC¨åidgeUA
::
	$gëImage
(& 
size
) {

244 
size
 = 8192;

245  &
myImage
[0];

246 
	}
}

	@emucore/CartUA.hxx

19 #i‚de‡
CARTRIDGEUA_HXX


20 
	#CARTRIDGEUA_HXX


	)

22 
˛ass
 
	gC¨åidgeUA
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

27 
	~"C¨t.hxx
"

28 
	~"Sy°em.hxx
"

37 ˛as†
	cC¨åidgeUA
 : 
public
 
C¨åidge


39 
public
:

45 
C¨åidgeUA
(c⁄° 
uI¡8
* 
image
);

50 
	mvútuÆ
 ~
C¨åidgeUA
();

52 
	mpublic
:

58 
vútuÆ
 c⁄° * 
	$«me
() const;

63 
vútuÆ
 
	`ª£t
();

71 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

79 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

87 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

89 
vútuÆ
 
uI¡8
* 
	`gëImage
(& 
size
);

91 
public
:

97 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

105 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

107 
boﬁ
 
	`∑tch
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

114 
	`b™k
(
uI¡16
 
b™k
);

116 
	`b™k
();

118 
	`b™kCou¡
();

120 
¥iv©e
:

122 
uI¡16
 
myCuºítB™k
;

125 
uI¡8
 
myImage
[8192];

128 
Sy°em
::
PageAc˚ss
 
myHŸSpŸPageAc˚ss
;

	@emucore/Console.cpp

19 
	~<as£π.h
>

20 
	~<io°ªam
>

21 
	~<s°ªam
>

22 
	~<f°ªam
>

24 
	~"Boo°î.hxx
"

25 
	~"C¨t.hxx
"

26 
	~"C⁄sﬁe.hxx
"

27 
	~"C⁄åﬁ.hxx
"

28 
	~"Drivög.hxx
"

29 
	~"Evít.hxx
"

30 
	~"EvítH™dÀr.hxx
"

31 
	~"Joy°ick.hxx
"

32 
	~"Keybﬂrd.hxx
"

33 
	~"M6502Hi.hxx
"

34 
	~"M6502Low.hxx
"

35 
	~"M6532.hxx
"

36 
	~"MedüSrc.hxx
"

37 
	~"PaddÀs.hxx
"

38 
	~"Pr›s.hxx
"

39 
	~"Pr›sSë.hxx
"

40 
	~"Sëtögs.hxx
"

41 
	~"Sound.hxx
"

42 
	~"Swôches.hxx
"

43 
	~"Sy°em.hxx
"

44 
	~"TIA.hxx
"

45 
	~"FømeBuf„r.hxx
"

46 
	~"OSy°em.hxx
"

48 
	~"Míu.hxx
"

49 
	~"Comm™dMíu.hxx
"

50 
	~"Vîsi⁄.hxx
"

53 #ifde‡
SNAPSHOT_SUPPORT


54 
	~"S«pshŸ.hxx
"

57 #ifde‡
DEVELOPER_SUPPORT


58 
	~"Debuggî.hxx
"

61 #ifde‡
CHEATCODE_SUPPORT


62 
	~"ChótM™agî.hxx
"

66 
	gC⁄sﬁe
::
	$C⁄sﬁe
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
, c⁄° 
°rög
& 
md5
,

67 
OSy°em
* 
osy°em
)

68 : 
	`myOSy°em
(
osy°em
),

69 
	$myIsInôülizedFœg
(
Ál£
)

71 
myC⁄åﬁÀrs
[0] = 0;

72 
myC⁄åﬁÀrs
[1] = 0;

73 
myMedüSour˚
 = 0;

74 
mySwôches
 = 0;

75 
mySy°em
 = 0;

76 
myEvít
 = 0;

79 
myEvít
 = 
myOSy°em
->
	`evítH™dÀr
().
	`evít
();

82 
myOSy°em
->
	`¥›Së
().
	`gëMD5
(
md5
, 
myPr›îtõs
);

85 
	`£tDevñ›îPr›îtõs
();

88 if(
myPr›îtõs
.
	`gë
(
Di•œy_F‹m©
) == "PAL")

89 if(
myPr›îtõs
.
	`gë
(
Di•œy_Height
) == "210")

90 
myPr›îtõs
.
	`£t
(
Di•œy_Height
, "250");

93 
sWidth
, 
sHeight
, 
iWidth
, 
iHeight
;

94 
myOSy°em
->
	`gëS¸ìnDimísi⁄s
(
sWidth
, 
sHeight
);

95 
iWidth
 = 
	`©oi
(
myPr›îtõs
.
	`gë
(
Di•œy_Width
).
	`c_°r
()) << 1;

96 
iHeight
 = 
	`©oi
(
myPr›îtõs
.
	`gë
(
Di•œy_Height
).
	`c_°r
());

97 if(
iWidth
 > 
sWidth
 || 
iHeight
 > 
sHeight
)

99 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("PAL ROMSÇot supported, screenÅoo small",

100 
kMiddÀCíãr
, 
kTextCﬁ‹Em
);

105 
°rög
 
À·
 = 
myPr›îtõs
.
	`gë
(
C⁄åﬁÀr_Le·
);

106 
°rög
 
right
 = 
myPr›îtõs
.
	`gë
(
C⁄åﬁÀr_Right
);

111 
C⁄åﬁÀr
::
Jack
 
À·jack
, 
rightjack
;

112 if(
myPr›îtõs
.
	`gë
(
C⁄sﬁe_Sw≠P‹ts
) == "NO")

114 
À·jack
 = 
C⁄åﬁÀr
::
Le·
;

115 
rightjack
 = 
C⁄åﬁÀr
::
Right
;

119 
À·jack
 = 
C⁄åﬁÀr
::
Right
;

120 
rightjack
 = 
C⁄åﬁÀr
::
Le·
;

124 if(
À·
 == "BOOSTER-GRIP")

126 
myC⁄åﬁÀrs
[0] = 
√w
 
	`Boo°îGrù
(
À·jack
, *
myEvít
);

128 if(
À·
 == "DRIVING")

130 
myC⁄åﬁÀrs
[0] = 
√w
 
	`Drivög
(
À·jack
, *
myEvít
);

132 if((
À·
 == "KEYBOARD") || (left == "KEYPAD"))

134 
myC⁄åﬁÀrs
[0] = 
√w
 
	`Keybﬂrd
(
À·jack
, *
myEvít
);

136 if(
À·
 == "PADDLES")

138 
myC⁄åﬁÀrs
[0] = 
√w
 
	`PaddÀs
(
À·jack
, *
myEvít
);

142 
myC⁄åﬁÀrs
[0] = 
√w
 
	`Joy°ick
(
À·jack
, *
myEvít
);

146 if(
right
 == "BOOSTER-GRIP")

148 
myC⁄åﬁÀrs
[1] = 
√w
 
	`Boo°îGrù
(
rightjack
, *
myEvít
);

150 if(
right
 == "DRIVING")

152 
myC⁄åﬁÀrs
[1] = 
√w
 
	`Drivög
(
rightjack
, *
myEvít
);

154 if((
right
 == "KEYBOARD") || (right == "KEYPAD"))

156 
myC⁄åﬁÀrs
[1] = 
√w
 
	`Keybﬂrd
(
rightjack
, *
myEvít
);

158 if(
right
 == "PADDLES")

160 
myC⁄åﬁÀrs
[1] = 
√w
 
	`PaddÀs
(
rightjack
, *
myEvít
);

164 
myC⁄åﬁÀrs
[1] = 
√w
 
	`Joy°ick
(
rightjack
, *
myEvít
);

170 if(
myC⁄åﬁÀrs
[0]->
	`ty≥
(Ë=
C⁄åﬁÀr
::
PaddÀs
)

171 
myOSy°em
->
	`evítH™dÀr
().
	`£tPaddÀMode
(0);

172 if(
myC⁄åﬁÀrs
[1]->
	`ty≥
(Ë=
C⁄åﬁÀr
::
PaddÀs
)

173 
myOSy°em
->
	`evítH™dÀr
().
	`£tPaddÀMode
(2);

177 
mySwôches
 = 
√w
 
	`Swôches
(*
myEvít
, 
myPr›îtõs
);

180 
mySy°em
 = 
√w
 
	`Sy°em
(13, 6);

182 
M6502
* 
m6502
;

183 if(
myOSy°em
->
	`£âögs
().
	`gëSåög
("cpu") == "low")

184 
m6502
 = 
√w
 
	`M6502Low
(1);

186 
m6502
 = 
√w
 
	`M6502High
(1);

187 #ifde‡
DEVELOPER_SUPPORT


188 
m6502
->
	`©èch
(
myOSy°em
->
	`debuggî
());

191 
M6532
* 
m6532
 = 
√w
 
	`M6532
(*
this
);

192 
TIA
 *
tü
 = 
√w
 
	`TIA
(*
this
, 
myOSy°em
->
	`£âögs
());

193 
tü
->
	`£tSound
(
myOSy°em
->
	`sound
());

194 
C¨åidge
* 
ˇπridge
 = C¨åidge::
	`¸óã
(
image
, 
size
, 
myPr›îtõs
);

195 if(!
ˇπridge
)

198 
mySy°em
->
	`©èch
(
m6502
);

199 
mySy°em
->
	`©èch
(
m6532
);

200 
mySy°em
->
	`©èch
(
tü
);

201 
mySy°em
->
	`©èch
(
ˇπridge
);

204 
myMedüSour˚
 = 
tü
;

205 
myC¨t
 = 
ˇπridge
;

206 
myRiŸ
 = 
m6532
;

209 
mySy°em
->
	`ª£t
();

215 
uI¡32
 
‰amî©e
 = 
myOSy°em
->
	`£âögs
().
	`gëI¡
("framerate");

216 if(
‰amî©e
 == 0)

218 c⁄° 
°rög
& 
s
 = 
myPr›îtõs
.
	`gë
(
Di•œy_F‹m©
);

219 if(
s
 == "NTSC")

220 
‰amî©e
 = 60;

221 if(
s
 == "PAL")

222 
‰amî©e
 = 50;

224 
‰amî©e
 = 60;

226 
myOSy°em
->
	`£tFømî©e
(
‰amî©e
);

230 
	`öôülizeVideo
();

235 
uI¡32
 
ch™√ls
;

236 c⁄° 
°rög
& 
s
 = 
myPr›îtõs
.
	`gë
(
C¨åidge_Sound
);

237 if(
s
 == "STEREO")

238 
ch™√ls
 = 2;

239 if(
s
 == "MONO")

240 
ch™√ls
 = 1;

242 
ch™√ls
 = 1;

244 
myOSy°em
->
	`sound
().
	`˛o£
();

245 
myOSy°em
->
	`sound
().
	`£tCh™√ls
(
ch™√ls
);

246 
myOSy°em
->
	`sound
().
	`£tFømeR©e
(
‰amî©e
);

247 
myOSy°em
->
	`sound
().
	`öôülize
();

251 
myOSy°em
->
	`míu
().
	`öôülize
();

252 
myOSy°em
->
	`míu
().
	`£tGameProfûe
(
myPr›îtõs
);

255 
myOSy°em
->
	`comm™dMíu
().
	`öôülize
();

257 #ifde‡
DEVELOPER_SUPPORT


259 
myOSy°em
->
	`debuggî
().
	`£tC⁄sﬁe
(
this
);

260 
myOSy°em
->
	`debuggî
().
	`öôülize
();

265 
myIsInôülizedFœg
 = 
åue
;

266 
	}
}

269 
	gC⁄sﬁe
::
	$C⁄sﬁe
(c⁄° 
C⁄sﬁe
& 
c⁄sﬁe
)

270 : 
	$myOSy°em
(
c⁄sﬁe
.
myOSy°em
)

273 
	`as£π
(
Ál£
);

274 
	}
}

277 
	gC⁄sﬁe
::~
	$C⁄sﬁe
()

279 #ifde‡
CHEATCODE_SUPPORT


280 
myOSy°em
->
	`chót
().
	`ßveChóts
(
myPr›îtõs
.
	`gë
(
C¨åidge_MD5
));

283 
dñëe
 
mySy°em
;

284 
dñëe
 
mySwôches
;

285 
dñëe
 
myC⁄åﬁÀrs
[0];

286 
dñëe
 
myC⁄åﬁÀrs
[1];

287 
	}
}

290 c⁄° 
	gPr›îtõs
& 
	gC⁄sﬁe
::
	$¥›îtõs
() const

292  
myPr›îtõs
;

293 
	}
}

296 
	gC⁄sﬁe
& C⁄sﬁe::
›î©‹
 = (c⁄° 
C⁄sﬁe
&)

299 
as£π
(
Ál£
);

301  *
	gthis
;

305 
	gC⁄sﬁe
::
	$toggÀF‹m©
()

307 c⁄° 
°rög
& 
f‹m©
 = 
myPr›îtõs
.
	`gë
(
Di•œy_F‹m©
);

308 
uI¡32
 
‰amî©e
 = 60;

310 if(
f‹m©
 == "NTSC")

312 
myPr›îtõs
.
	`£t
(
Di•œy_F‹m©
, "PAL");

313 
mySy°em
->
	`ª£t
();

314 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("PAL Mode");

315 
‰amî©e
 = 50;

317 if(
f‹m©
 == "PAL")

319 
myPr›îtõs
.
	`£t
(
Di•œy_F‹m©
, "NTSC");

320 
mySy°em
->
	`ª£t
();

321 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("NTSC Mode");

322 
‰amî©e
 = 60;

325 
	`£tPÆëã
();

326 
myOSy°em
->
	`£tFømî©e
(
‰amî©e
);

327 
myOSy°em
->
	`sound
().
	`£tFømeR©e
(
‰amî©e
);

328 
	}
}

331 
	gC⁄sﬁe
::
	$toggÀPÆëã
(c⁄° 
°rög
& 
∑Àâe
)

333 
°rög
 
ty≥
;

335 
°rög
 
mesßge
;

340 if(
∑Àâe
 != "")

342 if(
∑Àâe
 == "Standard")

343 
ty≥
 = "z26";

344 if(
∑Àâe
 == "Original")

345 
ty≥
 = "standard";

346 if(
∑Àâe
 == "Z26")

347 
ty≥
 = "original";

349 
ty≥
 = "";

352 
ty≥
 = 
myOSy°em
->
	`£âögs
().
	`gëSåög
("palette");

355 if(
ty≥
 == "standard")

357 
ty≥
 = "original";

360 if(
ty≥
 == "original")

362 
ty≥
 = "z26";

365 if(
ty≥
 == "z26")

367 
ty≥
 = "standard";

372 
ty≥
 = "standard";

376 
myOSy°em
->
	`£âögs
().
	`£tSåög
("∑Àâe", 
ty≥
);

378 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
(
mesßge
);

381 
	`£tPÆëã
();

382 
	}
}

385 
	gC⁄sﬁe
::
	$toggÀPho•h‹
()

387 c⁄° 
°rög
& 
pho•h‹
 = 
myPr›îtõs
.
	`gë
(
Di•œy_Pho•h‹
);

388 
boﬁ
 
íabÀ
;

389 if(
pho•h‹
 == "YES")

391 
myPr›îtõs
.
	`£t
(
Di•œy_Pho•h‹
, "No");

392 
íabÀ
 = 
Ál£
;

393 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("PhosphorÉffect disabled");

397 
myPr›îtõs
.
	`£t
(
Di•œy_Pho•h‹
, "Yes");

398 
íabÀ
 = 
åue
;

399 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("PhosphorÉffectÉnabled");

402 
myOSy°em
->
	`‰ameBuf„r
().
	`íabÀPho•h‹
(
íabÀ
);

403 
	`£tPÆëã
();

404 
	}
}

407 
	gC⁄sﬁe
::
	$ßvePr›îtõs
(
°rög
 
fûíame
, 
boﬁ
 
mîge
)

411 if(
mîge
)

413 if(
myOSy°em
->
	`¥›Së
().
	`mîge
(
myPr›îtõs
, 
fûíame
))

414 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("Properties merged");

416 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("Error mergingÖroperties");

420 
of°ªam
 
	`out
(
fûíame
.
	`c_°r
(), 
ios
::
out
);

422 if(
out
 && out.
	`is_›í
())

424 
myPr›îtõs
.
	`ßve
(
out
);

425 
out
.
	`˛o£
();

426 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("Properties saved");

430 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("Error savingÖroperties");

434 
	}
}

437 
	gC⁄sﬁe
::
	$öôülizeVideo
()

440 
°rög
 
tôÀ
 = 
	`°rög
("SãŒ®"Ë+ 
STELLA_VERSION
 +

441 ": \"" + 
myPr›îtõs
.
	`gë
(
C¨åidge_Name
) + "\"";

442 
myOSy°em
->
	`‰ameBuf„r
().
	`öôülize
(
tôÀ
,

443 
myMedüSour˚
->
	`width
() << 1,

444 
myMedüSour˚
->
	`height
());

446 
myOSy°em
->
	`‰ameBuf„r
().
	`öôülize
("",

447 
myMedüSour˚
->
	`width
() << 1,

448 
myMedüSour˚
->
	`height
());

450 
boﬁ
 
íabÀ
 = 
myPr›îtõs
.
	`gë
(
Di•œy_Pho•h‹
) == "YES";

451 
myOSy°em
->
	`‰ameBuf„r
().
	`íabÀPho•h‹
(
íabÀ
);

452 
	`£tPÆëã
();

453 
	}
}

456 
	gC⁄sﬁe
::
	$öôülizeAudio
()

458 
myMedüSour˚
->
	`£tSound
(
myOSy°em
->
	`sound
());

459 
	}
}

462 
	gC⁄sﬁe
::
	$£tPÆëã
()

464 
myOSy°em
->
	`‰ameBuf„r
().
	`£tPÆëã
(
myMedüSour˚
->
	`∑Àâe
());

465 
	}
}

468 
	gC⁄sﬁe
::
	$£tCh™√ls
(
ch™√ls
)

470 
myOSy°em
->
	`sound
().
	`£tCh™√ls
(
ch™√ls
);

473 
°rög
 
sound
 = 
ch™√ls
 == 2 ? "Stereo" : "Mono";

474 
myPr›îtõs
.
	`£t
(
C¨åidge_Sound
, 
sound
);

475 
	}
}

497 
	gC⁄sﬁe
::
	$‰y
()

499 
ZPmem
=0; ZPmem<0x100; ZPmem +
	`ønd
() % 4)

500 
mySy°em
->
	`poke
(
ZPmem
, mySy°em->
	`≥ek
(ZPmemË& (
uI¡8
)
	`ønd
() % 256);

501 
	}
}

504 
	gC⁄sﬁe
::
	$ch™geXSèπ
(
dúe˘i⁄
)

506 
I¡32
 
x°¨t
 = 
	`©oi
(
myPr›îtõs
.
	`gë
(
Di•œy_XSèπ
).
	`c_°r
());

507 
uI¡32
 
width
 = 
	`©oi
(
myPr›îtõs
.
	`gë
(
Di•œy_Width
).
	`c_°r
());

508 
o°rög°ªam
 
°rvÆ
;

509 
°rög
 
mesßge
;

511 if(
dúe˘i⁄
 == +1)

513 
x°¨t
 += 4;

514 if(
x°¨t
 > 80)

516 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("XStartát maximum");

519 if((
width
 + 
x°¨t
) > 160)

521 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("XStartÇoÉffect");

525 if(
dúe˘i⁄
 == -1)

527 
x°¨t
 -= 4;

528 if(
x°¨t
 < 0)

530 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("XStartát minimum");

537 
°rvÆ
 << 
x°¨t
;

538 
myPr›îtõs
.
	`£t
(
Di•œy_XSèπ
, 
°rvÆ
.
	`°r
());

539 
mySy°em
->
	`ª£t
();

540 
	`öôülizeVideo
();

542 
mesßge
 = "XStart ";

543 
mesßge
 +
°rvÆ
.
	`°r
();

544 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
(
mesßge
);

545 
	}
}

548 
	gC⁄sﬁe
::
	$ch™geYSèπ
(
dúe˘i⁄
)

550 
I¡32
 
y°¨t
 = 
	`©oi
(
myPr›îtõs
.
	`gë
(
Di•œy_YSèπ
).
	`c_°r
());

551 
o°rög°ªam
 
°rvÆ
;

552 
°rög
 
mesßge
;

554 if(
dúe˘i⁄
 == +1)

556 
y°¨t
++;

557 if(
y°¨t
 > 64)

559 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("YStartát maximum");

563 if(
dúe˘i⁄
 == -1)

565 
y°¨t
--;

566 if(
y°¨t
 < 0)

568 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("YStartát minimum");

575 
°rvÆ
 << 
y°¨t
;

576 
myPr›îtõs
.
	`£t
(
Di•œy_YSèπ
, 
°rvÆ
.
	`°r
());

577 
mySy°em
->
	`ª£t
();

578 
	`öôülizeVideo
();

580 
mesßge
 = "YStart ";

581 
mesßge
 +
°rvÆ
.
	`°r
();

582 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
(
mesßge
);

583 
	}
}

586 
	gC⁄sﬁe
::
	$ch™geWidth
(
dúe˘i⁄
)

588 
uI¡32
 
x°¨t
 = 
	`©oi
(
myPr›îtõs
.
	`gë
(
Di•œy_XSèπ
).
	`c_°r
());

589 
I¡32
 
width
 = 
	`©oi
(
myPr›îtõs
.
	`gë
(
Di•œy_Width
).
	`c_°r
());

590 
o°rög°ªam
 
°rvÆ
;

591 
°rög
 
mesßge
;

593 if(
dúe˘i⁄
 == +1)

595 
width
 += 4;

596 if((
width
 > 160) || ((width % 4) != 0))

598 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("Widthát maximum");

601 if((
width
 + 
x°¨t
) > 160)

603 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("WidthÇoÉffect");

607 if(
dúe˘i⁄
 == -1)

609 
width
 -= 4;

610 if(
width
 < 80)

612 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("Widthát minimum");

619 
°rvÆ
 << 
width
;

620 
myPr›îtõs
.
	`£t
(
Di•œy_Width
, 
°rvÆ
.
	`°r
());

621 
mySy°em
->
	`ª£t
();

622 
	`öôülizeVideo
();

624 
mesßge
 = "Width ";

625 
mesßge
 +
°rvÆ
.
	`°r
();

626 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
(
mesßge
);

627 
	}
}

630 
	gC⁄sﬁe
::
	$ch™geHeight
(
dúe˘i⁄
)

632 
I¡32
 
height
 = 
	`©oi
(
myPr›îtõs
.
	`gë
(
Di•œy_Height
).
	`c_°r
());

633 
o°rög°ªam
 
°rvÆ
;

634 
°rög
 
mesßge
;

636 if(
dúe˘i⁄
 == +1)

638 
height
++;

639 if(
height
 > 256)

641 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("Heightát maximum");

645 if(
dúe˘i⁄
 == -1)

647 
height
--;

648 if(
height
 < 100)

650 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("Heightát minimum");

657 
°rvÆ
 << 
height
;

658 
myPr›îtõs
.
	`£t
(
Di•œy_Height
, 
°rvÆ
.
	`°r
());

659 
mySy°em
->
	`ª£t
();

660 
	`öôülizeVideo
();

662 
mesßge
 = "Height ";

663 
mesßge
 +
°rvÆ
.
	`°r
();

664 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
(
mesßge
);

665 
	}
}

668 
	gC⁄sﬁe
::
	$toggÀTIABô
(
TIA
::
TIABô
 
bô
, c⁄° 
°rög
& 
bô«me
, 
boﬁ
 
show
)

670 
boﬁ
 
ªsu…
 = ((
TIA
*)
myMedüSour˚
)->
	`toggÀBô
(
bô
);

671 
°rög
 
mesßge
 = 
bô«me
 + (
ªsu…
 ? "Énabled" : " disabled");

672 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
(
mesßge
);

673 
	}
}

676 
	gC⁄sﬁe
::
	$íabÀBôs
(
boﬁ
 
íabÀ
)

678 ((
TIA
*)
myMedüSour˚
)->
	`íabÀBôs
(
íabÀ
);

679 
°rög
 
mesßge
 = 
	`°rög
("TIA bôs"Ë+ (
íabÀ
 ? "Énabled" : " disabled");

680 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
(
mesßge
);

681 
	}
}

684 
	gC⁄sﬁe
::
	$£tDevñ›îPr›îtõs
()

686 
Sëtögs
& 
£âögs
 = 
myOSy°em
->
	`£âögs
();

687 
°rög
 
s
;

689 
s
 = 
£âögs
.
	`gëSåög
("type");

690 if(
s
 != "")

691 
myPr›îtõs
.
	`£t
(
C¨åidge_Ty≥
, 
s
);

693 
s
 = 
£âögs
.
	`gëSåög
("ld");

694 if(
s
 != "")

695 
myPr›îtõs
.
	`£t
(
C⁄sﬁe_Le·Difficu…y
, 
s
);

697 
s
 = 
£âögs
.
	`gëSåög
("rd");

698 if(
s
 != "")

699 
myPr›îtõs
.
	`£t
(
C⁄sﬁe_RightDifficu…y
, 
s
);

701 
s
 = 
£âögs
.
	`gëSåög
("tv");

702 if(
s
 != "")

703 
myPr›îtõs
.
	`£t
(
C⁄sﬁe_Tñevisi⁄Ty≥
, 
s
);

705 
s
 = 
£âögs
.
	`gëSåög
("sp");

706 if(
s
 != "")

707 
myPr›îtõs
.
	`£t
(
C⁄sﬁe_Sw≠P‹ts
, 
s
);

709 
s
 = 
£âögs
.
	`gëSåög
("lc");

710 if(
s
 != "")

711 
myPr›îtõs
.
	`£t
(
C⁄åﬁÀr_Le·
, 
s
);

713 
s
 = 
£âögs
.
	`gëSåög
("rc");

714 if(
s
 != "")

715 
myPr›îtõs
.
	`£t
(
C⁄åﬁÀr_Right
, 
s
);

717 
s
 = 
£âögs
.
	`gëSåög
("bc");

718 if(
s
 != "")

720 
myPr›îtõs
.
	`£t
(
C⁄åﬁÀr_Le·
, 
s
);

721 
myPr›îtõs
.
	`£t
(
C⁄åﬁÀr_Right
, 
s
);

724 
s
 = 
£âögs
.
	`gëSåög
("format");

725 if(
s
 != "")

726 
myPr›îtõs
.
	`£t
(
Di•œy_F‹m©
, 
s
);

728 
s
 = 
£âögs
.
	`gëSåög
("xstart");

729 if(
s
 != "")

730 
myPr›îtõs
.
	`£t
(
Di•œy_XSèπ
, 
s
);

732 
s
 = 
£âögs
.
	`gëSåög
("ystart");

733 if(
s
 != "")

734 
myPr›îtõs
.
	`£t
(
Di•œy_YSèπ
, 
s
);

736 
s
 = 
£âögs
.
	`gëSåög
("width");

737 if(
s
 != "")

738 
myPr›îtõs
.
	`£t
(
Di•œy_Width
, 
s
);

740 
s
 = 
£âögs
.
	`gëSåög
("height");

741 if(
s
 != "")

742 
myPr›îtõs
.
	`£t
(
Di•œy_Height
, 
s
);

744 
s
 = 
£âögs
.
	`gëSåög
("pp");

745 if(
s
 != "")

746 
myPr›îtõs
.
	`£t
(
Di•œy_Pho•h‹
, 
s
);

748 
s
 = 
£âögs
.
	`gëSåög
("hmove");

749 if(
s
 != "")

750 
myPr›îtõs
.
	`£t
(
Emuœti⁄_HmoveBœnks
, 
s
);

751 
	}
}

	@emucore/Console.hxx

19 #i‚de‡
CONSOLE_HXX


20 
	#CONSOLE_HXX


	)

22 
˛ass
 
	gC⁄sﬁe
;

23 
˛ass
 
	gC⁄åﬁÀr
;

24 
˛ass
 
	gEvít
;

25 
˛ass
 
	gMedüSour˚
;

26 
˛ass
 
	gSwôches
;

27 
˛ass
 
	gSy°em
;

29 
	~"b•f.hxx
"

30 
	~"C⁄åﬁ.hxx
"

31 
	~"Pr›s.hxx
"

32 
	~"TIA.hxx
"

33 
	~"C¨t.hxx
"

34 
	~"M6532.hxx
"

42 ˛as†
	cC⁄sﬁe


44 
	mpublic
:

54 
C⁄sﬁe
(c⁄° 
uI¡8
* 
image
, 
uI¡32
 
size
, c⁄° 
°rög
& 
md5
,

55 
OSy°em
* 
osy°em
);

62 
C⁄sﬁe
(c⁄° C⁄sﬁe& 
c⁄sﬁe
);

67 
	mvútuÆ
 ~
C⁄sﬁe
();

69 
	mpublic
:

75 
C⁄åﬁÀr
& 
	$c⁄åﬁÀr
(
C⁄åﬁÀr
::
Jack
 
jack
) const

77  (
jack
 =
C⁄åﬁÀr
::
Le·
Ë? *
myC⁄åﬁÀrs
[0] : *myControllers[1];

85 
MedüSour˚
& 
	$medüSour˚
(Ëc⁄° {  *
myMedüSour˚
; 
	}
}

92 c⁄° 
	gPr›îtõs
& 
	$¥›îtõs
() const;

99 
Swôches
& 
	$swôches
(Ëc⁄° {  *
mySwôches
; 
	}
}

106 
	gSy°em
& 
	$sy°em
(Ëc⁄° {  *
mySy°em
; 
	}
}

113 
	gC¨åidge
& 
	$ˇπridge
(Ëc⁄° {  *
myC¨t
; 
	}
}

120 
	gM6532
& 
	$riŸ
(Ëc⁄° {  *
myRiŸ
; 
	}
}

125 
boﬁ
 
	$isInôülized
(Ë{  
myIsInôülizedFœg
; 
	}
}

127 
	gpublic
:

134 
C⁄sﬁe
& 
›î©‹
 = (c⁄° C⁄sﬁe& 
c⁄sﬁe
);

136 
	gpublic
:

142 
toggÀF‹m©
();

151 
toggÀPÆëã
(c⁄° 
°rög
& 
∑Àâe
 = "");

156 
toggÀPho•h‹
();

165 
ßvePr›îtõs
(
°rög
 
fûíame
, 
boﬁ
 
mîge
 = 
Ál£
);

170 
öôülizeVideo
();

175 
öôülizeAudio
();

180 
£tPÆëã
();

187 
£tCh™√ls
(
ch™√ls
);

192 
‰y
();

194 
	gpublic
:

201 
ch™geXSèπ
(
dúe˘i⁄
);

209 
ch™geYSèπ
(
dúe˘i⁄
);

217 
ch™geWidth
(
dúe˘i⁄
);

225 
ch™geHeight
(
dúe˘i⁄
);

230 
	$toggÀP0Bô
(Ë{ 
	`toggÀTIABô
(
TIA
::
P0
, "P0"); 
	}
}

231 
	$toggÀP1Bô
(Ë{ 
	`toggÀTIABô
(
TIA
::
P1
, "P1"); 
	}
}

232 
	$toggÀM0Bô
(Ë{ 
	`toggÀTIABô
(
TIA
::
M0
, "M0"); 
	}
}

233 
	$toggÀM1Bô
(Ë{ 
	`toggÀTIABô
(
TIA
::
M1
, "M1"); 
	}
}

234 
	$toggÀBLBô
(Ë{ 
	`toggÀTIABô
(
TIA
::
BL
, "BL"); 
	}
}

235 
	$toggÀPFBô
(Ë{ 
	`toggÀTIABô
(
TIA
::
PF
, "PF"); 
	}
}

236 
íabÀBôs
(
boﬁ
 
íabÀ
);

238 
	g¥iv©e
:

239 
toggÀTIABô
(
TIA
::
TIABô
 
bô
, c⁄° 
°rög
& 
bô«me
, 
boﬁ
 
show
 = 
åue
);

240 
£tDevñ›îPr›îtõs
();

242 
	g¥iv©e
:

244 
OSy°em
* 
myOSy°em
;

247 
C⁄åﬁÀr
* 
	gmyC⁄åﬁÀrs
[2];

250 
Evít
* 
	gmyEvít
;

253 
MedüSour˚
* 
	gmyMedüSour˚
;

256 
Pr›îtõs
 
	gmyPr›îtõs
;

259 
Swôches
* 
	gmySwôches
;

262 
Sy°em
* 
	gmySy°em
;

265 
C¨åidge
 *
	gmyC¨t
;

269 
M6532
 *
	gmyRiŸ
;

273 
boﬁ
 
	gmyIsInôülizedFœg
;

	@emucore/Control.cpp

19 
	~<as£π.h
>

20 
	~"C⁄åﬁ.hxx
"

23 
	gC⁄åﬁÀr
::
	$C⁄åﬁÀr
(
Jack
 
jack
, c⁄° 
Evít
& 
evít
)

24 : 
	`myJack
(
jack
),

25 
	`myEvít
(
evít
),

26 
	$myTy≥
(
Joy°ick
)

28 
	}
}

31 
	gC⁄åﬁÀr
::~
	$C⁄åﬁÀr
()

33 
	}
}

36 c⁄° 
C⁄åﬁÀr
::
Ty≥
 C⁄åﬁÀr::
	$ty≥
()

38  
myTy≥
;

39 
	}
}

42 c⁄° 
I¡32
 
	gC⁄åﬁÀr
::
maximumResi°™˚
 = 0x7FFFFFFF;

45 c⁄° 
I¡32
 
	gC⁄åﬁÀr
::
möimumResi°™˚
 = 0x00000000;

48 
	gC⁄åﬁÀr
::
	$C⁄åﬁÀr
(c⁄° 
C⁄åﬁÀr
& 
c
)

49 : 
	`myJack
(
c
.
myJack
),

50 
	`myEvít
(
c
.
myEvít
),

51 
	$myTy≥
(
c
.
myTy≥
)

53 
	`as£π
(
Ál£
);

54 
	}
}

57 
	gC⁄åﬁÀr
& C⁄åﬁÀr::
›î©‹
 = (c⁄° 
C⁄åﬁÀr
&)

59 
as£π
(
Ál£
);

60  *
	gthis
;

	@emucore/Control.hxx

19 #i‚de‡
CONTROLLER_HXX


20 
	#CONTROLLER_HXX


	)

22 
˛ass
 
	gC⁄åﬁÀr
;

23 
˛ass
 
	gEvít
;

25 
	~"b•f.hxx
"

60 ˛as†
	cC⁄åﬁÀr


62 
	mpublic
:

66 
	eJack


68 
Le·
, 
	mRight


74 
	eTy≥


76 
	gBoo°îGrù
, 
	gDrivög
, 
	gKeybﬂrd
, 
	gPaddÀs
, 
	gJoy°ick


79 
	gpublic
:

86 
C⁄åﬁÀr
(
Jack
 
jack
, c⁄° 
Evít
& 
evít
);

91 
	gvútuÆ
 ~
C⁄åﬁÀr
();

96 c⁄° 
Ty≥
 
ty≥
();

98 
	gpublic
:

102 
	eDigôÆPö


104 
O√
, 
	gTwo
, 
	gThªe
, 
	gFour
, 
	gSix


110 
	eA«logPö


112 
	gFive
, 
	gNöe


115 
	gpublic
:

122 
vútuÆ
 
boﬁ
 
ªad
(
DigôÆPö
 
pö
) = 0;

131 
vútuÆ
 
I¡32
 
ªad
(
A«logPö
 
pö
) = 0;

141 
vútuÆ
 
wrôe
(
DigôÆPö
 
pö
, 
boﬁ
 
vÆue
) = 0;

143 
	gpublic
:

145 c⁄° 
I¡32
 
maximumResi°™˚
;

148 c⁄° 
I¡32
 
	gmöimumResi°™˚
;

150 
	g¥Ÿe˘ed
:

152 c⁄° 
Jack
 
myJack
;

155 c⁄° 
	gEvít
& 
	gmyEvít
;

158 
Ty≥
 
	gmyTy≥
;

160 
	g¥Ÿe˘ed
:

162 
C⁄åﬁÀr
(const Controller&);

165 
	gC⁄åﬁÀr
& 
	g›î©‹
 = (c⁄° 
C⁄åﬁÀr
&);

	@emucore/DefProps.hxx

1 #i‚de‡
DEF_PROPS_HXX


2 
	#DEF_PROPS_HXX


	)

10 c⁄° * 
	gDefPr›s
[][21] = {

	@emucore/Deserializer.cpp

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

20 
	~"De£rülizî.hxx
"

23 
	gDe£rülizî
::
	$De£rülizî
()

25 
	}
}

28 
De£rülizî
::~
	$De£rülizî
()

30 
	`˛o£
();

31 
	}
}

34 
boﬁ
 
	gDe£rülizî
::
	$›í
(c⁄° 
°rög
& 
fûeName
)

36 
	`˛o£
();

37 
mySåóm
.
	`›í
(
fûeName
.
	`c_°r
(), 
ios
::
ö
 | ios::
bö¨y
);

39  
	`isO≥n
();

40 
	}
}

43 
	gDe£rülizî
::
	$˛o£
()

45 
mySåóm
.
	`˛o£
();

46 
mySåóm
.
	`˛ór
();

47 
	}
}

50 
boﬁ
 
	gDe£rülizî
::
	$isO≥n
()

52  
mySåóm
.
	`is_›í
();

53 
	}
}

56 
	gDe£rülizî
::
	$gëI¡
()

58 if(
mySåóm
.
	`eof
()) {

60 
throw
 "Deserializer:Énd of file";

62 
	`exô
(1);

65 
vÆ
 = 0;

66 
buf
[4];

67 
mySåóm
.
	`ªad
((*)
buf
, 4);

68 
i
 = 0; i < 4; ++i)

69 
vÆ
 +()(
buf
[
i
]) << (i<<3);

71  
vÆ
;

72 
	}
}

75 
°rög
 
	gDe£rülizî
::
	$gëSåög
()

77 
Àn
 = 
	`gëI¡
();

78 
°rög
 
°r
;

79 
°r
.
	`ªsize
((
°rög
::
size_ty≥
)
Àn
);

80 
mySåóm
.
	`ªad
(&
°r
[0], (
°ªamsize
)
Àn
);

82 if(
mySåóm
.
	`bad
()) {

84 
throw
 "Deserializer: fileÑead failed";

86 
	`exô
(1);

90  
°r
;

91 
	}
}

94 
boﬁ
 
	gDe£rülizî
::
	$gëBoﬁ
()

96 
boﬁ
 
ªsu…
 = 
Ál£
;

98 
b
 = 
	`gëI¡
();

99 if(
b
 =()
TrueP©ã∫
)

100 
ªsu…
 = 
åue
;

101 if(
b
 =()
FÆ£P©ã∫
)

102 
ªsu…
 = 
Ál£
;

105 
throw
 "Deserializer: data corruption";

107 
	`exô
(1);

111  
ªsu…
;

112 
	}
}

	@emucore/Deserializer.hxx

19 #i‚de‡
DESERIALIZER_HXX


20 
	#DESERIALIZER_HXX


	)

22 
	~<f°ªam
>

23 
	~"b•f.hxx
"

36 ˛as†
	cDe£rülizî


38 
	mpublic
:

45 
De£rülizî
();

50 
	mvútuÆ
 ~
De£rülizî
();

52 
	mpublic
:

60 
boﬁ
 
›í
(c⁄° 
°rög
& 
fûeName
);

65 
˛o£
();

70 
boﬁ
 
isO≥n
();

77 
gëI¡
();

84 
°rög
 
gëSåög
();

91 
boﬁ
 
gëBoﬁ
();

93 
	m¥iv©e
:

95 
f°ªam
 
mySåóm
;

98 
	mTrueP©ã∫
 = 0xfab1fab2,

99 
	mFÆ£P©ã∫
 = 0xbad1bad2

	@emucore/Device.cpp

19 
	~"Devi˚.hxx
"

22 
	gDevi˚
::
	$Devi˚
()

23 : 
	$mySy°em
(0)

25 
	}
}

28 
Devi˚
::~
	$Devi˚
()

30 
	}
}

33 
Devi˚
::
	$sy°emCy˛esRe£t
()

36 
	}
}

	@emucore/Device.hxx

19 #i‚de‡
DEVICE_HXX


20 
	#DEVICE_HXX


	)

22 
˛ass
 
	gSy°em
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

35 ˛as†
	cDevi˚


37 
	mpublic
:

41 
Devi˚
();

46 
	mvútuÆ
 ~
Devi˚
();

48 
	mpublic
:

54 
vútuÆ
 c⁄° * 
	$«me
() const = 0;

59 
vútuÆ
 
	`ª£t
() = 0;

66 
vútuÆ
 
	`sy°emCy˛esRe£t
();

74 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
) = 0;

82 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
) = 0;

90 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
) = 0;

92 
public
:

98 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
) = 0;

106 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
) = 0;

108 
¥Ÿe˘ed
:

110 
Sy°em
* 
mySy°em
;

	@emucore/Driving.cpp

19 
	~<as£π.h
>

20 
	~"Evít.hxx
"

21 
	~"Drivög.hxx
"

22 
	~"Sy°em.hxx
"

25 
	gDrivög
::
	$Drivög
(
Jack
 
jack
, c⁄° 
Evít
& 
evít
)

26 : 
	$C⁄åﬁÀr
(
jack
, 
evít
)

28 
myCou¡î
 = 0;

29 
myTy≥
 = 
C⁄åﬁÀr
::
Drivög
;

30 
	}
}

33 
	gDrivög
::~
	$Drivög
()

35 
	}
}

38 
boﬁ
 
Drivög
::
	$ªad
(
DigôÆPö
 
pö
)

41 c⁄° 
uI¡8
 
˛ockwi£
[] = { 0x03, 0x01, 0x00, 0x02 };

44 c⁄° 
uI¡8
 
cou¡î˛ockwi£
[] = { 0x03, 0x02, 0x00, 0x01 };

47 c⁄° 
uI¡32
 
dñay
 = 20;

49 
pö
)

51 
O√
:

52 ++
myCou¡î
;

54 if(
myJack
 =
Le·
)

56 if(
myEvít
.
	`gë
(
Evít
::
DrivögZîoCou¡îClockwi£
) != 0)

58  (
cou¡î˛ockwi£
[(
myCou¡î
 / 
dñay
) & 0x03] & 0x01) != 0;

60 if(
myEvít
.
	`gë
(
Evít
::
DrivögZîoClockwi£
) != 0)

62  (
˛ockwi£
[(
myCou¡î
 / 
dñay
) & 0x03] & 0x01) != 0;

65 (
myEvít
.
	`gë
(
Evít
::
DrivögZîoVÆue
) & 0x01);

69 if(
myEvít
.
	`gë
(
Evít
::
DrivögO√Cou¡îClockwi£
) != 0)

71  (
cou¡î˛ockwi£
[(
myCou¡î
 / 
dñay
) & 0x03] & 0x01) != 0;

73 if(
myEvít
.
	`gë
(
Evít
::
DrivögO√Clockwi£
) != 0)

75  (
˛ockwi£
[(
myCou¡î
 / 
dñay
) & 0x03] & 0x01) != 0;

78 (
myEvít
.
	`gë
(
Evít
::
DrivögO√VÆue
) & 0x01);

81 
Two
:

82 if(
myJack
 =
Le·
)

84 if(
myEvít
.
	`gë
(
Evít
::
DrivögZîoCou¡îClockwi£
) != 0)

86  (
cou¡î˛ockwi£
[(
myCou¡î
 / 
dñay
) & 0x03] & 0x02) != 0;

88 if(
myEvít
.
	`gë
(
Evít
::
DrivögZîoClockwi£
) != 0)

90  (
˛ockwi£
[(
myCou¡î
 / 
dñay
) & 0x03] & 0x02) != 0;

93 (
myEvít
.
	`gë
(
Evít
::
DrivögZîoVÆue
) & 0x02);

97 if(
myEvít
.
	`gë
(
Evít
::
DrivögO√Cou¡îClockwi£
) != 0)

99  (
cou¡î˛ockwi£
[(
myCou¡î
 / 
dñay
) & 0x03] & 0x02) != 0;

101 if(
myEvít
.
	`gë
(
Evít
::
DrivögO√Clockwi£
) != 0)

103  (
˛ockwi£
[(
myCou¡î
 / 
dñay
) & 0x03] & 0x02) != 0;

106 (
myEvít
.
	`gë
(
Evít
::
DrivögO√VÆue
) & 0x02);

109 
Thªe
:

110  
åue
;

112 
Four
:

113  
åue
;

115 
Six
:

116  (
myJack
 =
Le·
Ë? (
myEvít
.
	`gë
(
Evít
::
DrivögZîoFúe
) == 0) :

117 (
myEvít
.
	`gë
(
Evít
::
DrivögO√Fúe
) == 0);

120  
åue
;

122 
	}
}

125 
I¡32
 
	gDrivög
::
	$ªad
(
A«logPö
)

129  
maximumResi°™˚
;

130 
	}
}

133 
	gDrivög
::
	$wrôe
(
DigôÆPö
, 
boﬁ
)

136 
	}
}

	@emucore/Driving.hxx

19 #i‚de‡
DRIVING_HXX


20 
	#DRIVING_HXX


	)

22 
˛ass
 
	gDrivög
;

23 
˛ass
 
	gSy°em
;

25 
	~"b•f.hxx
"

26 
	~"C⁄åﬁ.hxx
"

34 ˛as†
	cDrivög
 : 
public
 
C⁄åﬁÀr


36 
public
:

44 
Drivög
(
Jack
 
jack
, c⁄° 
Evít
& 
evít
);

49 
	mvútuÆ
 ~
Drivög
();

51 
	mpublic
:

58 
vútuÆ
 
boﬁ
 
ªad
(
DigôÆPö
 
pö
);

67 
vútuÆ
 
I¡32
 
ªad
(
A«logPö
 
pö
);

77 
vútuÆ
 
wrôe
(
DigôÆPö
 
pö
, 
boﬁ
 
vÆue
);

79 
	m¥iv©e
:

81 
uI¡32
 
myCou¡î
;

	@emucore/Event.cpp

19 
	~"Evít.hxx
"

20 
	~"EvítSåómî.hxx
"

23 
	gEvít
::
	$Evít
(
EvítSåómî
* 
ev
)

24 : 
	`myNumbîOfTy≥s
(
Evít
::
La°Ty≥
),

25 
	$myEvítSåómî
(
ev
)

28 
	`˛ór
();

29 
	}
}

32 
	gEvít
::~
	$Evít
()

34 
	}
}

37 
I¡32
 
Evít
::
	$gë
(
Ty≥
 
ty≥
) const

39  
myVÆues
[
ty≥
];

40 
	}
}

43 
	gEvít
::
	$£t
(
Ty≥
 
ty≥
, 
I¡32
 
vÆue
)

45 
myVÆues
[
ty≥
] = 
vÆue
;

51 
	}
}

54 
	gEvít
::
	$˛ór
()

56 
i
 = 0; i < 
myNumbîOfTy≥s
; ++i)

57 
myVÆues
[
i
] = 0;

58 
	}
}

	@emucore/Event.hxx

19 #i‚de‡
EVENT_HXX


20 
	#EVENT_HXX


	)

22 
	~"b•f.hxx
"

24 
˛ass
 
	gEvít
;

25 
˛ass
 
	gEvítSåómî
;

31 ˛as†
	cEvít


33 
	mpublic
:

39 
	eTy≥


41 
NoTy≥
,

42 
	mC⁄sﬁeOn
,

43 
	mC⁄sﬁeOff
,

44 
	mC⁄sﬁeCﬁ‹
,

45 
	mC⁄sﬁeBœckWhôe
,

46 
	mC⁄sﬁeLe·Difficu…yA
,

47 
	mC⁄sﬁeLe·Difficu…yB
,

48 
	mC⁄sﬁeRightDifficu…yA
,

49 
	mC⁄sﬁeRightDifficu…yB
,

50 
	mC⁄sﬁeSñe˘
,

51 
	mC⁄sﬁeRe£t
,

52 
	mJoy°ickZîoUp
,

53 
	mJoy°ickZîoDown
,

54 
	mJoy°ickZîoLe·
,

55 
	mJoy°ickZîoRight
,

56 
	mJoy°ickZîoFúe
,

57 
	mJoy°ickO√Up
,

58 
	mJoy°ickO√Down
,

59 
	mJoy°ickO√Le·
,

60 
	mJoy°ickO√Right
,

61 
	mJoy°ickO√Fúe
,

62 
	mPaddÀZîoResi°™˚
,

63 
	mPaddÀZîoFúe
,

64 
	mPaddÀO√Resi°™˚
,

65 
	mPaddÀO√Fúe
,

66 
	mPaddÀTwoResi°™˚
,

67 
	mPaddÀTwoFúe
,

68 
	mPaddÀThªeResi°™˚
,

69 
	mPaddÀThªeFúe
,

70 
	mBoo°îGrùZîoTriggî
,

71 
	mBoo°îGrùZîoBoo°î
,

72 
	mBoo°îGrùO√Triggî
,

73 
	mBoo°îGrùO√Boo°î
,

74 
	mKeybﬂrdZîo1
,

75 
	mKeybﬂrdZîo2
,

76 
	mKeybﬂrdZîo3
,

77 
	mKeybﬂrdZîo4
,

78 
	mKeybﬂrdZîo5
,

79 
	mKeybﬂrdZîo6
,

80 
	mKeybﬂrdZîo7
,

81 
	mKeybﬂrdZîo8
,

82 
	mKeybﬂrdZîo9
,

83 
	mKeybﬂrdZîoSèr
,

84 
	mKeybﬂrdZîo0
,

85 
	mKeybﬂrdZîoPound
,

86 
	mKeybﬂrdO√1
,

87 
	mKeybﬂrdO√2
,

88 
	mKeybﬂrdO√3
,

89 
	mKeybﬂrdO√4
,

90 
	mKeybﬂrdO√5
,

91 
	mKeybﬂrdO√6
,

92 
	mKeybﬂrdO√7
,

93 
	mKeybﬂrdO√8
,

94 
	mKeybﬂrdO√9
,

95 
	mKeybﬂrdO√Sèr
,

96 
	mKeybﬂrdO√0
,

97 
	mKeybﬂrdO√Pound
,

98 
	mDrivögZîoClockwi£
,

99 
	mDrivögZîoCou¡îClockwi£
,

100 
	mDrivögZîoVÆue
,

101 
	mDrivögZîoFúe
,

102 
	mDrivögO√Clockwi£
,

103 
	mDrivögO√Cou¡îClockwi£
,

104 
	mDrivögO√VÆue
,

105 
	mDrivögO√Fúe
,

106 
	mATARIC_FPS
,

107 
	mATARIC_JOY
,

108 
	mATARIC_RENDER
,

109 
	mATARIC_LOAD
,

110 
	mATARIC_SAVE
,

111 
	mATARIC_RESET
,

112 
	mATARIC_AUTOFIRE
,

113 
	mATARIC_INCFIRE
,

114 
	mATARIC_DECFIRE
,

115 
	mATARIC_SCREEN
,

116 
	mLa°Ty≥


119 
	gpublic
:

123 
Evít
(
EvítSåómî
* 
ev
);

128 
	gvútuÆ
 ~
Evít
();

130 
	gpublic
:

134 
vútuÆ
 
I¡32
 
	$gë
(
Ty≥
 
ty≥
) const;

139 
vútuÆ
 
	`£t
(
Ty≥
 
ty≥
, 
I¡32
 
vÆue
);

144 
vútuÆ
 
	`˛ór
();

146 
¥Ÿe˘ed
:

148 c⁄° 
I¡32
 
myNumbîOfTy≥s
;

151 
I¡32
 
myVÆues
[
La°Ty≥
];

154 
EvítSåómî
* 
myEvítSåómî
;

155 
	}
};

	@emucore/EventHandler.cpp

19 
	~<s°ªam
>

20 
	~<SDL.h
>

22 
	~"Evít.hxx
"

23 
	~"EvítH™dÀr.hxx
"

24 
	~"EvítSåómî.hxx
"

25 
	~"FSNode.hxx
"

26 
	~"Sëtögs.hxx
"

27 
	~"Sy°em.hxx
"

28 
	~"FømeBuf„r.hxx
"

29 
	~"Sound.hxx
"

30 
	~"OSy°em.hxx
"

32 
	~"DülogC⁄èöî.hxx
"

33 
	~"Míu.hxx
"

34 
	~"Comm™dMíu.hxx
"

35 
	~"Launchî.hxx
"

37 
	~"p•_kbd.h
"

40 
	~"GuiUtûs.hxx
"

41 
	~"De£rülizî.hxx
"

42 
	~"Sîülizî.hxx
"

43 
	~"b•f.hxx
"

45 #ifde‡
DEVELOPER_SUPPORT


46 
	~"Debuggî.hxx
"

49 #ifde‡
SNAPSHOT_SUPPORT


50 
	~"S«pshŸ.hxx
"

53 #ifde‡
CHEATCODE_SUPPORT


54 
	~"ChótM™agî.hxx
"

57 #ifde‡
MAC_OSX


59 
h™dÀMacOSXKey¥ess
(
key
);

63 
	#JOY_DEADZONE
 3200

	)

66 
EvítH™dÀr
::
	$EvítH™dÀr
(
OSy°em
* 
osy°em
)

67 : 
	`myOSy°em
(
osy°em
),

68 
	`myEvít
(
NULL
),

69 
	`myEvítSåómî
(
NULL
),

70 
	`myOvîœy
(
NULL
),

71 
	`mySèã
(
S_NONE
),

72 
	`myLSSèã
(0),

73 
	`myPau£Fœg
(
Ál£
),

74 
	`myQuôFœg
(
Ál£
),

75 
	`myGøbMou£Fœg
(
Ál£
),

76 
	`myU£LaunchîFœg
(
Ál£
),

77 
	`myPaddÀMode
(0),

78 
	$myPaddÀThªshﬁd
(0)

80 
i
, 
j
, 
k
;

83 
myOSy°em
->
	`©èch
(
this
);

86 
myEvítSåómî
 = 
√w
 
	`EvítSåómî
(
myOSy°em
);

89 
myEvít
 = 
√w
 
	`Evít
(
myEvítSåómî
);

92 
i
 = 0; i < 
SDLK_LAST
; ++i)

94 
myKeyTabÀ
[
i
] = 
Evít
::
NoTy≥
;

95 
ourSDLM≠pög
[
i
] = "";

98 #ifde‡
JOYSTICK_SUPPORT


100 
i
 = 0; i < 
kNumJoy°icks
; ++i)

101 
j
 = 0; j < 
kNumJoyBuâ⁄s
; ++j)

102 
myJoyTabÀ
[
i
][
j
] = 
Evít
::
NoTy≥
;

105 
i
 = 0; i < 
kNumJoy°icks
; ++i)

106 
j
 = 0; j < 
kNumJoyAxis
; ++j)

107 
myJoyAxisTabÀ
[
i
][
j
][0] = myJoyAxisTabÀ[i][j][1] = 
Evít
::
NoTy≥
;

110 
i
 = 0; i < 
kNumJoy°icks
; ++i)

111 
j
 = 0; j < 
kNumJoyH©s
; ++j)

112 
k
 = 0; k < 4; ++k)

113 
myJoyH©TabÀ
[
i
][
j
][
k
] = 
Evít
::
NoTy≥
;

117 
i
 = 0; i < 
Evít
::
La°Ty≥
; ++i)

118 
ourMesßgeTabÀ
[
i
] = "";

121 
ourMesßgeTabÀ
[
Evít
::
C⁄sﬁeCﬁ‹
] = "Color Mode";

122 
ourMesßgeTabÀ
[
Evít
::
C⁄sﬁeBœckWhôe
] = "BW Mode";

123 
ourMesßgeTabÀ
[
Evít
::
C⁄sﬁeLe·Difficu…yA
] = "Left Difficulty A";

124 
ourMesßgeTabÀ
[
Evít
::
C⁄sﬁeLe·Difficu…yB
] = "Left Difficulty B";

125 
ourMesßgeTabÀ
[
Evít
::
C⁄sﬁeRightDifficu…yA
] = "Right Difficulty A";

126 
ourMesßgeTabÀ
[
Evít
::
C⁄sﬁeRightDifficu…yB
] = "Right Difficulty B";

130 
	`£tSDLM≠pögs
();

131 
	`£tKeym≠
();

132 
	`£tJoym≠
();

133 
	`£tJoyAxisM≠
();

134 
	`£tJoyH©M≠
();

135 
	`£tA˘i⁄M≠pögs
();

137 
myGøbMou£Fœg
 = 
myOSy°em
->
	`£âögs
().
	`gëBoﬁ
("grabmouse");

139 
	`£tPaddÀMode
(
myOSy°em
->
	`£âögs
().
	`gëI¡
("∑ddÀ"), 
Ál£
);

140 
	`£tPaddÀThªshﬁd
(
myOSy°em
->
	`£âögs
().
	`gëI¡
("pthresh"));

142 
myFryögFœg
 = 
Ál£
;

143 
	}
}

146 
EvítH™dÀr
::~
	$EvítH™dÀr
()

148 
dñëe
 
myEvít
;

149 
dñëe
 
myEvítSåómî
;

151 #ifde‡
JOYSTICK_SUPPORT


152 if(
	`SDL_WasInô
(
SDL_INIT_JOYSTICK
) & SDL_INIT_JOYSTICK)

154 
uI¡32
 
i
 = 0; i < 
kNumJoy°icks
; i++)

156 if(
	`SDL_Joy°ickO≥√d
(
i
))

157 
	`SDL_Joy°ickClo£
(
ourJoy°icks
[
i
].
°ick
);

161 
	}
}

164 
EvítH™dÀr
::
	$ª£t
(
Sèã
 
°©e
)

166 
	`£tEvítSèã
(
°©e
);

168 
myLSSèã
 = 0;

169 
myPau£Fœg
 = 
Ál£
;

170 
myQuôFœg
 = 
Ál£
;

172 
	`∑u£
(
Ál£
);

173 
myEvít
->
	`˛ór
();

175 if(
mySèã
 =
S_LAUNCHER
)

176 
myU£LaunchîFœg
 = 
åue
;

179 
i
 = 0; i < 4; ++i)

181 
	`mem£t
(&
myPaddÀ
[
i
], 0, (
JoyMou£
));

182 
myEvít
->
	`£t
(
PaddÀ_Resi°™˚
[
i
], 1000000);

184 
	`£tPaddÀS≥ed
(0, 
myOSy°em
->
	`£âögs
().
	`gëI¡
("p1speed"));

185 
	`£tPaddÀS≥ed
(1, 
myOSy°em
->
	`£âögs
().
	`gëI¡
("p2speed"));

186 
	`£tPaddÀS≥ed
(2, 
myOSy°em
->
	`£âögs
().
	`gëI¡
("p3speed"));

187 
	`£tPaddÀS≥ed
(3, 
myOSy°em
->
	`£âögs
().
	`gëI¡
("p4speed"));

190 
	}
}

193 
EvítH™dÀr
::
	$ª‰eshDi•œy
(
boﬁ
 
f‹˚Upd©e
)

197 
DülogC⁄èöî
::
ourJoyMou£
.
x_max
 = 
myOSy°em
->
	`‰ameBuf„r
().
	`imageWidth
();

198 
DülogC⁄èöî
::
ourJoyMou£
.
y_max
 = 
myOSy°em
->
	`‰ameBuf„r
().
	`imageHeight
();

199 
DülogC⁄èöî
::
ourJoyMou£
.
amt
 = 
myOSy°em
->
	`‰ameBuf„r
().
	`zoomLevñ
() * 3;

201 
mySèã
)

203 
S_EMULATE
:

204 
myOSy°em
->
	`‰ameBuf„r
().
	`ª‰esh
();

207 
S_MENU
:

208 
S_CMDMENU
:

209 
myOSy°em
->
	`‰ameBuf„r
().
	`ª‰esh
();

210 
S_LAUNCHER
:

211 
S_DEBUGGER
:

212 
myOvîœy
->
	`ª‰esh
();

220 if(
f‹˚Upd©e
)

221 
myOSy°em
->
	`‰ameBuf„r
().
	`upd©e
();

225 
myOSy°em
->
	`‰ameBuf„r
().
	`ª‰esh
();

227 
	}
}

230 
EvítH™dÀr
::
	$∑u£
(
boﬁ
 
°©us
)

232 
myPau£Fœg
 = 
°©us
;

234 
myOSy°em
->
	`‰ameBuf„r
().
	`∑u£
(
myPau£Fœg
);

235 
myOSy°em
->
	`sound
().
	`muã
(
myPau£Fœg
);

238 
myOSy°em
->
	`∑u£Ch™ged
(
myPau£Fœg
);

239 
	}
}

242 
EvítH™dÀr
::
	$£tupJoy°icks
()

245 
boﬁ
 
showöfo
 = 
myOSy°em
->
	`£âögs
().
	`gëBoﬁ
("showinfo");

247 #ifde‡
JOYSTICK_SUPPORT


249 
uI¡8
 
ßCou¡
 = 0;

252 
uI¡32
 
i
 = 0; i < 
kNumJoy°icks
; i++)

254 
ourJoy°icks
[
i
].
°ick
 = (
SDL_Joy°ick
*Ë
NULL
;

255 
ourJoy°icks
[
i
].
ty≥
 = 
JT_NONE
;

259 if(
showöfo
)

260 
cout
 << "Joy°ick devi˚†found:" << 
ídl
;

261 if((
	`SDL_InôSubSy°em
(
SDL_INIT_JOYSTICK
Ë=-1Ë|| (
	`SDL_NumJoy°icks
() <= 0))

263 if(
showöfo
)

264 
cout
 << "Nÿjoy°ick†¥e£¡." << 
ídl
;

269 
uI¡32
 
limô
 = 
	`SDL_NumJoy°icks
(Ë<
kNumJoy°icks
 ?

270 
	`SDL_NumJoy°icks
(Ë: 
kNumJoy°icks
;

271 
uI¡32
 
i
 = 0; i < 
limô
; i++)

273 
°rög
 
«me
 = 
	`SDL_Joy°ickName
(
i
);

274 
ourJoy°icks
[
i
].
°ick
 = 
	`SDL_Joy°ickO≥n
(i);

277 if(
ourJoy°icks
[
i
].
°ick
 =
NULL
)

279 
ourJoy°icks
[
i
].
ty≥
 = 
JT_NONE
;

280 
ourJoy°icks
[
i
].
«me
 = "None";

285 if(
«me
.
	`föd
("SãŒad≠t‹", 0Ë!
°rög
::
≈os
)

287 
ßCou¡
++;

288 if(
ßCou¡
 > 2)

290 if(
ßCou¡
 == 1)

291 
ourJoy°icks
[
i
].
«me
 = "Stelladaptor 1";

292 if(
ßCou¡
 == 2)

293 
ourJoy°icks
[
i
].
«me
 = "Stelladaptor 2";

295 if(
showöfo
)

296 
cout
 << " " << 
i
 << ": " << 
ourJoy°icks
[i].
«me
 << 
ídl
;

300 
ourJoy°icks
[
i
].
ty≥
 = 
JT_REGULAR
;

301 
ourJoy°icks
[
i
].
«me
 = 
	`SDL_Joy°ickName
(i);

303 if(
showöfo
)

304 
cout
 << " " << 
i
 << ": " << 
ourJoy°icks
[i].
«me
 << " with "

305 << 
	`SDL_Joy°ickNumAxes
(
ourJoy°icks
[
i
].
°ick
) << "áxes, "

306 << 
	`SDL_Joy°ickNumH©s
(
ourJoy°icks
[
i
].
°ick
) << " hats, "

307 << 
	`SDL_Joy°ickNumBÆls
(
ourJoy°icks
[
i
].
°ick
) << " balls, "

308 << 
	`SDL_Joy°ickNumBuâ⁄s
(
ourJoy°icks
[
i
].
°ick
) << " buttons"

309 << 
ídl
;

312 if(
showöfo
)

313 
cout
 << 
ídl
;

316 c⁄° 
°rög
& 
ß1
 = 
myOSy°em
->
	`£âögs
().
	`gëSåög
("sa1");

317 c⁄° 
°rög
& 
ß2
 = 
myOSy°em
->
	`£âögs
().
	`gëSåög
("sa2");

318 
	`m≠SãŒad≠t‹s
(
ß1
, 
ß2
);

320 if(
showöfo
)

321 
cout
 << "Nÿjoy°ick†¥e£¡." << 
ídl
;

324 
	}
}

327 
EvítH™dÀr
::
	$m≠SãŒad≠t‹s
(c⁄° 
°rög
& 
ß1
, c⁄° såög& 
ß2
)

329 #ifde‡
JOYSTICK_SUPPORT


330 
boﬁ
 
showöfo
 = 
myOSy°em
->
	`£âögs
().
	`gëBoﬁ
("showinfo");

332 
i
 = 0; i < 
kNumJoy°icks
; i++)

334 if(
ourJoy°icks
[
i
].
«me
 == "Stelladaptor 1")

336 if(
ß1
 == "left")

338 
ourJoy°icks
[
i
].
ty≥
 = 
JT_STELLADAPTOR_LEFT
;

339 if(
showöfo
)

340 
cout
 << " Stelladaptor 1ÉmulatesÜeft joystickÖort\n";

342 if(
ß1
 == "right")

344 
ourJoy°icks
[
i
].
ty≥
 = 
JT_STELLADAPTOR_RIGHT
;

345 if(
showöfo
)

346 
cout
 << " Stelladaptor 1ÉmulatesÑight joystickÖort\n";

349 if(
ourJoy°icks
[
i
].
«me
 == "Stelladaptor 2")

351 if(
ß2
 == "left")

353 
ourJoy°icks
[
i
].
ty≥
 = 
JT_STELLADAPTOR_LEFT
;

354 if(
showöfo
)

355 
cout
 << " Stelladaptor 2ÉmulatesÜeft joystickÖort\n";

357 if(
ß2
 == "right")

359 
ourJoy°icks
[
i
].
ty≥
 = 
JT_STELLADAPTOR_RIGHT
;

360 if(
showöfo
)

361 
cout
 << " Stelladaptor 2ÉmulatesÑight joystickÖort\n";

365 if(
showöfo
)

366 
cout
 << 
ídl
;

368 
myOSy°em
->
	`£âögs
().
	`£tSåög
("ß1", 
ß1
);

369 
myOSy°em
->
	`£âögs
().
	`£tSåög
("ß2", 
ß2
);

371 
	}
}

374 
EvítH™dÀr
::
	$pﬁl
(
uI¡32
 
time
)

384 
myOSy°em
->
	`pﬁlEvít
();

387 
SDL_Evít
 
evít
;

388 
	`SDL_PﬁlEvít
(&
evít
))

390 
evít
.
ty≥
)

393 
SDL_KEYUP
:

394 
SDL_KEYDOWN
:

396 
unicode
 = 
evít
.
key
.
keysym
.unicode;

397 
SDLKey
 
key
 = 
evít
.key.
keysym
.
sym
;

398 
SDLMod
 
mod
 = 
evít
.
key
.
keysym
.mod;

399 
uI¡8
 
°©e
 = 
evít
.
key
.
ty≥
 =
SDL_KEYDOWN
 ? 1 : 0;

404 if(
	`kbdA…
(
mod
Ë&& 
°©e
)

407 (
key
))

409 #i‚de‡
MAC_OSX


410 
SDLK_EQUALS
:

411 
myOSy°em
->
	`‰ameBuf„r
().
	`ªsize
(+1);

414 
SDLK_MINUS
:

415 
myOSy°em
->
	`‰ameBuf„r
().
	`ªsize
(-1);

418 
SDLK_RETURN
:

419 
myOSy°em
->
	`‰ameBuf„r
().
	`toggÀFuŒs¸ìn
();

422 
SDLK_g
:

423 
myOSy°em
->
	`toggÀFømeBuf„r
();

428 if(
mySèã
 =
S_EMULATE
)

430 (
key
))

432 
SDLK_LEFTBRACKET
:

433 
myOSy°em
->
	`sound
().
	`adju°Vﬁume
(-1);

436 
SDLK_RIGHTBRACKET
:

437 
myOSy°em
->
	`sound
().
	`adju°Vﬁume
(+1);

440 
SDLK_END
:

441 
myOSy°em
->
	`c⁄sﬁe
().
	`ch™geXSèπ
(+1);

444 
SDLK_HOME
:

445 
myOSy°em
->
	`c⁄sﬁe
().
	`ch™geXSèπ
(-1);

448 
SDLK_PAGEUP
:

449 
myOSy°em
->
	`c⁄sﬁe
().
	`ch™geYSèπ
(+1);

452 
SDLK_PAGEDOWN
:

453 
myOSy°em
->
	`c⁄sﬁe
().
	`ch™geYSèπ
(-1);

456 
SDLK_z
:

457 
myOSy°em
->
	`c⁄sﬁe
().
	`toggÀP0Bô
();

460 
SDLK_x
:

461 
myOSy°em
->
	`c⁄sﬁe
().
	`toggÀP1Bô
();

464 
SDLK_c
:

465 
myOSy°em
->
	`c⁄sﬁe
().
	`toggÀM0Bô
();

468 
SDLK_v
:

469 
myOSy°em
->
	`c⁄sﬁe
().
	`toggÀM1Bô
();

472 
SDLK_b
:

473 
myOSy°em
->
	`c⁄sﬁe
().
	`toggÀBLBô
();

476 
SDLK_n
:

477 
myOSy°em
->
	`c⁄sﬁe
().
	`toggÀPFBô
();

480 
SDLK_PERIOD
:

481 
myOSy°em
->
	`c⁄sﬁe
().
	`íabÀBôs
(
Ál£
);

484 
SDLK_SLASH
:

485 
myOSy°em
->
	`c⁄sﬁe
().
	`íabÀBôs
(
åue
);

488 
SDLK_s
:

489 
	`ßvePr›îtõs
();

492 
SDLK_p
:

493 
myOSy°em
->
	`c⁄sﬁe
().
	`toggÀPho•h‹
();

498 
SDLK_e
:

499 if(
myEvítSåómî
->
	`isRec‹dög
())

501 if(
myEvítSåómî
->
	`°›Rec‹dög
())

502 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("Recording stopped");

504 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("StopÑecordingÉrror");

508 if(
myEvítSåómî
->
	`°¨tRec‹dög
())

509 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("Recording started");

511 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("StartÑecordingÉrror");

516 
SDLK_l
:

517 if(
myEvítSåómî
->
	`lﬂdRec‹dög
())

518 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("PlayingÑecording");

520 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("PlayingÑecordingÉrror");

528 if(
	`kbdC⁄åﬁ
(
mod
Ë&& 
°©e
)

531 (
key
))

533 
SDLK_q
:

534 
	`h™dÀEvít
(
Evít
::
Quô
, 1);

537 #ifde‡
MAC_OSX


538 
SDLK_h
:

539 
SDLK_m
:

540 
SDLK_SLASH
:

541 
	`h™dÀMacOSXKey¥ess
((
key
));

544 
SDLK_EQUALS
:

545 
myOSy°em
->
	`‰ameBuf„r
().
	`ªsize
(+1);

548 
SDLK_MINUS
:

549 
myOSy°em
->
	`‰ameBuf„r
().
	`ªsize
(-1);

552 
SDLK_RETURN
:

553 
myOSy°em
->
	`‰ameBuf„r
().
	`toggÀFuŒs¸ìn
();

556 
SDLK_g
:

558 if(!
myOSy°em
->
	`‰ameBuf„r
().
	`fuŒS¸ìn
())

560 
myGøbMou£Fœg
 = !myGrabMouseFlag;

561 
myOSy°em
->
	`£âögs
().
	`£tBoﬁ
("gøbmou£", 
myGøbMou£Fœg
);

562 
myOSy°em
->
	`‰ameBuf„r
().
	`gøbMou£
(
myGøbMou£Fœg
);

568 if(
mySèã
 =
S_EMULATE
)

570 (
key
))

572 
SDLK_0
:

573 
	`£tPaddÀMode
(0, 
åue
);

576 
SDLK_1
:

577 
	`£tPaddÀMode
(1, 
åue
);

580 
SDLK_2
:

581 
	`£tPaddÀMode
(2, 
åue
);

584 
SDLK_3
:

585 
	`£tPaddÀMode
(3, 
åue
);

588 
SDLK_f
:

589 
myOSy°em
->
	`c⁄sﬁe
().
	`toggÀF‹m©
();

592 
SDLK_p
:

593 
myOSy°em
->
	`c⁄sﬁe
().
	`toggÀPÆëã
();

596 
SDLK_r
:

597 
myOSy°em
->
	`¸óãC⁄sﬁe
();

600 
SDLK_END
:

601 
myOSy°em
->
	`c⁄sﬁe
().
	`ch™geWidth
(+1);

604 
SDLK_HOME
:

605 
myOSy°em
->
	`c⁄sﬁe
().
	`ch™geWidth
(-1);

608 
SDLK_PAGEUP
:

609 
myOSy°em
->
	`c⁄sﬁe
().
	`ch™geHeight
(+1);

612 
SDLK_PAGEDOWN
:

613 
myOSy°em
->
	`c⁄sﬁe
().
	`ch™geHeight
(-1);

616 
SDLK_s
:

617 
°rög
 
√wPr›îtõsFûe
 = 
myOSy°em
->
	`ba£Dú
(Ë+ 
BSPF_PATH_SEPARATOR
 +

618 
myOSy°em
->
	`c⁄sﬁe
().
	`¥›îtõs
().
	`gë
(
C¨åidge_Name
) + ".pro";

619 
myOSy°em
->
	`c⁄sﬁe
().
	`ßvePr›îtõs
(
√wPr›îtõsFûe
);

627 if(!(
	`kbdC⁄åﬁ
(
mod
Ë|| 
	`kbdShi·
(modË|| 
	`kbdA…
(mod)) &&

628 
°©e
 && 
	`evítSèãCh™ge
(
myKeyTabÀ
[
key
]))

632 if(
mySèã
 =
S_EMULATE
)

633 
	`h™dÀEvít
(
myKeyTabÀ
[
key
], 
°©e
);

634 if(
myOvîœy
 !
NULL
)

637 i‡(
key
 =
SDLK_BACKSPACE
 || key =
SDLK_DELETE
 ||

638 (
key
 >
SDLK_UP
 && key <
SDLK_PAGEDOWN
))

639 
unicode
 = 
key
;

641 
myOvîœy
->
	`h™dÀKeyEvít
(
unicode
, 
key
, 
mod
, 
°©e
);

647 
SDL_MOUSEMOTION
:

648 
	`h™dÀMou£MŸi⁄Evít
(
evít
);

651 
SDL_MOUSEBUTTONUP
:

652 
SDL_MOUSEBUTTONDOWN
:

654 
uI¡8
 
°©e
 = 
evít
.
buâ⁄
.
ty≥
 =
SDL_MOUSEBUTTONDOWN
 ? 1 : 0;

655 
	`h™dÀMou£Buâ⁄Evít
(
evít
, 
°©e
);

659 
SDL_ACTIVEEVENT
:

660 if((
evít
.
a˘ive
.
°©e
 & 
SDL_APPACTIVE
Ë&& (evít.a˘ive.
gaö
 == 0))

661 if(!
myPau£Fœg
)

662 
	`h™dÀEvít
(
Evít
::
Pau£
, 1);

665 
SDL_QUIT
:

666 
	`h™dÀEvít
(
Evít
::
Quô
, 1);

669 
SDL_VIDEOEXPOSE
:

670 
	`ª‰eshDi•œy
();

673 #ifde‡
JOYSTICK_SUPPORT


674 
SDL_JOYBUTTONUP
:

675 
SDL_JOYBUTTONDOWN
:

677 if(
evít
.
jbuâ⁄
.
which
 >
kNumJoy°icks
)

681 
ty≥
 = 
ourJoy°icks
[
evít
.
jbuâ⁄
.
which
].type;

682 
ty≥
)

684 
JT_REGULAR
:

686 if(
evít
.
jbuâ⁄
.
buâ⁄
 >
kNumJoyBuâ⁄s
)

689 
°ick
 = 
evít
.
jbuâ⁄
.
which
;

690 
buâ⁄
 = 
evít
.
jbuâ⁄
.button;

691 
°©e
 = 
evít
.
jbuâ⁄
.°©ê=
SDL_PRESSED
 ? 1 : 0;

694 if(!
myOSy°em
->
	`joyBuâ⁄H™dÀd
(
buâ⁄
))

695 
	`h™dÀJoyEvít
(
°ick
, 
buâ⁄
, 
°©e
);

700 
JT_STELLADAPTOR_LEFT
:

701 
JT_STELLADAPTOR_RIGHT
:

703 
buâ⁄
 = 
evít
.
jbuâ⁄
.button;

704 
°©e
 = 
evít
.
jbuâ⁄
.°©ê=
SDL_PRESSED
 ? 1 : 0;

709 ()
myC⁄åﬁÀr
[
ty≥
-2])

712 
C⁄åﬁÀr
::
Joy°ick
:

713 
myEvít
->
	`£t
(
SA_Buâ⁄
[
ty≥
-2][
buâ⁄
][0], 
°©e
);

717 
C⁄åﬁÀr
::
PaddÀs
:

718 
myEvít
->
	`£t
(
SA_Buâ⁄
[
ty≥
-2][
buâ⁄
][1], 
°©e
);

722 
C⁄åﬁÀr
::
Drivög
:

723 
myEvít
->
	`£t
(
SA_Buâ⁄
[
ty≥
-2][
buâ⁄
][2], 
°©e
);

732 
SDL_JOYAXISMOTION
:

734 if(
evít
.
jaxis
.
which
 >
kNumJoy°icks
)

738 
ty≥
 = 
ourJoy°icks
[
evít
.
jbuâ⁄
.
which
].type;

739 
ty≥
)

741 
JT_REGULAR
:

743 
°ick
 = 
evít
.
jaxis
.
which
;

744 
axis
 = 
evít
.
jaxis
.axis;

745 
vÆue
 = 
evít
.
jaxis
.value;

747 if(
mySèã
 =
S_EMULATE
)

748 
	`h™dÀJoyAxisEvít
(
°ick
, 
axis
, 
vÆue
);

749 if(
myOvîœy
 !
NULL
)

750 
myOvîœy
->
	`h™dÀJoyAxisEvít
(
°ick
, 
axis
, 
vÆue
);

754 
JT_STELLADAPTOR_LEFT
:

755 
JT_STELLADAPTOR_RIGHT
:

757 
axis
 = 
evít
.
jaxis
.axis;

758 
vÆue
 = 
evít
.
jaxis
.value;

763 ()
myC⁄åﬁÀr
[
ty≥
-2])

766 
C⁄åﬁÀr
::
Joy°ick
:

767 
myEvít
->
	`£t
(
SA_Axis
[
ty≥
-2][
axis
][0], (
vÆue
 < -16384) ? 1 : 0);

768 
myEvít
->
	`£t
(
SA_Axis
[
ty≥
-2][
axis
][1], (
vÆue
 > 16384) ? 1 : 0);

772 
C⁄åﬁÀr
::
PaddÀs
:

776 if(
	`isJôãr
(((
ty≥
-2Ë<< 1Ë+ 
axis
, 
vÆue
))

779 
ªsi°™˚
 = (
I¡32
Ë(1000000.0 * (32767 - 
vÆue
) / 65534);

780 
myEvít
->
	`£t
(
SA_Axis
[
ty≥
-2][
axis
][2], 
ªsi°™˚
);

785 
C⁄åﬁÀr
::
Drivög
:

786 if(
axis
 == 1)

788 if(
vÆue
 <= -16384-4096)

789 
myEvít
->
	`£t
(
SA_DrivögVÆue
[
ty≥
-2],2);

790 if(
vÆue
 > 16384+4096)

791 
myEvít
->
	`£t
(
SA_DrivögVÆue
[
ty≥
-2],1);

792 if(
vÆue
 >= 16384-4096)

793 
myEvít
->
	`£t
(
SA_DrivögVÆue
[
ty≥
-2],0);

795 
myEvít
->
	`£t
(
SA_DrivögVÆue
[
ty≥
-2],3);

804 
SDL_JOYHATMOTION
:

806 
°ick
 = 
evít
.
jh©
.
which
;

807 
h©
 = 
evít
.
jh©
.hat;

808 
vÆue
 = 
evít
.
jh©
.value;

810 if(
°ick
 >
kNumJoy°icks
 || 
h©
 >
kNumJoyH©s
)

816 if(
vÆue
 =
SDL_HAT_CENTERED
)

817 
	`h™dÀJoyH©Evít
(
°ick
, 
h©
, 
kJH©Cíãªd
);

820 if(
vÆue
 & 
SDL_HAT_UP
)

821 
	`h™dÀJoyH©Evít
(
°ick
, 
h©
, 
kJH©Up
);

822 if(
vÆue
 & 
SDL_HAT_RIGHT
)

823 
	`h™dÀJoyH©Evít
(
°ick
, 
h©
, 
kJH©Right
);

824 if(
vÆue
 & 
SDL_HAT_DOWN
)

825 
	`h™dÀJoyH©Evít
(
°ick
, 
h©
, 
kJH©Down
);

826 if(
vÆue
 & 
SDL_HAT_LEFT
)

827 
	`h™dÀJoyH©Evít
(
°ick
, 
h©
, 
kJH©Le·
);

837 
i
 = 0; i < 4; ++i)

839 if(
myPaddÀ
[
i
].
a˘ive
)

841 
myPaddÀ
[
i
].
x
 +myPaddÀ[i].
x_amt
;

842 if(
myPaddÀ
[
i
].
x
 < 0)

844 
myPaddÀ
[
i
].
x
 = 0; ;

846 if(
myPaddÀ
[
i
].
x
 > 1000000)

848 
myPaddÀ
[
i
].
x
 = 1000000; ;

852 
ªsi°™˚
 = ()(1000000.0 * (1000000.0 - 
myPaddÀ
[
i
].
x
) / 1000000.0);

853 
myEvít
->
	`£t
(
PaddÀ_Resi°™˚
[
i
], 
ªsi°™˚
);

861 if(
mySèã
 !
S_EMULATE
 && 
myOvîœy
)

862 
myOvîœy
->
	`upd©eTime
(
time
);

864 #ifde‡
CHEATCODE_SUPPORT


865 c⁄° 
ChótLi°
& 
chóts
 = 
myOSy°em
->
	`chót
().
	`≥rFøme
();

866 
i
 = 0; i < 
chóts
.
	`size
(); i++)

867 
chóts
[
i
]->
	`evÆu©e
();

874 
	}
}

877 
EvítH™dÀr
::
	$h™dÀMou£MŸi⁄Evít
(
SDL_Evít
& 
evít
)

881 
x
 = 
evít
.
mŸi⁄
.x, 
y
 =Évent.motion.y;

882 
DülogC⁄èöî
::
ourJoyMou£
.
x
 = x;

883 
DülogC⁄èöî
::
ourJoyMou£
.
y
 = y;

885 
myOSy°em
->
	`‰ameBuf„r
().
	`å™¶©eCo‹ds
(&
x
, &
y
);

888 if(
mySèã
 =
S_EMULATE
)

890 
w
 = 
myOSy°em
->
	`‰ameBuf„r
().
	`ba£Width
();

894 if(
myGøbMou£Fœg
Ë
x
 = 
	`MIN
(
w
, () (x * 1.5));

896 
ªsi°™˚
 = ()(1000000.0 * (
w
 - 
x
) / w);

897 
myEvít
->
	`£t
(
PaddÀ_Resi°™˚
[
myPaddÀMode
], 
ªsi°™˚
);

899 if(
myOvîœy
)

900 
myOvîœy
->
	`h™dÀMou£MŸi⁄Evít
(
x
, 
y
, 0);

902 
	}
}

905 
EvítH™dÀr
::
	$h™dÀMou£Buâ⁄Evít
(
SDL_Evít
& 
evít
, 
°©e
)

909 if(
mySèã
 =
S_EMULATE
)

910 
myEvít
->
	`£t
(
PaddÀ_Buâ⁄
[
myPaddÀMode
], 
°©e
);

911 if(
myOvîœy
)

914 
I¡32
 
x
 = 
evít
.
buâ⁄
.x, 
y
 =Évent.button.y;

916 
myOSy°em
->
	`‰ameBuf„r
().
	`å™¶©eCo‹ds
(&
x
, &
y
);

918 
Mou£Buâ⁄
 
buâ⁄
;

920 
evít
.
buâ⁄
.button)

922 
SDL_BUTTON_LEFT
:

923 
buâ⁄
 = 
°©e
 ? 
EVENT_LBUTTONDOWN
 : 
EVENT_LBUTTONUP
;

925 
SDL_BUTTON_RIGHT
:

926 
buâ⁄
 = 
°©e
 ? 
EVENT_RBUTTONDOWN
 : 
EVENT_RBUTTONUP
;

928 
SDL_BUTTON_WHEELDOWN
:

929 
buâ⁄
 = 
EVENT_WHEELDOWN
;

931 
SDL_BUTTON_WHEELUP
:

932 
buâ⁄
 = 
EVENT_WHEELUP
;

937 
myOvîœy
->
	`h™dÀMou£Buâ⁄Evít
(
buâ⁄
, 
x
, 
y
, 
°©e
);

940 
	}
}

943 
EvítH™dÀr
::
	$h™dÀJoyEvít
(
°ick
, 
buâ⁄
, 
°©e
)

946 #ifde‡
JOYSTICK_SUPPORT


947 if(
°©e
 && 
	`evítSèãCh™ge
(
myJoyTabÀ
[
°ick
][
buâ⁄
]))

951 if(
mySèã
 =
S_EMULATE
)

952 
	`h™dÀEvít
(
myJoyTabÀ
[
°ick
][
buâ⁄
], 
°©e
);

953 if(
myOvîœy
 !
NULL
)

954 
myOvîœy
->
	`h™dÀJoyEvít
(
°ick
, 
buâ⁄
, 
°©e
);

957 
	}
}

960 
EvítH™dÀr
::
	$h™dÀJoyAxisEvít
(
°ick
, 
axis
, 
vÆue
)

963 #ifde‡
JOYSTICK_SUPPORT


965 
Evít
::
Ty≥
 
evítAxisNeg
 = 
myJoyAxisTabÀ
[
°ick
][
axis
][0];

966 
Evít
::
Ty≥
 
evítAxisPos
 = 
myJoyAxisTabÀ
[
°ick
][
axis
][1];

969 ()
evítAxisNeg
)

971 
Evít
::
PaddÀZîoA«log
:

972 
myEvít
->
	`£t
(
Evít
::
PaddÀZîoResi°™˚
,

973 ()(1000000.0 * (32767 - 
vÆue
) / 65534));

975 
Evít
::
PaddÀO√A«log
:

976 
myEvít
->
	`£t
(
Evít
::
PaddÀO√Resi°™˚
,

977 ()(1000000.0 * (32767 - 
vÆue
) / 65534));

979 
Evít
::
PaddÀTwoA«log
:

980 
myEvít
->
	`£t
(
Evít
::
PaddÀTwoResi°™˚
,

981 ()(1000000.0 * (32767 - 
vÆue
) / 65534));

983 
Evít
::
PaddÀThªeA«log
:

984 
myEvít
->
	`£t
(
Evít
::
PaddÀThªeResi°™˚
,

985 ()(1000000.0 * (32767 - 
vÆue
) / 65534));

989 if(
vÆue
 > -
JOY_DEADZONE
 && value < JOY_DEADZONE)

993 
	`h™dÀEvít
(
evítAxisNeg
, 0);

994 
	`h™dÀEvít
(
evítAxisPos
, 0);

997 
	`h™dÀEvít
(
vÆue
 < 0 ? 
evítAxisNeg
 : 
evítAxisPos
, 1);

1002 
	}
}

1005 
EvítH™dÀr
::
	$h™dÀJoyH©Evít
(
°ick
, 
h©
, 
vÆue
)

1008 #ifde‡
JOYSTICK_SUPPORT


1009 if(
mySèã
 =
S_EMULATE
)

1011 if(
vÆue
 =
kJH©Cíãªd
)

1015 
	`h™dÀEvít
(
myJoyH©TabÀ
[
°ick
][
h©
][0], 0);

1016 
	`h™dÀEvít
(
myJoyH©TabÀ
[
°ick
][
h©
][1], 0);

1017 
	`h™dÀEvít
(
myJoyH©TabÀ
[
°ick
][
h©
][2], 0);

1018 
	`h™dÀEvít
(
myJoyH©TabÀ
[
°ick
][
h©
][3], 0);

1021 
	`h™dÀEvít
(
myJoyH©TabÀ
[
°ick
][
h©
][
vÆue
], 1);

1023 if(
myOvîœy
 !
NULL
)

1024 
myOvîœy
->
	`h™dÀJoyH©Evít
(
°ick
, 
h©
, 
vÆue
);

1027 
	}
}

1030 
EvítH™dÀr
::
	$h™dÀEvít
(
Evít
::
Ty≥
 
evít
, 
°©e
)

1035 ()
evít
)

1043 
Evít
::
Joy°ickZîoUp
:

1044 if(
°©e
Ë
myEvít
->
	`£t
(
Evít
::
Joy°ickZîoDown
, 0);

1046 
Evít
::
Joy°ickZîoDown
:

1047 if(
°©e
Ë
myEvít
->
	`£t
(
Evít
::
Joy°ickZîoUp
, 0);

1049 
Evít
::
Joy°ickZîoLe·
:

1050 ()
myC⁄åﬁÀr
[0])

1052 
C⁄åﬁÀr
::
Joy°ick
:

1053 
C⁄åﬁÀr
::
Boo°îGrù
:

1054 if(
°©e
Ë
myEvít
->
	`£t
(
Evít
::
Joy°ickZîoRight
, 0);

1055 
myEvít
->
	`£t
(
Evít
::
Joy°ickZîoLe·
, 
°©e
);

1057 
C⁄åﬁÀr
::
PaddÀs
:

1058 
	`h™dÀEvít
(
Evít
::
PaddÀZîoDe¸ó£
, 
°©e
);

1060 
C⁄åﬁÀr
::
Drivög
:

1061 
myEvít
->
	`£t
(
Evít
::
DrivögZîoCou¡îClockwi£
, 
°©e
);

1065 
Evít
::
Joy°ickZîoRight
:

1066 ()
myC⁄åﬁÀr
[0])

1068 
C⁄åﬁÀr
::
Joy°ick
:

1069 
C⁄åﬁÀr
::
Boo°îGrù
:

1070 if(
°©e
Ë
myEvít
->
	`£t
(
Evít
::
Joy°ickZîoLe·
, 0);

1071 
myEvít
->
	`£t
(
Evít
::
Joy°ickZîoRight
, 
°©e
);

1073 
C⁄åﬁÀr
::
PaddÀs
:

1074 
	`h™dÀEvít
(
Evít
::
PaddÀZîoIn¸ó£
, 
°©e
);

1076 
C⁄åﬁÀr
::
Drivög
:

1077 
myEvít
->
	`£t
(
Evít
::
DrivögZîoClockwi£
, 
°©e
);

1081 
Evít
::
Joy°ickZîoFúe
:

1082 ()
myC⁄åﬁÀr
[0])

1084 
C⁄åﬁÀr
::
Joy°ick
:

1085 
myEvít
->
	`£t
(
Evít
::
Joy°ickZîoFúe
, 
°©e
);

1087 
C⁄åﬁÀr
::
PaddÀs
:

1088 
myEvít
->
	`£t
(
Evít
::
PaddÀZîoFúe
, 
°©e
);

1090 
C⁄åﬁÀr
::
Drivög
:

1091 
myEvít
->
	`£t
(
Evít
::
DrivögZîoFúe
, 
°©e
);

1095 
Evít
::
Joy°ickO√Up
:

1096 if(
°©e
Ë
myEvít
->
	`£t
(
Evít
::
Joy°ickO√Down
, 0);

1098 
Evít
::
Joy°ickO√Down
:

1099 if(
°©e
Ë
myEvít
->
	`£t
(
Evít
::
Joy°ickO√Up
, 0);

1101 
Evít
::
Joy°ickO√Le·
:

1102 ()
myC⁄åﬁÀr
[1])

1104 
C⁄åﬁÀr
::
Joy°ick
:

1105 
C⁄åﬁÀr
::
Boo°îGrù
:

1106 if(
°©e
Ë
myEvít
->
	`£t
(
Evít
::
Joy°ickO√Right
, 0);

1107 
myEvít
->
	`£t
(
Evít
::
Joy°ickO√Le·
, 
°©e
);

1109 
C⁄åﬁÀr
::
PaddÀs
:

1110 
	`h™dÀEvít
(
Evít
::
PaddÀO√De¸ó£
, 
°©e
);

1112 
C⁄åﬁÀr
::
Drivög
:

1113 
myEvít
->
	`£t
(
Evít
::
DrivögO√Cou¡îClockwi£
, 
°©e
);

1117 
Evít
::
Joy°ickO√Right
:

1118 ()
myC⁄åﬁÀr
[1])

1120 
C⁄åﬁÀr
::
Joy°ick
:

1121 
C⁄åﬁÀr
::
Boo°îGrù
:

1122 if(
°©e
Ë
myEvít
->
	`£t
(
Evít
::
Joy°ickO√Le·
, 0);

1123 
myEvít
->
	`£t
(
Evít
::
Joy°ickO√Right
, 
°©e
);

1125 
C⁄åﬁÀr
::
PaddÀs
:

1126 
	`h™dÀEvít
(
Evít
::
PaddÀZîoIn¸ó£
, 
°©e
);

1128 
C⁄åﬁÀr
::
Drivög
:

1129 
myEvít
->
	`£t
(
Evít
::
DrivögO√Clockwi£
, 
°©e
);

1133 
Evít
::
Joy°ickO√Fúe
:

1134 ()
myC⁄åﬁÀr
[1])

1136 
C⁄åﬁÀr
::
Joy°ick
:

1137 
myEvít
->
	`£t
(
Evít
::
Joy°ickO√Fúe
, 
°©e
);

1139 
C⁄åﬁÀr
::
PaddÀs
:

1140 
myEvít
->
	`£t
(
Evít
::
PaddÀO√Fúe
, 
°©e
);

1142 
C⁄åﬁÀr
::
Drivög
:

1143 
myEvít
->
	`£t
(
Evít
::
DrivögO√Fúe
, 
°©e
);

1149 
Evít
::
PaddÀZîoDe¸ó£
:

1150 
myPaddÀ
[0].
a˘ive
 = (
boﬁ
Ë
°©e
;

1151 
myPaddÀ
[0].
x_amt
 = -myPaddÀ[0].
amt
;

1153 
Evít
::
PaddÀZîoIn¸ó£
:

1154 
myPaddÀ
[0].
a˘ive
 = (
boﬁ
Ë
°©e
;

1155 
myPaddÀ
[0].
x_amt
 = myPaddÀ[0].
amt
;

1157 
Evít
::
PaddÀO√De¸ó£
:

1158 
myPaddÀ
[1].
a˘ive
 = (
boﬁ
Ë
°©e
;

1159 
myPaddÀ
[1].
x_amt
 = -myPaddÀ[1].
amt
;

1161 
Evít
::
PaddÀO√In¸ó£
:

1162 
myPaddÀ
[1].
a˘ive
 = (
boﬁ
Ë
°©e
;

1163 
myPaddÀ
[1].
x_amt
 = myPaddÀ[1].
amt
;

1165 
Evít
::
PaddÀTwoDe¸ó£
:

1166 
myPaddÀ
[2].
a˘ive
 = (
boﬁ
Ë
°©e
;

1167 
myPaddÀ
[2].
x_amt
 = -myPaddÀ[2].
amt
;

1169 
Evít
::
PaddÀTwoIn¸ó£
:

1170 
myPaddÀ
[2].
a˘ive
 = (
boﬁ
Ë
°©e
;

1171 
myPaddÀ
[2].
x_amt
 = myPaddÀ[2].
amt
;

1173 
Evít
::
PaddÀThªeDe¸ó£
:

1174 
myPaddÀ
[3].
a˘ive
 = (
boﬁ
Ë
°©e
;

1175 
myPaddÀ
[3].
x_amt
 = -myPaddÀ[3].
amt
;

1177 
Evít
::
PaddÀThªeIn¸ó£
:

1178 
myPaddÀ
[3].
a˘ive
 = (
boﬁ
Ë
°©e
;

1179 
myPaddÀ
[3].
x_amt
 = myPaddÀ[3].
amt
;

1182 
Evít
::
NoTy≥
:

1185 
Evít
::
Fry
:

1186 if(!
myPau£Fœg
)

1187 
myFryögFœg
 = 
	`boﬁ
(
°©e
);

1190 
Evít
::
VﬁumeDe¸ó£
:

1191 
Evít
::
VﬁumeIn¸ó£
:

1192 if(
°©e
 && !
myPau£Fœg
)

1193 
myOSy°em
->
	`sound
().
	`adju°Vﬁume
(
evít
 =
Evít
::
VﬁumeIn¸ó£
 ? 1 : -1);

1196 
Evít
::
SaveSèã
:

1197 if(
°©e
 && !
myPau£Fœg
Ë
	`ßveSèã
();

1200 
Evít
::
Ch™geSèã
:

1201 if(
°©e
 && !
myPau£Fœg
Ë
	`ch™geSèã
();

1204 
Evít
::
LﬂdSèã
:

1205 if(
°©e
 && !
myPau£Fœg
Ë
	`lﬂdSèã
();

1208 
Evít
::
TakeS«pshŸ
:

1209 if(
°©e
 && !
myPau£Fœg
Ë
	`èkeS«pshŸ
();

1212 
Evít
::
Pau£
:

1213 if(
°©e
)

1214 
	`∑u£
(!
myPau£Fœg
);

1217 
Evít
::
LaunchîMode
:

1220 if(
mySèã
 =
S_EMULATE
 && 
myU£LaunchîFœg
 && 
°©e
)

1222 
myOSy°em
->
	`£âögs
().
	`ßveC⁄fig
();

1223 
myOSy°em
->
	`¸óãLaunchî
();

1227 
Evít
::
Quô
:

1228 if(
°©e
Ë
myQuôFœg
 = 
åue
;

1229 
myOSy°em
->
	`£âögs
().
	`ßveC⁄fig
();

1233 if(
°©e
 && 
ourMesßgeTabÀ
[
evít
] != "")

1234 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
(
ourMesßgeTabÀ
[
evít
]);

1238 
myEvít
->
	`£t
(
evít
, 
°©e
);

1239 
	}
}

1242 
boﬁ
 
EvítH™dÀr
::
	$evítSèãCh™ge
(
Evít
::
Ty≥
 
ty≥
)

1244 
boﬁ
 
h™dÀd
 = 
åue
;

1247 
ty≥
)

1249 
Evít
::
MíuMode
:

1250 if(!
myPau£Fœg
)

1252 if(
mySèã
 =
S_EMULATE
)

1253 
	`íãrMíuMode
(
S_MENU
);

1254 if(
mySèã
 =
S_MENU
)

1255 
	`ÀaveMíuMode
();

1257 
h™dÀd
 = 
Ál£
;

1260 
h™dÀd
 = 
Ál£
;

1263 
Evít
::
CmdMíuMode
:

1264 if(!
myPau£Fœg
)

1266 if(
mySèã
 =
S_EMULATE
)

1267 
	`íãrMíuMode
(
S_CMDMENU
);

1268 if(
mySèã
 =
S_CMDMENU
)

1269 
	`ÀaveMíuMode
();

1271 
h™dÀd
 = 
Ál£
;

1274 
h™dÀd
 = 
Ál£
;

1277 
Evít
::
DebuggîMode
:

1278 if(
mySèã
 =
S_EMULATE
)

1279 
	`íãrDebugMode
();

1280 if(
mySèã
 =
S_DEBUGGER
)

1281 
	`ÀaveDebugMode
();

1283 
h™dÀd
 = 
Ál£
;

1287 
h™dÀd
 = 
Ál£
;

1291  
h™dÀd
;

1292 
	}
}

1295 
EvítH™dÀr
::
	$¸óãMou£MŸi⁄Evít
(
x
, 
y
)

1297 
	`SDL_W¨pMou£
(
x
, 
y
);

1298 
	}
}

1301 
EvítH™dÀr
::
	$¸óãMou£Buâ⁄Evít
(
x
, 
y
, 
°©e
)

1304 
SDL_Mou£Buâ⁄Evít
 
mou£Evít
;

1305 
mou£Evít
.
ty≥
 = 
°©e
 ? 
SDL_MOUSEBUTTONDOWN
 : 
SDL_MOUSEBUTTONUP
;

1306 
mou£Evít
.
buâ⁄
 = 
SDL_BUTTON_LEFT
;

1307 
mou£Evít
.
°©e
 = sèã ? 
SDL_PRESSED
 : 
SDL_RELEASED
;

1308 
mou£Evít
.
x
 = x;

1309 
mou£Evít
.
y
 = y;

1311 
	`h™dÀMou£Buâ⁄Evít
((
SDL_Evít
&)
mou£Evít
, 
°©e
);

1312 
	}
}

1315 
EvítH™dÀr
::
	$£tA˘i⁄M≠pögs
()

1318 
i
, 
j
, 
°ick
, 
buâ⁄
, 
axis
, 
h©
, 
dú
;

1319 
o°rög°ªam
 
buf
;

1322 
i
 = 0; i < 
kA˘i⁄Li°Size
; ++i)

1324 
Evít
::
Ty≥
 
evít
 = 
ourA˘i⁄Li°
[
i
].event;

1325 if(
ourA˘i⁄Li°
[
i
].
key
)

1326 
	`‰ì
(
ourA˘i⁄Li°
[
i
].
key
);

1327 
ourA˘i⁄Li°
[
i
].
key
 = 
	`°rdup
("None");

1328 
°rög
 
key
 = "";

1329 
j
 = 0; j < 
SDLK_LAST
; ++j)

1331 if(
myKeyTabÀ
[
j
] =
evít
)

1333 if(
key
 == "")

1334 
key
 = key + 
ourSDLM≠pög
[
j
];

1336 
key
 = key + ", " + 
ourSDLM≠pög
[
j
];

1339 #ifde‡
JOYSTICK_SUPPORT


1341 
°ick
 = 0; stick < 
kNumJoy°icks
; ++stick)

1343 
buâ⁄
 = 0; buâ⁄ < 
kNumJoyBuâ⁄s
; ++button)

1345 if(
myJoyTabÀ
[
°ick
][
buâ⁄
] =
evít
)

1347 
buf
.
	`°r
("");

1348 
buf
 << "J" << 
°ick
 << " B" << 
buâ⁄
;

1349 if(
key
 == "")

1350 
key
 = key + 
buf
.
	`°r
();

1352 
key
 = key + ", " + 
buf
.
	`°r
();

1357 
°ick
 = 0; stick < 
kNumJoy°icks
; ++stick)

1359 
axis
 = 0;áxi†< 
kNumJoyAxis
; ++axis)

1361 
dú
 = 0; dir < 2; ++dir)

1363 if(
myJoyAxisTabÀ
[
°ick
][
axis
][
dú
] =
evít
)

1365 
buf
.
	`°r
("");

1366 
buf
 << "J" << 
°ick
 << "áxi†" << 
axis
;

1367 if(
	`evítIsA«log
(
evít
))

1369 
dú
 = 2;

1370 
buf
 << "ábs";

1372 if(
dú
 == 0)

1373 
buf
 << "Çeg";

1375 
buf
 << "Öos";

1377 if(
key
 == "")

1378 
key
 = key + 
buf
.
	`°r
();

1380 
key
 = key + ", " + 
buf
.
	`°r
();

1386 
°ick
 = 0; stick < 
kNumJoy°icks
; ++stick)

1388 
h©
 = 0; h© < 
kNumJoyH©s
; ++hat)

1390 
dú
 = 0; dir < 4; ++dir)

1392 if(
myJoyH©TabÀ
[
°ick
][
h©
][
dú
] =
evít
)

1394 
buf
.
	`°r
("");

1395 
buf
 << "J" << 
°ick
 << " h© " << 
h©
;

1396 
dú
)

1398 
kJH©Up
: 
buf
 << " up"; ;

1399 
kJH©Down
: 
buf
 << " down"; ;

1400 
kJH©Le·
: 
buf
 << "Üeft"; ;

1401 
kJH©Right
: 
buf
 << "Ñight"; ;

1403 if(
key
 == "")

1404 
key
 = key + 
buf
.
	`°r
();

1406 
key
 = key + ", " + 
buf
.
	`°r
();

1414 
°rög
 
¥ïíd
 = "";

1415 if(
evít
 =
Evít
::
Quô
)

1416 #i‚de‡
MAC_OSX


1417 
¥ïíd
 = "Ctrl Q";

1419 
¥ïíd
 = "Cmd Q";

1423 if(
key
 == "")

1424 
key
 = 
¥ïíd
;

1425 if(
¥ïíd
 != "")

1426 
key
 = 
¥ïíd
 + ", " + key;

1428 if(
key
 != "")

1430 if(
ourA˘i⁄Li°
[
i
].
key
)

1431 
	`‰ì
(
ourA˘i⁄Li°
[
i
].
key
);

1432 
ourA˘i⁄Li°
[
i
].
key
 = 
	`°rdup
(key.
	`c_°r
());

1436 
	}
}

1439 
EvítH™dÀr
::
	$£tKeym≠
()

1441 
°rög
 
li°
 = 
myOSy°em
->
	`£âögs
().
	`gëSåög
("keymap");

1442 
I¡Aºay
 
m≠
;

1444 if(
	`isVÆidLi°
(
li°
, 
m≠
, 
SDLK_LAST
))

1447 
I¡32
 
i
 = 0; i < 
SDLK_LAST
; ++i)

1448 
myKeyTabÀ
[
i
] = (
Evít
::
Ty≥
Ë
m≠
[i];

1451 
	`£tDeÁu…Keym≠
();

1452 
	}
}

1455 
EvítH™dÀr
::
	$£tJoym≠
()

1457 #ifde‡
JOYSTICK_SUPPORT


1458 
°rög
 
li°
 = 
myOSy°em
->
	`£âögs
().
	`gëSåög
("joymap");

1459 
I¡Aºay
 
m≠
;

1461 if(
	`isVÆidLi°
(
li°
, 
m≠
, 
kNumJoy°icks
*
kNumJoyBuâ⁄s
))

1464 
idx
 = 0;

1465 
i
 = 0; i < 
kNumJoy°icks
; ++i)

1466 
j
 = 0; j < 
kNumJoyBuâ⁄s
; ++j)

1467 
myJoyTabÀ
[
i
][
j
] = (
Evít
::
Ty≥
Ë
m≠
[
idx
++];

1470 
	`£tDeÁu…Joym≠
();

1472 
	}
}

1475 
EvítH™dÀr
::
	$£tJoyAxisM≠
()

1477 #ifde‡
JOYSTICK_SUPPORT


1478 
°rög
 
li°
 = 
myOSy°em
->
	`£âögs
().
	`gëSåög
("joyaxismap");

1479 
I¡Aºay
 
m≠
;

1481 if(
	`isVÆidLi°
(
li°
, 
m≠
, 
kNumJoy°icks
*
kNumJoyAxis
*2))

1484 
idx
 = 0;

1485 
i
 = 0; i < 
kNumJoy°icks
; ++i)

1486 
j
 = 0; j < 
kNumJoyAxis
; ++j)

1487 
k
 = 0; k < 2; ++k)

1488 
myJoyAxisTabÀ
[
i
][
j
][
k
] = (
Evít
::
Ty≥
Ë
m≠
[
idx
++];

1491 
	`£tDeÁu…JoyAxisM≠
();

1493 
	}
}

1496 
EvítH™dÀr
::
	$£tJoyH©M≠
()

1498 #ifde‡
JOYSTICK_SUPPORT


1499 
°rög
 
li°
 = 
myOSy°em
->
	`£âögs
().
	`gëSåög
("joyhatmap");

1500 
I¡Aºay
 
m≠
;

1502 if(
	`isVÆidLi°
(
li°
, 
m≠
, 
kNumJoy°icks
*
kNumJoyH©s
*4))

1505 
idx
 = 0;

1506 
i
 = 0; i < 
kNumJoy°icks
; ++i)

1507 
j
 = 0; j < 
kNumJoyH©s
; ++j)

1508 
k
 = 0; k < 4; ++k)

1509 
myJoyH©TabÀ
[
i
][
j
][
k
] = (
Evít
::
Ty≥
Ë
m≠
[
idx
++];

1512 
	`£tDeÁu…JoyH©M≠
();

1514 
	}
}

1517 
boﬁ
 
EvítH™dÀr
::
	$addKeyM≠pög
(
Evít
::
Ty≥
 
evít
, 
key
)

1520 if(
key
 =
SDLK_TAB
 || 
	`evítIsA«log
(
evít
))

1521  
Ál£
;

1524 
myKeyTabÀ
[
key
] = 
evít
;

1525 
	`ßveKeyM≠pög
();

1527 
	`£tA˘i⁄M≠pögs
();

1528  
åue
;

1530 
	}
}

1533 
EvítH™dÀr
::
	$£tDeÁu…JoyM≠pög
(
Evít
::
Ty≥
 
evít
, 
°ick
, 
buâ⁄
)

1535 if(
°ick
 >0 && stick < 
kNumJoy°icks
 &&

1536 
buâ⁄
 >0 && buâ⁄ < 
kNumJoyBuâ⁄s
 &&

1537 
evít
 >0 &&Évíà< 
Evít
::
La°Ty≥
)

1538 
myJoyTabÀ
[
°ick
][
buâ⁄
] = 
evít
;

1539 
	}
}

1542 
boﬁ
 
EvítH™dÀr
::
	$addJoyM≠pög
(
Evít
::
Ty≥
 
evít
, 
°ick
, 
buâ⁄
)

1544 if(!
	`evítIsA«log
(
evít
))

1546 
	`£tDeÁu…JoyM≠pög
(
evít
, 
°ick
, 
buâ⁄
);

1548 
	`ßveJoyM≠pög
();

1549 
	`£tA˘i⁄M≠pögs
();

1550  
åue
;

1553  
Ál£
;

1554 
	}
}

1557 
EvítH™dÀr
::
	$£tDeÁu…JoyAxisM≠pög
(
Evít
::
Ty≥
 
evít
, 
°ick
,

1558 
axis
, 
vÆue
)

1560 if(
°ick
 >0 && stick < 
kNumJoy°icks
 &&

1561 
axis
 >0 &&áxi†< 
kNumJoyAxis
 &&

1562 
evít
 >0 &&Évíà< 
Evít
::
La°Ty≥
)

1566 if(
	`evítIsA«log
(
evít
))

1567 
myJoyAxisTabÀ
[
°ick
][
axis
][0] = myJoyAxisTabÀ[°ick][axis][1] = 
evít
;

1571 if(
	`evítIsA«log
(
myJoyAxisTabÀ
[
°ick
][
axis
][0]))

1572 
myJoyAxisTabÀ
[
°ick
][
axis
][0] = 
Evít
::
NoTy≥
;

1573 if(
	`evítIsA«log
(
myJoyAxisTabÀ
[
°ick
][
axis
][1]))

1574 
myJoyAxisTabÀ
[
°ick
][
axis
][1] = 
Evít
::
NoTy≥
;

1576 
myJoyAxisTabÀ
[
°ick
][
axis
][(
vÆue
 > 0)] = 
evít
;

1579 
	}
}

1582 
boﬁ
 
EvítH™dÀr
::
	$addJoyAxisM≠pög
(
Evít
::
Ty≥
 
evít
, 
°ick
, 
axis
,

1583 
vÆue
)

1585 
	`£tDeÁu…JoyAxisM≠pög
(
evít
, 
°ick
, 
axis
, 
vÆue
);

1587 
	`ßveJoyAxisM≠pög
();

1588 
	`£tA˘i⁄M≠pögs
();

1590  
åue
;

1591 
	}
}

1594 
EvítH™dÀr
::
	$£tDeÁu…JoyH©M≠pög
(
Evít
::
Ty≥
 
evít
, 
°ick
,

1595 
h©
, 
vÆue
)

1597 if(
°ick
 >0 && stick < 
kNumJoy°icks
 &&

1598 
h©
 >0 && h© < 
kNumJoyH©s
 &&

1599 
evít
 >0 &&Évíà< 
Evít
::
La°Ty≥
)

1601 
vÆue
)

1603 
kJH©Up
:

1604 
kJH©Down
:

1605 
kJH©Le·
:

1606 
kJH©Right
:

1607 
myJoyH©TabÀ
[
°ick
][
h©
][
vÆue
] = 
evít
;

1611 
	}
}

1614 
boﬁ
 
EvítH™dÀr
::
	$addJoyH©M≠pög
(
Evít
::
Ty≥
 
evít
, 
°ick
, 
h©
,

1615 
vÆue
)

1617 if(!
	`evítIsA«log
(
evít
))

1619 
	`£tDeÁu…JoyH©M≠pög
(
evít
, 
°ick
, 
h©
, 
vÆue
);

1621 
	`ßveJoyH©M≠pög
();

1622 
	`£tA˘i⁄M≠pögs
();

1623  
åue
;

1626  
Ál£
;

1627 
	}
}

1630 
EvítH™dÀr
::
	$îa£M≠pög
(
Evít
::
Ty≥
 
evít
)

1632 
i
, 
j
, 
k
;

1635 
i
 = 0; i < 
SDLK_LAST
; ++i)

1636 if(
myKeyTabÀ
[
i
] =
evít
 && i !
SDLK_TAB
)

1637 
myKeyTabÀ
[
i
] = 
Evít
::
NoTy≥
;

1638 
	`ßveKeyM≠pög
();

1640 #ifde‡
JOYSTICK_SUPPORT


1642 
i
 = 0; i < 
kNumJoy°icks
; ++i)

1643 
j
 = 0; j < 
kNumJoyBuâ⁄s
; ++j)

1644 if(
myJoyTabÀ
[
i
][
j
] =
evít
)

1645 
myJoyTabÀ
[
i
][
j
] = 
Evít
::
NoTy≥
;

1646 
	`ßveJoyM≠pög
();

1649 
i
 = 0; i < 
kNumJoy°icks
; ++i)

1650 
j
 = 0; j < 
kNumJoyAxis
; ++j)

1651 
k
 = 0; k < 2; ++k)

1652 if(
myJoyAxisTabÀ
[
i
][
j
][
k
] =
evít
)

1653 
myJoyAxisTabÀ
[
i
][
j
][
k
] = 
Evít
::
NoTy≥
;

1654 
	`ßveJoyAxisM≠pög
();

1657 
i
 = 0; i < 
kNumJoy°icks
; ++i)

1658 
j
 = 0; j < 
kNumJoyH©s
; ++j)

1659 
k
 = 0; k < 4; ++k)

1660 if(
myJoyH©TabÀ
[
i
][
j
][
k
] =
evít
)

1661 
myJoyH©TabÀ
[
i
][
j
][
k
] = 
Evít
::
NoTy≥
;

1662 
	`ßveJoyH©M≠pög
();

1665 
	`£tA˘i⁄M≠pögs
();

1666 
	}
}

1669 
EvítH™dÀr
::
	$£tDeÁu…M≠pög
()

1671 
	`£tDeÁu…Keym≠
();

1672 
	`£tDeÁu…Joym≠
();

1673 
	`£tDeÁu…JoyAxisM≠
();

1674 
	`£tDeÁu…JoyH©M≠
();

1676 
	`£tA˘i⁄M≠pögs
();

1677 
	}
}

1680 
EvítH™dÀr
::
	$£tDeÁu…Keym≠
()

1684 
I¡32
 
i
 = 0; i < 
SDLK_LAST
; ++i)

1685 
myKeyTabÀ
[
i
] = 
Evít
::
NoTy≥
;

1687 
myKeyTabÀ
[ 
SDLK_1
 ] = 
Evít
::
KeybﬂrdZîo1
;

1688 
myKeyTabÀ
[ 
SDLK_2
 ] = 
Evít
::
KeybﬂrdZîo2
;

1689 
myKeyTabÀ
[ 
SDLK_3
 ] = 
Evít
::
KeybﬂrdZîo3
;

1690 
myKeyTabÀ
[ 
SDLK_q
 ] = 
Evít
::
KeybﬂrdZîo4
;

1691 
myKeyTabÀ
[ 
SDLK_w
 ] = 
Evít
::
KeybﬂrdZîo5
;

1692 
myKeyTabÀ
[ 
SDLK_e
 ] = 
Evít
::
KeybﬂrdZîo6
;

1693 
myKeyTabÀ
[ 
SDLK_a
 ] = 
Evít
::
KeybﬂrdZîo7
;

1694 
myKeyTabÀ
[ 
SDLK_s
 ] = 
Evít
::
KeybﬂrdZîo8
;

1695 
myKeyTabÀ
[ 
SDLK_d
 ] = 
Evít
::
KeybﬂrdZîo9
;

1696 
myKeyTabÀ
[ 
SDLK_z
 ] = 
Evít
::
KeybﬂrdZîoSèr
;

1697 
myKeyTabÀ
[ 
SDLK_x
 ] = 
Evít
::
KeybﬂrdZîo0
;

1698 
myKeyTabÀ
[ 
SDLK_c
 ] = 
Evít
::
KeybﬂrdZîoPound
;

1700 
myKeyTabÀ
[ 
SDLK_8
 ] = 
Evít
::
KeybﬂrdO√1
;

1701 
myKeyTabÀ
[ 
SDLK_9
 ] = 
Evít
::
KeybﬂrdO√2
;

1702 
myKeyTabÀ
[ 
SDLK_0
 ] = 
Evít
::
KeybﬂrdO√3
;

1703 
myKeyTabÀ
[ 
SDLK_i
 ] = 
Evít
::
KeybﬂrdO√4
;

1704 
myKeyTabÀ
[ 
SDLK_o
 ] = 
Evít
::
KeybﬂrdO√5
;

1705 
myKeyTabÀ
[ 
SDLK_p
 ] = 
Evít
::
KeybﬂrdO√6
;

1706 
myKeyTabÀ
[ 
SDLK_k
 ] = 
Evít
::
KeybﬂrdO√7
;

1707 
myKeyTabÀ
[ 
SDLK_l
 ] = 
Evít
::
KeybﬂrdO√8
;

1708 
myKeyTabÀ
[ 
SDLK_SEMICOLON
 ] = 
Evít
::
KeybﬂrdO√9
;

1709 
myKeyTabÀ
[ 
SDLK_COMMA
 ] = 
Evít
::
KeybﬂrdO√Sèr
;

1710 
myKeyTabÀ
[ 
SDLK_PERIOD
 ] = 
Evít
::
KeybﬂrdO√0
;

1711 
myKeyTabÀ
[ 
SDLK_SLASH
 ] = 
Evít
::
KeybﬂrdO√Pound
;

1713 
myKeyTabÀ
[ 
SDLK_UP
 ] = 
Evít
::
Joy°ickZîoUp
;

1714 
myKeyTabÀ
[ 
SDLK_DOWN
 ] = 
Evít
::
Joy°ickZîoDown
;

1715 
myKeyTabÀ
[ 
SDLK_LEFT
 ] = 
Evít
::
Joy°ickZîoLe·
;

1716 
myKeyTabÀ
[ 
SDLK_RIGHT
 ] = 
Evít
::
Joy°ickZîoRight
;

1717 
myKeyTabÀ
[ 
SDLK_SPACE
 ] = 
Evít
::
Joy°ickZîoFúe
;

1718 
myKeyTabÀ
[ 
SDLK_LCTRL
 ] = 
Evít
::
Joy°ickZîoFúe
;

1719 
myKeyTabÀ
[ 
SDLK_4
 ] = 
Evít
::
Boo°îGrùZîoTriggî
;

1720 
myKeyTabÀ
[ 
SDLK_5
 ] = 
Evít
::
Boo°îGrùZîoBoo°î
;

1722 
myKeyTabÀ
[ 
SDLK_y
 ] = 
Evít
::
Joy°ickO√Up
;

1723 
myKeyTabÀ
[ 
SDLK_h
 ] = 
Evít
::
Joy°ickO√Down
;

1724 
myKeyTabÀ
[ 
SDLK_g
 ] = 
Evít
::
Joy°ickO√Le·
;

1725 
myKeyTabÀ
[ 
SDLK_j
 ] = 
Evít
::
Joy°ickO√Right
;

1726 
myKeyTabÀ
[ 
SDLK_f
 ] = 
Evít
::
Joy°ickO√Fúe
;

1727 
myKeyTabÀ
[ 
SDLK_6
 ] = 
Evít
::
Boo°îGrùO√Triggî
;

1728 
myKeyTabÀ
[ 
SDLK_7
 ] = 
Evít
::
Boo°îGrùO√Boo°î
;

1730 
myKeyTabÀ
[ 
SDLK_INSERT
 ] = 
Evít
::
DrivögZîoCou¡îClockwi£
;

1731 
myKeyTabÀ
[ 
SDLK_PAGEUP
 ] = 
Evít
::
DrivögZîoClockwi£
;

1732 
myKeyTabÀ
[ 
SDLK_HOME
 ] = 
Evít
::
DrivögZîoFúe
;

1734 
myKeyTabÀ
[ 
SDLK_DELETE
 ] = 
Evít
::
DrivögO√Cou¡îClockwi£
;

1735 
myKeyTabÀ
[ 
SDLK_PAGEDOWN
 ] = 
Evít
::
DrivögO√Clockwi£
;

1736 
myKeyTabÀ
[ 
SDLK_END
 ] = 
Evít
::
DrivögO√Fúe
;

1738 
myKeyTabÀ
[ 
SDLK_F1
 ] = 
Evít
::
C⁄sﬁeSñe˘
;

1739 
myKeyTabÀ
[ 
SDLK_F2
 ] = 
Evít
::
C⁄sﬁeRe£t
;

1740 
myKeyTabÀ
[ 
SDLK_F3
 ] = 
Evít
::
C⁄sﬁeCﬁ‹
;

1741 
myKeyTabÀ
[ 
SDLK_F4
 ] = 
Evít
::
C⁄sﬁeBœckWhôe
;

1742 
myKeyTabÀ
[ 
SDLK_F5
 ] = 
Evít
::
C⁄sﬁeLe·Difficu…yA
;

1743 
myKeyTabÀ
[ 
SDLK_F6
 ] = 
Evít
::
C⁄sﬁeLe·Difficu…yB
;

1744 
myKeyTabÀ
[ 
SDLK_F7
 ] = 
Evít
::
C⁄sﬁeRightDifficu…yA
;

1745 
myKeyTabÀ
[ 
SDLK_F8
 ] = 
Evít
::
C⁄sﬁeRightDifficu…yB
;

1746 
myKeyTabÀ
[ 
SDLK_F9
 ] = 
Evít
::
SaveSèã
;

1747 
myKeyTabÀ
[ 
SDLK_F10
 ] = 
Evít
::
Ch™geSèã
;

1748 
myKeyTabÀ
[ 
SDLK_F11
 ] = 
Evít
::
LﬂdSèã
;

1749 
myKeyTabÀ
[ 
SDLK_F12
 ] = 
Evít
::
TakeS«pshŸ
;

1750 
myKeyTabÀ
[ 
SDLK_PAUSE
 ] = 
Evít
::
Pau£
;

1751 
myKeyTabÀ
[ 
SDLK_BACKSPACE
 ] = 
Evít
::
Fry
;

1752 
myKeyTabÀ
[ 
SDLK_TAB
 ] = 
Evít
::
MíuMode
;

1753 
myKeyTabÀ
[ 
SDLK_BACKSLASH
 ] = 
Evít
::
CmdMíuMode
;

1754 
myKeyTabÀ
[ 
SDLK_BACKQUOTE
 ] = 
Evít
::
DebuggîMode
;

1755 
myKeyTabÀ
[ 
SDLK_ESCAPE
 ] = 
Evít
::
LaunchîMode
;

1757 
	`ßveKeyM≠pög
();

1759 
	}
}

1762 
EvítH™dÀr
::
	$£tDeÁu…Joym≠
()

1766 
i
 = 0; i < 
kNumJoy°icks
; ++i)

1767 
j
 = 0; j < 
kNumJoyBuâ⁄s
; ++j)

1768 
myJoyTabÀ
[
i
][
j
] = 
Evít
::
NoTy≥
;

1770 
myOSy°em
->
	`£tDeÁu…Joym≠
();

1771 
	`ßveJoyM≠pög
();

1773 
	}
}

1776 
EvítH™dÀr
::
	$£tDeÁu…JoyAxisM≠
()

1779 
i
 = 0; i < 
kNumJoy°icks
; ++i)

1780 
j
 = 0; j < 
kNumJoyAxis
; ++j)

1781 
k
 = 0; k < 2; ++k)

1782 
myJoyAxisTabÀ
[
i
][
j
][
k
] = 
Evít
::
NoTy≥
;

1784 
myOSy°em
->
	`£tDeÁu…JoyAxisM≠
();

1785 
	`ßveJoyAxisM≠pög
();

1786 
	}
}

1789 
EvítH™dÀr
::
	$£tDeÁu…JoyH©M≠
()

1792 
i
 = 0; i < 
kNumJoy°icks
; ++i)

1793 
j
 = 0; j < 
kNumJoyH©s
; ++j)

1794 
k
 = 0; k < 4; ++k)

1795 
myJoyH©TabÀ
[
i
][
j
][
k
] = 
Evít
::
NoTy≥
;

1797 
myOSy°em
->
	`£tDeÁu…JoyH©M≠
();

1798 
	`ßveJoyH©M≠pög
();

1799 
	}
}

1802 
EvítH™dÀr
::
	$ßveKeyM≠pög
()

1806 
o°rög°ªam
 
keybuf
;

1807 
keybuf
 << 
Evít
::
La°Ty≥
 << ":";

1808 
uI¡32
 
i
 = 0; i < 
SDLK_LAST
; ++i)

1809 
keybuf
 << 
myKeyTabÀ
[
i
] << ":";

1811 
myOSy°em
->
	`£âögs
().
	`£tSåög
("keym≠", 
keybuf
.
	`°r
());

1812 
	}
}

1815 
EvítH™dÀr
::
	$ßveJoyM≠pög
()

1819 
o°rög°ªam
 
buf
;

1820 
buf
 << 
Evít
::
La°Ty≥
 << ":";

1821 
i
 = 0; i < 
kNumJoy°icks
; ++i)

1822 
j
 = 0; j < 
kNumJoyBuâ⁄s
; ++j)

1823 
buf
 << 
myJoyTabÀ
[
i
][
j
] << ":";

1825 
myOSy°em
->
	`£âögs
().
	`£tSåög
("joym≠", 
buf
.
	`°r
());

1826 
	}
}

1829 
EvítH™dÀr
::
	$ßveJoyAxisM≠pög
()

1833 
o°rög°ªam
 
buf
;

1834 
buf
 << 
Evít
::
La°Ty≥
 << ":";

1835 
i
 = 0; i < 
kNumJoy°icks
; ++i)

1836 
j
 = 0; j < 
kNumJoyAxis
; ++j)

1837 
k
 = 0; k < 2; ++k)

1838 
buf
 << 
myJoyAxisTabÀ
[
i
][
j
][
k
] << ":";

1840 
myOSy°em
->
	`£âögs
().
	`£tSåög
("joyaxism≠", 
buf
.
	`°r
());

1841 
	}
}

1844 
EvítH™dÀr
::
	$ßveJoyH©M≠pög
()

1848 
o°rög°ªam
 
buf
;

1849 
buf
 << 
Evít
::
La°Ty≥
 << ":";

1850 
i
 = 0; i < 
kNumJoy°icks
; ++i)

1851 
j
 = 0; j < 
kNumJoyH©s
; ++j)

1852 
k
 = 0; k < 4; ++k)

1853 
buf
 << 
myJoyH©TabÀ
[
i
][
j
][
k
] << ":";

1855 
myOSy°em
->
	`£âögs
().
	`£tSåög
("joyh©m≠", 
buf
.
	`°r
());

1856 
	}
}

1859 
boﬁ
 
EvítH™dÀr
::
	$isVÆidLi°
(
°rög
& 
li°
, 
I¡Aºay
& 
m≠
, 
uI¡32
 
Àngth
)

1861 
°rög
 
key
;

1862 
Evít
::
Ty≥
 
evít
;

1866 
	`ª∂a˚
(
li°
.
	`begö
(),Üi°.
	`íd
(), ':', ' ');

1867 
i°rög°ªam
 
	`buf
(
li°
);

1870 
buf
 >> 
key
;

1871 
evít
 = (
Evít
::
Ty≥
Ë
	`©oi
(
key
.
	`c_°r
());

1872 if(
evít
 =
Evít
::
La°Ty≥
)

1873 
buf
 >> 
key
)

1874 
m≠
.
	`push_back
(
	`©oi
(
key
.
	`c_°r
()));

1876  (
evít
 =
Evít
::
La°Ty≥
 && 
m≠
.
	`size
(Ë=
Àngth
);

1877 
	}
}

1880 
ölöe
 
boﬁ
 
EvítH™dÀr
::
	$evítIsA«log
(
Evít
::
Ty≥
 
evít
)

1882 ()
evít
)

1885 
Evít
::
PaddÀZîoA«log
:

1886 
Evít
::
PaddÀO√A«log
:

1887 
Evít
::
PaddÀTwoA«log
:

1888 
Evít
::
PaddÀThªeA«log
:

1889  
åue
;

1892  
Ál£
;

1894 
	}
}

1897 
ölöe
 
boﬁ
 
EvítH™dÀr
::
	$isJôãr
(
∑ddÀ
, 
vÆue
)

1899 
boﬁ
 
jôãr
 = 
Ál£
;

1900 
boﬁ
 
À·MŸi⁄
 = 
myPaddÀ
[
∑ddÀ
].
joy_vÆ
 - myPaddÀ[∑ddÀ].
ﬁd_joy_vÆ
 > 0;

1901 
di°™˚
 = 
vÆue
 - 
myPaddÀ
[
∑ddÀ
].
joy_vÆ
;

1904 if(
di°™˚
 > 0 && !
À·MŸi⁄
)

1905 
jôãr
 = 
di°™˚
 < 
myPaddÀThªshﬁd
;

1906 if(
di°™˚
 < 0 && 
À·MŸi⁄
)

1907 
jôãr
 = 
di°™˚
 > -
myPaddÀThªshﬁd
;

1909 
myPaddÀ
[
∑ddÀ
].
ﬁd_joy_vÆ
 = myPaddÀ[∑ddÀ].
joy_vÆ
;

1910 
myPaddÀ
[
∑ddÀ
].
joy_vÆ
 = 
vÆue
;

1912  
jôãr
;

1913 
	}
}

1916 
EvítH™dÀr
::
	$ßveSèã
()

1918 
°rög
 
md5
 = 
myOSy°em
->
	`c⁄sﬁe
().
	`¥›îtõs
().
	`gë
(
C¨åidge_MD5
);

1919 
o°rög°ªam
 
buf
;

1920 
buf
 << 
myOSy°em
->
	`°©eDú
(Ë<< 
BSPF_PATH_SEPARATOR
 << 
md5
 << ".°" << 
myLSSèã
;

1923 
Sîülizî
 
out
;

1924 if(!
out
.
	`›í
(
buf
.
	`°r
()))

1926 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("Error saving state file");

1931 
buf
.
	`°r
("");

1932 if(
myOSy°em
->
	`c⁄sﬁe
().
	`sy°em
().
	`ßveSèã
(
md5
, 
out
))

1933 
buf
 << "Sèã " << 
myLSSèã
 << " saved";

1935 
buf
 << "Eº‹ savög sèã " << 
myLSSèã
;

1937 
out
.
	`˛o£
();

1938 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
(
buf
.
	`°r
());

1939 
	}
}

1942 
EvítH™dÀr
::
	$ßveSèã
(
°©e
)

1944 
myLSSèã
 = 
°©e
;

1945 
	`ßveSèã
();

1946 
	}
}

1949 
EvítH™dÀr
::
	$ch™geSèã
()

1951 
myLSSèã
 = (myLSState + 1) % 10;

1954 
o°rög°ªam
 
buf
;

1955 
buf
 << "Ch™gedÅÿ¶Ÿ " << 
myLSSèã
;

1957 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
(
buf
.
	`°r
());

1958 
	}
}

1961 
EvítH™dÀr
::
	$lﬂdSèã
()

1963 
°rög
 
md5
 = 
myOSy°em
->
	`c⁄sﬁe
().
	`¥›îtõs
().
	`gë
(
C¨åidge_MD5
);

1964 
o°rög°ªam
 
buf
;

1965 
buf
 << 
myOSy°em
->
	`°©eDú
(Ë<< 
BSPF_PATH_SEPARATOR
 << 
md5
 << ".°" << 
myLSSèã
;

1968 
De£rülizî
 
ö
;

1969 if(!
ö
.
	`›í
(
buf
.
	`°r
()))

1971 
buf
.
	`°r
("");

1972 
buf
 << "Eº‹Üﬂdög sèã " << 
myLSSèã
;

1973 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
(
buf
.
	`°r
());

1978 
buf
.
	`°r
("");

1979 if(
myOSy°em
->
	`c⁄sﬁe
().
	`sy°em
().
	`lﬂdSèã
(
md5
, 
ö
))

1980 
buf
 << "Sèã " << 
myLSSèã
 << "Üoaded";

1982 
buf
 << "InvÆid sèã " << 
myLSSèã
 << " file";

1984 
ö
.
	`˛o£
();

1985 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
(
buf
.
	`°r
());

1986 
	}
}

1989 
EvítH™dÀr
::
	$lﬂdSèã
(
°©e
)

1991 
myLSSèã
 = 
°©e
;

1992 
	`lﬂdSèã
();

1993 
	}
}

1996 
EvítH™dÀr
::
	$èkeS«pshŸ
()

1998 #ifde‡
PSP_DEBUG


1999 
	`Ârötf
(
°dout
,"EventHandler::takeSnapshot\n");

2002 #ifde‡
SNAPSHOT_SUPPORT


2004 
°rög
 
fûíame
;

2005 
°rög
 
s•©h
 = 
myOSy°em
->
	`£âögs
().
	`gëSåög
("ssdir");

2006 
°rög
 
s¢ame
 = 
myOSy°em
->
	`£âögs
().
	`gëSåög
("ssname");

2008 if(
s•©h
.
	`Àngth
() > 0)

2009 if(
s•©h
.
	`sub°r
(s•©h.
	`Àngth
()-1Ë!
BSPF_PATH_SEPARATOR
)

2010 
s•©h
 +
BSPF_PATH_SEPARATOR
;

2012 if(
s¢ame
 == "romname")

2013 
s•©h
 +
myOSy°em
->
	`c⁄sﬁe
().
	`¥›îtõs
().
	`gë
(
C¨åidge_Name
);

2014 if(
s¢ame
 == "md5sum")

2015 
s•©h
 +
myOSy°em
->
	`c⁄sﬁe
().
	`¥›îtõs
().
	`gë
(
C¨åidge_MD5
);

2018 if(!
myOSy°em
->
	`£âögs
().
	`gëBoﬁ
("sssingle"))

2022 
fûíame
 = 
s•©h
 + ".png";

2023 if(
Fûesy°emNode
::
	`fûeExi°s
(
fûíame
))

2025 
o°rög°ªam
 
buf
;

2026 
uI¡32
 
i
 = 1; ;++i)

2028 
buf
.
	`°r
("");

2029 
buf
 << 
s•©h
 << "_" << 
i
 << ".png";

2030 #ifde‡
PSP_DEBUG


2031 
	`Ârötf
(
°dout
,"EvítH™dÀr::èkeS«pshŸ '%s'\n",
buf
.
	`°r
().
	`c_°r
());

2033 if(!
Fûesy°emNode
::
	`fûeExi°s
(
buf
.
	`°r
()))

2036 
fûíame
 = 
buf
.
	`°r
();

2040 
fûíame
 = 
s•©h
 + ".png";

2043 
myOSy°em
->
	`evítH™dÀr
().
	`ª‰eshDi•œy
(
åue
);

2044 
S«pshŸ
 
	`¢≠shŸ
(
myOSy°em
->
	`‰ameBuf„r
());

2045 
°rög
 
ªsu…
 = 
¢≠shŸ
.
	`ßvePNG
(
fûíame
);

2046 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
(
ªsu…
);

2048 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("Snapshots unsupported");

2050 
	}
}

2053 
EvítH™dÀr
::
	$£tPaddÀMode
(
num
, 
boﬁ
 
showmesßge
)

2055 if(
num
 < 0 ||Çum > 3)

2058 
myPaddÀMode
 = 
num
;

2060 if(
showmesßge
)

2062 
o°rög°ªam
 
buf
;

2063 
buf
 << "Mou£ i†∑ddÀ " << 
num
;

2064 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
(
buf
.
	`°r
());

2067 
myOSy°em
->
	`£âögs
().
	`£tI¡
("∑ddÀ", 
myPaddÀMode
);

2068 
	}
}

2071 
EvítH™dÀr
::
	$£tPaddÀS≥ed
(
num
, 
•ìd
)

2073 if(
num
 < 0 ||Çum > 3 || 
•ìd
 < 0 || speed > 100)

2076 
myPaddÀ
[
num
].
amt
 = (Ë(20000 + 
•ìd
/100.0 * 50000);

2077 
o°rög°ªam
 
buf
;

2078 
buf
 << "p" << 
num
+1 << "speed";

2079 
myOSy°em
->
	`£âögs
().
	`£tI¡
(
buf
.
	`°r
(), 
•ìd
);

2080 
	}
}

2084 
EvítH™dÀr
::
	$£tPaddÀThªshﬁd
(
thªsh
)

2086 
myPaddÀThªshﬁd
 = 
thªsh
;

2087 
myOSy°em
->
	`£âögs
().
	`£tI¡
("±hªsh", 
thªsh
);

2088 
	}
}

2091 
EvítH™dÀr
::
	$íãrMíuMode
(
Sèã
 
°©e
)

2094 
	`£tEvítSèã
(
°©e
);

2095 
myOvîœy
->
	`ªSèck
();

2097 
	`ª‰eshDi•œy
();

2099 
myOSy°em
->
	`‰ameBuf„r
().
	`£tCurs‹Sèã
();

2100 
myOSy°em
->
	`sound
().
	`muã
(
åue
);

2101 
myEvít
->
	`˛ór
();

2103 
	}
}

2106 
EvítH™dÀr
::
	$ÀaveMíuMode
()

2109 
	`£tEvítSèã
(
S_EMULATE
);

2111 
	`ª‰eshDi•œy
();

2113 
myOSy°em
->
	`‰ameBuf„r
().
	`£tCurs‹Sèã
();

2114 
myOSy°em
->
	`sound
().
	`muã
(
Ál£
);

2115 
myEvít
->
	`˛ór
();

2117 
	}
}

2120 
boﬁ
 
EvítH™dÀr
::
	$íãrDebugMode
()

2123 #ifde‡
DEVELOPER_SUPPORT


2124 if(
mySèã
 =
S_DEBUGGER
)

2125  
Ál£
;

2127 
	`£tEvítSèã
(
S_DEBUGGER
);

2128 
myOSy°em
->
	`¸óãFømeBuf„r
();

2129 
myOvîœy
->
	`ªSèck
();

2130 
myOSy°em
->
	`‰ameBuf„r
().
	`£tCurs‹Sèã
();

2131 
myEvít
->
	`˛ór
();

2133 if(!
myPau£Fœg
)

2134 
	`h™dÀEvít
(
Evít
::
Pau£
, 1);

2137 
myOSy°em
->
	`debuggî
().
	`£tSèπSèã
();

2141 
	`ª‰eshDi•œy
();

2143 
myOSy°em
->
	`‰ameBuf„r
().
	`showMesßge
("Developer/debugger unsupported");

2147  
åue
;

2148 
	}
}

2151 
EvítH™dÀr
::
	$ÀaveDebugMode
()

2154 #ifde‡
DEVELOPER_SUPPORT


2156 if(
mySèã
 !
S_DEBUGGER
)

2160 
myOSy°em
->
	`debuggî
().
	`£tQuôSèã
();

2162 
	`£tEvítSèã
(
S_EMULATE
);

2163 
myOSy°em
->
	`¸óãFømeBuf„r
();

2164 
	`ª‰eshDi•œy
();

2165 
myOSy°em
->
	`‰ameBuf„r
().
	`£tCurs‹Sèã
();

2166 
myEvít
->
	`˛ór
();

2168 if(
myPau£Fœg
)

2169 
	`h™dÀEvít
(
Evít
::
Pau£
, 1);

2172 
	}
}

2175 
EvítH™dÀr
::
	$£tEvítSèã
(
Sèã
 
°©e
)

2178 
mySèã
 = 
°©e
;

2179 
mySèã
)

2181 
S_EMULATE
:

2182 
myOvîœy
 = 
NULL
;

2185 
myC⁄åﬁÀr
[0] = 
myOSy°em
->
	`c⁄sﬁe
().
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Le·
).
	`ty≥
();

2186 
myC⁄åﬁÀr
[1] = 
myOSy°em
->
	`c⁄sﬁe
().
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Right
).
	`ty≥
();

2189 
S_MENU
:

2190 
myOvîœy
 = &
myOSy°em
->
	`míu
();

2193 
S_CMDMENU
:

2194 
myOvîœy
 = &
myOSy°em
->
	`comm™dMíu
();

2197 
S_LAUNCHER
:

2198 
myOvîœy
 = &
myOSy°em
->
	`œunchî
();

2201 #ifde‡
DEVELOPER_SUPPORT


2202 
S_DEBUGGER
:

2203 
myOvîœy
 = &
myOSy°em
->
	`debuggî
();

2208 
myOvîœy
 = 
NULL
;

2212 
myOSy°em
->
	`°©eCh™ged
(
mySèã
);

2214 
	}
}

2217 
EvítH™dÀr
::
	$ßvePr›îtõs
()

2220 
myOSy°em
->
	`c⁄sﬁe
().
	`ßvePr›îtõs
(myOSy°em->
	`¥›îtõsFûe
(), 
åue
);

2222 
	}
}

2225 
EvítH™dÀr
::
	$£tSDLM≠pögs
()

2228 
ourSDLM≠pög
[ 
SDLK_BACKSPACE
 ] = "BACKSPACE";

2229 
ourSDLM≠pög
[ 
SDLK_TAB
 ] = "TAB";

2230 
ourSDLM≠pög
[ 
SDLK_CLEAR
 ] = "CLEAR";

2231 
ourSDLM≠pög
[ 
SDLK_RETURN
 ] = "RETURN";

2232 
ourSDLM≠pög
[ 
SDLK_PAUSE
 ] = "PAUSE";

2233 
ourSDLM≠pög
[ 
SDLK_ESCAPE
 ] = "ESCAPE";

2234 
ourSDLM≠pög
[ 
SDLK_SPACE
 ] = "SPACE";

2235 
ourSDLM≠pög
[ 
SDLK_EXCLAIM
 ] = "!";

2236 
ourSDLM≠pög
[ 
SDLK_QUOTEDBL
 ] = "\"";

2237 
ourSDLM≠pög
[ 
SDLK_HASH
 ] = "#";

2238 
ourSDLM≠pög
[ 
SDLK_DOLLAR
 ] = "$";

2239 
ourSDLM≠pög
[ 
SDLK_AMPERSAND
 ] = "&";

2240 
ourSDLM≠pög
[ 
SDLK_QUOTE
 ] = "\'";

2241 
ourSDLM≠pög
[ 
SDLK_LEFTPAREN
 ] = "(";

2242 
ourSDLM≠pög
[ 
SDLK_RIGHTPAREN
 ] = ")";

2243 
ourSDLM≠pög
[ 
SDLK_ASTERISK
 ] = "*";

2244 
ourSDLM≠pög
[ 
SDLK_PLUS
 ] = "+";

2245 
ourSDLM≠pög
[ 
SDLK_COMMA
 ] = "COMMA";

2246 
ourSDLM≠pög
[ 
SDLK_MINUS
 ] = "-";

2247 
ourSDLM≠pög
[ 
SDLK_PERIOD
 ] = ".";

2248 
ourSDLM≠pög
[ 
SDLK_SLASH
 ] = "/";

2249 
ourSDLM≠pög
[ 
SDLK_0
 ] = "0";

2250 
ourSDLM≠pög
[ 
SDLK_1
 ] = "1";

2251 
ourSDLM≠pög
[ 
SDLK_2
 ] = "2";

2252 
ourSDLM≠pög
[ 
SDLK_3
 ] = "3";

2253 
ourSDLM≠pög
[ 
SDLK_4
 ] = "4";

2254 
ourSDLM≠pög
[ 
SDLK_5
 ] = "5";

2255 
ourSDLM≠pög
[ 
SDLK_6
 ] = "6";

2256 
ourSDLM≠pög
[ 
SDLK_7
 ] = "7";

2257 
ourSDLM≠pög
[ 
SDLK_8
 ] = "8";

2258 
ourSDLM≠pög
[ 
SDLK_9
 ] = "9";

2259 
ourSDLM≠pög
[ 
SDLK_COLON
 ] = ":";

2260 
ourSDLM≠pög
[ 
SDLK_SEMICOLON
 ] = ";";

2261 
ourSDLM≠pög
[ 
SDLK_LESS
 ] = "<";

2262 
ourSDLM≠pög
[ 
SDLK_EQUALS
 ] = "=";

2263 
ourSDLM≠pög
[ 
SDLK_GREATER
 ] = ">";

2264 
ourSDLM≠pög
[ 
SDLK_QUESTION
 ] = "?";

2265 
ourSDLM≠pög
[ 
SDLK_AT
 ] = "@";

2266 
ourSDLM≠pög
[ 
SDLK_LEFTBRACKET
 ] = "[";

2267 
ourSDLM≠pög
[ 
SDLK_BACKSLASH
 ] = "\\";

2268 
ourSDLM≠pög
[ 
SDLK_RIGHTBRACKET
 ] = "]";

2269 
ourSDLM≠pög
[ 
SDLK_CARET
 ] = "^";

2270 
ourSDLM≠pög
[ 
SDLK_UNDERSCORE
 ] = "_";

2271 
ourSDLM≠pög
[ 
SDLK_BACKQUOTE
 ] = "`";

2272 
ourSDLM≠pög
[ 
SDLK_a
 ] = "A";

2273 
ourSDLM≠pög
[ 
SDLK_b
 ] = "B";

2274 
ourSDLM≠pög
[ 
SDLK_c
 ] = "C";

2275 
ourSDLM≠pög
[ 
SDLK_d
 ] = "D";

2276 
ourSDLM≠pög
[ 
SDLK_e
 ] = "E";

2277 
ourSDLM≠pög
[ 
SDLK_f
 ] = "F";

2278 
ourSDLM≠pög
[ 
SDLK_g
 ] = "G";

2279 
ourSDLM≠pög
[ 
SDLK_h
 ] = "H";

2280 
ourSDLM≠pög
[ 
SDLK_i
 ] = "I";

2281 
ourSDLM≠pög
[ 
SDLK_j
 ] = "J";

2282 
ourSDLM≠pög
[ 
SDLK_k
 ] = "K";

2283 
ourSDLM≠pög
[ 
SDLK_l
 ] = "L";

2284 
ourSDLM≠pög
[ 
SDLK_m
 ] = "M";

2285 
ourSDLM≠pög
[ 
SDLK_n
 ] = "N";

2286 
ourSDLM≠pög
[ 
SDLK_o
 ] = "O";

2287 
ourSDLM≠pög
[ 
SDLK_p
 ] = "P";

2288 
ourSDLM≠pög
[ 
SDLK_q
 ] = "Q";

2289 
ourSDLM≠pög
[ 
SDLK_r
 ] = "R";

2290 
ourSDLM≠pög
[ 
SDLK_s
 ] = "S";

2291 
ourSDLM≠pög
[ 
SDLK_t
 ] = "T";

2292 
ourSDLM≠pög
[ 
SDLK_u
 ] = "U";

2293 
ourSDLM≠pög
[ 
SDLK_v
 ] = "V";

2294 
ourSDLM≠pög
[ 
SDLK_w
 ] = "W";

2295 
ourSDLM≠pög
[ 
SDLK_x
 ] = "X";

2296 
ourSDLM≠pög
[ 
SDLK_y
 ] = "Y";

2297 
ourSDLM≠pög
[ 
SDLK_z
 ] = "Z";

2298 
ourSDLM≠pög
[ 
SDLK_DELETE
 ] = "DELETE";

2299 
ourSDLM≠pög
[ 
SDLK_WORLD_0
 ] = "WORLD_0";

2300 
ourSDLM≠pög
[ 
SDLK_WORLD_1
 ] = "WORLD_1";

2301 
ourSDLM≠pög
[ 
SDLK_WORLD_2
 ] = "WORLD_2";

2302 
ourSDLM≠pög
[ 
SDLK_WORLD_3
 ] = "WORLD_3";

2303 
ourSDLM≠pög
[ 
SDLK_WORLD_4
 ] = "WORLD_4";

2304 
ourSDLM≠pög
[ 
SDLK_WORLD_5
 ] = "WORLD_5";

2305 
ourSDLM≠pög
[ 
SDLK_WORLD_6
 ] = "WORLD_6";

2306 
ourSDLM≠pög
[ 
SDLK_WORLD_7
 ] = "WORLD_7";

2307 
ourSDLM≠pög
[ 
SDLK_WORLD_8
 ] = "WORLD_8";

2308 
ourSDLM≠pög
[ 
SDLK_WORLD_9
 ] = "WORLD_9";

2309 
ourSDLM≠pög
[ 
SDLK_WORLD_10
 ] = "WORLD_10";

2310 
ourSDLM≠pög
[ 
SDLK_WORLD_11
 ] = "WORLD_11";

2311 
ourSDLM≠pög
[ 
SDLK_WORLD_12
 ] = "WORLD_12";

2312 
ourSDLM≠pög
[ 
SDLK_WORLD_13
 ] = "WORLD_13";

2313 
ourSDLM≠pög
[ 
SDLK_WORLD_14
 ] = "WORLD_14";

2314 
ourSDLM≠pög
[ 
SDLK_WORLD_15
 ] = "WORLD_15";

2315 
ourSDLM≠pög
[ 
SDLK_WORLD_16
 ] = "WORLD_16";

2316 
ourSDLM≠pög
[ 
SDLK_WORLD_17
 ] = "WORLD_17";

2317 
ourSDLM≠pög
[ 
SDLK_WORLD_18
 ] = "WORLD_18";

2318 
ourSDLM≠pög
[ 
SDLK_WORLD_19
 ] = "WORLD_19";

2319 
ourSDLM≠pög
[ 
SDLK_WORLD_20
 ] = "WORLD_20";

2320 
ourSDLM≠pög
[ 
SDLK_WORLD_21
 ] = "WORLD_21";

2321 
ourSDLM≠pög
[ 
SDLK_WORLD_22
 ] = "WORLD_22";

2322 
ourSDLM≠pög
[ 
SDLK_WORLD_23
 ] = "WORLD_23";

2323 
ourSDLM≠pög
[ 
SDLK_WORLD_24
 ] = "WORLD_24";

2324 
ourSDLM≠pög
[ 
SDLK_WORLD_25
 ] = "WORLD_25";

2325 
ourSDLM≠pög
[ 
SDLK_WORLD_26
 ] = "WORLD_26";

2326 
ourSDLM≠pög
[ 
SDLK_WORLD_27
 ] = "WORLD_27";

2327 
ourSDLM≠pög
[ 
SDLK_WORLD_28
 ] = "WORLD_28";

2328 
ourSDLM≠pög
[ 
SDLK_WORLD_29
 ] = "WORLD_29";

2329 
ourSDLM≠pög
[ 
SDLK_WORLD_30
 ] = "WORLD_30";

2330 
ourSDLM≠pög
[ 
SDLK_WORLD_31
 ] = "WORLD_31";

2331 
ourSDLM≠pög
[ 
SDLK_WORLD_32
 ] = "WORLD_32";

2332 
ourSDLM≠pög
[ 
SDLK_WORLD_33
 ] = "WORLD_33";

2333 
ourSDLM≠pög
[ 
SDLK_WORLD_34
 ] = "WORLD_34";

2334 
ourSDLM≠pög
[ 
SDLK_WORLD_35
 ] = "WORLD_35";

2335 
ourSDLM≠pög
[ 
SDLK_WORLD_36
 ] = "WORLD_36";

2336 
ourSDLM≠pög
[ 
SDLK_WORLD_37
 ] = "WORLD_37";

2337 
ourSDLM≠pög
[ 
SDLK_WORLD_38
 ] = "WORLD_38";

2338 
ourSDLM≠pög
[ 
SDLK_WORLD_39
 ] = "WORLD_39";

2339 
ourSDLM≠pög
[ 
SDLK_WORLD_40
 ] = "WORLD_40";

2340 
ourSDLM≠pög
[ 
SDLK_WORLD_41
 ] = "WORLD_41";

2341 
ourSDLM≠pög
[ 
SDLK_WORLD_42
 ] = "WORLD_42";

2342 
ourSDLM≠pög
[ 
SDLK_WORLD_43
 ] = "WORLD_43";

2343 
ourSDLM≠pög
[ 
SDLK_WORLD_44
 ] = "WORLD_44";

2344 
ourSDLM≠pög
[ 
SDLK_WORLD_45
 ] = "WORLD_45";

2345 
ourSDLM≠pög
[ 
SDLK_WORLD_46
 ] = "WORLD_46";

2346 
ourSDLM≠pög
[ 
SDLK_WORLD_47
 ] = "WORLD_47";

2347 
ourSDLM≠pög
[ 
SDLK_WORLD_48
 ] = "WORLD_48";

2348 
ourSDLM≠pög
[ 
SDLK_WORLD_49
 ] = "WORLD_49";

2349 
ourSDLM≠pög
[ 
SDLK_WORLD_50
 ] = "WORLD_50";

2350 
ourSDLM≠pög
[ 
SDLK_WORLD_51
 ] = "WORLD_51";

2351 
ourSDLM≠pög
[ 
SDLK_WORLD_52
 ] = "WORLD_52";

2352 
ourSDLM≠pög
[ 
SDLK_WORLD_53
 ] = "WORLD_53";

2353 
ourSDLM≠pög
[ 
SDLK_WORLD_54
 ] = "WORLD_54";

2354 
ourSDLM≠pög
[ 
SDLK_WORLD_55
 ] = "WORLD_55";

2355 
ourSDLM≠pög
[ 
SDLK_WORLD_56
 ] = "WORLD_56";

2356 
ourSDLM≠pög
[ 
SDLK_WORLD_57
 ] = "WORLD_57";

2357 
ourSDLM≠pög
[ 
SDLK_WORLD_58
 ] = "WORLD_58";

2358 
ourSDLM≠pög
[ 
SDLK_WORLD_59
 ] = "WORLD_59";

2359 
ourSDLM≠pög
[ 
SDLK_WORLD_60
 ] = "WORLD_60";

2360 
ourSDLM≠pög
[ 
SDLK_WORLD_61
 ] = "WORLD_61";

2361 
ourSDLM≠pög
[ 
SDLK_WORLD_62
 ] = "WORLD_62";

2362 
ourSDLM≠pög
[ 
SDLK_WORLD_63
 ] = "WORLD_63";

2363 
ourSDLM≠pög
[ 
SDLK_WORLD_64
 ] = "WORLD_64";

2364 
ourSDLM≠pög
[ 
SDLK_WORLD_65
 ] = "WORLD_65";

2365 
ourSDLM≠pög
[ 
SDLK_WORLD_66
 ] = "WORLD_66";

2366 
ourSDLM≠pög
[ 
SDLK_WORLD_67
 ] = "WORLD_67";

2367 
ourSDLM≠pög
[ 
SDLK_WORLD_68
 ] = "WORLD_68";

2368 
ourSDLM≠pög
[ 
SDLK_WORLD_69
 ] = "WORLD_69";

2369 
ourSDLM≠pög
[ 
SDLK_WORLD_70
 ] = "WORLD_70";

2370 
ourSDLM≠pög
[ 
SDLK_WORLD_71
 ] = "WORLD_71";

2371 
ourSDLM≠pög
[ 
SDLK_WORLD_72
 ] = "WORLD_72";

2372 
ourSDLM≠pög
[ 
SDLK_WORLD_73
 ] = "WORLD_73";

2373 
ourSDLM≠pög
[ 
SDLK_WORLD_74
 ] = "WORLD_74";

2374 
ourSDLM≠pög
[ 
SDLK_WORLD_75
 ] = "WORLD_75";

2375 
ourSDLM≠pög
[ 
SDLK_WORLD_76
 ] = "WORLD_76";

2376 
ourSDLM≠pög
[ 
SDLK_WORLD_77
 ] = "WORLD_77";

2377 
ourSDLM≠pög
[ 
SDLK_WORLD_78
 ] = "WORLD_78";

2378 
ourSDLM≠pög
[ 
SDLK_WORLD_79
 ] = "WORLD_79";

2379 
ourSDLM≠pög
[ 
SDLK_WORLD_80
 ] = "WORLD_80";

2380 
ourSDLM≠pög
[ 
SDLK_WORLD_81
 ] = "WORLD_81";

2381 
ourSDLM≠pög
[ 
SDLK_WORLD_82
 ] = "WORLD_82";

2382 
ourSDLM≠pög
[ 
SDLK_WORLD_83
 ] = "WORLD_83";

2383 
ourSDLM≠pög
[ 
SDLK_WORLD_84
 ] = "WORLD_84";

2384 
ourSDLM≠pög
[ 
SDLK_WORLD_85
 ] = "WORLD_85";

2385 
ourSDLM≠pög
[ 
SDLK_WORLD_86
 ] = "WORLD_86";

2386 
ourSDLM≠pög
[ 
SDLK_WORLD_87
 ] = "WORLD_87";

2387 
ourSDLM≠pög
[ 
SDLK_WORLD_88
 ] = "WORLD_88";

2388 
ourSDLM≠pög
[ 
SDLK_WORLD_89
 ] = "WORLD_89";

2389 
ourSDLM≠pög
[ 
SDLK_WORLD_90
 ] = "WORLD_90";

2390 
ourSDLM≠pög
[ 
SDLK_WORLD_91
 ] = "WORLD_91";

2391 
ourSDLM≠pög
[ 
SDLK_WORLD_92
 ] = "WORLD_92";

2392 
ourSDLM≠pög
[ 
SDLK_WORLD_93
 ] = "WORLD_93";

2393 
ourSDLM≠pög
[ 
SDLK_WORLD_94
 ] = "WORLD_94";

2394 
ourSDLM≠pög
[ 
SDLK_WORLD_95
 ] = "WORLD_95";

2395 
ourSDLM≠pög
[ 
SDLK_KP0
 ] = "KP0";

2396 
ourSDLM≠pög
[ 
SDLK_KP1
 ] = "KP1";

2397 
ourSDLM≠pög
[ 
SDLK_KP2
 ] = "KP2";

2398 
ourSDLM≠pög
[ 
SDLK_KP3
 ] = "KP3";

2399 
ourSDLM≠pög
[ 
SDLK_KP4
 ] = "KP4";

2400 
ourSDLM≠pög
[ 
SDLK_KP5
 ] = "KP5";

2401 
ourSDLM≠pög
[ 
SDLK_KP6
 ] = "KP6";

2402 
ourSDLM≠pög
[ 
SDLK_KP7
 ] = "KP7";

2403 
ourSDLM≠pög
[ 
SDLK_KP8
 ] = "KP8";

2404 
ourSDLM≠pög
[ 
SDLK_KP9
 ] = "KP9";

2405 
ourSDLM≠pög
[ 
SDLK_KP_PERIOD
 ] = "KP .";

2406 
ourSDLM≠pög
[ 
SDLK_KP_DIVIDE
 ] = "KP /";

2407 
ourSDLM≠pög
[ 
SDLK_KP_MULTIPLY
 ] = "KP *";

2408 
ourSDLM≠pög
[ 
SDLK_KP_MINUS
 ] = "KP -";

2409 
ourSDLM≠pög
[ 
SDLK_KP_PLUS
 ] = "KP +";

2410 
ourSDLM≠pög
[ 
SDLK_KP_ENTER
 ] = "KP ENTER";

2411 
ourSDLM≠pög
[ 
SDLK_KP_EQUALS
 ] = "KP =";

2412 
ourSDLM≠pög
[ 
SDLK_UP
 ] = "UP";

2413 
ourSDLM≠pög
[ 
SDLK_DOWN
 ] = "DOWN";

2414 
ourSDLM≠pög
[ 
SDLK_RIGHT
 ] = "RIGHT";

2415 
ourSDLM≠pög
[ 
SDLK_LEFT
 ] = "LEFT";

2416 
ourSDLM≠pög
[ 
SDLK_INSERT
 ] = "INS";

2417 
ourSDLM≠pög
[ 
SDLK_HOME
 ] = "HOME";

2418 
ourSDLM≠pög
[ 
SDLK_END
 ] = "END";

2419 
ourSDLM≠pög
[ 
SDLK_PAGEUP
 ] = "PGUP";

2420 
ourSDLM≠pög
[ 
SDLK_PAGEDOWN
 ] = "PGDN";

2421 
ourSDLM≠pög
[ 
SDLK_F1
 ] = "F1";

2422 
ourSDLM≠pög
[ 
SDLK_F2
 ] = "F2";

2423 
ourSDLM≠pög
[ 
SDLK_F3
 ] = "F3";

2424 
ourSDLM≠pög
[ 
SDLK_F4
 ] = "F4";

2425 
ourSDLM≠pög
[ 
SDLK_F5
 ] = "F5";

2426 
ourSDLM≠pög
[ 
SDLK_F6
 ] = "F6";

2427 
ourSDLM≠pög
[ 
SDLK_F7
 ] = "F7";

2428 
ourSDLM≠pög
[ 
SDLK_F8
 ] = "F8";

2429 
ourSDLM≠pög
[ 
SDLK_F9
 ] = "F9";

2430 
ourSDLM≠pög
[ 
SDLK_F10
 ] = "F10";

2431 
ourSDLM≠pög
[ 
SDLK_F11
 ] = "F11";

2432 
ourSDLM≠pög
[ 
SDLK_F12
 ] = "F12";

2433 
ourSDLM≠pög
[ 
SDLK_F13
 ] = "F13";

2434 
ourSDLM≠pög
[ 
SDLK_F14
 ] = "F14";

2435 
ourSDLM≠pög
[ 
SDLK_F15
 ] = "F15";

2436 
ourSDLM≠pög
[ 
SDLK_NUMLOCK
 ] = "NUMLOCK";

2437 
ourSDLM≠pög
[ 
SDLK_CAPSLOCK
 ] = "CAPSLOCK";

2438 
ourSDLM≠pög
[ 
SDLK_SCROLLOCK
 ] = "SCROLLOCK";

2439 
ourSDLM≠pög
[ 
SDLK_RSHIFT
 ] = "RSHIFT";

2440 
ourSDLM≠pög
[ 
SDLK_LSHIFT
 ] = "LSHIFT";

2441 
ourSDLM≠pög
[ 
SDLK_RCTRL
 ] = "RCTRL";

2442 
ourSDLM≠pög
[ 
SDLK_LCTRL
 ] = "LCTRL";

2443 
ourSDLM≠pög
[ 
SDLK_RALT
 ] = "RALT";

2444 
ourSDLM≠pög
[ 
SDLK_LALT
 ] = "LALT";

2445 
ourSDLM≠pög
[ 
SDLK_RMETA
 ] = "RMETA";

2446 
ourSDLM≠pög
[ 
SDLK_LMETA
 ] = "LMETA";

2447 
ourSDLM≠pög
[ 
SDLK_LSUPER
 ] = "LSUPER";

2448 
ourSDLM≠pög
[ 
SDLK_RSUPER
 ] = "RSUPER";

2449 
ourSDLM≠pög
[ 
SDLK_MODE
 ] = "MODE";

2450 
ourSDLM≠pög
[ 
SDLK_COMPOSE
 ] = "COMPOSE";

2451 
ourSDLM≠pög
[ 
SDLK_HELP
 ] = "HELP";

2452 
ourSDLM≠pög
[ 
SDLK_PRINT
 ] = "PRINT";

2453 
ourSDLM≠pög
[ 
SDLK_SYSREQ
 ] = "SYSREQ";

2454 
ourSDLM≠pög
[ 
SDLK_BREAK
 ] = "BREAK";

2455 
ourSDLM≠pög
[ 
SDLK_MENU
 ] = "MENU";

2456 
ourSDLM≠pög
[ 
SDLK_POWER
 ] = "POWER";

2457 
ourSDLM≠pög
[ 
SDLK_EURO
 ] = "EURO";

2458 
ourSDLM≠pög
[ 
SDLK_UNDO
 ] = "UNDO";

2460 
	}
}

2464 
A˘i⁄Li°
 
EvítH™dÀr
::
ourA˘i⁄Li°
[
kA˘i⁄Li°Size
] = {

2465 { 
Evít
::
C⁄sﬁeSñe˘
, "Select", 0 },

2466 { 
Evít
::
C⁄sﬁeRe£t
, "Reset", 0 },

2467 { 
Evít
::
C⁄sﬁeCﬁ‹
, "Color TV", 0 },

2468 { 
Evít
::
C⁄sﬁeBœckWhôe
, "Black & White TV", 0 },

2469 { 
Evít
::
C⁄sﬁeLe·Difficu…yA
, "P1 Difficulty A", 0 },

2470 { 
Evít
::
C⁄sﬁeLe·Difficu…yB
, "P1 Difficulty B", 0 },

2471 { 
Evít
::
C⁄sﬁeRightDifficu…yA
, "P2 Difficulty A", 0 },

2472 { 
Evít
::
C⁄sﬁeRightDifficu…yB
, "P2 Difficulty B", 0 },

2473 { 
Evít
::
SaveSèã
, "Save State", 0 },

2474 { 
Evít
::
Ch™geSèã
, "Change State", 0 },

2475 { 
Evít
::
LﬂdSèã
, "Load State", 0 },

2476 { 
Evít
::
TakeS«pshŸ
, "Snapshot", 0 },

2477 { 
Evít
::
Pau£
, "Pause", 0 },

2478 { 
Evít
::
Fry
, "Fry cartridge", 0 },

2479 { 
Evít
::
VﬁumeDe¸ó£
, "Decrease volume", 0 },

2480 { 
Evít
::
VﬁumeIn¸ó£
, "Increase volume", 0 },

2481 { 
Evít
::
MíuMode
, "Toggle options menu mode", 0 },

2482 { 
Evít
::
CmdMíuMode
, "Toggle command menu mode", 0 },

2483 { 
Evít
::
DebuggîMode
, "Toggle debugger mode", 0 },

2484 { 
Evít
::
LaunchîMode
, "Enter ROMÜauncher", 0 },

2485 { 
Evít
::
Quô
, "Quit", 0 },

2487 { 
Evít
::
Joy°ickZîoUp
, "P1 Joystick Up", 0 },

2488 { 
Evít
::
Joy°ickZîoDown
, "P1 Joystick Down", 0 },

2489 { 
Evít
::
Joy°ickZîoLe·
, "P1 Joystick Left", 0 },

2490 { 
Evít
::
Joy°ickZîoRight
, "P1 Joystick Right", 0 },

2491 { 
Evít
::
Joy°ickZîoFúe
, "P1 Joystick Fire", 0 },

2493 { 
Evít
::
Joy°ickO√Up
, "P2 Joystick Up", 0 },

2494 { 
Evít
::
Joy°ickO√Down
, "P2 Joystick Down", 0 },

2495 { 
Evít
::
Joy°ickO√Le·
, "P2 Joystick Left", 0 },

2496 { 
Evít
::
Joy°ickO√Right
, "P2 Joystick Right", 0 },

2497 { 
Evít
::
Joy°ickO√Fúe
, "P2 Joystick Fire", 0 },

2499 { 
Evít
::
PaddÀZîoA«log
, "Paddle 1 Analog", 0 },

2500 { 
Evít
::
PaddÀZîoDe¸ó£
, "Paddle 1 Decrease", 0 },

2501 { 
Evít
::
PaddÀZîoIn¸ó£
, "Paddle 1 Increase", 0 },

2502 { 
Evít
::
PaddÀZîoFúe
, "Paddle 1 Fire", 0 },

2504 { 
Evít
::
PaddÀO√A«log
, "Paddle 2 Analog", 0 },

2505 { 
Evít
::
PaddÀO√De¸ó£
, "Paddle 2 Decrease", 0 },

2506 { 
Evít
::
PaddÀO√In¸ó£
, "Paddle 2 Increase", 0 },

2507 { 
Evít
::
PaddÀO√Fúe
, "Paddle 2 Fire", 0 },

2509 { 
Evít
::
PaddÀTwoA«log
, "Paddle 3 Analog", 0 },

2510 { 
Evít
::
PaddÀTwoDe¸ó£
, "Paddle 3 Decrease", 0 },

2511 { 
Evít
::
PaddÀTwoIn¸ó£
, "Paddle 3 Increase", 0 },

2512 { 
Evít
::
PaddÀTwoFúe
, "Paddle 3 Fire", 0 },

2514 { 
Evít
::
PaddÀThªeA«log
, "Paddle 4 Analog", 0 },

2515 { 
Evít
::
PaddÀThªeDe¸ó£
, "Paddle 4 Decrease", 0 },

2516 { 
Evít
::
PaddÀThªeIn¸ó£
, "Paddle 4 Increase", 0 },

2517 { 
Evít
::
PaddÀThªeFúe
, "Paddle 4 Fire", 0 },

2519 { 
Evít
::
Boo°îGrùZîoTriggî
, "P1 Booster-Grip Trigger", 0 },

2520 { 
Evít
::
Boo°îGrùZîoBoo°î
, "P1 Booster-Grip Booster", 0 },

2522 { 
Evít
::
Boo°îGrùO√Triggî
, "P2 Booster-Grip Trigger", 0 },

2523 { 
Evít
::
Boo°îGrùO√Boo°î
, "P2 Booster-Grip Booster", 0 },

2525 { 
Evít
::
DrivögZîoCou¡îClockwi£
, "P1 Driving Controller Left", 0 },

2526 { 
Evít
::
DrivögZîoClockwi£
, "P1 Driving Controller Right", 0 },

2527 { 
Evít
::
DrivögZîoFúe
, "P1 Driving Controller Fire", 0 },

2529 { 
Evít
::
DrivögO√Cou¡îClockwi£
, "P2 Driving Controller Left", 0 },

2530 { 
Evít
::
DrivögO√Clockwi£
, "P2 Driving Controller Right", 0 },

2531 { 
Evít
::
DrivögO√Fúe
, "P2 Driving Controller Fire", 0 },

2533 { 
Evít
::
KeybﬂrdZîo1
, "P1 Keyboard 1", 0 },

2534 { 
Evít
::
KeybﬂrdZîo2
, "P1 Keyboard 2", 0 },

2535 { 
Evít
::
KeybﬂrdZîo3
, "P1 Keyboard 3", 0 },

2536 { 
Evít
::
KeybﬂrdZîo4
, "P1 Keyboard 4", 0 },

2537 { 
Evít
::
KeybﬂrdZîo5
, "P1 Keyboard 5", 0 },

2538 { 
Evít
::
KeybﬂrdZîo6
, "P1 Keyboard 6", 0 },

2539 { 
Evít
::
KeybﬂrdZîo7
, "P1 Keyboard 7", 0 },

2540 { 
Evít
::
KeybﬂrdZîo8
, "P1 Keyboard 8", 0 },

2541 { 
Evít
::
KeybﬂrdZîo9
, "P1 Keyboard 9", 0 },

2542 { 
Evít
::
KeybﬂrdZîoSèr
, "P1 Keyboard *", 0 },

2543 { 
Evít
::
KeybﬂrdZîo0
, "P1 Keyboard 0", 0 },

2544 { 
Evít
::
KeybﬂrdZîoPound
, "P1 Keyboard #", 0 },

2546 { 
Evít
::
KeybﬂrdO√1
, "P2 Keyboard 1", 0 },

2547 { 
Evít
::
KeybﬂrdO√2
, "P2 Keyboard 2", 0 },

2548 { 
Evít
::
KeybﬂrdO√3
, "P2 Keyboard 3", 0 },

2549 { 
Evít
::
KeybﬂrdO√4
, "P2 Keyboard 4", 0 },

2550 { 
Evít
::
KeybﬂrdO√5
, "P2 Keyboard 5", 0 },

2551 { 
Evít
::
KeybﬂrdO√6
, "P2 Keyboard 6", 0 },

2552 { 
Evít
::
KeybﬂrdO√7
, "P2 Keyboard 7", 0 },

2553 { 
Evít
::
KeybﬂrdO√8
, "P2 Keyboard 8", 0 },

2554 { 
Evít
::
KeybﬂrdO√9
, "P2 Keyboard 9", 0 },

2555 { 
Evít
::
KeybﬂrdO√Sèr
, "P2 Keyboard *", 0 },

2556 { 
Evít
::
KeybﬂrdO√0
, "P2 Keyboard 0", 0 },

2557 { 
Evít
::
KeybﬂrdO√Pound
, "P2 Keyboard #", 0 }

2562 c⁄° 
	gEvít
::
Ty≥
 
EvítH™dÀr
::
PaddÀ_Resi°™˚
[4] = {

2563 
Evít
::
PaddÀZîoResi°™˚
, Evít::
PaddÀO√Resi°™˚
,

2564 
Evít
::
PaddÀTwoResi°™˚
, Evít::
PaddÀThªeResi°™˚


2568 c⁄° 
	gEvít
::
Ty≥
 
EvítH™dÀr
::
PaddÀ_Buâ⁄
[4] = {

2569 
Evít
::
PaddÀZîoFúe
, Evít::
PaddÀO√Fúe
,

2570 
Evít
::
PaddÀTwoFúe
, Evít::
PaddÀThªeFúe


2574 c⁄° 
	gEvít
::
Ty≥
 
EvítH™dÀr
::
SA_Axis
[2][2][3] = {

2575 { {
Evít
::
Joy°ickZîoLe·
, Evít::
Joy°ickZîoRight
, Evít::
PaddÀZîoResi°™˚
},

2576 {
Evít
::
Joy°ickZîoUp
, Evít::
Joy°ickZîoDown
, Evít::
PaddÀO√Resi°™˚
} },

2577 { {
Evít
::
Joy°ickO√Le·
, Evít::
Joy°ickO√Right
, Evít::
PaddÀTwoResi°™˚
},

2578 {
Evít
::
Joy°ickO√Up
, Evít::
Joy°ickO√Down
, Evít::
PaddÀThªeResi°™˚
} }

2582 c⁄° 
	gEvít
::
Ty≥
 
EvítH™dÀr
::
SA_Buâ⁄
[2][2][3] = {

2583 { {
Evít
::
Joy°ickZîoFúe
, Evít::
PaddÀZîoFúe
, Evít::
DrivögZîoFúe
 },

2584 {
Evít
::
NoTy≥
, Evít::
PaddÀO√Fúe
, Event::NoType} },

2585 { {
Evít
::
Joy°ickO√Fúe
, Evít::
PaddÀTwoFúe
, Evít::
DrivögO√Fúe
 },

2586 {
Evít
::
NoTy≥
, Evít::
PaddÀThªeFúe
, Event::NoType} }

2590 c⁄° 
	gEvít
::
Ty≥
 
EvítH™dÀr
::
SA_DrivögVÆue
[2] = {

2591 
Evít
::
DrivögZîoVÆue
, Evít::
DrivögO√VÆue


	@emucore/EventHandler.hxx

19 #i‚de‡
EVENTHANDLER_HXX


20 
	#EVENTHANDLER_HXX


	)

22 
	~<SDL.h
>

24 
	~"b•f.hxx
"

25 
	~"Evít.hxx
"

26 
	~"Aºay.hxx
"

27 
	~"C⁄åﬁ.hxx
"

28 
	~"SåögLi°.hxx
"

29 
	~"Sîülizî.hxx
"

31 
˛ass
 
	gC⁄sﬁe
;

32 
˛ass
 
	gOSy°em
;

33 
˛ass
 
	gDülogC⁄èöî
;

34 
˛ass
 
	gEvítM≠pögWidgë
;

35 
˛ass
 
	gEvítSåómî
;

39 
	eJoyH©
 {

40 
	mkJH©Up
,

41 
	mkJH©Down
,

42 
	mkJH©Le·
,

43 
	mkJH©Right
,

44 
	mkJH©Cíãªd


47 
	eMou£Buâ⁄
 {

48 
	mEVENT_LBUTTONDOWN
,

49 
	mEVENT_LBUTTONUP
,

50 
	mEVENT_RBUTTONDOWN
,

51 
	mEVENT_RBUTTONUP
,

52 
	mEVENT_WHEELDOWN
,

53 
	mEVENT_WHEELUP


57 
	sA˘i⁄Li°
 {

58 
	mEvít
::
Ty≥
 
evít
;

59 c⁄° * 
	ma˘i⁄
;

60 * 
	mkey
;

64 
	mkA˘i⁄Li°Size
 = 81

69 
	mkNumJoy°icks
 = 8,

70 
	mkNumJoyBuâ⁄s
 = 24,

71 
	mkNumJoyAxis
 = 16,

72 
	mkNumJoyH©s
 = 16

75 
	eJoyTy≥
 {

76 
	mJT_NONE
,

77 
	mJT_REGULAR
,

78 
	mJT_STELLADAPTOR_LEFT
,

79 
	mJT_STELLADAPTOR_RIGHT


82 
	sSãŒa_Joy°ick
 {

83 
SDL_Joy°ick
* 
	m°ick
;

84 
JoyTy≥
 
	mty≥
;

85 
°rög
 
	m«me
;

89 
	sJoyMou£
 {

90 
boﬁ
 
	ma˘ive
;

91 
	mx
, 
	my
, 
	mx_vñ
, 
	my_vñ
, 
	mx_max
, 
	my_max
, 
	mx_amt
, 
	my_amt
, 
	mamt
,

92 
	mx_down_cou¡
, 
	my_down_cou¡
;

93 
	mœ°_time
, 
	mdñay_time
, 
	mx_down_time
, 
	my_down_time
;

94 
	mjoy_vÆ
, 
	mﬁd_joy_vÆ
;

112 ˛as†
	cEvítH™dÀr


114 
‰õnd
 
˛ass
 
	mEvítM≠pögWidgë
;

116 
	mpublic
:

120 
EvítH™dÀr
(
OSy°em
* 
osy°em
);

125 
	mvútuÆ
 ~
EvítH™dÀr
();

128 
	eSèã
 { 
	mS_NONE
, 
	mS_EMULATE
, 
	mS_LAUNCHER
, 
	mS_MENU
, 
	mS_CMDMENU
, 
	mS_DEBUGGER
 };

135 
Evít
* 
	$evít
(Ë{  
myEvít
; 
	}
}

142 
£tupJoy°icks
();

150 
m≠SãŒad≠t‹s
(c⁄° 
°rög
& 
ß1
, c⁄° såög& 
ß2
);

158 
pﬁl
(
uI¡32
 
time
);

167 
£tDeÁu…JoyM≠pög
(
Evít
::
Ty≥
 
evít
, 
°ick
, 
buâ⁄
);

177 
£tDeÁu…JoyAxisM≠pög
(
Evít
::
Ty≥
 
evít
, 
°ick
, 
axis
, 
vÆue
);

187 
£tDeÁu…JoyH©M≠pög
(
Evít
::
Ty≥
 
evít
, 
°ick
, 
h©
, 
vÆue
);

194 
ölöe
 
Sèã
 
	$°©e
(Ë{  
mySèã
; 
	}
}

200 
ölöe
 
boﬁ
 
	$u£Launchî
(Ë{  
myU£LaunchîFœg
; 
	}
}

207 
ª£t
(
Sèã
 
°©e
);

215 
ª‰eshDi•œy
(
boﬁ
 
f‹˚Upd©e
 = 
Ál£
);

220 
∑u£
(
boﬁ
 
°©us
);

225 
ölöe
 
boﬁ
 
	$isPau£d
(Ë{  
myPau£Fœg
; 
	}
}

231 
	$quô
(Ë{ 
	`h™dÀEvít
(
Evít
::
Quô
, 1); 
	}
}

233 
	$quô
(Ë{ 
	}
}

239 
ölöe
 
boﬁ
 
	$doQuô
(Ë{  
myQuôFœg
; 
	}
}

244 
ßveSèã
(
°©e
);

249 
lﬂdSèã
(
°©e
);

257 
£tPaddÀMode
(
num
, 
boﬁ
 
showmesßge
 = 
Ál£
);

265 
£tPaddÀS≥ed
(
num
, 
•ìd
);

274 
£tPaddÀThªshﬁd
(
thªsh
);

276 
ölöe
 
boﬁ
 
	$kbdA…
(
mod
)

278 #i‚de‡
MAC_OSX


279  (
mod
 & 
KMOD_ALT
);

281  ((
mod
 & 
KMOD_META
Ë&& (mod & 
KMOD_SHIFT
));

283 
	}
}

285 
ölöe
 
boﬁ
 
	$kbdC⁄åﬁ
(
mod
)

287 #i‚de‡
MAC_OSX


288  (
mod
 & 
KMOD_CTRL
) > 0;

290  ((
mod
 & 
KMOD_META
Ë&& !(mod & 
KMOD_SHIFT
));

292 
	}
}

294 
ölöe
 
boﬁ
 
	$kbdShi·
(
mod
)

296  (
mod
 & 
KMOD_SHIFT
);

297 
	}
}

299 
íãrMíuMode
(
Sèã
 
°©e
);

300 
ÀaveMíuMode
();

301 
boﬁ
 
íãrDebugMode
();

302 
ÀaveDebugMode
();

303 
ßvePr›îtõs
();

312 
h™dÀEvít
(
Evít
::
Ty≥
 
ty≥
, 
I¡32
 
vÆue
);

314 
ölöe
 
boﬁ
 
	$‰yög
(Ë{  
myFryögFœg
; 
	}
}

322 
¸óãMou£MŸi⁄Evít
(
x
, 
y
);

331 
¸óãMou£Buâ⁄Evít
(
x
, 
y
, 
°©e
);

333 
ölöe
 
SDL_Joy°ick
* 
	$gëJoy°ick
(
i
Ë{  
ourJoy°icks
[i].
°ick
; 
	}
}

335 
	g¥iv©e
:

342 
boﬁ
 
addKeyM≠pög
(
Evít
::
Ty≥
 
evít
, 
key
);

352 
boﬁ
 
addJoyM≠pög
(
Evít
::
Ty≥
 
evít
, 
°ick
, 
buâ⁄
);

363 
boﬁ
 
addJoyAxisM≠pög
(
Evít
::
Ty≥
 
evít
, 
°ick
, 
axis
, 
vÆue
);

374 
boﬁ
 
addJoyH©M≠pög
(
Evít
::
Ty≥
 
evít
, 
°ick
, 
h©
, 
vÆue
);

381 
îa£M≠pög
(
Evít
::
Ty≥
 
evít
);

386 
£tDeÁu…M≠pög
();

393 
h™dÀMou£MŸi⁄Evít
(
SDL_Evít
& 
evít
);

400 
h™dÀMou£Buâ⁄Evít
(
SDL_Evít
& 
evít
, 
°©e
);

409 
h™dÀJoyEvít
(
°ick
, 
buâ⁄
, 
°©e
);

418 
h™dÀJoyAxisEvít
(
°ick
, 
axis
, 
vÆue
);

427 
h™dÀJoyH©Evít
(
°ick
, 
h©
, 
vÆue
);

435 
ölöe
 
boﬁ
 
evítSèãCh™ge
(
Evít
::
Ty≥
 
ty≥
);

440 
£tA˘i⁄M≠pögs
();

441 
£tSDLM≠pögs
();

442 
£tKeym≠
();

443 
£tJoym≠
();

444 
£tJoyAxisM≠
();

445 
£tJoyH©M≠
();

446 
£tDeÁu…Keym≠
();

447 
£tDeÁu…Joym≠
();

448 
£tDeÁu…JoyAxisM≠
();

449 
£tDeÁu…JoyH©M≠
();

450 
ßveKeyM≠pög
();

451 
ßveJoyM≠pög
();

452 
ßveJoyAxisM≠pög
();

453 
ßveJoyH©M≠pög
();

464 
boﬁ
 
isVÆidLi°
(
°rög
& 
li°
, 
I¡Aºay
& 
m≠
, 
uI¡32
 
Àngth
);

472 
ölöe
 
boﬁ
 
evítIsA«log
(
Evít
::
Ty≥
 
evít
);

482 
ölöe
 
boﬁ
 
isJôãr
(
∑ddÀ
, 
vÆue
);

484 
ßveSèã
();

485 
ch™geSèã
();

486 
lﬂdSèã
();

487 
èkeS«pshŸ
();

488 
£tEvítSèã
(
Sèã
 
°©e
);

490 
	g¥iv©e
:

492 
OSy°em
* 
myOSy°em
;

495 
Evít
* 
	gmyEvít
;

498 
EvítSåómî
* 
	gmyEvítSåómî
;

501 
DülogC⁄èöî
* 
	gmyOvîœy
;

504 
	gEvít
::
Ty≥
 
myKeyTabÀ
[
SDLK_LAST
];

507 
	gEvít
::
Ty≥
 
myJoyTabÀ
[
kNumJoy°icks
][
kNumJoyBuâ⁄s
];

510 
	gEvít
::
Ty≥
 
myJoyAxisTabÀ
[
kNumJoy°icks
][
kNumJoyAxis
][2];

513 
	gEvít
::
Ty≥
 
myJoyH©TabÀ
[
kNumJoy°icks
][
kNumJoyH©s
][4];

516 
°rög
 
	gourMesßgeTabÀ
[
Evít
::
La°Ty≥
];

519 
°rög
 
	gourSDLM≠pög
[
SDLK_LAST
];

522 
SãŒa_Joy°ick
 
	gourJoy°icks
[
kNumJoy°icks
];

525 
Sèã
 
	gmySèã
;

528 
uI¡32
 
	gmyLSSèã
;

531 
boﬁ
 
	gmyPau£Fœg
;

534 
boﬁ
 
	gmyQuôFœg
;

537 
boﬁ
 
	gmyGøbMou£Fœg
;

540 
boﬁ
 
	gmyU£LaunchîFœg
;

543 
boﬁ
 
	gmyEmuœãMou£Fœg
;

546 
boﬁ
 
	gmyFryögFœg
;

549 
I¡8
 
	gmyPaddÀMode
;

552 
	gmyPaddÀThªshﬁd
;

555 
JoyMou£
 
	gmyPaddÀ
[4];

558 
	gC⁄åﬁÀr
::
Ty≥
 
myC⁄åﬁÀr
[2];

561 
A˘i⁄Li°
 
	gourA˘i⁄Li°
[
kA˘i⁄Li°Size
];

564 c⁄° 
	gEvít
::
Ty≥
 
PaddÀ_Resi°™˚
[4];

567 c⁄° 
	gEvít
::
Ty≥
 
PaddÀ_Buâ⁄
[4];

570 c⁄° 
	gEvít
::
Ty≥
 
SA_Axis
[2][2][3];

571 c⁄° 
	gEvít
::
Ty≥
 
SA_Buâ⁄
[2][2][3];

572 c⁄° 
	gEvít
::
Ty≥
 
SA_DrivögVÆue
[2];

	@emucore/EventStreamer.cpp

19 
	~"b•f.hxx
"

21 
	~"OSy°em.hxx
"

22 
	~"Evít.hxx
"

23 
	~"EvítH™dÀr.hxx
"

24 
	~"EvítSåómî.hxx
"

25 
	~"Sy°em.hxx
"

28 
	gEvítSåómî
::
	$EvítSåómî
(
OSy°em
* 
osy°em
)

29 : 
	`myOSy°em
(
osy°em
),

30 
	`myEvítWrôeFœg
(
Ál£
),

31 
	`myEvítRódFœg
(
Ál£
),

32 
	`myFømeCou¡î
(-1),

33 
	$myEvítPos
(0)

35 
	}
}

38 
	gEvítSåómî
::~
	$EvítSåómî
()

40 
	`°›Rec‹dög
();

42 
myEvítHi°‹y
.
	`˛ór
();

43 
mySåómRódî
.
	`˛o£
();

44 
mySåómWrôî
.
	`˛o£
();

45 
	}
}

48 
	gEvítSåómî
::
	$ª£t
()

51 
myEvítWrôeFœg
 = 
Ál£
;

52 
myEvítRódFœg
 = 
Ál£
;

53 
myFømeCou¡î
 = -1;

54 
myEvítPos
 = 0;

55 
	}
}

58 
boﬁ
 
	gEvítSåómî
::
	$°¨tRec‹dög
()

60 
°rög
 
evítfûe
 = "test.inp";

61 if(!
mySåómWrôî
.
	`›í
(
evítfûe
))

62  
Ál£
;

65 
°rög
 
md5
 = 
myOSy°em
->
	`c⁄sﬁe
().
	`¥›îtõs
().
	`gë
(
C¨åidge_MD5
);

66 if(!
myOSy°em
->
	`c⁄sﬁe
().
	`sy°em
().
	`ßveSèã
(
md5
, 
mySåómWrôî
))

67  
Ál£
;

68 
myEvítHi°‹y
.
	`˛ór
();

70 
	`ª£t
();

71  
myEvítWrôeFœg
 = 
åue
;

72 
	}
}

75 
boﬁ
 
	gEvítSåómî
::
	$°›Rec‹dög
()

77 if(!
mySåómWrôî
.
	`isO≥n
(Ë|| !
myEvítWrôeFœg
)

78  
Ál£
;

81 
size
 = 
myEvítHi°‹y
.
	`size
();

83 
__åy


85 
mySåómWrôî
.
	`putSåög
("EventStream");

86 
mySåómWrôî
.
	`putI¡
(
size
);

87 
i
 = 0; i < 
size
; ++i)

88 
mySåómWrôî
.
	`putI¡
(
myEvítHi°‹y
[
i
]);

91 
	`ˇtch
(*
msg
)

93 
˚º
 << 
msg
 << 
ídl
;

94  
Ál£
;

97 
	`__ˇtch
(...)

99 
˚º
 << "Eº‹ savögÉvít°ªam" << 
ídl
;

100  
Ál£
;

103 
mySåómWrôî
.
	`˛o£
();

104  
åue
;

105 
	}
}

108 
boﬁ
 
	gEvítSåómî
::
	$lﬂdRec‹dög
()

110 
˚º
 << "EventStreamer::loadRecording()\n";

111 
°rög
 
evítfûe
 = "test.inp";

112 if(!
mySåómRódî
.
	`›í
(
evítfûe
))

113  
Ál£
;

116 
°rög
 
md5
 = 
myOSy°em
->
	`c⁄sﬁe
().
	`¥›îtõs
().
	`gë
(
C¨åidge_MD5
);

117 if(!
myOSy°em
->
	`c⁄sﬁe
().
	`sy°em
().
	`lﬂdSèã
(
md5
, 
mySåómRódî
))

118  
Ál£
;

120 
__åy


122 if(
mySåómRódî
.
	`gëSåög
() != "EventStream")

123  
Ál£
;

126 
myEvítHi°‹y
.
	`˛ór
();

127 
size
 = 
mySåómRódî
.
	`gëI¡
();

128 
i
 = 0; i < 
size
; ++i)

129 
myEvítHi°‹y
.
	`push_back
(
mySåómRódî
.
	`gëI¡
());

132 
	`ˇtch
(*
msg
)

134 
˚º
 << 
msg
 << 
ídl
;

135  
Ál£
;

138 
	`__ˇtch
(...)

140 
˚º
 << "Eº‹ÜﬂdögÉvít°ªam" << 
ídl
;

141  
Ál£
;

144 
	`ª£t
();

145 
myEvítRódFœg
 = 
myEvítHi°‹y
.
	`size
() > 0;

147  
åue
;

148 
	}
}

151 
	gEvítSåómî
::
	$addEvít
(
ty≥
, 
vÆue
)

153 if(
myEvítWrôeFœg
)

155 
myEvítHi°‹y
.
	`push_back
(
ty≥
);

156 
myEvítHi°‹y
.
	`push_back
(
vÆue
);

158 
	}
}

161 
boﬁ
 
	gEvítSåómî
::
	$pﬁlEvít
(& 
ty≥
, & 
vÆue
)

163 if(!
myEvítRódFœg
)

164  
Ál£
;

166 
boﬁ
 
°©us
 = 
Ál£
;

170 ++
myFømeCou¡î
;

171 if(
myFømeCou¡î
 >= 0)

173 
fú°
 = 
myEvítHi°‹y
[
myEvítPos
++];

174 if(
fú°
 < 0)

176 
myFømeCou¡î
 = 
fú°
;

177 
˚º
 << "waô " << -
myFømeCou¡î
 << " frames\n";

179 if(
myEvítPos
 < ()
myEvítHi°‹y
.
	`size
())

181 
ty≥
 = 
fú°
;

182 
vÆue
 = 
myEvítHi°‹y
[
myEvítPos
++];

183 
˚º
 << "ty≥ = " << 
ty≥
 << ", vÆuê" << 
vÆue
 << 
ídl
;

184 
°©us
 = 
åue
;

188 
myEvítRódFœg
 = 
myEvítPos
 < ()
myEvítHi°‹y
.
	`size
() - 2;

189  
°©us
;

190 
	}
}

193 
	gEvítSåómî
::
	$√xtFøme
()

195 if(
myEvítWrôeFœg
)

197 
idx
 = 
myEvítHi°‹y
.
	`size
() - 1;

198 if(
idx
 >0 && 
myEvítHi°‹y
[idx] < 0)

199 --
myEvítHi°‹y
[
idx
];

201 
myEvítHi°‹y
.
	`push_back
(-1);

203 
	}
}

	@emucore/EventStreamer.hxx

19 #i‚de‡
EVENTSTREAMER_HXX


20 
	#EVENTSTREAMER_HXX


	)

22 
	~"Aºay.hxx
"

23 
	~"De£rülizî.hxx
"

24 
	~"Sîülizî.hxx
"

26 
˛ass
 
	gOSy°em
;

53 ˛as†
	cEvítSåómî


55 
	mpublic
:

59 
EvítSåómî
(
OSy°em
* 
osy°em
);

64 
	mvútuÆ
 ~
EvítSåómî
();

66 
	mpublic
:

70 
boﬁ
 
°¨tRec‹dög
();

75 
boﬁ
 
°›Rec‹dög
();

80 
boﬁ
 
lﬂdRec‹dög
();

85 
addEvít
(
ty≥
, 
vÆue
);

90 
boﬁ
 
pﬁlEvít
(& 
ty≥
, & 
vÆue
);

95 
boﬁ
 
	$isRec‹dög
(Ë{  
myEvítWrôeFœg
; }

100 
	`√xtFøme
();

105 
	`ª£t
();

107 
¥iv©e
:

109 
¥iv©e
:

111 
OSy°em
* 
myOSy°em
;

114 
boﬁ
 
myEvítWrôeFœg
;

115 
boﬁ
 
myEvítRódFœg
;

118 
myFømeCou¡î
;

121 
myEvítPos
;

124 
I¡Aºay
 
myEvítHi°‹y
;

127 
Sîülizî
 
mySåómWrôî
;

128 
De£rülizî
 
mySåómRódî
;

129 
	}
};

	@emucore/FSNode.cpp

22 
	~"b•f.hxx
"

23 
	~"GuiUtûs.hxx
"

24 
	~"FSNode.hxx
"

27 
	gFSLi°
::
	$s‹t
()

30 
I¡32
 
i
 = 0; i < 
_size
-1; i++)

32 
I¡32
 
mö
 = 
i
;

33 
I¡32
 
j
 = 
i
+1; j < 
_size
; j++)

35 i‡(
_d©a
[
j
] < _d©a[
mö
])

36 
mö
 = 
j
;

38 i‡(
mö
 !
i
)

39 
	`SWAP
(
_d©a
[
mö
], _d©a[
i
]);

41 
	}
}

44 
Fûesy°emNode
 
	gAb°ø˘Fûesy°emNode
::
	$wøp
(
Ab°ø˘Fûesy°emNode
 *
node
)

46 
Fûesy°emNode
 
wøµî
;

47 
wøµî
.
_ªÆNode
 = 
node
;

49  
wøµî
;

50 
	}
}

53 
	gFûesy°emNode
::
	$Fûesy°emNode
()

55 
_ªÆNode
 = 
	`gëRoŸ
();

56 
_ªfCou¡
 = 
√w
 (1);

57 
	}
}

60 
	gFûesy°emNode
::
	$Fûesy°emNode
(c⁄° 
Fûesy°emNode
 &
node
)

61 : 
	$Ab°ø˘Fûesy°emNode
()

63 
_ªÆNode
 = 
node
._realNode;

64 
_ªfCou¡
 = 
node
._refCount;

65 ++(*
_ªfCou¡
);

66 
	}
}

69 
	gFûesy°emNode
::
	$Fûesy°emNode
(c⁄° 
°rög
& 
p
)

71 
_ªÆNode
 = 
	`gëNodeF‹P©h
(
p
);

72 
_ªfCou¡
 = 
√w
 (1);

73 
	}
}

76 
	gFûesy°emNode
::~
	$Fûesy°emNode
()

78 
	`decRefCou¡
();

79 
	}
}

82 
	gFûesy°emNode
::
	$decRefCou¡
()

84 --(*
_ªfCou¡
);

85 i‡(*
_ªfCou¡
 <= 0)

87 
dñëe
 
_ªfCou¡
;

88 
dñëe
 
_ªÆNode
;

90 
	}
}

93 
	gFûesy°emNode
 &Fûesy°emNode::
›î©‹
 =(c⁄° 
Fûesy°emNode
 &
node
)

95 ++(*
node
.
_ªfCou¡
);

97 
decRefCou¡
();

99 
	g_ªÆNode
 = 
node
.
_ªÆNode
;

100 
	g_ªfCou¡
 = 
node
.
_ªfCou¡
;

102  *
	gthis
;

106 
Fûesy°emNode
 
	gFûesy°emNode
::
	$gëP¨ít
() const

108 
Ab°ø˘Fûesy°emNode
 *
node
 = 
_ªÆNode
->
	`∑ª¡
();

110 if(
node
 == 0)

111  *
this
;

113  
Ab°ø˘Fûesy°emNode
::
	`wøp
(
node
);

114 
	}
}

117 
boﬁ
 
	gFûesy°emNode
::
	$hasP¨ít
() const

119  
_ªÆNode
->
	`∑ª¡
() != 0;

120 
	}
}

	@emucore/FSNode.hxx

22 #i‚de‡
FS_NODE_HXX


23 
	#FS_NODE_HXX


	)

25 
	~<Æg‹ôhm
>

57 
	~"Aºay.hxx
"

59 
˛ass
 
	gFûesy°emNode
;

64 
˛ass
 
	gFSLi°
 : 
public
 
Comm⁄
::
Aºay
<
Fûesy°emNode
>

66 
public
:

67 
s‹t
();

74 ˛as†
	cAb°ø˘Fûesy°emNode


76 
	mpublic
:

81 
kLi°FûesO∆y
 = 1,

82 
	mkLi°Dúe˘‹õsO∆y
 = 2,

83 
	mkLi°AŒ
 = 3

84 } 
	tLi°Mode
;

86 
	gvútuÆ
 ~
	$Ab°ø˘Fûesy°emNode
(Ë{
	}
}

93 
vútuÆ
 
°rög
 
	$di•œyName
() const = 0;

98 
vútuÆ
 
boﬁ
 
	$isVÆid
() const = 0;

103 
vútuÆ
 
boﬁ
 
	$isDúe˘‹y
() const = 0;

108 
vútuÆ
 
°rög
 
	$∑th
() const = 0;

114 
vútuÆ
 
FSLi°
 
	$li°Dú
(
Li°Mode
 
mode
 = 
kLi°Dúe˘‹õsO∆y
) const = 0;

119 
vútuÆ
 
boﬁ
 
›î©‹
< (c⁄° 
Ab°ø˘Fûesy°emNode
& 
node
) const

121 
°rög
 
fú°
 = 
	`di•œyName
();

122 
°rög
 
£c⁄d
 = 
node
.
	`di•œyName
();

123 
	`å™sf‹m
(
fú°
.
	`begö
(), fú°.
	`íd
(), fú°.begö(), ((*)()Ë
tﬁowî
);

124 
	`å™sf‹m
(
£c⁄d
.
	`begö
(), sec⁄d.
	`íd
(), sec⁄d.begö(), ((*)()Ë
tﬁowî
);

125  
fú°
 < 
£c⁄d
;

126 
	}
}

131 
boﬁ
 
fûeExi°s
(c⁄° 
°rög
& 
∑th
);

136 
boﬁ
 
dúExi°s
(c⁄° 
°rög
& 
∑th
);

141 
boﬁ
 
makeDú
(c⁄° 
°rög
& 
∑th
);

146 
°rög
 
modTime
(c⁄° såög& 
∑th
);

153 
	g¥Ÿe˘ed
:

154 
‰õnd
 
˛ass
 
Fûesy°emNode
;

160 
vútuÆ
 
Ab°ø˘Fûesy°emNode
 *
	$∑ª¡
() const = 0;

170 
Fûesy°emNode
 
	`wøp
(
Ab°ø˘Fûesy°emNode
 *
node
);

171 
	}
};

174 ˛as†
	cFûesy°emNode
 : 
public
 
Ab°ø˘Fûesy°emNode


176 
‰õnd
 
˛ass
 
Ab°ø˘Fûesy°emNode
;

178 
	mpublic
:

179 
Fûesy°emNode
();

180 
Fûesy°emNode
(c⁄° Fûesy°emNode& 
node
);

181 
Fûesy°emNode
(c⁄° 
°rög
& 
∑th
);

182 ~
Fûesy°emNode
();

184 
	mFûesy°emNode
 &
	m›î©‹
 =(c⁄° 
Fûesy°emNode
 &
node
);

186 
Fûesy°emNode
 
	$gëP¨ít
() const;

187 
boﬁ
 
	$hasP¨ít
() const;

189 
vútuÆ
 
°rög
 
	$di•œyName
(Ëc⁄° {  
_ªÆNode
->
	`di•œyName
(); }

190 
vútuÆ
 
boﬁ
 
	$isVÆid
(Ëc⁄° {  
_ªÆNode
->
	`isVÆid
(); 
	}
}

191 
vútuÆ
 
boﬁ
 
	$isDúe˘‹y
(Ëc⁄° {  
_ªÆNode
->
	`isDúe˘‹y
(); 
	}
}

192 
vútuÆ
 
°rög
 
	$∑th
(Ëc⁄° {  
_ªÆNode
->
	`∑th
(); 
	}
}

194 
vútuÆ
 
FSLi°
 
	$li°Dú
(
Li°Mode
 
mode
 = 
kLi°Dúe˘‹õsO∆y
) const

195 {  
_ªÆNode
->
	`li°Dú
(
mode
); 
	}
}

197 
	g¥Ÿe˘ed
:

198 
decRefCou¡
();

200 
vútuÆ
 
Ab°ø˘Fûesy°emNode
* 
	$∑ª¡
(Ëc⁄° {  0; 
	}
}

202 
	g¥iv©e
:

203 
Ab°ø˘Fûesy°emNode
 *
_ªÆNode
;

204 *
	g_ªfCou¡
;

212 
Ab°ø˘Fûesy°emNode
* 
gëRoŸ
();

220 
Ab°ø˘Fûesy°emNode
* 
gëNodeF‹P©h
(c⁄° 
°rög
& 
∑th
);

	@emucore/FrameBuffer.cpp

19 
	~<s°ªam
>

20 
	~<time.h
>

22 
	~"b•f.hxx
"

23 
	~"C⁄sﬁe.hxx
"

24 
	~"Evít.hxx
"

25 
	~"EvítH™dÀr.hxx
"

26 
	~"Sëtögs.hxx
"

27 
	~"MedüSrc.hxx
"

28 
	~"FømeBuf„r.hxx
"

30 
	~"F⁄t.hxx
"

32 
	~"GuiUtûs.hxx
"

34 
	~"Míu.hxx
"

35 
	~"Comm™dMíu.hxx
"

36 
	~"Launchî.hxx
"

38 
	~"OSy°em.hxx
"

39 
	~"p•di•œy.h
"

41 #ifde‡
DEVELOPER_SUPPORT


42 
	~"Debuggî.hxx
"

45 #i‡
deföed
(
OS2
)

46 
	#INCL_WIN


	)

47 
	~<os2emx.h
>

50 
	~"Aèri.h
"

51 
	~"p•_sdl.h
"

52 
	~"p•_kbd.h
"

53 
	~"p•_d™zeff.h
"

55 
	gFømeBuf„r
::
	$FømeBuf„r
(
OSy°em
* 
osy°em
)

56 : 
	`myOSy°em
(
osy°em
),

57 
	`myS¸ìn
(0),

58 
	`theZoomLevñ
(2),

59 
	`theMaxZoomLevñ
(2),

60 
	`theA•e˘R©io
(1.0),

61 
	`theRedøwTIAIndiˇt‹
(
åue
),

62 
	`myU£Pho•h‹
(
Ál£
),

63 
	`myPho•h‹BÀnd
(77),

64 
	$myFømeR©e
(0)

66 
myBa£Dim
.
x
 = myBa£Dim.
y
 = myBa£Dim.
w
 = myBa£Dim.
h
 = 0;

67 
myImageDim
 = 
myS¸ìnDim
 = 
myDeskt›Dim
 = 
myBa£Dim
;

68 
	}
}

71 
	gFømeBuf„r
::~
	$FømeBuf„r
()

73 
	}
}

76 
FømeBuf„r
::
	$öôülize
(c⁄° 
°rög
& 
tôÀ
, 
uI¡32
 
width
, uI¡32 
height
,

77 
boﬁ
 
u£A•e˘
)

79 
boﬁ
 
isAÃódyInôülized
 = (
	`SDL_WasInô
(
SDL_INIT_VIDEO
) & SDL_INIT_VIDEO) > 0;

81 
myBa£Dim
.
w
 = (
uI¡16
Ë
width
;

82 
myBa£Dim
.
h
 = (
uI¡16
Ë
height
;

83 
myFømeR©e
 = 
myOSy°em
->
	`‰ameR©e
();

86 if(!
isAÃódyInôülized
)

88 
Uöt32
 
öôÊags
 = 
SDL_INIT_VIDEO
 | 
SDL_INIT_TIMER
;

90 if(
	`SDL_Inô
(
öôÊags
) < 0)

93 
	`£tWödowIc⁄
();

94 
	`˛s
();

98 
dwidth
 = 0, 
dheight
 = 0;

99 #i‡
	`deföed
(
OS2
)

100 
myDeskt›Dim
.
w
 = 
	`WöQuîySysVÆue
(
HWND_DESKTOP
, 
SV_CXSCREEN
);

101 
myDeskt›Dim
.
h
 = 
	`WöQuîySysVÆue
(
HWND_DESKTOP
, 
SV_CYSCREEN
);

103 
myOSy°em
->
	`gëS¸ìnDimísi⁄s
(
dwidth
, 
dheight
);

104 
myDeskt›Dim
.
w
 = 
dwidth
; myDeskt›Dim.
h
 = 
dheight
;

108 
mySDLFœgs
 = 
myOSy°em
->
	`£âögs
().
	`gëBoﬁ
("fuŒs¸ìn"Ë? 
SDL_FULLSCREEN
 : 0;

111 
	`£tWödowTôÀ
(
tôÀ
);

114 
theA•e˘R©io
 = 1.0;

115 if(
u£A•e˘
)

116 
	`£tA•e˘R©io
();

119 
theMaxZoomLevñ
 = 
	`maxWödowSizeF‹S¸ìn
();

122 if((
uI¡32
)
myOSy°em
->
	`£âögs
().
	`gëI¡
("zoom"Ë> 
theMaxZoomLevñ
)

123 
theZoomLevñ
 = 
theMaxZoomLevñ
;

125 
theZoomLevñ
 = 
myOSy°em
->
	`£âögs
().
	`gëI¡
("zoom");

128 
	`öôSubsy°em
();

131 
myOSy°em
->
	`evítH™dÀr
().
	`ª‰eshDi•œy
();

134 
i
 = 0; i < 
kNumCﬁ‹s
-256; i++)

135 
myDefPÆëã
[
i
+256] = 
	`m≠RGB
(
ourGUICﬁ‹s
[i][0], ourGUIColors[i][1], ourGUIColors[i][2]);

139 
	`SDL_E«bÀUNICODE
(1);

142 
myMesßge
.
cou¡î
 = 0;

144 
myU£DútyRe˘s
 = 
myOSy°em
->
	`£âögs
().
	`gëBoﬁ
("dirtyrects");

145 
	}
}

148 
	$©¨i_synchr⁄ize
(
uI¡32
 
‰amî©e
)

150 #i‚de‡
LINUX_MODE


151 
u32
 
√xt˛ock
 = 1;

153 i‡(
√xt˛ock
) {

154 
u32
 
cur˛ock
;

156 
cur˛ock
 = 
	`˛ock
();

157 } 
cur˛ock
 < 
√xt˛ock
);

159 
√xt˛ock
 = 
cur˛ock
 + (
u32
)(()
CLK_TCK
 * 60.0 / (
ATARI
.
©¨i_•ìd_limôî
 * 
‰amî©e
));

162 
	}
}

165 
	$©¨i_upd©e_Âs
()

167 
u32
 
√xt_£c_˛ock
 = 0;

168 
u32
 
cur_num_‰ame
 = 0;

169 
cur_num_‰ame
++;

170 
u32
 
cur˛ock
 = 
	`SDL_GëTicks
();

171 i‡(
cur˛ock
 > 
√xt_£c_˛ock
) {

172 
√xt_£c_˛ock
 = 
cur˛ock
 + 1000;

173 
ATARI
.
©¨i_cuºít_Âs
 = 
cur_num_‰ame
;

174 
cur_num_‰ame
 = 0;

176 
	}
}

178 "C" 
p•_kbd_is_d™zeff_mode
();

179 "C" 
p•_s¸ìnshŸ_mode
;

182 
	$p•_©¨i_waô_vsync
()

184 #i‚de‡
LINUX_MODE


185 
loc_pv
 = 0;

186 
cv
 = 
	`s˚Di•œyGëVcou¡
();

187 i‡(
loc_pv
 =
cv
) {

188 
	`s˚Di•œyWaôVbœnkCB
();

190 
loc_pv
 = 
	`s˚Di•œyGëVcou¡
();

192 
	}
}

195 
	gFømeBuf„r
::
	$upd©e
()

199 
	`¥eFømeUpd©e
();

201 
	`p•_upd©e_keys
();

207 
myOSy°em
->
	`evítH™dÀr
().
	`°©e
())

209 
EvítH™dÀr
::
S_EMULATE
:

211 
boﬁ
 
medüSour˚Ch™ged
 = 
Ál£
;

214 if(!
myOSy°em
->
	`evítH™dÀr
().
	`isPau£d
())

216 
myOSy°em
->
	`c⁄sﬁe
().
	`medüSour˚
().
	`upd©e
();

217 if(
myOSy°em
->
	`evítH™dÀr
().
	`‰yög
())

218 
myOSy°em
->
	`c⁄sﬁe
().
	`‰y
();

219 
medüSour˚Ch™ged
 = 
åue
;

223 if(
medüSour˚Ch™ged
 || 
theRedøwTIAIndiˇt‹
)

224 
	`døwMedüSour˚
();

227 if(
myMesßge
.
cou¡î
 > 0 && !
myOSy°em
->
	`evítH™dÀr
().
	`isPau£d
())

228 
	`døwMesßge
();

233 
EvítH™dÀr
::
S_MENU
:

236 if(
theRedøwTIAIndiˇt‹
)

237 
	`døwMedüSour˚
();

239 
myOSy°em
->
	`míu
().
	`døw
();

243 
EvítH™dÀr
::
S_CMDMENU
:

246 if(
theRedøwTIAIndiˇt‹
)

247 
	`døwMedüSour˚
();

249 
myOSy°em
->
	`comm™dMíu
().
	`døw
();

252 if(
myMesßge
.
cou¡î
 > 0 && !
myOSy°em
->
	`evítH™dÀr
().
	`isPau£d
())

253 
	`døwMesßge
();

257 
EvítH™dÀr
::
S_LAUNCHER
:

259 
myOSy°em
->
	`œunchî
().
	`døw
();

262 if(
myMesßge
.
cou¡î
 > 0)

263 
	`døwMesßge
();

268 #ifde‡
DEVELOPER_SUPPORT


269 
EvítH™dÀr
::
S_DEBUGGER
:

271 
myOSy°em
->
	`debuggî
().
	`døw
();

283 
boﬁ
 
medüSour˚Ch™ged
 = 
Ál£
;

284 if(!
myOSy°em
->
	`evítH™dÀr
().
	`isPau£d
())

287 
myOSy°em
->
	`c⁄sﬁe
().
	`medüSour˚
().
	`upd©e
();

288 if(
myOSy°em
->
	`evítH™dÀr
().
	`‰yög
()) {

289 
myOSy°em
->
	`c⁄sﬁe
().
	`‰y
();

292 
medüSour˚Ch™ged
 = 
åue
;

298 if(
medüSour˚Ch™ged
 || 
theRedøwTIAIndiˇt‹
)

299 
	`døwMedüSour˚
();

303 i‡(
ATARI
.
p•_skù_cur_‰ame
 <= 0) {

305 
ATARI
.
p•_skù_cur_‰ame
 = ATARI.
p•_skù_max_‰ame
;

307 i‡(
ATARI
.
©¨i_ªndî_mode
 =
ATARI_RENDER_NORMAL
Ë
	`døwMedüSour˚N‹mÆ
();

309 i‡(
ATARI
.
©¨i_ªndî_mode
 =
ATARI_RENDER_X125
 ) 
	`døwMedüSour˚X125
();

311 i‡(
ATARI
.
©¨i_ªndî_mode
 =
ATARI_RENDER_MAX
 ) 
	`døwMedüSour˚Max
();

313 i‡(
ATARI
.
©¨i_•ìd_limôî
) {

314 
	`©¨i_synchr⁄ize
(
myFømeR©e
);

317 i‡(
ATARI
.
©¨i_võw_Âs
) {

318 
	`©¨i_upd©e_Âs
();

321 i‡(
	`p•_kbd_is_d™zeff_mode
()) {

323 
	`s˚Di•œyWaôVbœnkSèπ
();

325 
	`d™zeff_moveTo
(-165, -50);

326 
	`d™zeff_ªndî
();

329 i‡(
ATARI
.
©¨i_võw_Âs
) {

330 
buf„r
[32];

331 
	`•rötf
(
buf„r
, "%3d", ()
ATARI
.
©¨i_cuºít_Âs
);

332 
	`p•_sdl_fûl_¥öt
(0, 0, 
buf„r
, 0xffffff, 0 );

335 i‡(
ATARI
.
p•_di•œy_Ã
) {

336 
	`p•_kbd_di•œy_a˘ive_m≠pög
();

338 i‡(
ATARI
.
©¨i_vsync
) {

339 
	`p•_©¨i_waô_vsync
();

341 
	`p•_sdl_Êù
();

343 i‡(
p•_s¸ìnshŸ_mode
) {

344 
p•_s¸ìnshŸ_mode
--;

345 i‡(
p•_s¸ìnshŸ_mode
 <= 0) {

346 
	`p•_sdl_ßve_s¸ìnshŸ
();

347 
p•_s¸ìnshŸ_mode
 = 0;

350 } i‡(
ATARI
.
p•_skù_max_‰ame
) {

351 
ATARI
.
p•_skù_cur_‰ame
--;

355 if(
myMesßgeTime
 > 0 && !
myPau£Sètus
)

356 
	`døwMesßge
();

362 
	`po°FømeUpd©e
();

367 
theRedøwTIAIndiˇt‹
 = 
Ál£
;

369 
	}
}

372 
	gFømeBuf„r
::
	$showMesßge
(c⁄° 
°rög
& 
mesßge
, 
MesßgePosôi⁄
 
posôi⁄
,

373 
cﬁ‹
)

377 if(
myMesßge
.
cou¡î
 > 0)

379 
theRedøwTIAIndiˇt‹
 = 
åue
;

380 
myOSy°em
->
	`evítH™dÀr
().
	`ª‰eshDi•œy
();

384 
myMesßge
.
ãxt
 = 
mesßge
;

385 
myMesßge
.
cou¡î
 = 
myFømeR©e
 << 1;

386 
myMesßge
.
cﬁ‹
 = color;

388 
myMesßge
.
w
 = 
myOSy°em
->
	`f⁄t
().
	`gëSåögWidth
(myMesßge.
ãxt
) + 10;

389 
myMesßge
.
h
 = 
myOSy°em
->
	`f⁄t
().
	`gëF⁄tHeight
() + 8;

391 
posôi⁄
)

393 
kT›Le·
:

394 
myMesßge
.
x
 = 5;

395 
myMesßge
.
y
 = 5;

398 
kT›Cíãr
:

399 
myMesßge
.
x
 = (
myBa£Dim
.
w
 >> 1) - (myMessage.w >> 1);

400 
myMesßge
.
y
 = 5;

403 
kT›Right
:

404 
myMesßge
.
x
 = 
myBa£Dim
.
w
 - myMessage.w - 5;

405 
myMesßge
.
y
 = 5;

408 
kMiddÀLe·
:

409 
myMesßge
.
x
 = 5;

410 
myMesßge
.
y
 = (
myBa£Dim
.
h
 >> 1) - (myMessage.h >> 1);

413 
kMiddÀCíãr
:

414 
myMesßge
.
x
 = (
myBa£Dim
.
w
 >> 1) - (myMessage.w >> 1);

415 
myMesßge
.
y
 = (
myBa£Dim
.
h
 >> 1) - (myMessage.h >> 1);

418 
kMiddÀRight
:

419 
myMesßge
.
x
 = 
myBa£Dim
.
w
 - myMessage.w - 5;

420 
myMesßge
.
y
 = (
myBa£Dim
.
h
 >> 1) - (myMessage.h >> 1);

423 
kBŸtomLe·
:

424 
myMesßge
.
x
 = 5;

425 
myMesßge
.
y
 = 
myBa£Dim
.
h
 - myMessage.h - 5;

428 
kBŸtomCíãr
:

429 
myMesßge
.
x
 = (
myBa£Dim
.
w
 >> 1) - (myMessage.w >> 1);

430 
myMesßge
.
y
 = 
myBa£Dim
.
h
 - myMessage.h - 5;

433 
kBŸtomRight
:

434 
myMesßge
.
x
 = 
myBa£Dim
.
w
 - myMessage.w - 5;

435 
myMesßge
.
y
 = 
myBa£Dim
.
h
 - myMessage.h - 5;

439 
	}
}

442 
	gFømeBuf„r
::
	$hideMesßge
()

445 if(
myMesßge
.
cou¡î
 > 0)

446 
myOSy°em
->
	`evítH™dÀr
().
	`ª‰eshDi•œy
();

447 
	}
}

450 
ölöe
 
	gFømeBuf„r
::
	$døwMesßge
()

454 
	`fûlRe˘
(
myMesßge
.
x
+1, myMesßge.
y
+2, myMesßge.
w
-2, myMesßge.
h
-4, 
kBGCﬁ‹
);

455 
	`box
(
myMesßge
.
x
, myMesßge.
y
+1, myMesßge.
w
, myMesßge.
h
-2, 
kCﬁ‹
, kColor);

456 
	`døwSåög
(&
myOSy°em
->
	`f⁄t
(), 
myMesßge
.
ãxt
, myMesßge.
x
+1, myMesßge.
y
+4,

457 
myMesßge
.
w
, myMesßge.
cﬁ‹
, 
kTextAlignCíãr
);

458 
myMesßge
.
cou¡î
--;

462 if(
myMesßge
.
cou¡î
 == 0)

465 
myOSy°em
->
	`evítH™dÀr
().
	`ª‰eshDi•œy
(
åue
);

468 
	`addDútyRe˘
(
myMesßge
.
x
, myMesßge.
y
, myMesßge.
w
, myMesßge.
h
);

470 
	}
}

473 
	gFømeBuf„r
::
	$∑u£
(
boﬁ
 
°©us
)

475 if(&
myOSy°em
->
	`c⁄sﬁe
())

477 
	`íabÀPho•h‹
(
myOSy°em
->
	`c⁄sﬁe
().
	`¥›îtõs
().
	`gë
(
Di•œy_Pho•h‹
) == "YES");

478 
	`£tPÆëã
(
myOSy°em
->
	`c⁄sﬁe
().
	`medüSour˚
().
	`∑Àâe
());

480 
	}
}

483 
	gFømeBuf„r
::
	$£tPÆëã
(c⁄° 
uI¡32
* 
∑Àâe
)

485 
i
, 
j
;

488 
i
 = 0; i < 256; ++i)

490 
Uöt8
 
r
 = (Uöt8Ë((
∑Àâe
[
i
] & 0x00ff0000) >> 16);

491 
Uöt8
 
g
 = (Uöt8Ë((
∑Àâe
[
i
] & 0x0000ff00) >> 8);

492 
Uöt8
 
b
 = (Uöt8Ë(
∑Àâe
[
i
] & 0x000000ff);

494 
myDefPÆëã
[
i
] = 
	`m≠RGB
(
r
, 
g
, 
b
);

498 
i
 = 0; i < 256; ++i)

500 
j
 = 0; j < 256; ++j)

502 
uI¡8
 
ri
 = (uI¡8Ë((
∑Àâe
[
i
] & 0x00ff0000) >> 16);

503 
uI¡8
 
gi
 = (uI¡8Ë((
∑Àâe
[
i
] & 0x0000ff00) >> 8);

504 
uI¡8
 
bi
 = (uI¡8Ë(
∑Àâe
[
i
] & 0x000000ff);

505 
uI¡8
 
rj
 = (uI¡8Ë((
∑Àâe
[
j
] & 0x00ff0000) >> 16);

506 
uI¡8
 
gj
 = (uI¡8Ë((
∑Àâe
[
j
] & 0x0000ff00) >> 8);

507 
uI¡8
 
bj
 = (uI¡8Ë(
∑Àâe
[
j
] & 0x000000ff);

509 
Uöt8
 
r
 = (Uöt8Ë
	`gëPho•h‹
(
ri
, 
rj
);

510 
Uöt8
 
g
 = (Uöt8Ë
	`gëPho•h‹
(
gi
, 
gj
);

511 
Uöt8
 
b
 = (Uöt8Ë
	`gëPho•h‹
(
bi
, 
bj
);

513 
myAvgPÆëã
[
i
][
j
] = 
	`m≠RGB
(
r
, 
g
, 
b
);

517 
theRedøwTIAIndiˇt‹
 = 
åue
;

518 
	}
}

521 
	gFømeBuf„r
::
	$toggÀFuŒs¸ìn
()

523 
	`£tFuŒs¸ìn
(!
myOSy°em
->
	`£âögs
().
	`gëBoﬁ
("fullscreen"));

524 
	}
}

527 
	gFømeBuf„r
::
	$£tFuŒs¸ìn
(
boﬁ
 
íabÀ
)

530 
myOSy°em
->
	`£âögs
().
	`£tBoﬁ
("fuŒs¸ìn", 
íabÀ
);

532 if(
íabÀ
)

533 
mySDLFœgs
 |
SDL_FULLSCREEN
;

535 
mySDLFœgs
 &~
SDL_FULLSCREEN
;

537 if(!
	`¸óãS¸ìn
())

540 
myOSy°em
->
	`evítH™dÀr
().
	`ª‰eshDi•œy
();

542 
	`£tCurs‹Sèã
();

543 
	}
}

546 
	gFømeBuf„r
::
	$ªsize
(
size
, 
I¡8
 
zoom
)

548 
size
)

551 if(
myOSy°em
->
	`£âögs
().
	`gëBoﬁ
("fullscreen"))

553 if(
theZoomLevñ
 == 1)

554 
theZoomLevñ
 = 
theMaxZoomLevñ
;

556 
theZoomLevñ
--;

560 if(
myOSy°em
->
	`£âögs
().
	`gëBoﬁ
("fullscreen"))

562 if(
theZoomLevñ
 =
theMaxZoomLevñ
)

563 
theZoomLevñ
 = 1;

565 
theZoomLevñ
++;

569 if(
zoom
 < 1)

570 
theZoomLevñ
 = 1;

571 if((
uI¡32
)
zoom
 > 
theMaxZoomLevñ
)

572 
theZoomLevñ
 = 
theMaxZoomLevñ
;

574 
theZoomLevñ
 = 
zoom
;

582 if(!
	`¸óãS¸ìn
())

585 
myOSy°em
->
	`evítH™dÀr
().
	`ª‰eshDi•œy
();

586 
	}
}

589 
	gFømeBuf„r
::
	$£tCurs‹Sèã
()

592 
boﬁ
 
isFuŒs¸ìn
 = 
myOSy°em
->
	`£âögs
().
	`gëBoﬁ
("fullscreen");

594 if(
isFuŒs¸ìn
)

595 
	`gøbMou£
(
åue
);

597 
	`gøbMou£
(
myOSy°em
->
	`£âögs
().
	`gëBoﬁ
("grabmouse"));

599 
myOSy°em
->
	`evítH™dÀr
().
	`°©e
())

601 
EvítH™dÀr
::
S_EMULATE
:

602 
	`showCurs‹
(
Ál£
);

606 
	`showCurs‹
(
åue
);

609 
	}
}

612 
	gFømeBuf„r
::
	$showCurs‹
(
boﬁ
 
show
)

615 if(
show
)

616 
	`SDL_ShowCurs‹
(
SDL_ENABLE
);

618 
	`SDL_ShowCurs‹
(
SDL_DISABLE
);

620 
	}
}

623 
	gFømeBuf„r
::
	$gøbMou£
(
boﬁ
 
gøb
)

626 if(
gøb
)

627 
	`SDL_WM_GøbI≈ut
(
SDL_GRAB_ON
);

629 
	`SDL_WM_GøbI≈ut
(
SDL_GRAB_OFF
);

631 
	}
}

634 
boﬁ
 
	gFømeBuf„r
::
	$fuŒS¸ìn
()

637  
myOSy°em
->
	`£âögs
().
	`gëBoﬁ
("fullscreen");

639 
	}
}

642 
uI¡32
 
	gFømeBuf„r
::
	$maxWödowSizeF‹S¸ìn
()

645 
uI¡32
 
sWidth
 = 
myDeskt›Dim
.
w
;

646 
uI¡32
 
sHeight
 = 
myDeskt›Dim
.
h
;

647 
uI¡32
 
mu…ùlõr
 = 10;

650 if(
sWidth
 =0 || 
sHeight
 == 0)

653 
boﬁ
 
found
 = 
Ál£
;

654 !
found
 && (
mu…ùlõr
 > 0))

657 
uI¡32
 
width
 = (uI¡32Ë(
myBa£Dim
.
w
 * 
mu…ùlõr
 * 
theA•e˘R©io
);

658 
uI¡32
 
height
 = 
myBa£Dim
.
h
 * 
mu…ùlõr
;

660 if((
width
 < 
sWidth
Ë&& (
height
 < 
sHeight
))

661 
found
 = 
åue
;

663 
mu…ùlõr
--;

666 if(
found
)

667  
mu…ùlõr
;

671 
	}
}

674 
	gFømeBuf„r
::
	$£tWödowTôÀ
(c⁄° 
°rög
& 
tôÀ
)

677 
	`SDL_WM_SëC≠ti⁄
(
tôÀ
.
	`c_°r
(), "stella");

679 
	}
}

682 
	gFømeBuf„r
::
	$£tWödowIc⁄
()

685 #i‚de‡
MAC_OSX


686 
	~"°ñœ.xpm
"

689 
uI¡32
 
w
, 
h
, 
ncﬁs
, 
nbyãs
;

690 
uI¡32
 
rgba
[256], 
ic⁄
[32 * 32];

691 
uI¡8
 
mask
[32][4];

693 
	`ssˇnf
(
°ñœ_ic⁄
[0], "%d %d %d %d", &
w
, &
h
, &
ncﬁs
, &
nbyãs
);

694 if((
w
 !32Ë|| (
h
 !32Ë|| (
ncﬁs
 > 255Ë|| (
nbyãs
 > 1))

696 
˚º
 << "ERROR: Couldn'tÜoadÅhe icon.\n";

700 
uI¡32
 
i
 = 0; i < 
ncﬁs
; i++)

702 
code
;

703 
cﬁ‹
[32];

704 
uI¡32
 
cﬁ
;

706 
	`ssˇnf
(
°ñœ_ic⁄
[1 + 
i
], "%¯¯%s", &
code
, 
cﬁ‹
);

707 if(!
	`°rcmp
(
cﬁ‹
, "None"))

708 
cﬁ
 = 0x00000000;

709 if(!
	`°rcmp
(
cﬁ‹
, "black"))

710 
cﬁ
 = 0xFF000000;

711 i‡(
cﬁ‹
[0] == '#')

713 
	`ssˇnf
(
cﬁ‹
 + 1, "%06x", &
cﬁ
);

714 
cﬁ
 |= 0xFF000000;

718 
˚º
 << "ERROR: Couldn'tÜoadÅhe icon.\n";

721 
rgba
[
code
] = 
cﬁ
;

724 
	`mem£t
(
mask
, 0, (mask));

725 
h
 = 0; h < 32; h++)

727 c⁄° * 
löe
 = 
°ñœ_ic⁄
[1 + 
ncﬁs
 + 
h
];

728 
w
 = 0; w < 32; w++)

730 
ic⁄
[
w
 + 32 * 
h
] = 
rgba
[()
löe
[w]];

731 if(
rgba
[()
löe
[
w
]] & 0xFF000000)

732 
mask
[
h
][
w
 >> 3] |= 1 << (7 - (w & 0x07));

736 
SDL_SurÁ˚
 *
surÁ˚
 = 
	`SDL_Cª©eRGBSurÁ˚From
(
ic⁄
, 32, 32, 32,

738 
	`SDL_WM_SëIc⁄
(
surÁ˚
, (*Ë
mask
);

739 
	`SDL_FªeSurÁ˚
(
surÁ˚
);

742 
	}
}

745 
	gFømeBuf„r
::
	$box
(
uI¡32
 
x
, uI¡32 
y
, uI¡32 
w
, uI¡32 
h
,

746 
cﬁ‹A
, 
cﬁ‹B
)

748 
	`hLöe
(
x
 + 1, 
y
, x + 
w
 - 2, 
cﬁ‹A
);

749 
	`hLöe
(
x
, 
y
 + 1, x + 
w
 - 1, 
cﬁ‹A
);

750 
	`vLöe
(
x
, 
y
 + 1, y + 
h
 - 2, 
cﬁ‹A
);

751 
	`vLöe
(
x
 + 1, 
y
, y + 
h
 - 1, 
cﬁ‹A
);

753 
	`hLöe
(
x
 + 1, 
y
 + 
h
 - 2, x + 
w
 - 1, 
cﬁ‹B
);

754 
	`hLöe
(
x
 + 1, 
y
 + 
h
 - 1, x + 
w
 - 2, 
cﬁ‹B
);

755 
	`vLöe
(
x
 + 
w
 - 1, 
y
 + 1, y + 
h
 - 2, 
cﬁ‹B
);

756 
	`vLöe
(
x
 + 
w
 - 2, 
y
 + 1, y + 
h
 - 1, 
cﬁ‹B
);

757 
	}
}

760 
	gFømeBuf„r
::
	$‰ameRe˘
(
uI¡32
 
x
, uI¡32 
y
, uI¡32 
w
, uI¡32 
h
,

761 
cﬁ‹
, 
FømeStyÀ
 
°yÀ
)

763 
°yÀ
)

765 
kSﬁidLöe
:

766 
	`hLöe
(
x
, 
y
, x + 
w
 - 1, 
cﬁ‹
);

767 
	`hLöe
(
x
, 
y
 + 
h
 - 1, x + 
w
 - 1, 
cﬁ‹
);

768 
	`vLöe
(
x
, 
y
, y + 
h
 - 1, 
cﬁ‹
);

769 
	`vLöe
(
x
 + 
w
 - 1, 
y
, y + 
h
 - 1, 
cﬁ‹
);

772 
kDashLöe
:

773 
i
, 
skù
, 
lwidth
 = 1;

775 
i
 = 
x
, 
skù
 = 1; i < x+
w
-1; i=i+
lwidth
+1, ++skip)

777 if(
skù
 % 2)

779 
	`hLöe
(
i
, 
y
, i + 
lwidth
, 
cﬁ‹
);

780 
	`hLöe
(
i
, 
y
 + 
h
 - 1, i + 
lwidth
, 
cﬁ‹
);

783 
i
 = 
y
, 
skù
 = 1; i < y+
h
-1; i=i+
lwidth
+1, ++skip)

785 if(
skù
 % 2)

787 
	`vLöe
(
x
, 
i
, i + 
lwidth
, 
cﬁ‹
);

788 
	`vLöe
(
x
 + 
w
 - 1, 
i
, i + 
lwidth
, 
cﬁ‹
);

793 
	}
}

797 
	gFømeBuf„r
::
	$døwSåög
(c⁄° 
GUI
::
F⁄t
* 
f⁄t
, c⁄° 
°rög
& 
s
,

798 
x
, 
y
, 
w
,

799 
cﬁ‹
, 
TextAlignmít
 
Æign
,

800 
dñèx
, 
boﬁ
 
u£EŒùsis
)

802 c⁄° 
À·X
 = 
x
, 
rightX
 = x + 
w
;

803 
i
;

804 
width
 = 
f⁄t
->
	`gëSåögWidth
(
s
);

805 
°rög
 
°r
;

807 if(
u£EŒùsis
 && 
width
 > 
w
)

815 c⁄° 
ñlùsisWidth
 = 
f⁄t
->
	`gëSåögWidth
("...");

818 c⁄° 
hÆfWidth
 = (
w
 - 
ñlùsisWidth
) / 2;

819 
w2
 = 0;

821 
i
 = 0; i < 
s
.
	`size
(); ++i)

823 
ch¨Width
 = 
f⁄t
->
	`gëCh¨Width
(
s
[
i
]);

824 if(
w2
 + 
ch¨Width
 > 
hÆfWidth
)

827 
w2
 +
ch¨Width
;

828 
°r
 +
s
[
i
];

833 
°r
 += "...";

841 
skù
 = 
width
 + 
ñlùsisWidth
 - 
w
;

842 ; 
i
 < 
s
.
	`size
(Ë&& 
skù
 > 0; ++i)

843 
skù
 -
f⁄t
->
	`gëCh¨Width
(
s
[
i
]);

846 ; 
i
 < 
s
.
	`size
(); ++i)

847 
°r
 +
s
[
i
];

849 
width
 = 
f⁄t
->
	`gëSåögWidth
(
°r
);

852 
°r
 = 
s
;

854 if(
Æign
 =
kTextAlignCíãr
)

855 
x
 = x + (
w
 - 
width
 - 1)/2;

856 if(
Æign
 =
kTextAlignRight
)

857 
x
 = x + 
w
 - 
width
;

859 
x
 +
dñèx
;

860 
i
 = 0; i < 
°r
.
	`size
(); ++i)

862 
w
 = 
f⁄t
->
	`gëCh¨Width
(
°r
[
i
]);

863 if(
x
+
w
 > 
rightX
)

865 if(
x
 >
À·X
)

866 
	`døwCh¨
(
f⁄t
, 
°r
[
i
], 
x
, 
y
, 
cﬁ‹
);

868 
x
 +
w
;

870 
	}
}

874 
uI¡8
 
	gFømeBuf„r
::
	$gëPho•h‹
(
uI¡8
 
c1
, uI¡8 
c2
)

876 if(
c2
 > 
c1
)

877 
	`SWAP
(
c1
, 
c2
);

879  ((
c1
 - 
c2
Ë* 
myPho•h‹BÀnd
)/100 + c2;

880 
	}
}

883 c⁄° 
uI¡8
 
	gFømeBuf„r
::
ourGUICﬁ‹s
[
kNumCﬁ‹s
-256][3] = {

889 #i‡!
deföed
(
GP2X
)

	@emucore/FrameBuffer.hxx

19 #i‚de‡
FRAMEBUFFER_HXX


20 
	#FRAMEBUFFER_HXX


	)

22 
	~<SDL.h
>

24 
	~"b•f.hxx
"

25 
	~"Evít.hxx
"

26 
	~"MedüSrc.hxx
"

28 
	~"F⁄t.hxx
"

30 
	~"GuiUtûs.hxx
"

32 
˛ass
 
	gOSy°em
;

33 
˛ass
 
	gC⁄sﬁe
;

36 
	eTextAlignmít
 {

37 
	mkTextAlignLe·
,

38 
	mkTextAlignCíãr
,

39 
	mkTextAlignRight


43 
	eFømeStyÀ
 {

44 
	mkSﬁidLöe
,

45 
	mkDashLöe


49 
	eBuf„rTy≥
 {

50 
	mkSo·Buf„r
,

51 
	mkGLBuf„r


55 
	eMesßgePosôi⁄
 {

56 
	mkT›Le·
,

57 
	mkT›Cíãr
,

58 
	mkT›Right
,

59 
	mkMiddÀLe·
,

60 
	mkMiddÀCíãr
,

61 
	mkMiddÀRight
,

62 
	mkBŸtomLe·
,

63 
	mkBŸtomCíãr
,

64 
	mkBŸtomRight


69 
	mkCﬁ‹
 = 256,

70 
	mkBGCﬁ‹
,

71 
	mkShadowCﬁ‹
,

72 
	mkHûôeCﬁ‹
,

73 
	mkTextCﬁ‹
,

74 
	mkTextCﬁ‹Hi
,

75 
	mkTextCﬁ‹Em
,

76 
	mkNumCﬁ‹s


89 ˛as†
	cFømeBuf„r


91 
	mpublic
:

95 
FømeBuf„r
(
OSy°em
* 
osy°em
);

100 
	mvútuÆ
 ~
FømeBuf„r
();

111 
öôülize
(c⁄° 
°rög
& 
tôÀ
, 
uI¡32
 
width
, uI¡32 
height
,

112 
boﬁ
 
a•e˘
 = 
åue
);

118 
upd©e
();

127 
showMesßge
(c⁄° 
°rög
& 
mesßge
,

128 
MesßgePosôi⁄
 
posôi⁄
 = 
kBŸtomCíãr
,

129 
cﬁ‹
 = 
kTextCﬁ‹
);

134 
hideMesßge
();

141 
ölöe
 c⁄° 
uI¡32
 
	$ba£Width
(Ë{  
myBa£Dim
.
w
; }

148 
ölöe
 c⁄° 
uI¡32
 
	$ba£Height
(Ë{  
myBa£Dim
.
h
; 
	}
}

156 
ölöe
 c⁄° 
uI¡32
 
	$imageWidth
(Ë{  
myImageDim
.
w
; 
	}
}

164 
ölöe
 c⁄° 
uI¡32
 
	$imageHeight
(Ë{  
myImageDim
.
h
; 
	}
}

171 
∑u£
(
boﬁ
 
°©us
);

177 
	$ª‰esh
(Ë{ 
theRedøwTIAIndiˇt‹
 = 
åue
; 
	}
}

183 
toggÀFuŒs¸ìn
();

191 
£tFuŒs¸ìn
(
boﬁ
 
íabÀ
);

202 
ªsize
(
size
, 
I¡8
 
zoom
 = 0);

208 
£tCurs‹Sèã
();

213 
showCurs‹
(
boﬁ
 
show
);

218 
gøbMou£
(
boﬁ
 
gøb
);

223 
boﬁ
 
fuŒS¸ìn
();

229 
vútuÆ
 
uI¡32
 
maxWödowSizeF‹S¸ìn
();

234 
uI¡32
 
	$zoomLevñ
(Ë{  
theZoomLevñ
; 
	}
}

239 
£tWödowTôÀ
(c⁄° 
°rög
& 
tôÀ
);

246 
vútuÆ
 
£tPÆëã
(c⁄° 
uI¡32
* 
∑Àâe
);

259 
box
(
uI¡32
 
x
, uI¡32 
y
, uI¡32 
w
, uI¡32 
h
,

260 
cﬁ‹A
, 
cﬁ‹B
);

272 
‰ameRe˘
(
uI¡32
 
x
, uI¡32 
y
, uI¡32 
w
, uI¡32 
h
,

273 
cﬁ‹
, 
FømeStyÀ
 
°yÀ
 = 
kSﬁidLöe
);

290 
døwSåög
(c⁄° 
GUI
::
F⁄t
* 
f⁄t
, c⁄° 
°rög
& 
°r
, 
x
, 
y
, 
w
,

291 
cﬁ‹
, 
TextAlignmít
 
Æign
 = 
kTextAlignLe·
,

292 
dñèx
 = 0, 
boﬁ
 
u£EŒùsis
 = 
åue
);

296 
	gpublic
:

304 
vútuÆ
 
boﬁ
 
öôSubsy°em
() = 0;

309 
vútuÆ
 
Buf„rTy≥
 
ty≥
() = 0;

314 
vútuÆ
 
£tA•e˘R©io
() = 0;

320 
vútuÆ
 
boﬁ
 
¸óãS¸ìn
() = 0;

325 
vútuÆ
 
toggÀFûãr
() = 0;

332 
vútuÆ
 
døwMedüSour˚
() = 0;

334 
vútuÆ
 
døwMedüSour˚N‹mÆ
() = 0;

335 
vútuÆ
 
døwMedüSour˚X125
() = 0;

336 
vútuÆ
 
døwMedüSour˚Max
() = 0;

337 
vútuÆ
 
døwMedüSour˚BlôSurÁ˚
() = 0;

343 
vútuÆ
 
¥eFømeUpd©e
() = 0;

348 
vútuÆ
 
po°FømeUpd©e
() = 0;

356 
vútuÆ
 
sˇ∆öe
(
uI¡32
 
row
, 
uI¡8
* 
d©a
) = 0;

365 
vútuÆ
 
Uöt32
 
m≠RGB
(
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
) = 0;

375 
vútuÆ
 
hLöe
(
uI¡32
 
x
, uI¡32 
y
, uI¡32 
x2
, 
cﬁ‹
) = 0;

385 
vútuÆ
 
vLöe
(
uI¡32
 
x
, uI¡32 
y
, uI¡32 
y2
, 
cﬁ‹
) = 0;

396 
vútuÆ
 
fûlRe˘
(
uI¡32
 
x
, uI¡32 
y
, uI¡32 
w
, uI¡32 
h
,

397 
cﬁ‹
) = 0;

409 
vútuÆ
 
døwCh¨
(c⁄° 
GUI
::
F⁄t
* 
f⁄t
, 
uI¡8
 
c
, 
uI¡32
 
x
, uI¡32 
y
,

410 
cﬁ‹
) = 0;

422 
vútuÆ
 
døwBôm≠
(
uI¡32
* 
bôm≠
, 
I¡32
 
x
, I¡32 
y
, 
cﬁ‹
,

423 
I¡32
 
h
 = 8) = 0;

432 
vútuÆ
 
å™¶©eCo‹ds
(
I¡32
* 
x
, I¡32* 
y
) = 0;

443 
vútuÆ
 
addDútyRe˘
(
uI¡32
 
x
, uI¡32 
y
, uI¡32 
w
, uI¡32 
h
) = 0;

448 
vútuÆ
 
íabÀPho•h‹
(
boﬁ
 
íabÀ
) = 0;

453 
vútuÆ
 
˛s
() = 0;

455 
	g¥Ÿe˘ed
:

457 
OSy°em
* 
myOSy°em
;

463 
SDL_Re˘
 
	gmyBa£Dim
;

466 
SDL_Re˘
 
	gmyImageDim
;

469 
SDL_Re˘
 
	gmyS¸ìnDim
;

472 
SDL_Re˘
 
	gmyDeskt›Dim
;

475 
SDL_SurÁ˚
* 
	gmyS¸ìn
;

478 
uI¡32
 
	gmySDLFœgs
;

481 
Uöt16
 
	gmyDefPÆëã
[256+
kNumCﬁ‹s
];

482 
Uöt16
 
	gmyAvgPÆëã
[256][256];

485 
uI¡32
 
	gtheZoomLevñ
;

488 
uI¡32
 
	gtheMaxZoomLevñ
;

491 
	gtheA•e˘R©io
;

494 
boﬁ
 
	gtheRedøwTIAIndiˇt‹
;

497 
boﬁ
 
	gmyU£DútyRe˘s
;

500 
boﬁ
 
	gmyU£Pho•h‹
;

503 
	gmyPho•h‹BÀnd
;

506 c⁄° 
uI¡8
 
	gourGUICﬁ‹s
[
kNumCﬁ‹s
-256][3];

508 
	g¥iv©e
:

512 
£tWödowIc⁄
();

517 
døwMesßge
();

527 
uI¡8
 
gëPho•h‹
(uI¡8 
c1
, uI¡8 
c2
);

529 
	g¥iv©e
:

531 
uI¡32
 
myFømeR©e
;

534 
	sMesßge
 {

535 
°rög
 
	gãxt
;

536 
	gcou¡î
;

537 
	gx
, 
	gy
, 
	gw
, 
	gh
;

538 
uI¡32
 
	gcﬁ‹
;

540 
Mesßge
 
	gmyMesßge
;

	@emucore/Joystick.cpp

19 
	~<as£π.h
>

20 
	~"Evít.hxx
"

21 
	~"Joy°ick.hxx
"

24 
	gJoy°ick
::
	$Joy°ick
(
Jack
 
jack
, c⁄° 
Evít
& 
evít
)

25 : 
	$C⁄åﬁÀr
(
jack
, 
evít
)

27 
myTy≥
 = 
C⁄åﬁÀr
::
Joy°ick
;

28 
	}
}

31 
	gJoy°ick
::~
	$Joy°ick
()

33 
	}
}

36 
boﬁ
 
Joy°ick
::
	$ªad
(
DigôÆPö
 
pö
)

38 
pö
)

40 
O√
:

41  (
myJack
 =
Le·
Ë? (
myEvít
.
	`gë
(
Evít
::
Joy°ickZîoUp
) == 0) :

42 (
myEvít
.
	`gë
(
Evít
::
Joy°ickO√Up
) == 0);

44 
Two
:

45  (
myJack
 =
Le·
Ë? (
myEvít
.
	`gë
(
Evít
::
Joy°ickZîoDown
) == 0) :

46 (
myEvít
.
	`gë
(
Evít
::
Joy°ickO√Down
) == 0);

48 
Thªe
:

49  (
myJack
 =
Le·
Ë? (
myEvít
.
	`gë
(
Evít
::
Joy°ickZîoLe·
) == 0) :

50 (
myEvít
.
	`gë
(
Evít
::
Joy°ickO√Le·
) == 0);

52 
Four
:

53  (
myJack
 =
Le·
Ë? (
myEvít
.
	`gë
(
Evít
::
Joy°ickZîoRight
) == 0) :

54 (
myEvít
.
	`gë
(
Evít
::
Joy°ickO√Right
) == 0);

56 
Six
:

57  (
myJack
 =
Le·
Ë? (
myEvít
.
	`gë
(
Evít
::
Joy°ickZîoFúe
) == 0) :

58 (
myEvít
.
	`gë
(
Evít
::
Joy°ickO√Fúe
) == 0);

61  
åue
;

63 
	}
}

66 
I¡32
 
	gJoy°ick
::
	$ªad
(
A«logPö
)

69  
maximumResi°™˚
;

70 
	}
}

73 
	gJoy°ick
::
	$wrôe
(
DigôÆPö
, 
boﬁ
)

76 
	}
}

	@emucore/Joystick.hxx

19 #i‚de‡
JOYSTICK_HXX


20 
	#JOYSTICK_HXX


	)

22 
	~"b•f.hxx
"

23 
	~"C⁄åﬁ.hxx
"

31 ˛as†
	cJoy°ick
 : 
public
 
C⁄åﬁÀr


33 
public
:

40 
Joy°ick
(
Jack
 
jack
, c⁄° 
Evít
& 
evít
);

45 
	mvútuÆ
 ~
Joy°ick
();

47 
	mpublic
:

54 
vútuÆ
 
boﬁ
 
ªad
(
DigôÆPö
 
pö
);

63 
vútuÆ
 
I¡32
 
ªad
(
A«logPö
 
pö
);

73 
vútuÆ
 
wrôe
(
DigôÆPö
 
pö
, 
boﬁ
 
vÆue
);

	@emucore/Keyboard.cpp

19 
	~"Evít.hxx
"

20 
	~"Keybﬂrd.hxx
"

23 
	gKeybﬂrd
::
	$Keybﬂrd
(
Jack
 
jack
, c⁄° 
Evít
& 
evít
)

24 : 
	`C⁄åﬁÀr
(
jack
, 
evít
),

25 
	$myPöSèã
(0)

27 
myTy≥
 = 
C⁄åﬁÀr
::
Keybﬂrd
;

28 
	}
}

31 
	gKeybﬂrd
::~
	$Keybﬂrd
()

33 
	}
}

36 
boﬁ
 
Keybﬂrd
::
	$ªad
(
DigôÆPö
 
pö
)

38 if(
pö
 =
Six
)

40 if((
myPöSèã
 & 0x01) == 0)

42  (
myJack
 =
Le·
Ë? (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdZîo3
) == 0) :

43 (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdO√3
) == 0);

45 if((
myPöSèã
 & 0x02) == 0)

47  (
myJack
 =
Le·
Ë? (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdZîo6
) == 0) :

48 (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdO√6
) == 0);

50 if((
myPöSèã
 & 0x04) == 0)

52  (
myJack
 =
Le·
Ë? (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdZîo9
) == 0) :

53 (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdO√9
) == 0);

55 if((
myPöSèã
 & 0x08) == 0)

57  (
myJack
 =
Le·
Ë? (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdZîoPound
) == 0) :

58 (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdO√Pound
) == 0);

62  
åue
;

63 
	}
}

66 
I¡32
 
	gKeybﬂrd
::
	$ªad
(
A«logPö
 
pö
)

68 if(
pö
 =
Nöe
)

70 if((
myPöSèã
 & 0x01) == 0)

72 if(
myJack
 =
Le·
)

74  (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdZîo1
) != 0) ?

75 
maximumResi°™˚
 : 
möimumResi°™˚
;

79  (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdO√1
) != 0) ?

80 
maximumResi°™˚
 : 
möimumResi°™˚
;

83 if((
myPöSèã
 & 0x02) == 0)

85 if(
myJack
 =
Le·
)

87  (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdZîo4
) != 0) ?

88 
maximumResi°™˚
 : 
möimumResi°™˚
;

92  (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdO√4
) != 0) ?

93 
maximumResi°™˚
 : 
möimumResi°™˚
;

96 if((
myPöSèã
 & 0x04) == 0)

98 if(
myJack
 =
Le·
)

100  (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdZîo7
) != 0) ?

101 
maximumResi°™˚
 : 
möimumResi°™˚
;

105  (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdO√7
) != 0) ?

106 
maximumResi°™˚
 : 
möimumResi°™˚
;

109 if((
myPöSèã
 & 0x08) == 0)

111 if(
myJack
 =
Le·
)

113  (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdZîoSèr
) != 0) ?

114 
maximumResi°™˚
 : 
möimumResi°™˚
;

118  (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdO√Sèr
) != 0) ?

119 
maximumResi°™˚
 : 
möimumResi°™˚
;

125 if((
myPöSèã
 & 0x01) == 0)

127 if(
myJack
 =
Le·
)

129  (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdZîo2
) != 0) ?

130 
maximumResi°™˚
 : 
möimumResi°™˚
;

134  (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdO√2
) != 0) ?

135 
maximumResi°™˚
 : 
möimumResi°™˚
;

138 if((
myPöSèã
 & 0x02) == 0)

140 if(
myJack
 =
Le·
)

142  (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdZîo5
) != 0) ?

143 
maximumResi°™˚
 : 
möimumResi°™˚
;

147  (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdO√5
) != 0) ?

148 
maximumResi°™˚
 : 
möimumResi°™˚
;

151 if((
myPöSèã
 & 0x04) == 0)

153 if(
myJack
 =
Le·
)

155  (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdZîo8
) != 0) ?

156 
maximumResi°™˚
 : 
möimumResi°™˚
;

160  (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdO√8
) != 0) ?

161 
maximumResi°™˚
 : 
möimumResi°™˚
;

164 if((
myPöSèã
 & 0x08) == 0)

166 if(
myJack
 =
Le·
)

168  (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdZîo0
) != 0) ?

169 
maximumResi°™˚
 : 
möimumResi°™˚
;

173  (
myEvít
.
	`gë
(
Evít
::
KeybﬂrdO√0
) != 0) ?

174 
maximumResi°™˚
 : 
möimumResi°™˚
;

179  
maximumResi°™˚
;

180 
	}
}

183 
	gKeybﬂrd
::
	$wrôe
(
DigôÆPö
 
pö
, 
boﬁ
 
vÆue
)

186 
pö
)

188 
O√
:

189 
myPöSèã
 = (myPöSèã & 0x0EË| (
vÆue
 ? 0x01 : 0x00);

192 
Two
:

193 
myPöSèã
 = (myPöSèã & 0x0DË| (
vÆue
 ? 0x02 : 0x00);

196 
Thªe
:

197 
myPöSèã
 = (myPöSèã & 0x0BË| (
vÆue
 ? 0x04 : 0x00);

200 
Four
:

201 
myPöSèã
 = (myPöSèã & 0x07Ë| (
vÆue
 ? 0x08 : 0x00);

207 
	}
}

	@emucore/Keyboard.hxx

19 #i‚de‡
KEYBOARD_HXX


20 
	#KEYBOARD_HXX


	)

22 
	~"b•f.hxx
"

23 
	~"C⁄åﬁ.hxx
"

31 ˛as†
	cKeybﬂrd
 : 
public
 
C⁄åﬁÀr


33 
public
:

40 
Keybﬂrd
(
Jack
 
jack
, c⁄° 
Evít
& 
evít
);

45 
	mvútuÆ
 ~
Keybﬂrd
();

47 
	mpublic
:

54 
vútuÆ
 
boﬁ
 
ªad
(
DigôÆPö
 
pö
);

63 
vútuÆ
 
I¡32
 
ªad
(
A«logPö
 
pö
);

73 
vútuÆ
 
wrôe
(
DigôÆPö
 
pö
, 
boﬁ
 
vÆue
);

75 
	m¥iv©e
:

77 
uI¡8
 
myPöSèã
;

	@emucore/M6502.cpp

19 
	~"M6502.hxx
"

21 #ifde‡
DEVELOPER_SUPPORT


22 
	~"Ex¥essi⁄.hxx
"

26 
	gM6502
::
	$M6502
(
uI¡32
 
sy°emCy˛esPîPro˚ss‹Cy˛e
)

27 : 
	`myExecuti⁄Sètus
(0),

28 
	`mySy°em
(0),

29 
	$mySy°emCy˛esPîPro˚ss‹Cy˛e
(
sy°emCy˛esPîPro˚ss‹Cy˛e
)

31 #ifde‡
DEVELOPER_SUPPORT


32 
myDebuggî
 = 
NULL
;

33 
myBªakPoöts
 = 
NULL
;

34 
myRódTøps
 = 
NULL
;

35 
myWrôeTøps
 = 
NULL
;

39 
uI¡16
 
t
;

40 
t
 = 0;Å < 256; ++t)

42 
ourBCDTabÀ
[0][
t
] = ((t >> 4) * 10) + (t & 0x0f);

43 
ourBCDTabÀ
[1][
t
] = (((t % 100) / 10) << 4) | (t % 10);

47 
t
 = 0;Å < 256; ++t)

49 
myIn°ru˘i⁄Sy°emCy˛eTabÀ
[
t
] = 
ourIn°ru˘i⁄Pro˚ss‹Cy˛eTabÀ
[t] *

50 
mySy°emCy˛esPîPro˚ss‹Cy˛e
;

53 
myTŸÆIn°ru˘i⁄Cou¡
 = 0;

54 
	}
}

57 
	gM6502
::~
	$M6502
()

59 #ifde‡
DEVELOPER_SUPPORT


60 
myBªakC⁄ds
.
	`˛ór
();

61 
myBªakC⁄dNames
.
	`˛ór
();

63 
	}
}

66 
	gM6502
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

69 
mySy°em
 = &
sy°em
;

70 
	}
}

73 
	gM6502
::
	$ª£t
()

76 
myExecuti⁄Sètus
 = 0;

79 
A
 = 
X
 = 
Y
 = 0;

80 
SP
 = 0xff;

81 
	`PS
(0x20);

84 
PC
 = (
uI¡16
)
mySy°em
->
	`≥ek
(0xfffc) | ((uInt16)mySystem->peek(0xfffd) << 8);

85 
	}
}

88 
	gM6502
::
	$úq
()

90 
myExecuti⁄Sètus
 |
MaskabÀI¡îru±Bô
;

91 
	}
}

94 
	gM6502
::
	$nmi
()

96 
myExecuti⁄Sètus
 |
N⁄maskabÀI¡îru±Bô
;

97 
	}
}

100 
	gM6502
::
	$°›
()

102 
myExecuti⁄Sètus
 |
St›Executi⁄Bô
;

103 
	}
}

106 
	gM6502
::
AddªssögMode
 
M6502
::
	$addªssögMode
(
uI¡8
 
›code
) const

108  
ourAddªssögModeTabÀ
[
›code
];

109 
	}
}

112 
uI¡8
 
	gM6502
::
	$PS
() const

114 
uI¡8
 
ps
 = 0x20;

116 if(
N
)

117 
ps
 |= 0x80;

118 if(
V
)

119 
ps
 |= 0x40;

120 if(
B
)

121 
ps
 |= 0x10;

122 if(
D
)

123 
ps
 |= 0x08;

124 if(
I
)

125 
ps
 |= 0x04;

126 if(!
nŸZ
)

127 
ps
 |= 0x02;

128 if(
C
)

129 
ps
 |= 0x01;

131  
ps
;

132 
	}
}

135 
	gM6502
::
	$PS
(
uI¡8
 
ps
)

137 
N
 = 
ps
 & 0x80;

138 
V
 = 
ps
 & 0x40;

139 
B
 = 
ps
 & 0x10;

140 
D
 = 
ps
 & 0x08;

141 
I
 = 
ps
 & 0x04;

142 
nŸZ
 = !(
ps
 & 0x02);

143 
C
 = 
ps
 & 0x01;

144 
	}
}

147 
	go°ªam
& 
	g›î©‹
<<(o°ªam& 
	gout
, c⁄° 
	gM6502
::
AddªssögMode
& 
mode
)

149 
mode
)

151 
M6502
::
Absﬁuã
:

152 
out
 << "$nnnn ";

154 
	gM6502
::
AbsﬁuãX
:

155 
out
 << "$nnnn,X";

157 
	gM6502
::
AbsﬁuãY
:

158 
out
 << "$nnnn,Y";

160 
	gM6502
::
Im∂õd
:

161 
out
 << "implied";

163 
	gM6502
::
Immedüã
:

164 
out
 << "#$nn ";

166 
	gM6502
::
Indúe˘
:

167 
out
 << "($nnnn)";

169 
	gM6502
::
Indúe˘X
:

170 
out
 << "($nn,X)";

172 
	gM6502
::
Indúe˘Y
:

173 
out
 << "($nn),Y";

175 
	gM6502
::
InvÆid
:

176 
out
 << "invalid";

178 
	gM6502
::
Rñ©ive
:

179 
out
 << "$nn ";

181 
	gM6502
::
Zîo
:

182 
out
 << "$nn ";

184 
	gM6502
::
ZîoX
:

185 
out
 << "$nn,X ";

187 
	gM6502
::
ZîoY
:

188 
out
 << "$nn,Y ";

191  
	gout
;

195 
uI¡8
 
	gM6502
::
ourBCDTabÀ
[2][256];

198 
	gM6502
::
AddªssögMode
 
M6502
::
ourAddªssögModeTabÀ
[256] = {

199 
Im∂õd
, 
Indúe˘X
, 
InvÆid
, IndirectX,

200 
Zîo
, Zero, Zero, Zero,

201 
Im∂õd
, 
Immedüã
, Implied, Immediate,

202 
Absﬁuã
, Absolute, Absolute, Absolute,

204 
Rñ©ive
, 
Indúe˘Y
, 
InvÆid
, IndirectY,

205 
ZîoX
, ZeroX, ZeroX, ZeroX,

206 
Im∂õd
, 
AbsﬁuãY
, Implied, AbsoluteY,

207 
AbsﬁuãX
, AbsoluteX, AbsoluteX, AbsoluteX,

209 
Absﬁuã
, 
Indúe˘X
, 
InvÆid
, IndirectX,

210 
Zîo
, Zero, Zero, Zero,

211 
Im∂õd
, 
Immedüã
, Implied, Immediate,

212 
Absﬁuã
, Absolute, Absolute, Absolute,

214 
Rñ©ive
, 
Indúe˘Y
, 
InvÆid
, IndirectY,

215 
ZîoX
, ZeroX, ZeroX, ZeroX,

216 
Im∂õd
, 
AbsﬁuãY
, Implied, AbsoluteY,

217 
AbsﬁuãX
, AbsoluteX, AbsoluteX, AbsoluteX,

219 
Im∂õd
, 
Indúe˘X
, 
InvÆid
, IndirectX,

220 
Zîo
, Zero, Zero, Zero,

221 
Im∂õd
, 
Immedüã
, Implied, Immediate,

222 
Absﬁuã
, Absolute, Absolute, Absolute,

224 
Rñ©ive
, 
Indúe˘Y
, 
InvÆid
, IndirectY,

225 
ZîoX
, ZeroX, ZeroX, ZeroX,

226 
Im∂õd
, 
AbsﬁuãY
, Implied, AbsoluteY,

227 
AbsﬁuãX
, AbsoluteX, AbsoluteX, AbsoluteX,

229 
Im∂õd
, 
Indúe˘X
, 
InvÆid
, IndirectX,

230 
Zîo
, Zero, Zero, Zero,

231 
Im∂õd
, 
Immedüã
, Implied, Immediate,

232 
Indúe˘
, 
Absﬁuã
, Absolute, Absolute,

234 
Rñ©ive
, 
Indúe˘Y
, 
InvÆid
, IndirectY,

235 
ZîoX
, ZeroX, ZeroX, ZeroX,

236 
Im∂õd
, 
AbsﬁuãY
, Implied, AbsoluteY,

237 
AbsﬁuãX
, AbsoluteX, AbsoluteX, AbsoluteX,

239 
Immedüã
, 
Indúe˘X
, Immediate, IndirectX,

240 
Zîo
, Zero, Zero, Zero,

241 
Im∂õd
, 
Immedüã
, Implied, Immediate,

242 
Absﬁuã
, Absolute, Absolute, Absolute,

244 
Rñ©ive
, 
Indúe˘Y
, 
InvÆid
, IndirectY,

245 
ZîoX
, ZîoX, 
ZîoY
, ZeroY,

246 
Im∂õd
, 
AbsﬁuãY
, Implied, AbsoluteY,

247 
AbsﬁuãX
, AbsﬁuãX, 
AbsﬁuãY
, AbsoluteY,

249 
Immedüã
, 
Indúe˘X
, Immediate, IndirectX,

250 
Zîo
, Zero, Zero, Zero,

251 
Im∂õd
, 
Immedüã
, Implied, Immediate,

252 
Absﬁuã
, Absolute, Absolute, Absolute,

254 
Rñ©ive
, 
Indúe˘Y
, 
InvÆid
, IndirectY,

255 
ZîoX
, ZîoX, 
ZîoY
, ZeroY,

256 
Im∂õd
, 
AbsﬁuãY
, Implied, AbsoluteY,

257 
AbsﬁuãX
, AbsﬁuãX, 
AbsﬁuãY
, AbsoluteY,

259 
Immedüã
, 
Indúe˘X
, Immediate, IndirectX,

260 
Zîo
, Zero, Zero, Zero,

261 
Im∂õd
, 
Immedüã
, Implied, Immediate,

262 
Absﬁuã
, Absolute, Absolute, Absolute,

264 
Rñ©ive
, 
Indúe˘Y
, 
InvÆid
, IndirectY,

265 
ZîoX
, ZeroX, ZeroX, ZeroX,

266 
Im∂õd
, 
AbsﬁuãY
, Implied, AbsoluteY,

267 
AbsﬁuãX
, AbsoluteX, AbsoluteX, AbsoluteX,

269 
Immedüã
, 
Indúe˘X
, Immediate, IndirectX,

270 
Zîo
, Zero, Zero, Zero,

271 
Im∂õd
, 
Immedüã
, Implied, Immediate,

272 
Absﬁuã
, Absolute, Absolute, Absolute,

274 
Rñ©ive
, 
Indúe˘Y
, 
InvÆid
, IndirectY,

275 
ZîoX
, ZeroX, ZeroX, ZeroX,

276 
Im∂õd
, 
AbsﬁuãY
, Implied, AbsoluteY,

277 
AbsﬁuãX
, AbsoluteX, AbsoluteX, AbsoluteX

281 
uI¡32
 
	gM6502
::
ourIn°ru˘i⁄Pro˚ss‹Cy˛eTabÀ
[256] = {

302 c⁄° * 
	gM6502
::
ourIn°ru˘i⁄M√m⁄icTabÀ
[256] = {

352 #ifde‡
DEVELOPER_SUPPORT


354 
	gM6502
::
	$©èch
(
Debuggî
& 
debuggî
)

357 
myDebuggî
 = &
debuggî
;

358 
	}
}

361 
	gM6502
::
	$addC⁄dBªak
(
Ex¥essi⁄
 *
e
, 
°rög
 
«me
)

363 
myBªakC⁄ds
.
	`push_back
(
e
);

364 
myBªakC⁄dNames
.
	`push_back
(
«me
);

365  
myBªakC⁄ds
.
	`size
() - 1;

366 
	}
}

369 
	gM6502
::
	$dñC⁄dBªak
(
brk
)

371 if(
brk
 < 
myBªakC⁄ds
.
	`size
())

373 
dñëe
 
myBªakC⁄ds
[
brk
];

374 
myBªakC⁄ds
.
	`ªmove_©
(
brk
);

375 
myBªakC⁄dNames
.
	`ªmove_©
(
brk
);

377 
	}
}

380 
	gM6502
::
	$˛órC⁄dBªaks
()

382 
i
=0; i<
myBªakC⁄ds
.
	`size
(); i++)

383 
dñëe
 
myBªakC⁄ds
[
i
];

384 
myBªakC⁄ds
.
	`˛ór
();

385 
myBªakC⁄dNames
.
	`˛ór
();

386 
	}
}

389 c⁄° 
	gSåögLi°
& 
	gM6502
::
	$gëC⁄dBªakNames
()

391  
myBªakC⁄dNames
;

392 
	}
}

395 
	gM6502
::
	$evÆC⁄dBªaks
()

397 
i
=0; i<
myBªakC⁄ds
.
	`size
(); i++)

399 
Ex¥essi⁄
* 
e
 = 
myBªakC⁄ds
[
i
];

400 if(
e
->
	`evÆu©e
())

401  
i
;

405 
	}
}

408 
	gM6502
::
	$£tBªakPoöts
(
PackedBôAºay
 *
bp
)

410 
myBªakPoöts
 = 
bp
;

411 
	}
}

414 
	gM6502
::
	$£tTøps
(
PackedBôAºay
 *
ªad
, PackedBôAºay *
wrôe
)

416 
myRódTøps
 = 
ªad
;

417 
myWrôeTøps
 = 
wrôe
;

418 
	}
}

	@emucore/M6502.hxx

19 #i‚de‡
M6502_HXX


20 
	#M6502_HXX


	)

22 
˛ass
 
	gD6502
;

23 
˛ass
 
	gM6502
;

24 
˛ass
 
	gSîülizî
;

25 
˛ass
 
	gDe£rülizî
;

26 
˛ass
 
	gDebuggî
;

27 
˛ass
 
	gCpuDebug
;

28 
˛ass
 
	gEx¥essi⁄
;

29 
˛ass
 
	gPackedBôAºay
;

31 
	~"b•f.hxx
"

32 
	~"Sy°em.hxx
"

33 
	~"Aºay.hxx
"

34 
	~"SåögLi°.hxx
"

36 
	gComm⁄
::
	tAºay
<
	tEx¥essi⁄
*> 
	tEx¥essi⁄Li°
;

46 ˛as†
	cM6502


48 
	mpublic
:

52 
‰õnd
 
˛ass
 
CpuDebug
;

54 
	mpublic
:

58 
	eAddªssögMode


60 
Absﬁuã
, 
	mAbsﬁuãX
, 
	mAbsﬁuãY
, 
	mImmedüã
, 
	mIm∂õd
,

61 
	mIndúe˘
, 
	mIndúe˘X
, 
	mIndúe˘Y
, 
	mInvÆid
, 
	mRñ©ive
,

62 
	mZîo
, 
	mZîoX
, 
	mZîoY


65 
	gpublic
:

73 
M6502
(
uI¡32
 
sy°emCy˛esPîPro˚ss‹Cy˛e
);

78 
	gvútuÆ
 ~
M6502
();

80 
	gpublic
:

87 
vútuÆ
 
ö°Æl
(
Sy°em
& 
sy°em
);

94 
vútuÆ
 
ª£t
();

99 
vútuÆ
 
úq
();

104 
vútuÆ
 
nmi
();

112 
vútuÆ
 
boﬁ
 
ßve
(
Sîülizî
& 
out
) = 0;

120 
vútuÆ
 
boﬁ
 
lﬂd
(
De£rülizî
& 
ö
) = 0;

127 
vútuÆ
 c⁄° * 
	$«me
() const = 0;

129 
public
:

136 
AddªssögMode
 
	$addªssögMode
(
uI¡8
 
›code
) const;

138 
public
:

147 
vútuÆ
 
boﬁ
 
	`execuã
(
uI¡32
 
numbî
) = 0;

154 
	`°›
();

162 
boﬁ
 
	$ÁèlEº‹
() const

164  
myExecuti⁄Sètus
 & 
F©ÆEº‹Bô
;

165 
	}
}

172 
uI¡16
 
	$gëPC
(Ëc⁄° {  
PC
; 
	}
}

174 
	gpublic
:

181 
‰õnd
 
o°ªam
& 
›î©‹
<<(o°ªam& 
out
, c⁄° 
	gAddªssögMode
& 
	gmode
);

183 
	gpublic
:

184 #ifde‡
DEVELOPER_SUPPORT


190 
©èch
(
Debuggî
& 
debuggî
);

193 
£tBªakPoöts
(
PackedBôAºay
 *
bp
);

194 
£tTøps
(
PackedBôAºay
 *
ªad
, PackedBôAºay *
wrôe
);

195 
	$tŸÆIn°ru˘i⁄Cou¡
(Ë{  
myTŸÆIn°ru˘i⁄Cou¡
; 
	}
}

197 
addC⁄dBªak
(
Ex¥essi⁄
 *
e
, 
°rög
 
«me
);

198 
dñC⁄dBªak
(
brk
);

199 
˛órC⁄dBªaks
();

200 c⁄° 
	gSåögLi°
& 
gëC⁄dBªakNames
();

201 
evÆC⁄dBªaks
();

204 
	g¥Ÿe˘ed
:

210 
uI¡8
 
	$PS
() const;

217 
	`PS
(
uI¡8
 
ps
);

219 
¥Ÿe˘ed
:

220 
uI¡8
 
A
;

221 
uI¡8
 
X
;

222 
uI¡8
 
Y
;

223 
uI¡8
 
SP
;

224 
uI¡8
 
IR
;

225 
uI¡16
 
PC
;

227 
boﬁ
 
N
;

228 
boﬁ
 
V
;

229 
boﬁ
 
B
;

230 
boﬁ
 
D
;

231 
boﬁ
 
I
;

232 
boﬁ
 
nŸZ
;

233 
boﬁ
 
C
;

235 #ifde‡
DEVELOPER_SUPPORT


237 
Debuggî
* 
myDebuggî
;

239 
PackedBôAºay
* 
myBªakPoöts
;

240 
PackedBôAºay
* 
myRódTøps
;

241 
PackedBôAºay
* 
myWrôeTøps
;

244 
boﬁ
 
myJu°HôTøpFœg
;

245 
	sHôTøpInfo
 {

246 
°rög
 
mesßge
;

247 
addªss
;

248 
	}
};

249 
HôTøpInfo
 
	gmyHôTøpInfo
;

251 
SåögLi°
 
	gmyBªakC⁄dNames
;

252 
Ex¥essi⁄Li°
 
	gmyBªakC⁄ds
;

260 
uI¡8
 
	gmyExecuti⁄Sètus
;

267 
	gSt›Executi⁄Bô
 = 0x01,

268 
	gF©ÆEº‹Bô
 = 0x02,

269 
	gMaskabÀI¡îru±Bô
 = 0x04,

270 
	gN⁄maskabÀI¡îru±Bô
 = 0x08

274 
Sy°em
* 
	gmySy°em
;

277 c⁄° 
uI¡32
 
	gmySy°emCy˛esPîPro˚ss‹Cy˛e
;

280 
uI¡32
 
	gmyIn°ru˘i⁄Sy°emCy˛eTabÀ
[256];

282 
	g¥Ÿe˘ed
:

284 
AddªssögMode
 
ourAddªssögModeTabÀ
[256];

287 
uI¡8
 
	gourBCDTabÀ
[2][256];

293 
uI¡32
 
	gourIn°ru˘i⁄Pro˚ss‹Cy˛eTabÀ
[256];

296 c⁄° * 
	gourIn°ru˘i⁄M√m⁄icTabÀ
[256];

298 
	gmyTŸÆIn°ru˘i⁄Cou¡
;

	@emucore/M6502Hi.cpp

19 
	~"M6502Hi.hxx
"

20 
	~"Sîülizî.hxx
"

21 
	~"De£rülizî.hxx
"

23 #ifde‡
DEVELOPER_SUPPORT


24 
	~"Debuggî.hxx
"

27 
	#debugSåóm
 
cout


	)

30 
	gM6502High
::
	$M6502High
(
uI¡32
 
sy°emCy˛esPîPro˚ss‹Cy˛e
)

31 : 
	$M6502
(
sy°emCy˛esPîPro˚ss‹Cy˛e
)

33 
myNumbîOfDi°ö˘Ac˚s£s
 = 0;

34 
myLa°Addªss
 = 0;

36 #ifde‡
DEVELOPER_SUPPORT


37 
myJu°HôTøpFœg
 = 
Ál£
;

39 
	}
}

42 
	gM6502High
::~
	$M6502High
()

44 
	}
}

47 
ölöe
 
uI¡8
 
M6502High
::
	$≥ek
(
uI¡16
 
addªss
)

49 if(
addªss
 !
myLa°Addªss
)

51 
myNumbîOfDi°ö˘Ac˚s£s
++;

52 
myLa°Addªss
 = 
addªss
;

54 
mySy°em
->
	`ö¸emítCy˛es
(
mySy°emCy˛esPîPro˚ss‹Cy˛e
);

56 #ifde‡
DEVELOPER_SUPPORT


57 if(
myRódTøps
 !
NULL
 && myRódTøps->
	`isSë
(
addªss
))

59 
myJu°HôTøpFœg
 = 
åue
;

60 
myHôTøpInfo
.
mesßge
 = "ReadÅrap: ";

61 
myHôTøpInfo
.
addªss
 =áddress;

65  
mySy°em
->
	`≥ek
(
addªss
);

66 
	}
}

69 
ölöe
 
	gM6502High
::
	$poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

71 if(
addªss
 !
myLa°Addªss
)

73 
myNumbîOfDi°ö˘Ac˚s£s
++;

74 
myLa°Addªss
 = 
addªss
;

76 
mySy°em
->
	`ö¸emítCy˛es
(
mySy°emCy˛esPîPro˚ss‹Cy˛e
);

78 #ifde‡
DEVELOPER_SUPPORT


79 if(
myWrôeTøps
 !
NULL
 && myWrôeTøps->
	`isSë
(
addªss
))

81 
myJu°HôTøpFœg
 = 
åue
;

82 
myHôTøpInfo
.
mesßge
 = "WriteÅrap: ";

83 
myHôTøpInfo
.
addªss
 =áddress;

87 
mySy°em
->
	`poke
(
addªss
, 
vÆue
);

88 
	}
}

91 
boﬁ
 
	gM6502High
::
	$execuã
(
uI¡32
 
numbî
)

93 
__œbñ__


94 
œb_0x00
, 
œb_0x01
, 
œb_0x02
, 
œb_0x03
, 
œb_0x04
, 
œb_0x05
, 
œb_0x06
, 
œb_0x07
,

95 
œb_0x08
, 
œb_0x09
, 
œb_0x0a
, 
œb_0x0b
, 
œb_0x0c
, 
œb_0x0d
, 
œb_0x0e
, 
œb_0x0f
,

96 
œb_0x10
, 
œb_0x11
, 
œb_0x12
, 
œb_0x13
, 
œb_0x14
, 
œb_0x15
, 
œb_0x16
, 
œb_0x17
,

97 
œb_0x18
, 
œb_0x19
, 
œb_0x1a
, 
œb_0x1b
, 
œb_0x1c
, 
œb_0x1d
, 
œb_0x1e
, 
œb_0x1f
,

98 
œb_0x20
, 
œb_0x21
, 
œb_0x22
, 
œb_0x23
, 
œb_0x24
, 
œb_0x25
, 
œb_0x26
, 
œb_0x27
,

99 
œb_0x28
, 
œb_0x29
, 
œb_0x2a
, 
œb_0x2b
, 
œb_0x2c
, 
œb_0x2d
, 
œb_0x2e
, 
œb_0x2f
,

100 
œb_0x30
, 
œb_0x31
, 
œb_0x32
, 
œb_0x33
, 
œb_0x34
, 
œb_0x35
, 
œb_0x36
, 
œb_0x37
,

101 
œb_0x38
, 
œb_0x39
, 
œb_0x3a
, 
œb_0x3b
, 
œb_0x3c
, 
œb_0x3d
, 
œb_0x3e
, 
œb_0x3f
,

102 
œb_0x40
, 
œb_0x41
, 
œb_0x42
, 
œb_0x43
, 
œb_0x44
, 
œb_0x45
, 
œb_0x46
, 
œb_0x47
,

103 
œb_0x48
, 
œb_0x49
, 
œb_0x4a
, 
œb_0x4b
, 
œb_0x4c
, 
œb_0x4d
, 
œb_0x4e
, 
œb_0x4f
,

104 
œb_0x50
, 
œb_0x51
, 
œb_0x52
, 
œb_0x53
, 
œb_0x54
, 
œb_0x55
, 
œb_0x56
, 
œb_0x57
,

105 
œb_0x58
, 
œb_0x59
, 
œb_0x5a
, 
œb_0x5b
, 
œb_0x5c
, 
œb_0x5d
, 
œb_0x5e
, 
œb_0x5f
,

106 
œb_0x60
, 
œb_0x61
, 
œb_0x62
, 
œb_0x63
, 
œb_0x64
, 
œb_0x65
, 
œb_0x66
, 
œb_0x67
,

107 
œb_0x68
, 
œb_0x69
, 
œb_0x6a
, 
œb_0x6b
, 
œb_0x6c
, 
œb_0x6d
, 
œb_0x6e
, 
œb_0x6f
,

108 
œb_0x70
, 
œb_0x71
, 
œb_0x72
, 
œb_0x73
, 
œb_0x74
, 
œb_0x75
, 
œb_0x76
, 
œb_0x77
,

109 
œb_0x78
, 
œb_0x79
, 
œb_0x7a
, 
œb_0x7b
, 
œb_0x7c
, 
œb_0x7d
, 
œb_0x7e
, 
œb_0x7f
,

110 
œb_0x80
, 
œb_0x81
, 
œb_0x82
, 
œb_0x83
, 
œb_0x84
, 
œb_0x85
, 
œb_0x86
, 
œb_0x87
,

111 
œb_0x88
, 
œb_0x89
, 
œb_0x8a
, 
œb_0x8b
, 
œb_0x8c
, 
œb_0x8d
, 
œb_0x8e
, 
œb_0x8f
,

112 
œb_0x90
, 
œb_0x91
, 
œb_0x92
, 
œb_0x93
, 
œb_0x94
, 
œb_0x95
, 
œb_0x96
, 
œb_0x97
,

113 
œb_0x98
, 
œb_0x99
, 
œb_0x9a
, 
œb_0x9b
, 
œb_0x9c
, 
œb_0x9d
, 
œb_0x9e
, 
œb_0x9f
,

114 
œb_0xa0
, 
œb_0xa1
, 
œb_0xa2
, 
œb_0xa3
, 
œb_0xa4
, 
œb_0xa5
, 
œb_0xa6
, 
œb_0xa7
,

115 
œb_0xa8
, 
œb_0xa9
, 
œb_0xØ
, 
œb_0xab
, 
œb_0xac
, 
œb_0xad
, 
œb_0x´
, 
œb_0xaf
,

116 
œb_0xb0
, 
œb_0xb1
, 
œb_0xb2
, 
œb_0xb3
, 
œb_0xb4
, 
œb_0xb5
, 
œb_0xb6
, 
œb_0xb7
,

117 
œb_0xb8
, 
œb_0xb9
, 
œb_0xba
, 
œb_0xbb
, 
œb_0xbc
, 
œb_0xbd
, 
œb_0xbe
, 
œb_0xbf
,

118 
œb_0xc0
, 
œb_0xc1
, 
œb_0xc2
, 
œb_0xc3
, 
œb_0xc4
, 
œb_0xc5
, 
œb_0xc6
, 
œb_0xc7
,

119 
œb_0xc8
, 
œb_0xc9
, 
œb_0xˇ
, 
œb_0xcb
, 
œb_0xcc
, 
œb_0xcd
, 
œb_0x˚
, 
œb_0xcf
,

120 
œb_0xd0
, 
œb_0xd1
, 
œb_0xd2
, 
œb_0xd3
, 
œb_0xd4
, 
œb_0xd5
, 
œb_0xd6
, 
œb_0xd7
,

121 
œb_0xd8
, 
œb_0xd9
, 
œb_0xda
, 
œb_0xdb
, 
œb_0xdc
, 
œb_0xdd
, 
œb_0xde
, 
œb_0xdf
,

122 
œb_0xe0
, 
œb_0xe1
, 
œb_0xe2
, 
œb_0xe3
, 
œb_0xe4
, 
œb_0xe5
, 
œb_0xe6
, 
œb_0xe7
,

123 
œb_0xe8
, 
œb_0xe9
, 
œb_0xó
, 
œb_0xeb
, 
œb_0xec
, 
œb_0xed
, 
œb_0xì
, 
œb_0xef
,

124 
œb_0xf0
, 
œb_0xf1
, 
œb_0xf2
, 
œb_0xf3
, 
œb_0xf4
, 
œb_0xf5
, 
œb_0xf6
, 
œb_0xf7
,

125 
œb_0xf8
, 
œb_0xf9
, 
œb_0xÁ
, 
œb_0xfb
, 
œb_0xfc
, 
œb_0xfd
, 
œb_0x„
, 
œb_0xff
;

126 c⁄° * c⁄° 
a_jump_èbÀ
[256] = { &&

127 
œb_0x00
, && 
œb_0x01
, && 
œb_0x02
, && 
œb_0x03
, && 
œb_0x04
, && 
œb_0x05
, && 
œb_0x06
, && 
œb_0x07
, &&

128 
œb_0x08
, && 
œb_0x09
, && 
œb_0x0a
, && 
œb_0x0b
, && 
œb_0x0c
, && 
œb_0x0d
, && 
œb_0x0e
, && 
œb_0x0f
, &&

129 
œb_0x10
, && 
œb_0x11
, && 
œb_0x12
, && 
œb_0x13
, && 
œb_0x14
, && 
œb_0x15
, && 
œb_0x16
, && 
œb_0x17
, &&

130 
œb_0x18
, && 
œb_0x19
, && 
œb_0x1a
, && 
œb_0x1b
, && 
œb_0x1c
, && 
œb_0x1d
, && 
œb_0x1e
, && 
œb_0x1f
, &&

131 
œb_0x20
, && 
œb_0x21
, && 
œb_0x22
, && 
œb_0x23
, && 
œb_0x24
, && 
œb_0x25
, && 
œb_0x26
, && 
œb_0x27
, &&

132 
œb_0x28
, && 
œb_0x29
, && 
œb_0x2a
, && 
œb_0x2b
, && 
œb_0x2c
, && 
œb_0x2d
, && 
œb_0x2e
, && 
œb_0x2f
, &&

133 
œb_0x30
, && 
œb_0x31
, && 
œb_0x32
, && 
œb_0x33
, && 
œb_0x34
, && 
œb_0x35
, && 
œb_0x36
, && 
œb_0x37
, &&

134 
œb_0x38
, && 
œb_0x39
, && 
œb_0x3a
, && 
œb_0x3b
, && 
œb_0x3c
, && 
œb_0x3d
, && 
œb_0x3e
, && 
œb_0x3f
, &&

135 
œb_0x40
, && 
œb_0x41
, && 
œb_0x42
, && 
œb_0x43
, && 
œb_0x44
, && 
œb_0x45
, && 
œb_0x46
, && 
œb_0x47
, &&

136 
œb_0x48
, && 
œb_0x49
, && 
œb_0x4a
, && 
œb_0x4b
, && 
œb_0x4c
, && 
œb_0x4d
, && 
œb_0x4e
, && 
œb_0x4f
, &&

137 
œb_0x50
, && 
œb_0x51
, && 
œb_0x52
, && 
œb_0x53
, && 
œb_0x54
, && 
œb_0x55
, && 
œb_0x56
, && 
œb_0x57
, &&

138 
œb_0x58
, && 
œb_0x59
, && 
œb_0x5a
, && 
œb_0x5b
, && 
œb_0x5c
, && 
œb_0x5d
, && 
œb_0x5e
, && 
œb_0x5f
, &&

139 
œb_0x60
, && 
œb_0x61
, && 
œb_0x62
, && 
œb_0x63
, && 
œb_0x64
, && 
œb_0x65
, && 
œb_0x66
, && 
œb_0x67
, &&

140 
œb_0x68
, && 
œb_0x69
, && 
œb_0x6a
, && 
œb_0x6b
, && 
œb_0x6c
, && 
œb_0x6d
, && 
œb_0x6e
, && 
œb_0x6f
, &&

141 
œb_0x70
, && 
œb_0x71
, && 
œb_0x72
, && 
œb_0x73
, && 
œb_0x74
, && 
œb_0x75
, && 
œb_0x76
, && 
œb_0x77
, &&

142 
œb_0x78
, && 
œb_0x79
, && 
œb_0x7a
, && 
œb_0x7b
, && 
œb_0x7c
, && 
œb_0x7d
, && 
œb_0x7e
, && 
œb_0x7f
, &&

143 
œb_0x80
, && 
œb_0x81
, && 
œb_0x82
, && 
œb_0x83
, && 
œb_0x84
, && 
œb_0x85
, && 
œb_0x86
, && 
œb_0x87
, &&

144 
œb_0x88
, && 
œb_0x89
, && 
œb_0x8a
, && 
œb_0x8b
, && 
œb_0x8c
, && 
œb_0x8d
, && 
œb_0x8e
, && 
œb_0x8f
, &&

145 
œb_0x90
, && 
œb_0x91
, && 
œb_0x92
, && 
œb_0x93
, && 
œb_0x94
, && 
œb_0x95
, && 
œb_0x96
, && 
œb_0x97
, &&

146 
œb_0x98
, && 
œb_0x99
, && 
œb_0x9a
, && 
œb_0x9b
, && 
œb_0x9c
, && 
œb_0x9d
, && 
œb_0x9e
, && 
œb_0x9f
, &&

147 
œb_0xa0
, && 
œb_0xa1
, && 
œb_0xa2
, && 
œb_0xa3
, && 
œb_0xa4
, && 
œb_0xa5
, && 
œb_0xa6
, && 
œb_0xa7
, &&

148 
œb_0xa8
, && 
œb_0xa9
, && 
œb_0xØ
, && 
œb_0xab
, && 
œb_0xac
, && 
œb_0xad
, && 
œb_0x´
, && 
œb_0xaf
, &&

149 
œb_0xb0
, && 
œb_0xb1
, && 
œb_0xb2
, && 
œb_0xb3
, && 
œb_0xb4
, && 
œb_0xb5
, && 
œb_0xb6
, && 
œb_0xb7
, &&

150 
œb_0xb8
, && 
œb_0xb9
, && 
œb_0xba
, && 
œb_0xbb
, && 
œb_0xbc
, && 
œb_0xbd
, && 
œb_0xbe
, && 
œb_0xbf
, &&

151 
œb_0xc0
, && 
œb_0xc1
, && 
œb_0xc2
, && 
œb_0xc3
, && 
œb_0xc4
, && 
œb_0xc5
, && 
œb_0xc6
, && 
œb_0xc7
, &&

152 
œb_0xc8
, && 
œb_0xc9
, && 
œb_0xˇ
, && 
œb_0xcb
, && 
œb_0xcc
, && 
œb_0xcd
, && 
œb_0x˚
, && 
œb_0xcf
, &&

153 
œb_0xd0
, && 
œb_0xd1
, && 
œb_0xd2
, && 
œb_0xd3
, && 
œb_0xd4
, && 
œb_0xd5
, && 
œb_0xd6
, && 
œb_0xd7
, &&

154 
œb_0xd8
, && 
œb_0xd9
, && 
œb_0xda
, && 
œb_0xdb
, && 
œb_0xdc
, && 
œb_0xdd
, && 
œb_0xde
, && 
œb_0xdf
, &&

155 
œb_0xe0
, && 
œb_0xe1
, && 
œb_0xe2
, && 
œb_0xe3
, && 
œb_0xe4
, && 
œb_0xe5
, && 
œb_0xe6
, && 
œb_0xe7
, &&

156 
œb_0xe8
, && 
œb_0xe9
, && 
œb_0xó
, && 
œb_0xeb
, && 
œb_0xec
, && 
œb_0xed
, && 
œb_0xì
, && 
œb_0xef
, &&

157 
œb_0xf0
, && 
œb_0xf1
, && 
œb_0xf2
, && 
œb_0xf3
, && 
œb_0xf4
, && 
œb_0xf5
, && 
œb_0xf6
, && 
œb_0xf7
, &&

158 
œb_0xf8
, && 
œb_0xf9
, && 
œb_0xÁ
, && 
œb_0xfb
, && 
œb_0xfc
, && 
œb_0xfd
, && 
œb_0x„
, && 
œb_0xff


162 
myExecuti⁄Sètus
 &
F©ÆEº‹Bô
;

167 
uI¡16
 
›î™dAddªss
 = 0;

168 
uI¡8
 
›î™d
 = 0;

170 
begö
;

172 
íd
:

173 
myTŸÆIn°ru˘i⁄Cou¡
++;

174 --
numbî
;

176 
begö
:

177 i‡(
myExecuti⁄Sètus
 || (
numbî
 <0ËË
föÆ
;

179 
IR
 = 
	`≥ek
(
PC
++);

180 *
a_jump_èbÀ
[
IR
];

182 
	~"M6502Hi.ös
"

184 
föÆ
:

187 if((
myExecuti⁄Sètus
 & 
MaskabÀI¡îru±Bô
) ||

188 (
myExecuti⁄Sètus
 & 
N⁄maskabÀI¡îru±Bô
))

191 
	`öãºu±H™dÀr
();

195 if(
myExecuti⁄Sètus
 & 
St›Executi⁄Bô
)

198  
åue
;

202 if(
myExecuti⁄Sètus
 & 
F©ÆEº‹Bô
)

205  
Ál£
;

209 if(
numbî
 == 0)

212  
åue
;

215 
	}
}

218 
	gM6502High
::
	$öãºu±H™dÀr
()

221 if((
myExecuti⁄Sètus
 & 
MaskabÀI¡îru±Bô
Ë&& !
I
)

223 
mySy°em
->
	`ö¸emítCy˛es
(7 * 
mySy°emCy˛esPîPro˚ss‹Cy˛e
);

224 
mySy°em
->
	`poke
(0x0100 + 
SP
--, (
PC
 - 1) >> 8);

225 
mySy°em
->
	`poke
(0x0100 + 
SP
--, (
PC
 - 1) & 0x00ff);

226 
mySy°em
->
	`poke
(0x0100 + 
SP
--, 
	`PS
() & (~0x10));

227 
D
 = 
Ál£
;

228 
I
 = 
åue
;

229 
PC
 = (
uI¡16
)
mySy°em
->
	`≥ek
(0xFFFE) | ((uInt16)mySystem->peek(0xFFFF) << 8);

231 if(
myExecuti⁄Sètus
 & 
N⁄maskabÀI¡îru±Bô
)

233 
mySy°em
->
	`ö¸emítCy˛es
(7 * 
mySy°emCy˛esPîPro˚ss‹Cy˛e
);

234 
mySy°em
->
	`poke
(0x0100 + 
SP
--, (
PC
 - 1) >> 8);

235 
mySy°em
->
	`poke
(0x0100 + 
SP
--, (
PC
 - 1) & 0x00ff);

236 
mySy°em
->
	`poke
(0x0100 + 
SP
--, 
	`PS
() & (~0x10));

237 
D
 = 
Ál£
;

238 
PC
 = (
uI¡16
)
mySy°em
->
	`≥ek
(0xFFFA) | ((uInt16)mySystem->peek(0xFFFB) << 8);

242 
myExecuti⁄Sètus
 &~(
MaskabÀI¡îru±Bô
 | 
N⁄maskabÀI¡îru±Bô
);

243 
	}
}

246 
boﬁ
 
	gM6502High
::
	$ßve
(
Sîülizî
& 
out
)

248 
°rög
 
CPU
 = 
	`«me
();

250 
__åy


252 
out
.
	`putSåög
(
CPU
);

254 
out
.
	`putI¡
(
A
);

255 
out
.
	`putI¡
(
X
);

256 
out
.
	`putI¡
(
Y
);

257 
out
.
	`putI¡
(
SP
);

258 
out
.
	`putI¡
(
IR
);

259 
out
.
	`putI¡
(
PC
);

261 
out
.
	`putBoﬁ
(
N
);

262 
out
.
	`putBoﬁ
(
V
);

263 
out
.
	`putBoﬁ
(
B
);

264 
out
.
	`putBoﬁ
(
D
);

265 
out
.
	`putBoﬁ
(
I
);

266 
out
.
	`putBoﬁ
(
nŸZ
);

267 
out
.
	`putBoﬁ
(
C
);

269 
out
.
	`putI¡
(
myExecuti⁄Sètus
);

272 
out
.
	`putI¡
(
myNumbîOfDi°ö˘Ac˚s£s
);

274 
out
.
	`putI¡
(
myLa°Addªss
);

278 
	`ˇtch
(*
msg
)

280 
˚º
 << 
msg
 << 
ídl
;

281  
Ál£
;

284 
	`__ˇtch
(...)

286 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
CPU
 << 
ídl
;

287  
Ál£
;

290  
åue
;

291 
	}
}

294 
boﬁ
 
	gM6502High
::
	$lﬂd
(
De£rülizî
& 
ö
)

296 
°rög
 
CPU
 = 
	`«me
();

298 
__åy


300 if(
ö
.
	`gëSåög
(Ë!
CPU
)

301  
Ál£
;

303 
A
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

304 
X
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

305 
Y
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

306 
SP
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

307 
IR
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

308 
PC
 = (
uI¡16
Ë
ö
.
	`gëI¡
();

310 
N
 = 
ö
.
	`gëBoﬁ
();

311 
V
 = 
ö
.
	`gëBoﬁ
();

312 
B
 = 
ö
.
	`gëBoﬁ
();

313 
D
 = 
ö
.
	`gëBoﬁ
();

314 
I
 = 
ö
.
	`gëBoﬁ
();

315 
nŸZ
 = 
ö
.
	`gëBoﬁ
();

316 
C
 = 
ö
.
	`gëBoﬁ
();

318 
myExecuti⁄Sètus
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

321 
myNumbîOfDi°ö˘Ac˚s£s
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

323 
myLa°Addªss
 = (
uI¡16
Ë
ö
.
	`gëI¡
();

326 
	`ˇtch
(*
msg
)

328 
˚º
 << 
msg
 << 
ídl
;

329  
Ál£
;

332 
	`__ˇtch
(...)

334 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
CPU
 << 
ídl
;

335  
Ál£
;

338  
åue
;

339 
	}
}

342 c⁄° * 
	gM6502High
::
	$«me
() const

345 
	}
}

	@emucore/M6502Hi.hxx

19 #i‚de‡
M6502HIGH_HXX


20 
	#M6502HIGH_HXX


	)

22 
˛ass
 
	gM6502High
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

27 
	~"M6502.hxx
"

40 ˛as†
	cM6502High
 : 
public
 
M6502


42 
public
:

49 
M6502High
(
uI¡32
 
sy°emCy˛esPîPro˚ss‹Cy˛e
);

54 
	mvútuÆ
 ~
M6502High
();

56 
	mpublic
:

65 
vútuÆ
 
boﬁ
 
execuã
(
uI¡32
 
numbî
);

73 
vútuÆ
 
boﬁ
 
ßve
(
Sîülizî
& 
out
);

81 
vútuÆ
 
boﬁ
 
lﬂd
(
De£rülizî
& 
ö
);

88 
vútuÆ
 c⁄° * 
	$«me
() const;

90 
public
:

96 
uI¡32
 
	$di°ö˘Ac˚s£s
() const

98  
myNumbîOfDi°ö˘Ac˚s£s
;

101 
¥Ÿe˘ed
:

105 
	`öãºu±H™dÀr
();

107 
¥Ÿe˘ed
:

114 
ölöe
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

123 
ölöe
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

125 
¥iv©e
:

127 
uI¡32
 
myNumbîOfDi°ö˘Ac˚s£s
;

130 
uI¡16
 
myLa°Addªss
;

131 
	}
};

	@emucore/M6502Low.cpp

19 
	~"M6502Low.hxx
"

20 
	~"Sîülizî.hxx
"

21 
	~"De£rülizî.hxx
"

23 #ifde‡
DEVELOPER_SUPPORT


24 
	~"Debuggî.hxx
"

27 
	#debugSåóm
 
cout


	)

30 
	gM6502Low
::
	$M6502Low
(
uI¡32
 
sy°emCy˛esPîPro˚ss‹Cy˛e
)

31 : 
	$M6502
(
sy°emCy˛esPîPro˚ss‹Cy˛e
)

33 #ifde‡
DEVELOPER_SUPPORT


34 
myJu°HôTøpFœg
 = 
Ál£
;

36 
	}
}

39 
	gM6502Low
::~
	$M6502Low
()

41 
	}
}

44 
ölöe
 
uI¡8
 
M6502Low
::
	$≥ek
(
uI¡16
 
addªss
)

46 #ifde‡
DEVELOPER_SUPPORT


47 if(
myRódTøps
 !
NULL
 && myRódTøps->
	`isSë
(
addªss
))

49 
myJu°HôTøpFœg
 = 
åue
;

50 
myHôTøpInfo
.
mesßge
 = "ReadÅrap: ";

51 
myHôTøpInfo
.
addªss
 =áddress;

55  
mySy°em
->
	`≥ek
(
addªss
);

56 
	}
}

59 
ölöe
 
	gM6502Low
::
	$poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

61 #ifde‡
DEVELOPER_SUPPORT


62 if(
myWrôeTøps
 !
NULL
 && myWrôeTøps->
	`isSë
(
addªss
))

64 
myJu°HôTøpFœg
 = 
åue
;

65 
myHôTøpInfo
.
mesßge
 = "WriteÅrap: ";

66 
myHôTøpInfo
.
addªss
 =áddress;

70 
mySy°em
->
	`poke
(
addªss
, 
vÆue
);

71 
	}
}

74 
boﬁ
 
	gM6502Low
::
	$execuã
(
uI¡32
 
numbî
)

76 
__œbñ__


77 
œb_0x00
, 
œb_0x01
, 
œb_0x02
, 
œb_0x03
, 
œb_0x04
, 
œb_0x05
, 
œb_0x06
, 
œb_0x07
,

78 
œb_0x08
, 
œb_0x09
, 
œb_0x0a
, 
œb_0x0b
, 
œb_0x0c
, 
œb_0x0d
, 
œb_0x0e
, 
œb_0x0f
,

79 
œb_0x10
, 
œb_0x11
, 
œb_0x12
, 
œb_0x13
, 
œb_0x14
, 
œb_0x15
, 
œb_0x16
, 
œb_0x17
,

80 
œb_0x18
, 
œb_0x19
, 
œb_0x1a
, 
œb_0x1b
, 
œb_0x1c
, 
œb_0x1d
, 
œb_0x1e
, 
œb_0x1f
,

81 
œb_0x20
, 
œb_0x21
, 
œb_0x22
, 
œb_0x23
, 
œb_0x24
, 
œb_0x25
, 
œb_0x26
, 
œb_0x27
,

82 
œb_0x28
, 
œb_0x29
, 
œb_0x2a
, 
œb_0x2b
, 
œb_0x2c
, 
œb_0x2d
, 
œb_0x2e
, 
œb_0x2f
,

83 
œb_0x30
, 
œb_0x31
, 
œb_0x32
, 
œb_0x33
, 
œb_0x34
, 
œb_0x35
, 
œb_0x36
, 
œb_0x37
,

84 
œb_0x38
, 
œb_0x39
, 
œb_0x3a
, 
œb_0x3b
, 
œb_0x3c
, 
œb_0x3d
, 
œb_0x3e
, 
œb_0x3f
,

85 
œb_0x40
, 
œb_0x41
, 
œb_0x42
, 
œb_0x43
, 
œb_0x44
, 
œb_0x45
, 
œb_0x46
, 
œb_0x47
,

86 
œb_0x48
, 
œb_0x49
, 
œb_0x4a
, 
œb_0x4b
, 
œb_0x4c
, 
œb_0x4d
, 
œb_0x4e
, 
œb_0x4f
,

87 
œb_0x50
, 
œb_0x51
, 
œb_0x52
, 
œb_0x53
, 
œb_0x54
, 
œb_0x55
, 
œb_0x56
, 
œb_0x57
,

88 
œb_0x58
, 
œb_0x59
, 
œb_0x5a
, 
œb_0x5b
, 
œb_0x5c
, 
œb_0x5d
, 
œb_0x5e
, 
œb_0x5f
,

89 
œb_0x60
, 
œb_0x61
, 
œb_0x62
, 
œb_0x63
, 
œb_0x64
, 
œb_0x65
, 
œb_0x66
, 
œb_0x67
,

90 
œb_0x68
, 
œb_0x69
, 
œb_0x6a
, 
œb_0x6b
, 
œb_0x6c
, 
œb_0x6d
, 
œb_0x6e
, 
œb_0x6f
,

91 
œb_0x70
, 
œb_0x71
, 
œb_0x72
, 
œb_0x73
, 
œb_0x74
, 
œb_0x75
, 
œb_0x76
, 
œb_0x77
,

92 
œb_0x78
, 
œb_0x79
, 
œb_0x7a
, 
œb_0x7b
, 
œb_0x7c
, 
œb_0x7d
, 
œb_0x7e
, 
œb_0x7f
,

93 
œb_0x80
, 
œb_0x81
, 
œb_0x82
, 
œb_0x83
, 
œb_0x84
, 
œb_0x85
, 
œb_0x86
, 
œb_0x87
,

94 
œb_0x88
, 
œb_0x89
, 
œb_0x8a
, 
œb_0x8b
, 
œb_0x8c
, 
œb_0x8d
, 
œb_0x8e
, 
œb_0x8f
,

95 
œb_0x90
, 
œb_0x91
, 
œb_0x92
, 
œb_0x93
, 
œb_0x94
, 
œb_0x95
, 
œb_0x96
, 
œb_0x97
,

96 
œb_0x98
, 
œb_0x99
, 
œb_0x9a
, 
œb_0x9b
, 
œb_0x9c
, 
œb_0x9d
, 
œb_0x9e
, 
œb_0x9f
,

97 
œb_0xa0
, 
œb_0xa1
, 
œb_0xa2
, 
œb_0xa3
, 
œb_0xa4
, 
œb_0xa5
, 
œb_0xa6
, 
œb_0xa7
,

98 
œb_0xa8
, 
œb_0xa9
, 
œb_0xØ
, 
œb_0xab
, 
œb_0xac
, 
œb_0xad
, 
œb_0x´
, 
œb_0xaf
,

99 
œb_0xb0
, 
œb_0xb1
, 
œb_0xb2
, 
œb_0xb3
, 
œb_0xb4
, 
œb_0xb5
, 
œb_0xb6
, 
œb_0xb7
,

100 
œb_0xb8
, 
œb_0xb9
, 
œb_0xba
, 
œb_0xbb
, 
œb_0xbc
, 
œb_0xbd
, 
œb_0xbe
, 
œb_0xbf
,

101 
œb_0xc0
, 
œb_0xc1
, 
œb_0xc2
, 
œb_0xc3
, 
œb_0xc4
, 
œb_0xc5
, 
œb_0xc6
, 
œb_0xc7
,

102 
œb_0xc8
, 
œb_0xc9
, 
œb_0xˇ
, 
œb_0xcb
, 
œb_0xcc
, 
œb_0xcd
, 
œb_0x˚
, 
œb_0xcf
,

103 
œb_0xd0
, 
œb_0xd1
, 
œb_0xd2
, 
œb_0xd3
, 
œb_0xd4
, 
œb_0xd5
, 
œb_0xd6
, 
œb_0xd7
,

104 
œb_0xd8
, 
œb_0xd9
, 
œb_0xda
, 
œb_0xdb
, 
œb_0xdc
, 
œb_0xdd
, 
œb_0xde
, 
œb_0xdf
,

105 
œb_0xe0
, 
œb_0xe1
, 
œb_0xe2
, 
œb_0xe3
, 
œb_0xe4
, 
œb_0xe5
, 
œb_0xe6
, 
œb_0xe7
,

106 
œb_0xe8
, 
œb_0xe9
, 
œb_0xó
, 
œb_0xeb
, 
œb_0xec
, 
œb_0xed
, 
œb_0xì
, 
œb_0xef
,

107 
œb_0xf0
, 
œb_0xf1
, 
œb_0xf2
, 
œb_0xf3
, 
œb_0xf4
, 
œb_0xf5
, 
œb_0xf6
, 
œb_0xf7
,

108 
œb_0xf8
, 
œb_0xf9
, 
œb_0xÁ
, 
œb_0xfb
, 
œb_0xfc
, 
œb_0xfd
, 
œb_0x„
, 
œb_0xff
;

109 c⁄° * c⁄° 
a_jump_èbÀ
[256] = { &&

110 
œb_0x00
, && 
œb_0x01
, && 
œb_0x02
, && 
œb_0x03
, && 
œb_0x04
, && 
œb_0x05
, && 
œb_0x06
, && 
œb_0x07
, &&

111 
œb_0x08
, && 
œb_0x09
, && 
œb_0x0a
, && 
œb_0x0b
, && 
œb_0x0c
, && 
œb_0x0d
, && 
œb_0x0e
, && 
œb_0x0f
, &&

112 
œb_0x10
, && 
œb_0x11
, && 
œb_0x12
, && 
œb_0x13
, && 
œb_0x14
, && 
œb_0x15
, && 
œb_0x16
, && 
œb_0x17
, &&

113 
œb_0x18
, && 
œb_0x19
, && 
œb_0x1a
, && 
œb_0x1b
, && 
œb_0x1c
, && 
œb_0x1d
, && 
œb_0x1e
, && 
œb_0x1f
, &&

114 
œb_0x20
, && 
œb_0x21
, && 
œb_0x22
, && 
œb_0x23
, && 
œb_0x24
, && 
œb_0x25
, && 
œb_0x26
, && 
œb_0x27
, &&

115 
œb_0x28
, && 
œb_0x29
, && 
œb_0x2a
, && 
œb_0x2b
, && 
œb_0x2c
, && 
œb_0x2d
, && 
œb_0x2e
, && 
œb_0x2f
, &&

116 
œb_0x30
, && 
œb_0x31
, && 
œb_0x32
, && 
œb_0x33
, && 
œb_0x34
, && 
œb_0x35
, && 
œb_0x36
, && 
œb_0x37
, &&

117 
œb_0x38
, && 
œb_0x39
, && 
œb_0x3a
, && 
œb_0x3b
, && 
œb_0x3c
, && 
œb_0x3d
, && 
œb_0x3e
, && 
œb_0x3f
, &&

118 
œb_0x40
, && 
œb_0x41
, && 
œb_0x42
, && 
œb_0x43
, && 
œb_0x44
, && 
œb_0x45
, && 
œb_0x46
, && 
œb_0x47
, &&

119 
œb_0x48
, && 
œb_0x49
, && 
œb_0x4a
, && 
œb_0x4b
, && 
œb_0x4c
, && 
œb_0x4d
, && 
œb_0x4e
, && 
œb_0x4f
, &&

120 
œb_0x50
, && 
œb_0x51
, && 
œb_0x52
, && 
œb_0x53
, && 
œb_0x54
, && 
œb_0x55
, && 
œb_0x56
, && 
œb_0x57
, &&

121 
œb_0x58
, && 
œb_0x59
, && 
œb_0x5a
, && 
œb_0x5b
, && 
œb_0x5c
, && 
œb_0x5d
, && 
œb_0x5e
, && 
œb_0x5f
, &&

122 
œb_0x60
, && 
œb_0x61
, && 
œb_0x62
, && 
œb_0x63
, && 
œb_0x64
, && 
œb_0x65
, && 
œb_0x66
, && 
œb_0x67
, &&

123 
œb_0x68
, && 
œb_0x69
, && 
œb_0x6a
, && 
œb_0x6b
, && 
œb_0x6c
, && 
œb_0x6d
, && 
œb_0x6e
, && 
œb_0x6f
, &&

124 
œb_0x70
, && 
œb_0x71
, && 
œb_0x72
, && 
œb_0x73
, && 
œb_0x74
, && 
œb_0x75
, && 
œb_0x76
, && 
œb_0x77
, &&

125 
œb_0x78
, && 
œb_0x79
, && 
œb_0x7a
, && 
œb_0x7b
, && 
œb_0x7c
, && 
œb_0x7d
, && 
œb_0x7e
, && 
œb_0x7f
, &&

126 
œb_0x80
, && 
œb_0x81
, && 
œb_0x82
, && 
œb_0x83
, && 
œb_0x84
, && 
œb_0x85
, && 
œb_0x86
, && 
œb_0x87
, &&

127 
œb_0x88
, && 
œb_0x89
, && 
œb_0x8a
, && 
œb_0x8b
, && 
œb_0x8c
, && 
œb_0x8d
, && 
œb_0x8e
, && 
œb_0x8f
, &&

128 
œb_0x90
, && 
œb_0x91
, && 
œb_0x92
, && 
œb_0x93
, && 
œb_0x94
, && 
œb_0x95
, && 
œb_0x96
, && 
œb_0x97
, &&

129 
œb_0x98
, && 
œb_0x99
, && 
œb_0x9a
, && 
œb_0x9b
, && 
œb_0x9c
, && 
œb_0x9d
, && 
œb_0x9e
, && 
œb_0x9f
, &&

130 
œb_0xa0
, && 
œb_0xa1
, && 
œb_0xa2
, && 
œb_0xa3
, && 
œb_0xa4
, && 
œb_0xa5
, && 
œb_0xa6
, && 
œb_0xa7
, &&

131 
œb_0xa8
, && 
œb_0xa9
, && 
œb_0xØ
, && 
œb_0xab
, && 
œb_0xac
, && 
œb_0xad
, && 
œb_0x´
, && 
œb_0xaf
, &&

132 
œb_0xb0
, && 
œb_0xb1
, && 
œb_0xb2
, && 
œb_0xb3
, && 
œb_0xb4
, && 
œb_0xb5
, && 
œb_0xb6
, && 
œb_0xb7
, &&

133 
œb_0xb8
, && 
œb_0xb9
, && 
œb_0xba
, && 
œb_0xbb
, && 
œb_0xbc
, && 
œb_0xbd
, && 
œb_0xbe
, && 
œb_0xbf
, &&

134 
œb_0xc0
, && 
œb_0xc1
, && 
œb_0xc2
, && 
œb_0xc3
, && 
œb_0xc4
, && 
œb_0xc5
, && 
œb_0xc6
, && 
œb_0xc7
, &&

135 
œb_0xc8
, && 
œb_0xc9
, && 
œb_0xˇ
, && 
œb_0xcb
, && 
œb_0xcc
, && 
œb_0xcd
, && 
œb_0x˚
, && 
œb_0xcf
, &&

136 
œb_0xd0
, && 
œb_0xd1
, && 
œb_0xd2
, && 
œb_0xd3
, && 
œb_0xd4
, && 
œb_0xd5
, && 
œb_0xd6
, && 
œb_0xd7
, &&

137 
œb_0xd8
, && 
œb_0xd9
, && 
œb_0xda
, && 
œb_0xdb
, && 
œb_0xdc
, && 
œb_0xdd
, && 
œb_0xde
, && 
œb_0xdf
, &&

138 
œb_0xe0
, && 
œb_0xe1
, && 
œb_0xe2
, && 
œb_0xe3
, && 
œb_0xe4
, && 
œb_0xe5
, && 
œb_0xe6
, && 
œb_0xe7
, &&

139 
œb_0xe8
, && 
œb_0xe9
, && 
œb_0xó
, && 
œb_0xeb
, && 
œb_0xec
, && 
œb_0xed
, && 
œb_0xì
, && 
œb_0xef
, &&

140 
œb_0xf0
, && 
œb_0xf1
, && 
œb_0xf2
, && 
œb_0xf3
, && 
œb_0xf4
, && 
œb_0xf5
, && 
œb_0xf6
, && 
œb_0xf7
, &&

141 
œb_0xf8
, && 
œb_0xf9
, && 
œb_0xÁ
, && 
œb_0xfb
, && 
œb_0xfc
, && 
œb_0xfd
, && 
œb_0x„
, && 
œb_0xff


145 
myExecuti⁄Sètus
 &
F©ÆEº‹Bô
;

150 
uI¡16
 
›î™dAddªss
 = 0;

151 
uI¡8
 
›î™d
 = 0;

153 
begö
;

155 
íd
:

156 --
numbî
;

157 
begö
:

158 i‡(
myExecuti⁄Sètus
 || (
numbî
 <0ËË
föÆ
;

160 #ifde‡
DEVELOPER_SUPPORT


161 if(
myJu°HôTøpFœg
)

163 if(
myDebuggî
->
	`°¨t
(
myHôTøpInfo
.
mesßge
, myHôTøpInfo.
addªss
))

165 
myJu°HôTøpFœg
 = 
Ál£
;

166  
åue
;

170 if(
myBªakPoöts
 !
NULL
)

172 if(
myBªakPoöts
->
	`isSë
(
PC
))

174 if(
myDebuggî
->
	`°¨t
("Bªakpoöàhô: ", 
PC
))

175  
åue
;

179 
c⁄d
 = 
	`evÆC⁄dBªaks
();

180 if(
c⁄d
 > -1)

182 
°rög
 
buf
 = "CBP: " + 
myBªakC⁄dNames
[
c⁄d
];

183 if(
myDebuggî
->
	`°¨t
(
buf
))

184  
åue
;

188 #ifde‡
DEBUG


189 
debugSåóm
 << "PC=" << 
hex
 << 
	`£tw
(4Ë<< 
PC
 << " ";

193 
IR
 = 
	`≥ek
(
PC
++);

195 #ifde‡
DEBUG


196 
debugSåóm
 << "IR=" << 
hex
 << 
	`£tw
(2Ë<< ()
IR
 << " ";

197 
debugSåóm
 << "<" << 
ourAddªssögModeTabÀ
[
IR
] << " ";

201 
mySy°em
->
	`ö¸emítCy˛es
(
myIn°ru˘i⁄Sy°emCy˛eTabÀ
[
IR
]);

204 *
a_jump_èbÀ
[
IR
];

206 
	~"M6502Low.ös
"

208 
föÆ
:

211 if((
myExecuti⁄Sètus
 & 
MaskabÀI¡îru±Bô
) ||

212 (
myExecuti⁄Sètus
 & 
N⁄maskabÀI¡îru±Bô
))

215 
	`öãºu±H™dÀr
();

219 if(
myExecuti⁄Sètus
 & 
St›Executi⁄Bô
)

222  
åue
;

226 if(
myExecuti⁄Sètus
 & 
F©ÆEº‹Bô
)

229  
Ál£
;

233 if(
numbî
 == 0)

236  
åue
;

239 
	}
}

242 
	gM6502Low
::
	$öãºu±H™dÀr
()

245 if((
myExecuti⁄Sètus
 & 
MaskabÀI¡îru±Bô
Ë&& !
I
)

247 
mySy°em
->
	`ö¸emítCy˛es
(7 * 
mySy°emCy˛esPîPro˚ss‹Cy˛e
);

248 
mySy°em
->
	`poke
(0x0100 + 
SP
--, (
PC
 - 1) >> 8);

249 
mySy°em
->
	`poke
(0x0100 + 
SP
--, (
PC
 - 1) & 0x00ff);

250 
mySy°em
->
	`poke
(0x0100 + 
SP
--, 
	`PS
() & (~0x10));

251 
D
 = 
Ál£
;

252 
I
 = 
åue
;

253 
PC
 = (
uI¡16
)
mySy°em
->
	`≥ek
(0xFFFE) | ((uInt16)mySystem->peek(0xFFFF) << 8);

255 if(
myExecuti⁄Sètus
 & 
N⁄maskabÀI¡îru±Bô
)

257 
mySy°em
->
	`ö¸emítCy˛es
(7 * 
mySy°emCy˛esPîPro˚ss‹Cy˛e
);

258 
mySy°em
->
	`poke
(0x0100 + 
SP
--, (
PC
 - 1) >> 8);

259 
mySy°em
->
	`poke
(0x0100 + 
SP
--, (
PC
 - 1) & 0x00ff);

260 
mySy°em
->
	`poke
(0x0100 + 
SP
--, 
	`PS
() & (~0x10));

261 
D
 = 
Ál£
;

262 
PC
 = (
uI¡16
)
mySy°em
->
	`≥ek
(0xFFFA) | ((uInt16)mySystem->peek(0xFFFB) << 8);

266 
myExecuti⁄Sètus
 &~(
MaskabÀI¡îru±Bô
 | 
N⁄maskabÀI¡îru±Bô
);

267 
	}
}

270 
boﬁ
 
	gM6502Low
::
	$ßve
(
Sîülizî
& 
out
)

272 
°rög
 
CPU
 = 
	`«me
();

274 
__åy


276 
out
.
	`putSåög
(
CPU
);

278 
out
.
	`putI¡
(
A
);

279 
out
.
	`putI¡
(
X
);

280 
out
.
	`putI¡
(
Y
);

281 
out
.
	`putI¡
(
SP
);

282 
out
.
	`putI¡
(
IR
);

283 
out
.
	`putI¡
(
PC
);

285 
out
.
	`putBoﬁ
(
N
);

286 
out
.
	`putBoﬁ
(
V
);

287 
out
.
	`putBoﬁ
(
B
);

288 
out
.
	`putBoﬁ
(
D
);

289 
out
.
	`putBoﬁ
(
I
);

290 
out
.
	`putBoﬁ
(
nŸZ
);

291 
out
.
	`putBoﬁ
(
C
);

293 
out
.
	`putI¡
(
myExecuti⁄Sètus
);

296 
	`ˇtch
(*
msg
)

298 
˚º
 << 
msg
 << 
ídl
;

299  
Ál£
;

302 
	`__ˇtch
(...)

304 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
CPU
 << 
ídl
;

305  
Ál£
;

308  
åue
;

309 
	}
}

312 
boﬁ
 
	gM6502Low
::
	$lﬂd
(
De£rülizî
& 
ö
)

314 
°rög
 
CPU
 = 
	`«me
();

316 
__åy


318 if(
ö
.
	`gëSåög
(Ë!
CPU
)

319  
Ál£
;

321 
A
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

322 
X
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

323 
Y
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

324 
SP
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

325 
IR
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

326 
PC
 = (
uI¡16
Ë
ö
.
	`gëI¡
();

328 
N
 = 
ö
.
	`gëBoﬁ
();

329 
V
 = 
ö
.
	`gëBoﬁ
();

330 
B
 = 
ö
.
	`gëBoﬁ
();

331 
D
 = 
ö
.
	`gëBoﬁ
();

332 
I
 = 
ö
.
	`gëBoﬁ
();

333 
nŸZ
 = 
ö
.
	`gëBoﬁ
();

334 
C
 = 
ö
.
	`gëBoﬁ
();

336 
myExecuti⁄Sètus
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

339 
	`ˇtch
(*
msg
)

341 
˚º
 << 
msg
 << 
ídl
;

342  
Ál£
;

345 
	`__ˇtch
(...)

347 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
CPU
 << 
ídl
;

348  
Ál£
;

351  
åue
;

352 
	}
}

355 c⁄° * 
	gM6502Low
::
	$«me
() const

358 
	}
}

	@emucore/M6502Low.hxx

19 #i‚de‡
M6502LOW_HXX


20 
	#M6502LOW_HXX


	)

22 
˛ass
 
	gM6502Low
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

27 
	~"M6502.hxx
"

46 ˛as†
	cM6502Low
 : 
public
 
M6502


48 
public
:

55 
M6502Low
(
uI¡32
 
sy°emCy˛esPîPro˚ss‹Cy˛e
);

60 
	mvútuÆ
 ~
M6502Low
();

62 
	mpublic
:

71 
vútuÆ
 
boﬁ
 
execuã
(
uI¡32
 
numbî
);

79 
vútuÆ
 
boﬁ
 
ßve
(
Sîülizî
& 
out
);

87 
vútuÆ
 
boﬁ
 
lﬂd
(
De£rülizî
& 
ö
);

94 
vútuÆ
 c⁄° * 
	$«me
() const;

96 
¥Ÿe˘ed
:

100 
	`öãºu±H™dÀr
();

102 
¥Ÿe˘ed
:

108 
ölöe
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

116 
ölöe
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

	@emucore/M6532.cpp

19 
	~<as£π.h
>

20 
	~"C⁄sﬁe.hxx
"

21 
	~"M6532.hxx
"

22 
	~"R™dom.hxx
"

23 
	~"Swôches.hxx
"

24 
	~"Sy°em.hxx
"

25 
	~"Sîülizî.hxx
"

26 
	~"De£rülizî.hxx
"

27 
	~<io°ªam
>

30 
	gM6532
::
	$M6532
(c⁄° 
C⁄sﬁe
& 
c⁄sﬁe
)

31 : 
	$myC⁄sﬁe
(
c⁄sﬁe
)

34 
˛ass
 
R™dom
 
øndom
;

36 
uI¡32
 
t
 = 0;Å < 128; ++t)

38 
myRAM
[
t
] = 
øndom
.
	`√xt
();

42 
	`ª£t
();

43 
	}
}

46 
	gM6532
::~
	$M6532
()

48 
	}
}

51 c⁄° * 
M6532
::
	$«me
() const

54 
	}
}

57 
	gM6532
::
	$ª£t
()

59 
˛ass
 
R™dom
 
øndom
;

61 
myTimî
 = 25 + (
øndom
.
	`√xt
() % 75);

62 
myI¡îvÆShi·
 = 6;

63 
myCy˛esWhíTimîSë
 = 0;

64 
myCy˛esWhíI¡îru±Re£t
 = 0;

65 
myTimîRódA·îI¡îru±
 = 
Ál£
;

68 
myDDRA
 = 0x00;

69 
myDDRB
 = 0x00;

70 
	}
}

73 
	gM6532
::
	$sy°emCy˛esRe£t
()

77 
myCy˛esWhíTimîSë
 -
mySy°em
->
	`cy˛es
();

78 
myCy˛esWhíI¡îru±Re£t
 -
mySy°em
->
	`cy˛es
();

79 
	}
}

82 
	gM6532
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

85 
mySy°em
 = &
sy°em
;

87 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

88 
uI¡16
 
mask
 = 
mySy°em
->
	`∑geMask
();

91 
	`as£π
((0x1080 & 
mask
) == 0);

94 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

95 
ac˚ss
.
devi˚
 = 
this
;

98 
addªss
 = 0;áddªs†< 8192;áddªs†+(1 << 
shi·
))

100 if((
addªss
 & 0x1080) == 0x0080)

102 if((
addªss
 & 0x0200) == 0x0000)

104 
ac˚ss
.
dúe˘PìkBa£
 = &
myRAM
[
addªss
 & 0x007f];

105 
ac˚ss
.
dúe˘PokeBa£
 = &
myRAM
[
addªss
 & 0x007f];

106 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> 
shi·
, 
ac˚ss
);

110 
ac˚ss
.
dúe˘PìkBa£
 = 0;

111 
ac˚ss
.
dúe˘PokeBa£
 = 0;

112 
mySy°em
->
	`£tPageAc˚ss
(
addªss
 >> 
shi·
, 
ac˚ss
);

116 
	}
}

119 
uI¡8
 
	gM6532
::
	$≥ek
(
uI¡16
 
addr
)

121 
addr
 & 0x07)

126 
uI¡32
 
cy˛es
 = 
mySy°em
->
	`cy˛es
() - 1;

127 
uI¡32
 
dñè
 = 
cy˛es
 - 
myCy˛esWhíTimîSë
;

128 
I¡32
 
timî
 = (I¡32)
myTimî
 - (I¡32)(
dñè
 >> 
myI¡îvÆShi·
) - 1;

131 if(
timî
 >= 0)

133  (
uI¡8
)
timî
;

137 
timî
 = (
I¡32
)(
myTimî
 << 
myI¡îvÆShi·
Ë- (I¡32)
dñè
 - 1;

139 if((
timî
 <-2Ë&& !
myTimîRódA·îI¡îru±
)

142 
myTimîRódA·îI¡îru±
 = 
åue
;

143 
myCy˛esWhíI¡îru±Re£t
 = 
mySy°em
->
	`cy˛es
();

146 if(
myTimîRódA·îI¡îru±
)

148 
I¡32
 
off£t
 = 
myCy˛esWhíI¡îru±Re£t
 -

149 (
myCy˛esWhíTimîSë
 + (
myTimî
 << 
myI¡îvÆShi·
));

151 
timî
 = (
I¡32
)
myTimî
 - (I¡32)(
dñè
 >> 
myI¡îvÆShi·
Ë- 
off£t
;

154  (
uI¡8
)
timî
;

161 
uI¡32
 
cy˛es
 = 
mySy°em
->
	`cy˛es
() - 1;

162 
uI¡32
 
dñè
 = 
cy˛es
 - 
myCy˛esWhíTimîSë
;

163 
I¡32
 
timî
 = (I¡32)
myTimî
 - (I¡32)(
dñè
 >> 
myI¡îvÆShi·
) - 1;

165 if((
timî
 >0Ë|| 
myTimîRódA·îI¡îru±
)

173 
uI¡8
 
vÆue
 = 0x00;

175 if(
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Le·
).
	`ªad
(C⁄åﬁÀr::
O√
))

176 
vÆue
 |= 0x10;

177 if(
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Le·
).
	`ªad
(C⁄åﬁÀr::
Two
))

178 
vÆue
 |= 0x20;

179 if(
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Le·
).
	`ªad
(C⁄åﬁÀr::
Thªe
))

180 
vÆue
 |= 0x40;

181 if(
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Le·
).
	`ªad
(C⁄åﬁÀr::
Four
))

182 
vÆue
 |= 0x80;

184 if(
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Right
).
	`ªad
(C⁄åﬁÀr::
O√
))

185 
vÆue
 |= 0x01;

186 if(
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Right
).
	`ªad
(C⁄åﬁÀr::
Two
))

187 
vÆue
 |= 0x02;

188 if(
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Right
).
	`ªad
(C⁄åﬁÀr::
Thªe
))

189 
vÆue
 |= 0x04;

190 if(
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Right
).
	`ªad
(C⁄åﬁÀr::
Four
))

191 
vÆue
 |= 0x08;

193  
vÆue
;

198  
myDDRA
;

203  
myC⁄sﬁe
.
	`swôches
().
	`ªad
();

208  
myDDRB
;

213 #ifde‡
DEBUG_ACCESSES


214 
˚º
 << "BAD M6532 Pìk: " << 
hex
 << 
addr
 << 
ídl
;

219 
	}
}

222 
	gM6532
::
	$poke
(
uI¡16
 
addr
, 
uI¡8
 
vÆue
)

224 if((
addr
 & 0x07) == 0x00)

226 
uI¡8
 
a
 = 
vÆue
 & 
myDDRA
;

228 
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Le·
).
	`wrôe
(C⁄åﬁÀr::
O√
, 
a
 & 0x10);

229 
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Le·
).
	`wrôe
(C⁄åﬁÀr::
Two
, 
a
 & 0x20);

230 
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Le·
).
	`wrôe
(C⁄åﬁÀr::
Thªe
, 
a
 & 0x40);

231 
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Le·
).
	`wrôe
(C⁄åﬁÀr::
Four
, 
a
 & 0x80);

233 
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Right
).
	`wrôe
(C⁄åﬁÀr::
O√
, 
a
 & 0x01);

234 
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Right
).
	`wrôe
(C⁄åﬁÀr::
Two
, 
a
 & 0x02);

235 
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Right
).
	`wrôe
(C⁄åﬁÀr::
Thªe
, 
a
 & 0x04);

236 
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Right
).
	`wrôe
(C⁄åﬁÀr::
Four
, 
a
 & 0x08);

238 if((
addr
 & 0x07) == 0x01)

240 
myDDRA
 = 
vÆue
;

242 if((
addr
 & 0x07) == 0x02)

246 if((
addr
 & 0x07) == 0x03)

251 if((
addr
 & 0x17) == 0x14)

253 
myTimî
 = 
vÆue
;

254 
myI¡îvÆShi·
 = 0;

255 
myCy˛esWhíTimîSë
 = 
mySy°em
->
	`cy˛es
();

256 
myTimîRódA·îI¡îru±
 = 
Ál£
;

258 if((
addr
 & 0x17) == 0x15)

260 
myTimî
 = 
vÆue
;

261 
myI¡îvÆShi·
 = 3;

262 
myCy˛esWhíTimîSë
 = 
mySy°em
->
	`cy˛es
();

263 
myTimîRódA·îI¡îru±
 = 
Ál£
;

265 if((
addr
 & 0x17) == 0x16)

267 
myTimî
 = 
vÆue
;

268 
myI¡îvÆShi·
 = 6;

269 
myCy˛esWhíTimîSë
 = 
mySy°em
->
	`cy˛es
();

270 
myTimîRódA·îI¡îru±
 = 
Ál£
;

272 if((
addr
 & 0x17) == 0x17)

274 
myTimî
 = 
vÆue
;

275 
myI¡îvÆShi·
 = 10;

276 
myCy˛esWhíTimîSë
 = 
mySy°em
->
	`cy˛es
();

277 
myTimîRódA·îI¡îru±
 = 
Ál£
;

279 if((
addr
 & 0x14) == 0x04)

281 #ifde‡
DEBUG_ACCESSES


282 
˚º
 << "M6532 Poke (Write Edge Detect): "

283 << ((
addr
 & 0x02) ? "PA7Énabled" : "PA7 disabled")

285 << ((
addr
 & 0x01) ? "PositiveÉdge" : "NegativeÉdge")

286 << 
ídl
;

291 #ifde‡
DEBUG_ACCESSES


292 
˚º
 << "BAD M6532 Poke: " << 
hex
 << 
addr
 << 
ídl
;

295 
	}
}

298 
boﬁ
 
	gM6532
::
	$ßve
(
Sîülizî
& 
out
)

300 
°rög
 
devi˚
 = 
	`«me
();

302 
__åy


304 
out
.
	`putSåög
(
devi˚
);

307 
out
.
	`putI¡
(128);

308 
uI¡32
 
t
 = 0;Å < 128; ++t)

309 
out
.
	`putI¡
(
myRAM
[
t
]);

311 
out
.
	`putI¡
(
myTimî
);

312 
out
.
	`putI¡
(
myI¡îvÆShi·
);

313 
out
.
	`putI¡
(
myCy˛esWhíTimîSë
);

314 
out
.
	`putI¡
(
myCy˛esWhíI¡îru±Re£t
);

315 
out
.
	`putBoﬁ
(
myTimîRódA·îI¡îru±
);

316 
out
.
	`putI¡
(
myDDRA
);

317 
out
.
	`putI¡
(
myDDRB
);

320 
	`ˇtch
(*
msg
)

322 
˚º
 << 
msg
 << 
ídl
;

323  
Ál£
;

326 
	`__ˇtch
(...)

328 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
devi˚
 << 
ídl
;

329  
Ál£
;

332  
åue
;

333 
	}
}

336 
boﬁ
 
	gM6532
::
	$lﬂd
(
De£rülizî
& 
ö
)

338 
°rög
 
devi˚
 = 
	`«me
();

340 
__åy


342 if(
ö
.
	`gëSåög
(Ë!
devi˚
)

343  
Ál£
;

346 
uI¡32
 
limô
 = (uI¡32Ë
ö
.
	`gëI¡
();

347 
uI¡32
 
t
 = 0;Å < 
limô
; ++t)

348 
myRAM
[
t
] = (
uI¡8
Ë
ö
.
	`gëI¡
();

350 
myTimî
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

351 
myI¡îvÆShi·
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

352 
myCy˛esWhíTimîSë
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

353 
myCy˛esWhíI¡îru±Re£t
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

354 
myTimîRódA·îI¡îru±
 = 
ö
.
	`gëBoﬁ
();

356 
myDDRA
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

357 
myDDRB
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

360 
	`ˇtch
(*
msg
)

362 
˚º
 << 
msg
 << 
ídl
;

363  
Ál£
;

366 
	`__ˇtch
(...)

368 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
devi˚
 << 
ídl
;

369  
Ál£
;

372  
åue
;

373 
	}
}

377 
	gM6532
::
	$M6532
(c⁄° 
M6532
& 
c
)

378 : 
	$myC⁄sﬁe
(
c
.
myC⁄sﬁe
)

380 
	`as£π
(
Ál£
);

381 
	}
}

384 
	gM6532
& M6532::
›î©‹
 = (c⁄° 
M6532
&)

386 
as£π
(
Ál£
);

388  *
	gthis
;

	@emucore/M6532.hxx

19 #i‚de‡
M6532_HXX


20 
	#M6532_HXX


	)

22 
˛ass
 
	gC⁄sﬁe
;

23 
˛ass
 
	gSy°em
;

24 
˛ass
 
	gSîülizî
;

25 
˛ass
 
	gDe£rülizî
;

27 
	~"b•f.hxx
"

28 
	~"Devi˚.hxx
"

36 ˛as†
	cM6532
 : 
public
 
Devi˚


38 
public
:

44 
M6532
(c⁄° 
C⁄sﬁe
& 
c⁄sﬁe
);

49 
	mvútuÆ
 ~
M6532
();

51 
	mpublic
:

57 
vútuÆ
 c⁄° * 
	$«me
() const;

62 
vútuÆ
 
	`ª£t
();

69 
vútuÆ
 
	`sy°emCy˛esRe£t
();

77 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

85 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

93 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

95 
public
:

101 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

109 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

111 
¥iv©e
:

113 c⁄° 
C⁄sﬁe
& 
myC⁄sﬁe
;

116 
uI¡8
 
myRAM
[128];

119 
uI¡32
 
myTimî
;

122 
uI¡32
 
myI¡îvÆShi·
;

125 
I¡32
 
myCy˛esWhíTimîSë
;

128 
I¡32
 
myCy˛esWhíI¡îru±Re£t
;

131 
boﬁ
 
myTimîRódA·îI¡îru±
;

134 
uI¡8
 
myDDRA
;

137 
uI¡8
 
myDDRB
;

139 
¥iv©e
:

141 
	`M6532
(c⁄° 
M6532
&);

144 
M6532
& 
›î©‹
 = (const M6532&);

	@emucore/MD5.cpp

22 
	~"MD5.hxx
"

48 * 
	tPOINTER
;

49 
uI¡16
 
	tUINT2
;

50 
uI¡32
 
	tUINT4
;

55 
UINT4
 
	m°©e
[4];

56 
UINT4
 
	mcou¡
[2];

57 
	mbuf„r
[64];

58 } 
	tMD5_CTX
;

61 
	#S11
 7

	)

62 
	#S12
 12

	)

63 
	#S13
 17

	)

64 
	#S14
 22

	)

65 
	#S21
 5

	)

66 
	#S22
 9

	)

67 
	#S23
 14

	)

68 
	#S24
 20

	)

69 
	#S31
 4

	)

70 
	#S32
 11

	)

71 
	#S33
 16

	)

72 
	#S34
 23

	)

73 
	#S41
 6

	)

74 
	#S42
 10

	)

75 
	#S43
 15

	)

76 
	#S44
 21

	)

78 
MD5Inô
(
MD5_CTX
*);

79 
MD5Upd©e
(
MD5_CTX
*, const *, );

80 
MD5FöÆ
([16], 
MD5_CTX
*);

81 
MD5Tønsf‹m
(
UINT4
 [4], const [64]);

82 
Encode
(*, 
UINT4
*, );

83 
Decode
(
UINT4
*, const *, );

84 
MD5_mem˝y
(
POINTER
, POINTER, );

85 
MD5_mem£t
(
POINTER
, , );

87 
	gPADDING
[64] = {

94 
	#F
(
x
, 
y
, 
z
Ë(((xË& (y)Ë| ((~xË& (z)))

	)

95 
	#G
(
x
, 
y
, 
z
Ë(((xË& (z)Ë| ((yË& (~z)))

	)

96 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

97 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| (~z)))

	)

100 
	#ROTATE_LEFT
(
x
, 
n
Ë(((xË<< (n)Ë| ((xË>> (32-“))))

	)

104 
	#FF
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

105 (
a
Ë+
	`F
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

106 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

107 (
a
Ë+(
b
); \

108 }

	)

109 
	#GG
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

110 (
a
Ë+
	`G
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

111 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

112 (
a
Ë+(
b
); \

113 }

	)

114 
	#HH
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

115 (
a
Ë+
	`H
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

116 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

117 (
a
Ë+(
b
); \

118 }

	)

119 
	#II
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

120 (
a
Ë+
	`I
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

121 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

122 (
a
Ë+(
b
); \

123 }

	)

126 
	$MD5Inô
(
MD5_CTX
* 
c⁄ãxt
)

128 
c⁄ãxt
->
cou¡
[0] = context->count[1] = 0;

130 
c⁄ãxt
->
°©e
[0] = 0x67452301;

131 
c⁄ãxt
->
°©e
[1] = 0xefcdab89;

132 
c⁄ãxt
->
°©e
[2] = 0x98badcfe;

133 
c⁄ãxt
->
°©e
[3] = 0x10325476;

134 
	}
}

139 
	$MD5Upd©e
(
MD5_CTX
* 
c⁄ãxt
, c⁄° * 
öput
,

140 
öputLí
)

142 
i
, 
ödex
, 
∑πLí
;

145 
ödex
 = ()((
c⁄ãxt
->
cou¡
[0] >> 3) & 0x3F);

148 i‡((
c⁄ãxt
->
cou¡
[0] +((
UINT4
)
öputLí
 << 3))

149 < ((
UINT4
)
öputLí
 << 3))

150 
c⁄ãxt
->
cou¡
[1]++;

151 
c⁄ãxt
->
cou¡
[1] +((
UINT4
)
öputLí
 >> 29);

153 
∑πLí
 = 64 - 
ödex
;

156 i‡(
öputLí
 >
∑πLí
) {

157 
	`MD5_mem˝y
 ((
POINTER
)&
c⁄ãxt
->
buf„r
[
ödex
], (POINTER)
öput
, 
∑πLí
);

158 
	`MD5Tønsf‹m
 (
c⁄ãxt
->
°©e
, c⁄ãxt->
buf„r
);

160 
i
 = 
∑πLí
; i + 63 < 
öputLí
; i += 64)

161 
	`MD5Tønsf‹m
 (
c⁄ãxt
->
°©e
, &
öput
[
i
]);

163 
ödex
 = 0;

166 
i
 = 0;

169 
	`MD5_mem˝y
((
POINTER
)&
c⁄ãxt
->
buf„r
[
ödex
], (POINTER)&
öput
[
i
], 
öputLí
-i);

170 
	}
}

174 
	$MD5FöÆ
(
dige°
[16], 
MD5_CTX
* 
c⁄ãxt
)

176 
bôs
[8];

177 
ödex
, 
∑dLí
;

180 
	`Encode
 (
bôs
, 
c⁄ãxt
->
cou¡
, 8);

183 
ödex
 = ()((
c⁄ãxt
->
cou¡
[0] >> 3) & 0x3f);

184 
∑dLí
 = (
ödex
 < 56) ? (56 - index) : (120 - index);

185 
	`MD5Upd©e
 (
c⁄ãxt
, 
PADDING
, 
∑dLí
);

188 
	`MD5Upd©e
 (
c⁄ãxt
, 
bôs
, 8);

190 
	`Encode
 (
dige°
, 
c⁄ãxt
->
°©e
, 16);

193 
	`MD5_mem£t
 ((
POINTER
)
c⁄ãxt
, 0,  (*context));

194 
	}
}

197 
	$MD5Tønsf‹m
(
UINT4
 
°©e
[4], c⁄° 
block
[64])

199 
UINT4
 
a
 = 
°©e
[0], 
b
 = sèã[1], 
c
 = sèã[2], 
d
 = sèã[3], 
x
[16];

201 
	`Decode
 (
x
, 
block
, 64);

204 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 0], 
S11
, 0xd76aa478);

205 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 1], 
S12
, 0xe8c7b756);

206 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[ 2], 
S13
, 0x242070db);

207 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[ 3], 
S14
, 0xc1bdceee);

208 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 4], 
S11
, 0xf57c0faf);

209 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 5], 
S12
, 0x4787c62a);

210 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[ 6], 
S13
, 0xa8304613);

211 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[ 7], 
S14
, 0xfd469501);

212 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 8], 
S11
, 0x698098d8);

213 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 9], 
S12
, 0x8b44f7af);

214 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[10], 
S13
, 0xffff5bb1);

215 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[11], 
S14
, 0x895cd7be);

216 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[12], 
S11
, 0x6b901122);

217 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[13], 
S12
, 0xfd987193);

218 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[14], 
S13
, 0xa679438e);

219 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[15], 
S14
, 0x49b40821);

222 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 1], 
S21
, 0xf61e2562);

223 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[ 6], 
S22
, 0xc040b340);

224 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[11], 
S23
, 0x265e5a51);

225 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 0], 
S24
, 0xe9b6c7aa);

226 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 5], 
S21
, 0xd62f105d);

227 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[10], 
S22
, 0x2441453);

228 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[15], 
S23
, 0xd8a1e681);

229 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 4], 
S24
, 0xe7d3fbc8);

230 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 9], 
S21
, 0x21e1cde6);

231 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[14], 
S22
, 0xc33707d6);

232 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[ 3], 
S23
, 0xf4d50d87);

233 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 8], 
S24
, 0x455a14ed);

234 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[13], 
S21
, 0xa9e3e905);

235 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[ 2], 
S22
, 0xfcefa3f8);

236 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[ 7], 
S23
, 0x676f02d9);

237 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[12], 
S24
, 0x8d2a4c8a);

240 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 5], 
S31
, 0xfffa3942);

241 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 8], 
S32
, 0x8771f681);

242 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[11], 
S33
, 0x6d9d6122);

243 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[14], 
S34
, 0xfde5380c);

244 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 1], 
S31
, 0xa4beea44);

245 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 4], 
S32
, 0x4bdecfa9);

246 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[ 7], 
S33
, 0xf6bb4b60);

247 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[10], 
S34
, 0xbebfbc70);

248 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[13], 
S31
, 0x289b7ec6);

249 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 0], 
S32
, 0xeaa127fa);

250 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[ 3], 
S33
, 0xd4ef3085);

251 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[ 6], 
S34
, 0x4881d05);

252 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 9], 
S31
, 0xd9d4d039);

253 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[12], 
S32
, 0xe6db99e5);

254 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[15], 
S33
, 0x1fa27cf8);

255 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[ 2], 
S34
, 0xc4ac5665);

258 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 0], 
S41
, 0xf4292244);

259 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[ 7], 
S42
, 0x432aff97);

260 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[14], 
S43
, 0xab9423a7);

261 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 5], 
S44
, 0xfc93a039);

262 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[12], 
S41
, 0x655b59c3);

263 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[ 3], 
S42
, 0x8f0ccc92);

264 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[10], 
S43
, 0xffeff47d);

265 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 1], 
S44
, 0x85845dd1);

266 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 8], 
S41
, 0x6fa87e4f);

267 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[15], 
S42
, 0xfe2ce6e0);

268 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[ 6], 
S43
, 0xa3014314);

269 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[13], 
S44
, 0x4e0811a1);

270 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 4], 
S41
, 0xf7537e82);

271 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[11], 
S42
, 0xbd3af235);

272 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[ 2], 
S43
, 0x2ad7d2bb);

273 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 9], 
S44
, 0xeb86d391);

275 
°©e
[0] +
a
;

276 
°©e
[1] +
b
;

277 
°©e
[2] +
c
;

278 
°©e
[3] +
d
;

281 
	`MD5_mem£t
 ((
POINTER
)
x
, 0,  (x));

282 
	}
}

286 
	$Encode
(* 
ouçut
, 
UINT4
* 
öput
, 
Àn
)

288 
i
, 
j
;

290 
i
 = 0, 
j
 = 0; j < 
Àn
; i++, j += 4) {

291 
ouçut
[
j
] = ()(
öput
[
i
] & 0xff);

292 
ouçut
[
j
+1] = ()((
öput
[
i
] >> 8) & 0xff);

293 
ouçut
[
j
+2] = ()((
öput
[
i
] >> 16) & 0xff);

294 
ouçut
[
j
+3] = ()((
öput
[
i
] >> 24) & 0xff);

296 
	}
}

300 
	$Decode
(
UINT4
* 
ouçut
, c⁄° * 
öput
, 
Àn
)

302 
i
, 
j
;

304 
i
 = 0, 
j
 = 0; j < 
Àn
; i++, j += 4)

305 
ouçut
[
i
] = ((
UINT4
)
öput
[
j
]) | (((UINT4)input[j+1]) << 8) |

306 (((
UINT4
)
öput
[
j
+2]) << 16) | (((UINT4)input[j+3]) << 24);

307 
	}
}

310 
	$MD5_mem˝y
(
POINTER
 
ouçut
, POINTER 
öput
, 
Àn
)

312 
i
;

314 
i
 = 0; i < 
Àn
; i++)

315 
ouçut
[
i
] = 
öput
[i];

316 
	}
}

319 
	$MD5_mem£t
(
POINTER
 
ouçut
, 
vÆue
, 
Àn
)

321 
i
;

323 
i
 = 0; i < 
Àn
; i++)

324 ((*)
ouçut
)[
i
] = ()
vÆue
;

325 
	}
}

328 
°rög
 
	$MD5
(c⁄° 
uI¡8
* 
buf„r
, 
uI¡32
 
Àngth
)

330 
hex
[] = "0123456789abcdef";

331 
MD5_CTX
 
c⁄ãxt
;

332 
md5
[16];

334 
	`MD5Inô
(&
c⁄ãxt
);

335 
	`MD5Upd©e
(&
c⁄ãxt
, 
buf„r
, 
Àngth
);

336 
	`MD5FöÆ
(
md5
, &
c⁄ãxt
);

338 
°rög
 
ªsu…
;

339 
t
 = 0;Å < 16; ++t)

341 
ªsu…
 +
hex
[(
md5
[
t
] >> 4) & 0x0f];

342 
ªsu…
 +
hex
[
md5
[
t
] & 0x0f];

345  
ªsu…
;

346 
	}
}

	@emucore/MD5.hxx

19 #i‚de‡
MD5_HXX


20 
	#MD5_HXX


	)

22 
	~"b•f.hxx
"

32 
°rög
 
MD5
(c⁄° 
uI¡8
* 
buf„r
, 
uI¡32
 
Àngth
);

	@emucore/MediaFactory.cpp

23 
	~"MedüFa˘‹y.hxx
"

25 
	~"OSy°em.hxx
"

27 
	~"FømeBuf„r.hxx
"

28 
	~"FømeBuf„rSo·.hxx
"

29 #ifde‡
DISPLAY_OPENGL


30 
	~"FømeBuf„rGL.hxx
"

33 #i‡
deföed
(
PSP
)

34 
	~"FømeBuf„rPSP.hxx
"

35 #ñi‡
deföed
 (
_WIN32_WCE
)

36 
	~"FømeBuf„rWöCE.hxx
"

39 
	~"Sound.hxx
"

40 
	~"SoundNuŒ.hxx
"

41 #ifde‡
SOUND_SUPPORT


42 #i‚de‡
_WIN32_WCE


43 
	~"SoundSDL.hxx
"

45 
	~"SoundWöCE.hxx
"

50 
FømeBuf„r
* 
	gMedüFa˘‹y
::
	$¸óãVideo
(
OSy°em
* 
osy°em
)

52 
FømeBuf„r
* 
fb
 = (FømeBuf„r*Ë
NULL
;

55 #ifde‡
DISPLAY_OPENGL


56 if(
osy°em
->
	`£âögs
().
	`gëSåög
("video") == "gl")

58 c⁄° 
°rög
& 
gl_lib
 = 
osy°em
->
	`£âögs
().
	`gëSåög
("gl_lib");

59 if(
FømeBuf„rGL
::
	`lﬂdFuncs
(
gl_lib
))

60 
fb
 = 
√w
 
	`FømeBuf„rGL
(
osy°em
);

66 if(!
fb
)

69 #i‡
	`deföed
 (
PSP
)

70 
fb
 = 
√w
 
	`FømeBuf„rPSP
(
osy°em
);

71 #ñi‡
	`deföed
 (
_WIN32_WCE
)

72 
fb
 = 
√w
 
	`FømeBuf„rWöCE
(
osy°em
);

74 
fb
 = 
√w
 
	`FømeBuf„rSo·
(
osy°em
);

77 
fb
 = 
√w
 
	`FømeBuf„rSo·
(
osy°em
);

82 
	`as£π
(
fb
 !
NULL
);

83 
fb
->
	`ty≥
())

85 
kSo·Buf„r
:

86 
osy°em
->
	`£âögs
().
	`£tSåög
("video", "soft");

89 
kGLBuf„r
:

90 
osy°em
->
	`£âögs
().
	`£tSåög
("video", "gl");

94 
osy°em
->
	`£âögs
().
	`£tSåög
("video", "soft");

97  
fb
;

98 
	}
}

101 
Sound
* 
	gMedüFa˘‹y
::
	$¸óãAudio
(
OSy°em
* 
osy°em
)

103 
Sound
* 
sound
 = (Sound*Ë
NULL
;

105 #ifde‡
SOUND_SUPPORT


106 #i‡
	`deföed
 (
_WIN32_WCE
)

107 
sound
 = 
√w
 
	`SoundWöCE
(
osy°em
);

109 
sound
 = 
√w
 
	`SoundSDL
(
osy°em
);

112 
sound
 = 
√w
 
	`SoundNuŒ
(
osy°em
);

115  
sound
;

116 
	}
}

	@emucore/MediaFactory.hxx

19 #i‚de‡
MEDIA_FACTORY_HXX


20 
	#MEDIA_FACTORY_HXX


	)

22 
˛ass
 
	gFømeBuf„r
;

23 
˛ass
 
	gSound
;

24 
˛ass
 
	gOSy°em
;

34 ˛as†
	cMedüFa˘‹y


36 
	mpublic
:

37 
FømeBuf„r
* 
¸óãVideo
(
OSy°em
* 
osy°em
);

38 
Sound
* 
¸óãAudio
(
OSy°em
* 
osy°em
);

	@emucore/MediaSrc.cpp

19 
	~<as£π.h
>

20 
	~"MedüSrc.hxx
"

23 
	gMedüSour˚
::
	$MedüSour˚
()

25 
	}
}

28 
MedüSour˚
::~
	$MedüSour˚
()

30 
	}
}

33 
MedüSour˚
::
	$MedüSour˚
(c⁄° 
MedüSour˚
&)

35 
	}
}

38 
MedüSour˚
& MedüSour˚::
›î©‹
 = (const MediaSource&)

40 
as£π
(
Ál£
);

42  *
	gthis
;

	@emucore/MediaSrc.hxx

19 #i‚de‡
MEDIASOURCE_HXX


20 
	#MEDIASOURCE_HXX


	)

22 
	~<°rög
>

24 
˛ass
 
	gMedüSour˚
;

25 
˛ass
 
	gSound
;

27 
	~"b•f.hxx
"

35 ˛as†
	cMedüSour˚


37 
	mpublic
:

41 
MedüSour˚
();

46 
	mvútuÆ
 ~
MedüSour˚
();

48 
	mpublic
:

55 
vútuÆ
 
upd©e
() = 0;

62 
vútuÆ
 
uI¡8
* 
	$cuºítFømeBuf„r
() const = 0;

69 
vútuÆ
 
uI¡8
* 
	$¥eviousFømeBuf„r
() const = 0;

71 #ifde‡
DEVELOPER_SUPPORT


77 
vútuÆ
 
	`upd©eSˇ∆öe
() = 0;

84 
vútuÆ
 
	`upd©eSˇ∆öeBySãp
() = 0;

91 
vútuÆ
 
	`upd©eSˇ∆öeByTø˚
(
èrgë
) = 0;

94 
public
:

100 
vútuÆ
 c⁄° 
uI¡32
* 
	$∑Àâe
() const = 0;

107 
vútuÆ
 
uI¡32
 
	$height
() const = 0;

114 
vútuÆ
 
uI¡32
 
	$width
() const = 0;

116 
public
:

123 
vútuÆ
 
uI¡32
 
	$sˇ∆öes
() const = 0;

128 
vútuÆ
 
	`£tSound
(
Sound
& 
sound
) = 0;

130 
¥iv©e
:

132 
	`MedüSour˚
(c⁄° 
MedüSour˚
&);

135 
MedüSour˚
& 
›î©‹
 = (const MediaSource&);

	@emucore/NullDev.cpp

19 
	~"NuŒDev.hxx
"

20 
	~"Sîülizî.hxx
"

21 
	~"De£rülizî.hxx
"

24 
	gNuŒDevi˚
::
	$NuŒDevi˚
()

26 
	}
}

29 
NuŒDevi˚
::~
	$NuŒDevi˚
()

31 
	}
}

34 c⁄° * 
NuŒDevi˚
::
	$«me
() const

37 
	}
}

40 
	gNuŒDevi˚
::
	$ª£t
()

42 
	}
}

45 
NuŒDevi˚
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

47 
mySy°em
 = &
sy°em
;

48 
	}
}

51 
uI¡8
 
	gNuŒDevi˚
::
	$≥ek
(
uI¡16
 
addªss
)

53 
˚º
 << 
hex
 << "NuŒDevi˚:Öìk(" << 
addªss
 << ")" << 
ídl
;

55 
	}
}

58 
	gNuŒDevi˚
::
	$poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

60 
˚º
 << 
hex
 << "NuŒDevi˚:Öoke(" << 
addªss
 << "," << 
vÆue
 << ")" << 
ídl
;

61 
	}
}

64 
boﬁ
 
	gNuŒDevi˚
::
	$ßve
(
Sîülizî
& 
out
)

66  
åue
;

67 
	}
}

70 
boﬁ
 
	gNuŒDevi˚
::
	$lﬂd
(
De£rülizî
& 
ö
)

72  
åue
;

73 
	}
}

	@emucore/NullDev.hxx

19 #i‚de‡
NULLDEVICE_HXX


20 
	#NULLDEVICE_HXX


	)

22 
˛ass
 
	gSy°em
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

27 
	~"Devi˚.hxx
"

37 ˛as†
	cNuŒDevi˚
 : 
public
 
Devi˚


39 
public
:

43 
NuŒDevi˚
();

48 
	mvútuÆ
 ~
NuŒDevi˚
();

50 
	mpublic
:

56 
vútuÆ
 c⁄° * 
	$«me
() const;

61 
vútuÆ
 
	`ª£t
();

69 
vútuÆ
 
	`ö°Æl
(
Sy°em
& 
sy°em
);

77 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
);

85 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
);

87 
public
:

93 
vútuÆ
 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

101 
vútuÆ
 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

	@emucore/OSystem.cpp

19 
	~<ˇs£π
>

20 
	~<s°ªam
>

21 
	~<f°ªam
>

23 
	~"MedüFa˘‹y.hxx
"

25 #ifde‡
DEVELOPER_SUPPORT


26 
	~"Debuggî.hxx
"

29 #ifde‡
CHEATCODE_SUPPORT


30 
	~"ChótM™agî.hxx
"

33 
	~"unzù.h
"

34 
	~"MD5.hxx
"

35 
	~"FSNode.hxx
"

36 
	~"Sëtögs.hxx
"

37 
	~"Pr›sSë.hxx
"

38 
	~"EvítH™dÀr.hxx
"

40 
	~"Míu.hxx
"

41 
	~"Comm™dMíu.hxx
"

42 
	~"Launchî.hxx
"

43 
	~"F⁄t.hxx
"

44 
	~"SãŒaF⁄t.hxx
"

45 
	~"C⁄sﬁeF⁄t.hxx
"

47 
	~"b•f.hxx
"

48 
	~"OSy°em.hxx
"

51 
	gOSy°em
::
	$OSy°em
()

52 : 
	`myEvítH™dÀr
(
NULL
),

53 
	`myFømeBuf„r
(
NULL
),

54 
	`mySound
(
NULL
),

55 
	`mySëtögs
(
NULL
),

56 
	`myPr›Së
(
NULL
),

57 
	`myC⁄sﬁe
(
NULL
),

59 
	`myMíu
(
NULL
),

60 
	`myComm™dMíu
(
NULL
),

61 
	`myLaunchî
(
NULL
),

62 
	`myDebuggî
(
NULL
),

64 
	`myChótM™agî
(
NULL
),

65 
	`myRomFûe
(""),

66 
	`myFótuªs
("")

68 
	`myF⁄t
(
NULL
),

69 
	$myC⁄sﬁeF⁄t
(
NULL
)

72 
	}
}

75 
	gOSy°em
::~
	$OSy°em
()

78 
dñëe
 
myMíu
;

79 
dñëe
 
myComm™dMíu
;

80 
dñëe
 
myLaunchî
;

81 
dñëe
 
myF⁄t
;

82 
dñëe
 
myC⁄sﬁeF⁄t
;

86 
dñëe
 
myC⁄sﬁe
;

90 
dñëe
 
myFømeBuf„r
;

91 
dñëe
 
mySound
;

96 #ifde‡
DEVELOPER_SUPPORT


97 
dñëe
 
myDebuggî
;

99 #ifde‡
CHEATCODE_SUPPORT


100 
dñëe
 
myChótM™agî
;

102 
	}
}

105 
boﬁ
 
	gOSy°em
::
	$¸óã
()

109 
myF⁄t
 = 
√w
 
GUI
::
	`F⁄t
(GUI::
°ñœDesc
);

110 
myLaunchîF⁄t
 = 
√w
 
GUI
::
	`F⁄t
(GUI::
°ñœDesc
);

111 
myC⁄sﬁeF⁄t
 = 
√w
 
GUI
::
	`F⁄t
(GUI::
c⁄sﬁeDesc
);

114 
myMíu
 = 
√w
 
	`Míu
(
this
);

115 
myComm™dMíu
 = 
√w
 
	`Comm™dMíu
(
this
);

116 
myLaunchî
 = 
√w
 
	`Launchî
(
this
);

117 #ifde‡
DEVELOPER_SUPPORT


118 
myDebuggî
 = 
√w
 
	`Debuggî
(
this
);

121 #ifde‡
CHEATCODE_SUPPORT


122 
myChótM™agî
 = 
√w
 
	`ChótM™agî
(
this
);

126 #ifde‡
DISPLAY_OPENGL


127 
myFótuªs
 += "OpenGL ";

129 #ifde‡
SOUND_SUPPORT


130 
myFótuªs
 += "Sound ";

132 #ifde‡
JOYSTICK_SUPPORT


133 
myFótuªs
 += "Joystick ";

135 #ifde‡
SNAPSHOT_SUPPORT


136 
myFótuªs
 += "Snapshot ";

138 #ifde‡
DEVELOPER_SUPPORT


139 
myFótuªs
 += "Debugger ";

141 #ifde‡
CHEATCODE_SUPPORT


142 
myFótuªs
 += "Cheats";

145  
åue
;

146 
	}
}

149 
	gOSy°em
::
	$£tBa£Dú
(c⁄° 
°rög
& 
ba£dú
)

151 
myBa£Dú
 = 
ba£dú
;

152 if(!
Fûesy°emNode
::
	`dúExi°s
(
myBa£Dú
))

153 
Fûesy°emNode
::
	`makeDú
(
myBa£Dú
);

154 
	}
}

157 
	gOSy°em
::
	$£tSèãDú
(c⁄° 
°rög
& 
°©edú
)

159 
mySèãDú
 = 
°©edú
;

160 if(!
Fûesy°emNode
::
	`dúExi°s
(
mySèãDú
))

161 
Fûesy°emNode
::
	`makeDú
(
mySèãDú
);

162 
	}
}

165 
	gOSy°em
::
	$£tPr›îtõsDú
(c⁄° 
°rög
& 
∑th
)

167 
myPr›îtõsFûe
 = 
∑th
 + 
BSPF_PATH_SEPARATOR
 + "stella.pro";

168 
	}
}

171 
	gOSy°em
::
	$£tC⁄figFûe
(c⁄° 
°rög
& 
fûe
)

173 
myC⁄figFûe
 = 
fûe
;

174 
	}
}

177 
	gOSy°em
::
	$£tFømî©e
(
uI¡32
 
‰amî©e
)

179 
myDi•œyFømeR©e
 = 
‰amî©e
;

180 
myTimePîFøme
 = (
uI¡32
)(1000000.0 / ()
myDi•œyFømeR©e
);

181 
	}
}

184 
boﬁ
 
	gOSy°em
::
	$¸óãFømeBuf„r
(
boﬁ
 
showmesßge
)

187 
dñëe
 
myFømeBuf„r
; myFømeBuf„∏
NULL
;

190 
myFømeBuf„r
 = 
MedüFa˘‹y
::
	`¸óãVideo
(
this
);

194 
myEvítH™dÀr
->
	`°©e
())

196 
EvítH™dÀr
::
S_EMULATE
:

197 
EvítH™dÀr
::
S_MENU
:

198 
EvítH™dÀr
::
S_CMDMENU
:

199 
myC⁄sﬁe
->
	`öôülizeVideo
();

200 if(
showmesßge
)

202 
myFømeBuf„r
->
	`ty≥
())

204 
kSo·Buf„r
:

205 
myFømeBuf„r
->
	`showMesßge
("Software mode");

207 
kGLBuf„r
:

208 
myFømeBuf„r
->
	`showMesßge
("OpenGL mode");

214 
EvítH™dÀr
::
S_LAUNCHER
:

215 
myLaunchî
->
	`öôülizeVideo
();

218 #ifde‡
DEVELOPER_SUPPORT


219 
EvítH™dÀr
::
S_DEBUGGER
:

220 
myDebuggî
->
	`öôülizeVideo
();

229  
åue
;

230 
	}
}

233 
	gOSy°em
::
	$toggÀFømeBuf„r
()

235 #ifde‡
DISPLAY_OPENGL


237 
°rög
 
video
 = 
mySëtögs
->
	`gëSåög
("video");

238 if(
video
 == "soft")

239 
video
 = "gl";

240 if(
video
 == "gl")

241 
video
 = "soft";

243 
video
 = "soft";

245 
myEvítH™dÀr
->
	`h™dÀEvít
(
Evít
::
Pau£
, 0);

248 
boﬁ
 
∑u£
 = 
myEvítH™dÀr
->
	`isPau£d
();

251 
mySëtögs
->
	`£tSåög
("video", 
video
);

252 
	`¸óãFømeBuf„r
(
åue
);

255 
myEvítH™dÀr
->
	`∑u£
(
∑u£
);

257 
	}
}

260 
	gOSy°em
::
	$¸óãSound
()

263 
dñëe
 
mySound
; mySound = 
NULL
;

266 
mySound
 = 
MedüFa˘‹y
::
	`¸óãAudio
(
this
);

267 #i‚de‡
SOUND_SUPPORT


268 
mySëtögs
->
	`£tBoﬁ
("sound", 
Ál£
);

272 
myEvítH™dÀr
->
	`°©e
())

274 
EvítH™dÀr
::
S_EMULATE
:

275 
EvítH™dÀr
::
S_MENU
:

276 
EvítH™dÀr
::
S_CMDMENU
:

277 
EvítH™dÀr
::
S_DEBUGGER
:

278 
myC⁄sﬁe
->
	`öôülizeAudio
();

284 
	}
}

287 
boﬁ
 
	gOSy°em
::
	$¸óãC⁄sﬁe
(c⁄° 
°rög
& 
romfûe
)

290 
dñëe
 
myC⁄sﬁe
; myC⁄sﬁê
NULL
;

292 
boﬁ
 
ªtvÆ
 = 
Ál£
, 
showmesßge
 = false;

295 if(
romfûe
 == "")

297 
showmesßge
 = 
åue
;

298 if(
myRomFûe
 == "")

300 
˚º
 << "ERROR: Rom fûênŸ s≥cifõd ..." << 
ídl
;

301  
Ál£
;

305 
myRomFûe
 = 
romfûe
;

308 
uI¡8
* 
image
;

309 
size
 = -1;

310 
°rög
 
md5
;

311 if(
	`›íROM
(
myRomFûe
, 
md5
, &
image
, &
size
))

315 
myC⁄sﬁe
 = 
√w
 
	`C⁄sﬁe
(
image
, 
size
, 
md5
, 
this
);

316 if(
myC⁄sﬁe
->
	`isInôülized
())

318 #ifde‡
CHEATCODE_SUPPORT


319 
myChótM™agî
->
	`lﬂdChóts
(
md5
);

322 if(
showmesßge
)

323 
myFømeBuf„r
->
	`showMesßge
("New console created");

324 if(
mySëtögs
->
	`gëBoﬁ
("showinfo"))

325 
cout
 << "Gamêc⁄sﬁê¸óãd: " << 
myRomFûe
 << 
ídl
;

327 
myEvítH™dÀr
->
	`ª£t
(
EvítH™dÀr
::
S_EMULATE
);

328 
myFømeBuf„r
->
	`£tCurs‹Sèã
();

329 
ªtvÆ
 = 
åue
;

333 
˚º
 << "ERROR: Couldn'à¸óã c⁄sﬁêf‹ " << 
myRomFûe
 << " ..." << 
ídl
;

334 
ªtvÆ
 = 
Ál£
;

339 
˚º
 << "ERROR: Couldn'à›í " << 
myRomFûe
 << " ..." << 
ídl
;

340 
ªtvÆ
 = 
Ál£
;

344 if(
size
 != -1)

345 
dñëe
[] 
image
;

347  
ªtvÆ
;

348 
	}
}

351 
	gOSy°em
::
	$¸óãLaunchî
()

353 
mySound
->
	`˛o£
();

354 
	`£tFømî©e
(60);

355 
myEvítH™dÀr
->
	`ª£t
(
EvítH™dÀr
::
S_LAUNCHER
);

359 
myLaunchî
->
	`öôülizeVideo
();

362 
myLaunchî
->
	`öôülize
();

363 
myLaunchî
->
	`ªSèck
();

366 
myEvítH™dÀr
->
	`ª‰eshDi•œy
();

368 
myFømeBuf„r
->
	`£tCurs‹Sèã
();

369 
	}
}

372 
boﬁ
 
	gOSy°em
::
	$›íROM
(c⁄° 
°rög
& 
rom
, såög& 
md5
, 
uI¡8
** 
image
, * 
size
)

376 
unzFûe
 
tz
;

377 if((
tz
 = 
	`unzO≥n
(
rom
.
	`c_°r
())Ë!
NULL
)

379 if(
	`unzGoToFú°Fûe
(
tz
Ë=
UNZ_OK
)

381 
unz_fûe_öfo
 
ufo
;

387 
fûíame
[1024];

389 
	`unzGëCuºítFûeInfo
(
tz
, &
ufo
, 
fûíame
, 1024, 0, 0, 0, 0);

390 
fûíame
[1023] = '\0';

392 if(
	`°æí
(
fûíame
) >= 4)

395 * 
ext
 = 
fûíame
 + 
	`°æí
(filename) - 4;

397 if(!
	`STR_CASE_CMP
(
ext
, ".bin") || !STR_CASE_CMP(ext, ".a26"))

402 if(
	`unzGoToNextFûe
(
tz
Ë!
UNZ_OK
)

407 if(
ufo
.
uncom¥es£d_size
 <= 0)

409 
	`unzClo£
(
tz
);

410  
Ál£
;

413 *
size
 = 
ufo
.
uncom¥es£d_size
;

414 *
image
 = 
√w
 
uI¡8
[*
size
];

419 
	`unzO≥nCuºítFûe
(
tz
);

420 
	`unzRódCuºítFûe
(
tz
, *
image
, *
size
);

421 
	`unzClo£CuºítFûe
(
tz
);

422 
	`unzClo£
(
tz
);

426 
	`unzClo£
(
tz
);

427  
Ál£
;

432 
if°ªam
 
	`ö
(
rom
.
	`c_°r
(), 
ios_ba£
::
bö¨y
);

433 if(!
ö
)

434  
Ál£
;

436 *
image
 = 
√w
 
uI¡8
[512 * 1024];

437 
ö
.
	`ªad
((*)(*
image
), 512 * 1024);

438 *
size
 = 
ö
.
	`gcou¡
();

439 
ö
.
	`˛o£
();

444 
md5
 = 
	`MD5
(*
image
, *
size
);

449 
Pr›îtõs
 
¥›s
;

450 
myPr›Së
->
	`gëMD5
(
md5
, 
¥›s
);

452 
°rög
 
«me
 = 
¥›s
.
	`gë
(
C¨åidge_Name
);

453 if(
«me
 == "Untitled")

456 
°rög
::
size_ty≥
 
pos
 = 
rom
.
	`föd_œ°_of
(
BSPF_PATH_SEPARATOR
);

457 if(
pos
+1 !
°rög
::
≈os
)

459 
«me
 = 
rom
.
	`sub°r
(
pos
+1);

460 
¥›s
.
	`£t
(
C¨åidge_MD5
, 
md5
);

461 
¥›s
.
	`£t
(
C¨åidge_Name
, 
«me
);

462 
myPr›Së
->
	`ö£π
(
¥›s
);

466  
åue
;

467 
	}
}

470 
	gOSy°em
::
	$£tDeÁu…Joym≠
()

473 
myEvítH™dÀr
->
	`£tDeÁu…JoyM≠pög
(
Evít
::
Joy°ickZîoFúe
, 0, 0);

476 
myEvítH™dÀr
->
	`£tDeÁu…JoyM≠pög
(
Evít
::
Joy°ickO√Fúe
, 1, 0);

477 
	}
}

480 
	gOSy°em
::
	$£tDeÁu…JoyAxisM≠
()

483 
myEvítH™dÀr
->
	`£tDeÁu…JoyAxisM≠pög
(
Evít
::
Joy°ickZîoLe·
, 0, 0, 0);

484 
myEvítH™dÀr
->
	`£tDeÁu…JoyAxisM≠pög
(
Evít
::
Joy°ickZîoRight
, 0, 0, 1);

487 
myEvítH™dÀr
->
	`£tDeÁu…JoyAxisM≠pög
(
Evít
::
Joy°ickZîoUp
, 0, 1, 0);

488 
myEvítH™dÀr
->
	`£tDeÁu…JoyAxisM≠pög
(
Evít
::
Joy°ickZîoDown
, 0, 1, 1);

491 
myEvítH™dÀr
->
	`£tDeÁu…JoyAxisM≠pög
(
Evít
::
Joy°ickO√Le·
, 1, 0, 0);

492 
myEvítH™dÀr
->
	`£tDeÁu…JoyAxisM≠pög
(
Evít
::
Joy°ickO√Right
, 1, 0, 1);

495 
myEvítH™dÀr
->
	`£tDeÁu…JoyAxisM≠pög
(
Evít
::
Joy°ickO√Up
, 1, 1, 0);

496 
myEvítH™dÀr
->
	`£tDeÁu…JoyAxisM≠pög
(
Evít
::
Joy°ickO√Down
, 1, 1, 1);

497 
	}
}

500 
	gOSy°em
::
	$£tDeÁu…JoyH©M≠
()

502 
	}
}

505 
OSy°em
::
	$pﬁlEvít
()

507 
	}
}

510 
boﬁ
 
OSy°em
::
	$joyBuâ⁄H™dÀd
(
buâ⁄
)

514  
Ál£
;

515 
	}
}

518 
	gOSy°em
::
	$°©eCh™ged
(
EvítH™dÀr
::
Sèã
 
°©e
)

520 
	}
}

523 
OSy°em
::
	$∑u£Ch™ged
(
boﬁ
 
°©us
)

525 
	}
}

528 
OSy°em
::
	$OSy°em
(c⁄° 
OSy°em
& 
osy°em
)

530 
	}
}

533 
OSy°em
& OSy°em::
›î©‹
 = (const OSystem&)

535 
as£π
(
Ál£
);

537  *
	gthis
;

	@emucore/OSystem.hxx

19 #i‚de‡
OSYSTEM_HXX


20 
	#OSYSTEM_HXX


	)

22 
˛ass
 
	gPr›îtõsSë
;

24 
˛ass
 
	gMíu
;

25 
˛ass
 
	gComm™dMíu
;

26 
˛ass
 
	gLaunchî
;

27 
˛ass
 
	gDebuggî
;

28 
˛ass
 
	gChótM™agî
;

30 
	~"EvítH™dÀr.hxx
"

31 
	~"FømeBuf„r.hxx
"

32 
	~"Sound.hxx
"

33 
	~"Sëtögs.hxx
"

34 
	~"C⁄sﬁe.hxx
"

35 
	~"SåögLi°.hxx
"

37 
	~"F⁄t.hxx
"

40 
	~"b•f.hxx
"

51 ˛as†
	cOSy°em


53 
	mpublic
:

57 
OSy°em
();

62 
	mvútuÆ
 ~
OSy°em
();

67 
vútuÆ
 
boﬁ
 
¸óã
();

69 
	mpublic
:

75 
	$©èch
(
EvítH™dÀr
* 
evíth™dÀr
Ë{ 
myEvítH™dÀr
 =Éventhandler; }

82 
	$©èch
(
Sëtögs
* 
£âögs
Ë{ 
mySëtögs
 = sëtögs; 
	}
}

89 
	$©èch
(
Pr›îtõsSë
* 
¥›£t
Ë{ 
myPr›Së
 =Ör›£t; 
	}
}

96 
ölöe
 
	gEvítH™dÀr
& 
	$evítH™dÀr
(Ëc⁄° {  *
myEvítH™dÀr
; 
	}
}

103 
ölöe
 
	gFømeBuf„r
& 
	$‰ameBuf„r
(Ëc⁄° {  *
myFømeBuf„r
; 
	}
}

110 
ölöe
 
	gSound
& 
	$sound
(Ëc⁄° {  *
mySound
; 
	}
}

117 
ölöe
 
	gSëtögs
& 
	$£âögs
(Ëc⁄° {  *
mySëtögs
; 
	}
}

124 
ölöe
 
	gPr›îtõsSë
& 
	$¥›Së
(Ëc⁄° {  *
myPr›Së
; 
	}
}

131 
ölöe
 
	gC⁄sﬁe
& 
	$c⁄sﬁe
(Ëc⁄° {  *
myC⁄sﬁe
; 
	}
}

138 
ölöe
 
	gMíu
& 
	$míu
(Ëc⁄° {  *
myMíu
; 
	}
}

145 
ölöe
 
	gComm™dMíu
& 
	$comm™dMíu
(Ëc⁄° {  *
myComm™dMíu
; 
	}
}

152 
ölöe
 
	gLaunchî
& 
	$œunchî
(Ëc⁄° {  *
myLaunchî
; 
	}
}

154 #ifde‡
DEVELOPER_SUPPORT


160 
ölöe
 
	gDebuggî
& 
	$debuggî
(Ëc⁄° {  *
myDebuggî
; 
	}
}

163 #ifde‡
CHEATCODE_SUPPORT


169 
ölöe
 
	gChótM™agî
& 
	$chót
(Ëc⁄° {  *
myChótM™agî
; 
	}
}

178 
ölöe
 c⁄° 
	gGUI
::
F⁄t
& 
	$f⁄t
(Ëc⁄° {  *
myF⁄t
; 
	}
}

187 
ölöe
 c⁄° 
	gGUI
::
F⁄t
& 
	$œunchîF⁄t
(Ëc⁄° {  *
myLaunchîF⁄t
; 
	}
}

196 
ölöe
 c⁄° 
	gGUI
::
F⁄t
& 
	$c⁄sﬁeF⁄t
(Ëc⁄° {  *
myC⁄sﬁeF⁄t
; 
	}
}

205 
vútuÆ
 
£tFømî©e
(
uI¡32
 
‰amî©e
);

212 
uI¡32
 
	$‰ameR©e
(Ëc⁄° {  
myDi•œyFømeR©e
; 
	}
}

217 c⁄° 
	g°rög
& 
	$ba£Dú
(Ëc⁄° {  
myBa£Dú
; 
	}
}

222 c⁄° 
	g°rög
& 
	$°©eDú
(Ëc⁄° {  
mySèãDú
; 
	}
}

229 c⁄° 
	g°rög
& 
	$c⁄figFûe
(Ëc⁄° {  
myC⁄figFûe
; 
	}
}

237 c⁄° 
	g°rög
& 
	$¥›îtõsFûe
(Ëc⁄° {  
myPr›îtõsFûe
; 
	}
}

245 c⁄° 
	g°rög
& 
	$ˇcheFûe
(Ëc⁄° {  
myGameLi°CacheFûe
; 
	}
}

253 c⁄° 
	g°rög
& 
	$romFûe
(Ëc⁄° {  
myRomFûe
; 
	}
}

261 
boﬁ
 
¸óãFømeBuf„r
(boﬁ 
showmesßge
 = 
Ál£
);

266 
toggÀFømeBuf„r
();

272 
¸óãSound
();

280 
boﬁ
 
¸óãC⁄sﬁe
(c⁄° 
°rög
& 
romfûe
 = "");

285 
¸óãLaunchî
();

292 c⁄° 
	g°rög
& 
	$„©uªs
(Ëc⁄° {  
myFótuªs
; 
	}
}

304 
boﬁ
 
›íROM
(c⁄° 
°rög
& 
rom
, såög& 
md5
, 
uI¡8
** 
image
, * 
size
);

306 
	gpublic
:

316 
vútuÆ
 
maöLo›
() = 0;

323 
vútuÆ
 
uI¡32
 
gëTicks
() = 0;

328 
vútuÆ
 
gëS¸ìnDimísi⁄s
(& 
width
, & 
height
) = 0;

338 
vútuÆ
 
£tDeÁu…Joym≠
();

344 
vútuÆ
 
£tDeÁu…JoyAxisM≠
();

350 
vútuÆ
 
£tDeÁu…JoyH©M≠
();

355 
vútuÆ
 
pﬁlEvít
();

362 
vútuÆ
 
boﬁ
 
joyBuâ⁄H™dÀd
(
buâ⁄
);

367 
vútuÆ
 
°©eCh™ged
(
EvítH™dÀr
::
Sèã
 
°©e
);

372 
vútuÆ
 
∑u£Ch™ged
(
boﬁ
 
°©us
);

374 
	g¥Ÿe˘ed
:

378 
£tBa£Dú
(c⁄° 
°rög
& 
ba£dú
);

383 
£tSèãDú
(c⁄° 
°rög
& 
°©edú
);

388 
£tPr›îtõsDú
(c⁄° 
°rög
& 
∑th
);

393 
£tC⁄figFûe
(c⁄° 
°rög
& 
fûe
);

398 
	$£tCacheFûe
(c⁄° 
°rög
& 
ˇchefûe
Ë{ 
myGameLi°CacheFûe
 = cachefûe; 
	}
}

400 
	g¥Ÿe˘ed
:

402 
EvítH™dÀr
* 
myEvítH™dÀr
;

405 
FømeBuf„r
* 
	gmyFømeBuf„r
;

408 
Sound
* 
	gmySound
;

411 
Sëtögs
* 
	gmySëtögs
;

414 
Pr›îtõsSë
* 
	gmyPr›Së
;

417 
C⁄sﬁe
* 
	gmyC⁄sﬁe
;

420 
Míu
* 
	gmyMíu
;

423 
Comm™dMíu
* 
	gmyComm™dMíu
;

426 
Launchî
* 
	gmyLaunchî
;

429 
Debuggî
* 
	gmyDebuggî
;

432 
ChótM™agî
* 
	gmyChótM™agî
;

435 
uI¡32
 
	gmyDi•œyFømeR©e
;

438 
uI¡32
 
	gmyTimePîFøme
;

440 
	g¥iv©e
:

441 
°rög
 
myBa£Dú
;

442 
°rög
 
	gmySèãDú
;

444 
°rög
 
	gmyC⁄figFûe
;

445 
°rög
 
	gmyPr›îtõsFûe
;

447 
°rög
 
	gmyGameLi°CacheFûe
;

448 
°rög
 
	gmyRomFûe
;

450 
°rög
 
	gmyFótuªs
;

454 
	gGUI
::
F⁄t
* 
myF⁄t
;

457 
	gGUI
::
F⁄t
* 
myLaunchîF⁄t
;

460 
	gGUI
::
F⁄t
* 
myC⁄sﬁeF⁄t
;

463 
	g¥iv©e
:

465 
OSy°em
(const OSystem&);

468 
	gOSy°em
& 
	g›î©‹
 = (c⁄° 
OSy°em
&);

	@emucore/Paddles.cpp

19 
	~<as£π.h
>

20 
	~"Evít.hxx
"

21 
	~"PaddÀs.hxx
"

24 
	gPaddÀs
::
	$PaddÀs
(
Jack
 
jack
, c⁄° 
Evít
& 
evít
)

25 : 
	$C⁄åﬁÀr
(
jack
, 
evít
)

27 
myTy≥
 = 
C⁄åﬁÀr
::
PaddÀs
;

28 
	}
}

31 
	gPaddÀs
::~
	$PaddÀs
()

33 
	}
}

36 
boﬁ
 
PaddÀs
::
	$ªad
(
DigôÆPö
 
pö
)

38 
pö
)

40 
Thªe
:

41  (
myJack
 =
Le·
Ë? (
myEvít
.
	`gë
(
Evít
::
PaddÀO√Fúe
) == 0) :

42 (
myEvít
.
	`gë
(
Evít
::
PaddÀThªeFúe
) == 0);

44 
Four
:

45  (
myJack
 =
Le·
Ë? (
myEvít
.
	`gë
(
Evít
::
PaddÀZîoFúe
) == 0) :

46 (
myEvít
.
	`gë
(
Evít
::
PaddÀTwoFúe
) == 0);

50  
åue
;

52 
	}
}

55 
I¡32
 
	gPaddÀs
::
	$ªad
(
A«logPö
 
pö
)

57 
pö
)

59 
Five
:

60  (
myJack
 =
Le·
Ë? 
myEvít
.
	`gë
(
Evít
::
PaddÀO√Resi°™˚
) :

61 
myEvít
.
	`gë
(
Evít
::
PaddÀThªeResi°™˚
);

63 
Nöe
:

64  (
myJack
 =
Le·
Ë? 
myEvít
.
	`gë
(
Evít
::
PaddÀZîoResi°™˚
) :

65 
myEvít
.
	`gë
(
Evít
::
PaddÀTwoResi°™˚
);

68  
maximumResi°™˚
;

70 
	}
}

73 
	gPaddÀs
::
	$wrôe
(
DigôÆPö
, 
boﬁ
)

76 
	}
}

	@emucore/Paddles.hxx

19 #i‚de‡
PADDLES_HXX


20 
	#PADDLES_HXX


	)

22 
	~"b•f.hxx
"

23 
	~"C⁄åﬁ.hxx
"

31 ˛as†
	cPaddÀs
 : 
public
 
C⁄åﬁÀr


33 
public
:

40 
PaddÀs
(
Jack
 
jack
, c⁄° 
Evít
& 
evít
);

45 
	mvútuÆ
 ~
PaddÀs
();

47 
	mpublic
:

54 
vútuÆ
 
boﬁ
 
ªad
(
DigôÆPö
 
pö
);

63 
vútuÆ
 
I¡32
 
ªad
(
A«logPö
 
pö
);

73 
vútuÆ
 
wrôe
(
DigôÆPö
 
pö
, 
boﬁ
 
vÆue
);

	@emucore/Props.cpp

19 
	~<c˘y≥
>

20 
	~<Æg‹ôhm
>

22 
	~"GuiUtûs.hxx
"

23 
	~"Pr›s.hxx
"

26 
	gPr›îtõs
::
	$Pr›îtõs
()

28 
	`£tDeÁu…s
();

29 
	}
}

32 
	gPr›îtõs
::
	$Pr›îtõs
(c⁄° 
Pr›îtõs
& 
¥›îtõs
)

34 
	`c›y
(
¥›îtõs
);

35 
	}
}

38 
	gPr›îtõs
::~
	$Pr›îtõs
()

40 
	}
}

43 c⁄° 
°rög
& 
Pr›îtõs
::
	$gë
(
Pr›îtyTy≥
 
key
) const

45 if(
key
 >0 && key < 
La°Pr›Ty≥
)

46  
myPr›îtõs
[
key
];

48  
Em±ySåög
;

49 
	}
}

52 
	gPr›îtõs
::
	$£t
(
Pr›îtyTy≥
 
key
, c⁄° 
°rög
& 
vÆue
)

54 if(
key
 >0 && key < 
La°Pr›Ty≥
)

56 
myPr›îtõs
[
key
] = 
vÆue
;

58 
key
)

60 
C¨åidge_Sound
:

61 
C¨åidge_Ty≥
:

62 
C⁄sﬁe_Le·Difficu…y
:

63 
C⁄sﬁe_RightDifficu…y
:

64 
C⁄sﬁe_Tñevisi⁄Ty≥
:

65 
C⁄sﬁe_Sw≠P‹ts
:

66 
C⁄åﬁÀr_Le·
:

67 
C⁄åﬁÀr_Right
:

68 
Di•œy_F‹m©
:

69 
Di•œy_Pho•h‹
:

70 
Emuœti⁄_HmoveBœnks
:

72 
	`å™sf‹m
(
myPr›îtõs
[
key
].
	`begö
(), myPr›îtõs[key].
	`íd
(),

73 
myPr›îtõs
[
key
].
	`begö
(), ((*)()Ë
touµî
);

81 
	}
}

84 
	gPr›îtõs
::
	$lﬂd
(
i°ªam
& 
ö
)

86 
	`£tDeÁu…s
();

88 
°rög
 
löe
, 
key
, 
vÆue
;

89 
°rög
::
size_ty≥
 
⁄e
, 
two
, 
thªe
, 
four
, 
g¨bage
;

92 
	`gëlöe
(
ö
, 
löe
))

95 (
g¨bage
 = 
löe
.
	`föd
("\t")Ë!
°rög
::
≈os
)

96 
löe
.
	`îa£
(
g¨bage
, 1);

99 if((
löe
.
	`Àngth
() == 0) || (line[0] == ';'))

103 if(
löe
 == "\"\"")

106 
⁄e
 = 
löe
.
	`föd
("\"", 0);

107 
two
 = 
löe
.
	`föd
("\"", 
⁄e
 + 1);

108 
thªe
 = 
löe
.
	`föd
("\"", 
two
 + 1);

109 
four
 = 
löe
.
	`föd
("\"", 
thªe
 + 1);

112 if((
⁄e
 =
°rög
::
≈os
Ë|| (
two
 == string::npos) ||

113 (
thªe
 =
°rög
::
≈os
Ë|| (
four
 == string::npos))

117 
key
 = 
löe
.
	`sub°r
(
⁄e
 + 1, 
two
 - one - 1);

118 
vÆue
 = 
löe
.
	`sub°r
(
thªe
 + 1, 
four
 -Åhree - 1);

121 
Pr›îtyTy≥
 
ty≥
 = 
	`gëPr›îtyTy≥
(
key
);

122 
	`£t
(
ty≥
, 
vÆue
);

124 
	}
}

127 
	gPr›îtõs
::
	$ßve
(
o°ªam
& 
out
)

130 
i
 = 0; i < 
La°Pr›Ty≥
; ++i)

133 if(
myPr›îtõs
[
i
] !
ourDeÁu…Pr›îtõs
[i])

135 
	`wrôeQuŸedSåög
(
out
, 
ourPr›îtyNames
[
i
]);

136 
out
.
	`put
(' ');

137 
	`wrôeQuŸedSåög
(
out
, 
myPr›îtõs
[
i
]);

138 
out
.
	`put
('\n');

143 
	`wrôeQuŸedSåög
(
out
, "");

144 
out
.
	`put
('\n');

145 
out
.
	`put
('\n');

146 
	}
}

149 
°rög
 
	gPr›îtõs
::
	$ªadQuŸedSåög
(
i°ªam
& 
ö
)

151 
c
;

154 
ö
.
	`gë
(
c
))

156 if(
c
 == '"')

163 
°rög
 
s
;

164 
ö
.
	`gë
(
c
))

166 if((
c
 ='\\'Ë&& (
ö
.
	`≥ek
() == '"'))

168 
ö
.
	`gë
(
c
);

170 if((
c
 ='\\'Ë&& (
ö
.
	`≥ek
() == '\\'))

172 
ö
.
	`gë
(
c
);

174 if(
c
 == '"')

178 if(
c
 == '\r')

183 
s
 +
c
;

186  
s
;

187 
	}
}

190 
	gPr›îtõs
::
	$wrôeQuŸedSåög
(
o°ªam
& 
out
, c⁄° 
°rög
& 
s
)

192 
out
.
	`put
('"');

193 
uI¡32
 
i
 = 0; i < 
s
.
	`Àngth
(); ++i)

195 if(
s
[
i
] == '\\')

197 
out
.
	`put
('\\');

198 
out
.
	`put
('\\');

200 if(
s
[
i
] == '\"')

202 
out
.
	`put
('\\');

203 
out
.
	`put
('"');

207 
out
.
	`put
(
s
[
i
]);

210 
out
.
	`put
('"');

211 
	}
}

214 
	gPr›îtõs
& Pr›îtõs::
›î©‹
 = (c⁄° 
Pr›îtõs
& 
¥›îtõs
)

217 if(
this
 !&
¥›îtõs
)

220 
c›y
(
¥›îtõs
);

223  *
	gthis
;

227 
	gPr›îtõs
::
	$c›y
(c⁄° 
Pr›îtõs
& 
¥›îtõs
)

230 
i
 = 0; i < 
La°Pr›Ty≥
; ++i)

231 
myPr›îtõs
[
i
] = 
¥›îtõs
.myProperties[i];

232 
	}
}

235 
	gPr›îtõs
::
	$¥öt
()

237 
cout
 << 
	`gë
(
C¨åidge_MD5
) << "|"

238 << 
	`gë
(
C¨åidge_Name
) << "|"

239 << 
	`gë
(
C¨åidge_R¨ôy
) << "|"

240 << 
	`gë
(
C¨åidge_M™uÁ˘uªr
) << "|"

241 << 
	`gë
(
C¨åidge_NŸe
)

242 << 
ídl
;

243 
	}
}

246 
	gPr›îtõs
::
	$£tDeÁu…s
()

248 
i
 = 0; i < 
La°Pr›Ty≥
; ++i)

249 
myPr›îtõs
[
i
] = 
ourDeÁu…Pr›îtõs
[i];

250 
	}
}

253 
Pr›îtyTy≥
 
	gPr›îtõs
::
	$gëPr›îtyTy≥
(c⁄° 
°rög
& 
«me
)

255 
i
 = 0; i < 
La°Pr›Ty≥
; ++i)

256 if(
ourPr›îtyNames
[
i
] =
«me
)

257  (
Pr›îtyTy≥
)
i
;

260  
La°Pr›Ty≥
;

261 
	}
}

264 c⁄° * 
	gPr›îtõs
::
ourDeÁu…Pr›îtõs
[
La°Pr›Ty≥
] = {

289 c⁄° * 
	gPr›îtõs
::
ourPr›îtyNames
[
La°Pr›Ty≥
] = {

	@emucore/Props.hxx

19 #i‚de‡
PROPERTIES_HXX


20 
	#PROPERTIES_HXX


	)

22 
	~"b•f.hxx
"

24 
	ePr›îtyTy≥
 {

25 
	mC¨åidge_MD5
,

26 
	mC¨åidge_M™uÁ˘uªr
,

27 
	mC¨åidge_ModñNo
,

28 
	mC¨åidge_Name
,

29 
	mC¨åidge_NŸe
,

30 
	mC¨åidge_R¨ôy
,

31 
	mC¨åidge_Sound
,

32 
	mC¨åidge_Ty≥
,

33 
	mC⁄sﬁe_Le·Difficu…y
,

34 
	mC⁄sﬁe_RightDifficu…y
,

35 
	mC⁄sﬁe_Tñevisi⁄Ty≥
,

36 
	mC⁄sﬁe_Sw≠P‹ts
,

37 
	mC⁄åﬁÀr_Le·
,

38 
	mC⁄åﬁÀr_Right
,

39 
	mDi•œy_F‹m©
,

40 
	mDi•œy_XSèπ
,

41 
	mDi•œy_Width
,

42 
	mDi•œy_YSèπ
,

43 
	mDi•œy_Height
,

44 
	mDi•œy_Pho•h‹
,

45 
	mEmuœti⁄_HmoveBœnks
,

46 
	mLa°Pr›Ty≥


60 ˛as†
	cPr›îtõs


62 
‰õnd
 
˛ass
 
	mPr›îtõsSë
;

64 
	mpublic
:

69 
Pr›îtõs
();

76 
Pr›îtõs
(c⁄° Pr›îtõs& 
¥›îtõs
);

81 
	mvútuÆ
 ~
Pr›îtõs
();

83 
	mpublic
:

91 c⁄° 
°rög
& 
	$gë
(
Pr›îtyTy≥
 
key
) const;

99 
	`£t
(
Pr›îtyTy≥
 
key
, c⁄° 
°rög
& 
vÆue
);

106 
	`lﬂd
(
i°ªam
& 
ö
);

113 
	`ßve
(
o°ªam
& 
out
);

118 
	`¥öt
();

123 
	`£tDeÁu…s
();

125 
public
:

132 
Pr›îtõs
& 
›î©‹
 = (c⁄° Pr›îtõs& 
¥›îtõs
);

134 
¥iv©e
:

142 
	`c›y
(c⁄° 
Pr›îtõs
& 
¥›îtõs
);

151 
°rög
 
	`ªadQuŸedSåög
(
i°ªam
& 
ö
);

160 
	`wrôeQuŸedSåög
(
o°ªam
& 
out
, c⁄° 
°rög
& 
s
);

167 
Pr›îtyTy≥
 
	`gëPr›îtyTy≥
(c⁄° 
°rög
& 
«me
);

169 
¥iv©e
:

171 
°rög
 
myPr›îtõs
[
La°Pr›Ty≥
];

174 c⁄° * 
ourDeÁu…Pr›îtõs
[
La°Pr›Ty≥
];

177 c⁄° * 
ourPr›îtyNames
[
La°Pr›Ty≥
];

	@emucore/PropsSet.cpp

19 
	~"OSy°em.hxx
"

20 
	~"GuiUtûs.hxx
"

21 
	~"DefPr›s.hxx
"

22 
	~"Pr›s.hxx
"

23 
	~"Pr›sSë.hxx
"

26 
	gPr›îtõsSë
::
	$Pr›îtõsSë
(
OSy°em
* 
osy°em
)

27 : 
	`myOSy°em
(
osy°em
),

28 
	`myRoŸ
(
NULL
),

29 
	$mySize
(0)

31 
	}
}

34 
	gPr›îtõsSë
::~
	$Pr›îtõsSë
()

36 
	`dñëeNode
(
myRoŸ
);

37 
	}
}

40 
	gPr›îtõsSë
::
	$gëMD5
(c⁄° 
°rög
& 
md5
, 
Pr›îtõs
 &
¥›îtõs
)

42 
¥›îtõs
.
	`£tDeÁu…s
();

43 
boﬁ
 
found
 = 
Ál£
;

46 if(
myRoŸ
 != 0)

48 
boﬁ
 
found
 = 
Ál£
;

49 
TªeNode
* 
cuºít
 = 
myRoŸ
;

51 
cuºít
)

53 
°rög
 
cuºítMd5
 = 
cuºít
->
¥›s
->
	`gë
(
C¨åidge_MD5
);

55 if(
cuºítMd5
 =
md5
)

57 
found
 = 
åue
;

62 if(
md5
 < 
cuºítMd5
)

63 
cuºít
 = cuºít->
À·
;

65 
cuºít
 = cuºít->
right
;

69 if(
found
)

70 
¥›îtõs
 = *(
cuºít
->
¥›s
);

74 if(!
found
)

76 
i
 = 0;

77 
i
 < 
	`ARRAYSIZE
(
DefPr›s
))

79 
cmp
 = 
	`°∫cmp
(
md5
.
	`c_°r
(), 
DefPr›s
[
i
][
C¨åidge_MD5
], 32);

80 if(
cmp
 == 0)

82 
p
 = 0;Ö < 
La°Pr›Ty≥
; ++p)

83 if(
DefPr›s
[
i
][
p
][0] != 0)

84 
¥›îtõs
.
	`£t
((
Pr›îtyTy≥
)
p
, 
DefPr›s
[
i
][p]);

86 
found
 = 
åue
;

89 if(
cmp
 < 0)

90 
i
 = 2*i + 1;

92 
i
 = 2*i + 2;

97 if(
myOSy°em
->
	`£âögs
().
	`gëBoﬁ
("tiadefaults"))

99 
¥›îtõs
.
	`£t
(
Di•œy_XSèπ
, 
Pr›îtõs
::
ourDeÁu…Pr›îtõs
[Display_XStart]);

100 
¥›îtõs
.
	`£t
(
Di•œy_Width
, 
Pr›îtõs
::
ourDeÁu…Pr›îtõs
[Display_Width]);

101 
¥›îtõs
.
	`£t
(
Di•œy_YSèπ
, 
Pr›îtõs
::
ourDeÁu…Pr›îtõs
[Display_YStart]);

102 
¥›îtõs
.
	`£t
(
Di•œy_Height
, 
Pr›îtõs
::
ourDeÁu…Pr›îtõs
[Display_Height]);

104 
	}
}

107 
	gPr›îtõsSë
::
	$ö£π
(c⁄° 
Pr›îtõs
& 
¥›îtõs
, 
boﬁ
 
ßve
)

109 
	`ö£πNode
(
myRoŸ
, 
¥›îtõs
, 
ßve
);

110 
	}
}

113 
	gPr›îtõsSë
::
	$ö£πNode
(
TªeNode
* &
t
, c⁄° 
Pr›îtõs
& 
¥›îtõs
,

114 
boﬁ
 
ßve
)

116 if(
t
)

118 
°rög
 
md5
 = 
¥›îtõs
.
	`gë
(
C¨åidge_MD5
);

119 
°rög
 
cuºítMd5
 = 
t
->
¥›s
->
	`gë
(
C¨åidge_MD5
);

121 if(
md5
 < 
cuºítMd5
)

122 
	`ö£πNode
(
t
->
À·
, 
¥›îtõs
, 
ßve
);

123 if(
md5
 > 
cuºítMd5
)

124 
	`ö£πNode
(
t
->
right
, 
¥›îtõs
, 
ßve
);

127 
dñëe
 
t
->
¥›s
;

128 
t
->
¥›s
 = 
√w
 
	`Pr›îtõs
(
¥›îtõs
);

129 
t
->
ßve
 = save;

134 
t
 = 
√w
 
TªeNode
;

135 
t
->
¥›s
 = 
√w
 
	`Pr›îtõs
(
¥›îtõs
);

136 
t
->
À·
 = 0;

137 
t
->
right
 = 0;

138 
t
->
ßve
 = save;

140 ++
mySize
;

142 
	}
}

145 
	gPr›îtõsSë
::
	$dñëeNode
(
TªeNode
 *
node
)

147 if(
node
)

149 
	`dñëeNode
(
node
->
À·
);

150 
	`dñëeNode
(
node
->
right
);

151 
dñëe
 
node
->
¥›s
;

152 
dñëe
 
node
;

154 
	}
}

157 
	gPr›îtõsSë
::
	$lﬂd
(c⁄° 
°rög
& 
fûíame
, 
boﬁ
 
ßve
)

159 
if°ªam
 
	`ö
(
fûíame
.
	`c_°r
(), 
ios
::
ö
);

165 if(!
ö
)

169 
Pr›îtõs
 
¥›
;

170 
¥›
.
	`lﬂd
(
ö
);

173 if(
ö
)

174 
	`ö£π
(
¥›
, 
ßve
);

176 if(
ö
)

177 
ö
.
	`˛o£
();

178 
	}
}

181 
	gPr›îtõsSë
::
	$ßve
(
o°ªam
& 
out
)

183 
	`ßveNode
(
out
, 
myRoŸ
);

184 
	}
}

187 
	gPr›îtõsSë
::
	$¥öt
()

189 
cout
 << 
	`size
(Ë<< 
ídl
;

190 
	`¥ötNode
(
myRoŸ
);

191 
	}
}

194 
	gPr›îtõsSë
::
	$ßveNode
(
o°ªam
& 
out
, 
TªeNode
 *
node
)

196 if(
node
)

198 if(
node
->
ßve
)

199 
node
->
¥›s
->
	`ßve
(
out
);

200 
	`ßveNode
(
out
, 
node
->
À·
);

201 
	`ßveNode
(
out
, 
node
->
right
);

203 
	}
}

206 
	gPr›îtõsSë
::
	$¥ötNode
(
TªeNode
 *
node
)

208 if(
node
)

210 
node
->
¥›s
->
	`¥öt
();

211 
	`¥ötNode
(
node
->
À·
);

212 
	`¥ötNode
(
node
->
right
);

214 
	}
}

217 
uI¡32
 
	gPr›îtõsSë
::
	$size
() const

219  
mySize
;

220 
	}
}

223 
boﬁ
 
	gPr›îtõsSë
::
	$mîge
(c⁄° 
Pr›îtõs
& 
¥›îtõs
, c⁄° 
°rög
& 
fûíame
)

225 
of°ªam
 
	`out
(
fûíame
.
	`c_°r
());

226 if(
out
.
	`is_›í
())

228 
	`ö£π
(
¥›îtõs
, 
åue
);

229 
	`ßve
(
out
);

230 
out
.
	`˛o£
();

231  
åue
;

234  
Ál£
;

235 
	}
}

	@emucore/PropsSet.hxx

19 #i‚de‡
PROPERTIES_SET_HXX


20 
	#PROPERTIES_SET_HXX


	)

22 
	~<f°ªam
>

24 
	~"b•f.hxx
"

26 
˛ass
 
	gOSy°em
;

27 
˛ass
 
	gPr›îtõs
;

39 ˛as†
	cPr›îtõsSë


41 
	mpublic
:

46 
Pr›îtõsSë
(
OSy°em
* 
osy°em
);

51 
	mvútuÆ
 ~
Pr›îtõsSë
();

53 
	mpublic
:

61 
gëMD5
(c⁄° 
°rög
& 
md5
, 
Pr›îtõs
& 
¥›îtõs
);

71 
lﬂd
(c⁄° 
°rög
& 
fûíame
, 
boﬁ
 
ßve
);

78 
ßve
(
o°ªam
& 
out
);

85 
uI¡32
 
	$size
() const;

90 
	`¥öt
();

101 
boﬁ
 
	`mîge
(c⁄° 
Pr›îtõs
& 
¥›îtõs
, c⁄° 
°rög
& 
fûíame
);

111 
	`ö£π
(c⁄° 
Pr›îtõs
& 
¥›îtõs
, 
boﬁ
 
ßve
 = 
åue
);

113 
¥iv©e
:

114 
	sTªeNode
 {

115 
Pr›îtõs
* 
¥›s
;

116 
TªeNode
* 
À·
;

117 
TªeNode
* 
right
;

118 
boﬁ
 
ßve
;

129 
	`ö£πNode
(
TªeNode
* &
node
, c⁄° 
Pr›îtõs
& 
¥›îtõs
, 
boﬁ
 
ßve
);

136 
	`dñëeNode
(
TªeNode
 *
node
);

144 
	`ßveNode
(
o°ªam
& 
out
, 
TªeNode
 *
node
);

151 
	`¥ötNode
(
TªeNode
 *
node
);

153 
¥iv©e
:

155 
OSy°em
* 
myOSy°em
;

158 
TªeNode
* 
myRoŸ
;

161 
uI¡32
 
mySize
;

162 
	}
};

	@emucore/Random.cpp

19 
	~<time.h
>

20 
	~"R™dom.hxx
"

23 
	gR™dom
::
	$£ed
(
uI¡32
 
vÆue
)

25 
ourSìd
 = 
vÆue
;

26 
ourSìded
 = 
åue
;

27 
	}
}

30 
	gR™dom
::
	$R™dom
()

33 if(!
ourSìded
)

35 
ourSìd
 = (
uI¡32
)
	`time
(0);

36 
ourSìded
 = 
åue
;

39 
myVÆue
 = 
ourSìd
;

40 
	}
}

43 
uI¡32
 
	gR™dom
::
	$√xt
()

45  (
myVÆue
 = (myValue * 2416 + 374441) % 1771875);

46 
	}
}

49 
uI¡32
 
	gR™dom
::
ourSìd
 = 0;

52 
boﬁ
 
	gR™dom
::
ourSìded
 = 
Ál£
;

	@emucore/Random.hxx

19 #i‚de‡
RANDOM_HXX


20 
	#RANDOM_HXX


	)

22 
	~"b•f.hxx
"

32 ˛as†
	cR™dom


34 
	mpublic
:

41 
£ed
(
uI¡32
 
vÆue
);

43 
	mpublic
:

47 
R™dom
();

49 
	mpublic
:

55 
uI¡32
 
√xt
();

57 
	m¥iv©e
:

59 
uI¡32
 
myVÆue
;

61 
	m¥iv©e
:

63 
uI¡32
 
ourSìd
;

66 
boﬁ
 
	mourSìded
;

	@emucore/Serializer.cpp

18 
	~<°dlib.h
>

19 
	~"Sîülizî.hxx
"

22 
	gSîülizî
::
	$Sîülizî
()

24 
	}
}

27 
Sîülizî
::~
	$Sîülizî
()

29 
	`˛o£
();

30 
	}
}

33 
boﬁ
 
	gSîülizî
::
	$›í
(c⁄° 
°rög
& 
fûeName
)

35 
	`˛o£
();

36 
mySåóm
.
	`›í
(
fûeName
.
	`c_°r
(), 
ios
::
out
 | ios::
bö¨y
);

38  
	`isO≥n
();

39 
	}
}

42 
	gSîülizî
::
	$˛o£
()

44 
mySåóm
.
	`˛o£
();

45 
mySåóm
.
	`˛ór
();

46 
	}
}

49 
boﬁ
 
	gSîülizî
::
	$isO≥n
()

51  
mySåóm
.
	`is_›í
();

52 
	}
}

55 
	gSîülizî
::
	$putI¡
(
vÆue
)

57 
buf
[4];

58 
i
 = 0; i < 4; ++i)

59 
buf
[
i
] = (
vÆue
 >> (i<<3)) & 0xff;

61 
mySåóm
.
	`wrôe
((*)
buf
, 4);

62 if(
mySåóm
.
	`bad
()) {

64 
throw
 "Serializer: file write failed";

66 
	`exô
(1);

69 
	}
}

72 
	gSîülizî
::
	$putSåög
(c⁄° 
°rög
& 
°r
)

74 
Àn
 = 
°r
.
	`Àngth
();

75 
	`putI¡
(
Àn
);

76 
mySåóm
.
	`wrôe
(
°r
.
	`d©a
(), (
°ªamsize
)
Àn
);

78 if(
mySåóm
.
	`bad
()) {

80 
throw
 "Serializer: file write failed";

82 
	`exô
(1);

85 
	}
}

88 
	gSîülizî
::
	$putBoﬁ
(
boﬁ
 
b
)

90 
	`putI¡
(
b
 ? 
TrueP©ã∫
: 
FÆ£P©ã∫
);

91 
	}
}

	@emucore/Serializer.hxx

19 #i‚de‡
SERIALIZER_HXX


20 
	#SERIALIZER_HXX


	)

22 
	~<f°ªam
>

23 
	~"b•f.hxx
"

37 ˛as†
	cSîülizî


39 
	mpublic
:

46 
Sîülizî
();

51 
	mvútuÆ
 ~
Sîülizî
();

53 
	mpublic
:

61 
boﬁ
 
›í
(c⁄° 
°rög
& 
fûeName
);

66 
˛o£
();

71 
boﬁ
 
isO≥n
();

78 
putI¡
(
vÆue
);

85 
putSåög
(c⁄° 
°rög
& 
°r
);

92 
putBoﬁ
(
boﬁ
 
b
);

94 
	m¥iv©e
:

96 
f°ªam
 
mySåóm
;

99 
	mTrueP©ã∫
 = 0xfab1fab2,

100 
	mFÆ£P©ã∫
 = 0xbad1bad2

	@emucore/Settings.cpp

19 
	~<ˇs£π
>

20 
	~<s°ªam
>

21 
	~<f°ªam
>

23 
	~"OSy°em.hxx
"

24 
	~"Vîsi⁄.hxx
"

25 
	~"b•f.hxx
"

26 
	~"Sëtögs.hxx
"

29 
	gSëtögs
::
	$Sëtögs
(
OSy°em
* 
osy°em
)

30 : 
	$myOSy°em
(
osy°em
)

33 
myOSy°em
->
	`©èch
(
this
);

36 
	`£tI¡î«l
("video", "soft");

37 
	`£tI¡î«l
("dirtyrects", "true");

38 
	`£tI¡î«l
("ppblend", "77");

40 
	`£tI¡î«l
("gl_filter", "nearest");

41 
	`£tI¡î«l
("gl_aspect", "2.0");

42 
	`£tI¡î«l
("gl_fsmax", "false");

43 
	`£tI¡î«l
("gl_lib", "");

45 
	`£tI¡î«l
("zoom", "2");

46 
	`£tI¡î«l
("fullscreen", "false");

47 
	`£tI¡î«l
("center", "true");

48 
	`£tI¡î«l
("grabmouse", "false");

49 
	`£tI¡î«l
("palette", "standard");

50 
	`£tI¡î«l
("debugheight", "0");

52 
	`£tI¡î«l
("sound", "true");

53 
	`£tI¡î«l
("fragsize", "512");

54 
	`£tI¡î«l
("freq", "31400");

55 
	`£tI¡î«l
("tiafreq", "31400");

56 
	`£tI¡î«l
("volume", "100");

57 
	`£tI¡î«l
("clipvol", "true");

59 
	`£tI¡î«l
("keymap", "");

60 
	`£tI¡î«l
("joymap", "");

61 
	`£tI¡î«l
("joyaxismap", "");

62 
	`£tI¡î«l
("joyhatmap", "");

63 
	`£tI¡î«l
("paddle", "0");

64 
	`£tI¡î«l
("sa1", "left");

65 
	`£tI¡î«l
("sa2", "right");

66 
	`£tI¡î«l
("joymouse", "false");

67 
	`£tI¡î«l
("p1speed", "50");

68 
	`£tI¡î«l
("p2speed", "50");

69 
	`£tI¡î«l
("p3speed", "50");

70 
	`£tI¡î«l
("p4speed", "50");

71 
	`£tI¡î«l
("pthresh", "600");

73 
	`£tI¡î«l
("showinfo", "false");

75 
	`£tI¡î«l
("ssdir", "");

76 
	`£tI¡î«l
("ssname", "romname");

77 
	`£tI¡î«l
("sssingle", "false");

79 
	`£tI¡î«l
("romdir", "");

80 
	`£tI¡î«l
("rombrowse", "false");

81 
	`£tI¡î«l
("lastrom", "");

82 
	`£tI¡î«l
("modtime", "");

84 
	`£tI¡î«l
("tiadefaults", "false");

85 
	}
}

88 
	gSëtögs
::~
	$Sëtögs
()

90 
myI¡î«lSëtögs
.
	`˛ór
();

91 
myExã∫ÆSëtögs
.
	`˛ór
();

92 
	}
}

95 
	gSëtögs
::
	$lﬂdC⁄fig
()

97 
°rög
 
löe
, 
key
, 
vÆue
;

98 
°rög
::
size_ty≥
 
equÆPos
, 
g¨bage
;

100 
if°ªam
 
	`ö
(
myOSy°em
->
	`c⁄figFûe
().
	`c_°r
());

101 if(!
ö
 || !ö.
	`is_›í
())

103 
cout
 << "Error: Couldn'tÜoad settings file\n";

107 
	`gëlöe
(
ö
, 
löe
))

110 (
g¨bage
 = 
löe
.
	`föd
("\t")Ë!
°rög
::
≈os
)

111 
löe
.
	`îa£
(
g¨bage
, 1);

114 if((
löe
.
	`Àngth
() == 0) || (line[0] == ';'))

118 if((
equÆPos
 = 
löe
.
	`föd
("=")Ë=
°rög
::
≈os
)

122 
key
 = 
löe
.
	`sub°r
(0, 
equÆPos
);

123 
vÆue
 = 
löe
.
	`sub°r
(
equÆPos
 + 1,Üöe.
	`Àngth
(Ë- 
key
.length() - 1);

124 
key
 = 
	`åim
(key);

125 
vÆue
 = 
	`åim
(value);

128 if((
key
.
	`Àngth
(Ë=0Ë|| (
vÆue
.length() == 0))

132 if(
idx
 = 
	`gëI¡î«lPos
(
key
) != -1)

133 
	`£tI¡î«l
(
key
, 
vÆue
, 
idx
, 
åue
);

136 
ö
.
	`˛o£
();

137 
	}
}

140 
boﬁ
 
	gSëtögs
::
	$lﬂdComm™dLöe
(
¨gc
, ** 
¨gv
)

142 
i
 = 1; i < 
¨gc
; ++i)

145 
°rög
 
key
 = 
¨gv
[
i
];

146 if(
key
[0] != '-')

147  
åue
;

149 
key
 = key.
	`sub°r
(1, key.
	`Àngth
());

153 if(
key
 == "help")

155 
	`ußge
();

156  
Ál£
;

158 if(
key
 == "listrominfo")

160 
	`£tExã∫Æ
(
key
, "true");

161  
åue
;

163 if(
key
 == "debug")

165 
	`£tExã∫Æ
(
key
, "true");

166  
åue
;

168 if(
key
 == "holdreset")

170 
	`£tExã∫Æ
(
key
, "true");

171  
åue
;

173 if(
key
 == "holdselect")

175 
	`£tExã∫Æ
(
key
, "true");

176  
åue
;

178 if(
key
 == "holdbutton0")

180 
	`£tExã∫Æ
(
key
, "true");

181  
åue
;

184 if(++
i
 >
¨gc
)

186 
˚º
 << "Missögárgumíàf‹ '" << 
key
 << "'" << 
ídl
;

187  
Ál£
;

189 
°rög
 
vÆue
 = 
¨gv
[
i
];

193 if(
idx
 = 
	`gëI¡î«lPos
(
key
) != -1)

194 
	`£tI¡î«l
(
key
, 
vÆue
, 
idx
);

196 
	`£tExã∫Æ
(
key
, 
vÆue
);

199  
åue
;

200 
	}
}

203 
	gSëtögs
::
	$vÆid©e
()

205 
°rög
 
s
;

206 
i
;

208 
s
 = 
	`gëSåög
("video");

209 if(
s
 != "soft" && s != "gl")

210 
	`£tI¡î«l
("video", "soft");

212 #ifde‡
DISPLAY_OPENGL


213 
s
 = 
	`gëSåög
("gl_filter");

214 if(
s
 != "linear" && s != "nearest")

215 
	`£tI¡î«l
("gl_filter", "nearest");

217 
f
 = 
	`gëFlﬂt
("gl_aspect");

218 if(
f
 < 1.1 || f > 2.0)

219 
	`£tI¡î«l
("gl_aspect", "2.0");

222 #ifde‡
SOUND_SUPPORT


223 
i
 = 
	`gëI¡
("fragsize");

224 if(
i
 != 256 && i != 512 && i != 1024 && i != 2048 && i != 4096)

225 #ifde‡
WIN32


226 
	`£tI¡î«l
("fragsize", "2048");

228 
	`£tI¡î«l
("fragsize", "512");

231 
i
 = 
	`gëI¡
("volume");

232 if(
i
 < 0 || i > 100)

233 
	`£tI¡î«l
("volume", "100");

234 
i
 = 
	`gëI¡
("freq");

235 if(
i
 < 0 || i > 48000)

236 
	`£tI¡î«l
("freq", "31400");

237 
i
 = 
	`gëI¡
("tiafreq");

238 if(
i
 < 0 || i > 48000)

239 
	`£tI¡î«l
("tiafreq", "31400");

242 
i
 = 
	`gëI¡
("zoom");

243 if(
i
 < 1 || i > 6)

244 
	`£tI¡î«l
("zoom", "2");

246 
i
 = 
	`gëI¡
("paddle");

247 if(
i
 < 0 || i > 3)

248 
	`£tI¡î«l
("paddle", "0");

250 
i
 = 
	`gëI¡
("pthresh");

251 if(
i
 < 400)

252 
	`£tI¡î«l
("pthresh", "400");

253 if(
i
 > 800)

254 
	`£tI¡î«l
("pthresh", "800");

256 
s
 = 
	`gëSåög
("palette");

257 if(
s
 != "standard" && s != "original" && s != "z26")

258 
	`£tI¡î«l
("palette", "standard");

260 
i
 = 
	`gëI¡
("ppblend");

261 if(
i
 < 0Ë
	`£tI¡î«l
("ppblend", "0");

262 if(
i
 > 100Ë
	`£tI¡î«l
("ppblend", "100");

264 
s
 = 
	`gëSåög
("ssname");

265 if(
s
 != "romname" && s != "md5sum")

266 
	`£tI¡î«l
("ssname", "romname");

267 
	}
}

270 
	gSëtögs
::
	$ußge
()

272 #i‚de‡
MAC_OSX


273 
cout
 << 
ídl


274 << "SãŒ®vîsi⁄ " << 
STELLA_VERSION
 << 
ídl


275 << 
ídl


276 << "Ußge: sãŒ®[›ti⁄†...]Ñomfûe" << 
ídl


277 << " Ru¿wôhouà™y o±i⁄†‹Ñomfûêtÿu£ÅhêROMÜaunchî" << 
ídl


278 << 
ídl


279 << "VÆid o±i⁄†¨e:" << 
ídl


280 << 
ídl


283 #ifde‡
DISPLAY_OPENGL


285 << 
ídl


292 << 
ídl


303 << 
ídl


304 #ifde‡
SOUND_SUPPORT


312 << 
ídl


326 #ifde‡
UNIX


329 #ifde‡
SNAPSHOT_SUPPORT


333 << 
ídl


337 #ifde‡
DEVELOPER_SUPPORT


338 << 
ídl


341 << 
ídl


348 << 
ídl


366 << 
ídl
;

368 
	}
}

371 
	gSëtögs
::
	$ßveC⁄fig
()

375 
boﬁ
 
£âögsCh™ged
 = 
Ál£
;

376 
i
 = 0; i < 
myI¡î«lSëtögs
.
	`size
(); ++i)

378 if(
myI¡î«lSëtögs
[
i
].
vÆue
 !myI¡î«lSëtögs[i].
öôülVÆue
)

380 
£âögsCh™ged
 = 
åue
;

385 if(!
£âögsCh™ged
)

388 
of°ªam
 
	`out
(
myOSy°em
->
	`c⁄figFûe
().
	`c_°r
());

389 if(!
out
 || !out.
	`is_›í
())

391 
cout
 << "Error: Couldn't save settings file\n";

395 
out
 << "; SãŒ®c⁄figuøti⁄ fûe" << 
ídl


396 << ";" << 
ídl


397 << "; Löe†°¨tög wôh ';'áª commít†™dáª ign‹ed." << 
ídl


398 << "; S∑˚†™dÅab†¨êign‹ed." << 
ídl


399 << ";" << 
ídl


400 << "; F‹m© MUST bêa†fﬁlows:" << 
ídl


401 << "; comm™d = vÆue" << 
ídl


402 << ";" << 
ídl


403 << "; Commm™d†¨êthêßmêa†tho£ s≥cifõd o¿thêcomm™dlöe," << 
ídl


404 << "; wôhouàthê'-' ch¨a˘î." << 
ídl


405 << ";" << 
ídl


406 << "; VÆue†¨êthêßmêa†tho£áŒowed o¿thêcomm™dlöe." << 
ídl


407 << "; Boﬁó¿vÆue†¨ê•ecifõdá†1 (‹ÅrueË™d 0 (‹ fÆ£)" << 
ídl


408 << ";" << 
ídl
;

411 
i
 = 0; i < 
myI¡î«lSëtögs
.
	`size
(); ++i)

413 
out
 << 
myI¡î«lSëtögs
[
i
].
key
 << " = " <<

414 
myI¡î«lSëtögs
[
i
].
vÆue
 << 
ídl
;

417 
out
.
	`˛o£
();

418 
	}
}

421 
	gSëtögs
::
	$£tI¡
(c⁄° 
°rög
& 
key
, c⁄° 
vÆue
)

423 
o°rög°ªam
 
°ªam
;

424 
°ªam
 << 
vÆue
;

426 if(
idx
 = 
	`gëI¡î«lPos
(
key
) != -1)

427 
	`£tI¡î«l
(
key
, 
°ªam
.
	`°r
(), 
idx
);

429 
	`£tExã∫Æ
(
key
, 
°ªam
.
	`°r
());

430 
	}
}

433 
	gSëtögs
::
	$£tFlﬂt
(c⁄° 
°rög
& 
key
, c⁄° 
vÆue
)

435 
o°rög°ªam
 
°ªam
;

436 
°ªam
 << 
vÆue
;

438 if(
idx
 = 
	`gëI¡î«lPos
(
key
) != -1)

439 
	`£tI¡î«l
(
key
, 
°ªam
.
	`°r
(), 
idx
);

441 
	`£tExã∫Æ
(
key
, 
°ªam
.
	`°r
());

442 
	}
}

445 
	gSëtögs
::
	$£tBoﬁ
(c⁄° 
°rög
& 
key
, c⁄° 
boﬁ
 
vÆue
)

447 
o°rög°ªam
 
°ªam
;

448 
°ªam
 << 
vÆue
;

450 if(
idx
 = 
	`gëI¡î«lPos
(
key
) != -1)

451 
	`£tI¡î«l
(
key
, 
°ªam
.
	`°r
(), 
idx
);

453 
	`£tExã∫Æ
(
key
, 
°ªam
.
	`°r
());

454 
	}
}

457 
	gSëtögs
::
	$£tSåög
(c⁄° 
°rög
& 
key
, c⁄° såög& 
vÆue
)

459 if(
idx
 = 
	`gëI¡î«lPos
(
key
) != -1)

460 
	`£tI¡î«l
(
key
, 
vÆue
, 
idx
);

462 
	`£tExã∫Æ
(
key
, 
vÆue
);

463 
	}
}

466 
	gSëtögs
::
	$gëI¡
(c⁄° 
°rög
& 
key
) const

469 
idx
 = -1;

470 if((
idx
 = 
	`gëI¡î«lPos
(
key
)) != -1)

471  (Ë
	`©oi
(
myI¡î«lSëtögs
[
idx
].
vÆue
.
	`c_°r
());

472 if((
idx
 = 
	`gëExã∫ÆPos
(
key
)) != -1)

473  (Ë
	`©oi
(
myExã∫ÆSëtögs
[
idx
].
vÆue
.
	`c_°r
());

476 
	}
}

479 
	gSëtögs
::
	$gëFlﬂt
(c⁄° 
°rög
& 
key
) const

482 
idx
 = -1;

483 if((
idx
 = 
	`gëI¡î«lPos
(
key
)) != -1)

484  (Ë
	`©of
(
myI¡î«lSëtögs
[
idx
].
vÆue
.
	`c_°r
());

485 if((
idx
 = 
	`gëExã∫ÆPos
(
key
)) != -1)

486  (Ë
	`©of
(
myExã∫ÆSëtögs
[
idx
].
vÆue
.
	`c_°r
());

489 
	}
}

492 
boﬁ
 
	gSëtögs
::
	$gëBoﬁ
(c⁄° 
°rög
& 
key
) const

495 
idx
 = -1;

496 if((
idx
 = 
	`gëI¡î«lPos
(
key
)) != -1)

498 c⁄° 
°rög
& 
vÆue
 = 
myI¡î«lSëtögs
[
idx
].value;

499 if(
vÆue
 == "1" || value == "true")

500  
åue
;

501 if(
vÆue
 == "0" || value == "false")

502  
Ál£
;

504  
Ál£
;

506 if((
idx
 = 
	`gëExã∫ÆPos
(
key
)) != -1)

508 c⁄° 
°rög
& 
vÆue
 = 
myExã∫ÆSëtögs
[
idx
].value;

509 if(
vÆue
 == "1" || value == "true")

510  
åue
;

511 if(
vÆue
 == "0" || value == "false")

512  
Ál£
;

514  
Ál£
;

517  
Ál£
;

518 
	}
}

521 c⁄° 
	g°rög
& 
	gSëtögs
::
	$gëSåög
(c⁄° 
°rög
& 
key
) const

524 
idx
 = -1;

525 if((
idx
 = 
	`gëI¡î«lPos
(
key
)) != -1)

526  
myI¡î«lSëtögs
[
idx
].
vÆue
;

527 if((
idx
 = 
	`gëExã∫ÆPos
(
key
)) != -1)

528  
myExã∫ÆSëtögs
[
idx
].
vÆue
;

530  
Em±ySåög
;

531 
	}
}

534 
	gSëtögs
::
	$gëI¡î«lPos
(c⁄° 
°rög
& 
key
) const

536 
i
 = 0; i < 
myI¡î«lSëtögs
.
	`size
(); ++i)

537 if(
myI¡î«lSëtögs
[
i
].
key
 == key)

538  
i
;

541 
	}
}

544 
	gSëtögs
::
	$gëExã∫ÆPos
(c⁄° 
°rög
& 
key
) const

546 
i
 = 0; i < 
myExã∫ÆSëtögs
.
	`size
(); ++i)

547 if(
myExã∫ÆSëtögs
[
i
].
key
 == key)

548  
i
;

551 
	}
}

554 
	gSëtögs
::
	$£tI¡î«l
(c⁄° 
°rög
& 
key
, c⁄° såög& 
vÆue
,

555 
pos
, 
boﬁ
 
u£AsInôül
)

557 
idx
 = -1;

559 if(
pos
 !-1 &&Öo†>0 &&Öo†< ()
myI¡î«lSëtögs
.
	`size
() &&

560 
myI¡î«lSëtögs
[
pos
].
key
 == key)

562 
idx
 = 
pos
;

566 
i
 = 0; i < 
myI¡î«lSëtögs
.
	`size
(); ++i)

568 if(
myI¡î«lSëtögs
[
i
].
key
 == key)

570 
idx
 = 
i
;

576 if(
idx
 != -1)

578 
myI¡î«lSëtögs
[
idx
].
key
 = key;

579 
myI¡î«lSëtögs
[
idx
].
vÆue
 = value;

580 if(
u£AsInôül
Ë
myI¡î«lSëtögs
[
idx
].
öôülVÆue
 = 
vÆue
;

590 
Sëtög
 
£âög
;

591 
£âög
.
key
 = key;

592 
£âög
.
vÆue
 = value;

593 if(
u£AsInôül
Ë
£âög
.
öôülVÆue
 = 
vÆue
;

595 
myI¡î«lSëtögs
.
	`push_back
(
£âög
);

596 
idx
 = 
myI¡î«lSëtögs
.
	`size
() - 1;

605  
idx
;

606 
	}
}

609 
	gSëtögs
::
	$£tExã∫Æ
(c⁄° 
°rög
& 
key
, c⁄° såög& 
vÆue
,

610 
pos
, 
boﬁ
 
u£AsInôül
)

612 
idx
 = -1;

614 if(
pos
 !-1 &&Öo†>0 &&Öo†< ()
myExã∫ÆSëtögs
.
	`size
() &&

615 
myExã∫ÆSëtögs
[
pos
].
key
 == key)

617 
idx
 = 
pos
;

621 
i
 = 0; i < 
myExã∫ÆSëtögs
.
	`size
(); ++i)

623 if(
myExã∫ÆSëtögs
[
i
].
key
 == key)

625 
idx
 = 
i
;

631 if(
idx
 != -1)

633 
myExã∫ÆSëtögs
[
idx
].
key
 = key;

634 
myExã∫ÆSëtögs
[
idx
].
vÆue
 = value;

635 if(
u£AsInôül
Ë
myExã∫ÆSëtögs
[
idx
].
öôülVÆue
 = 
vÆue
;

644 
Sëtög
 
£âög
;

645 
£âög
.
key
 = key;

646 
£âög
.
vÆue
 = value;

647 if(
u£AsInôül
Ë
£âög
.
öôülVÆue
 = 
vÆue
;

649 
myExã∫ÆSëtögs
.
	`push_back
(
£âög
);

650 
idx
 = 
myExã∫ÆSëtögs
.
	`size
() - 1;

658  
idx
;

659 
	}
}

662 
	gSëtögs
::
	$Sëtögs
(c⁄° 
Sëtögs
&)

664 
	}
}

667 
Sëtögs
& Sëtögs::
›î©‹
 = (const Settings&)

669 
as£π
(
Ál£
);

671  *
	gthis
;

	@emucore/Settings.hxx

19 #i‚de‡
SETTINGS_HXX


20 
	#SETTINGS_HXX


	)

22 
˛ass
 
	gOSy°em
;

24 
	~"Aºay.hxx
"

25 
	~"b•f.hxx
"

34 ˛as†
	cSëtögs


36 
	mpublic
:

40 
Sëtögs
(
OSy°em
* 
osy°em
);

45 
	mvútuÆ
 ~
Sëtögs
();

47 
	mpublic
:

51 
vútuÆ
 
lﬂdC⁄fig
();

56 
vútuÆ
 
ßveC⁄fig
();

63 
boﬁ
 
lﬂdComm™dLöe
(
¨gc
, ** 
¨gv
);

69 
vÆid©e
();

74 
ußge
();

83 
	$gëI¡
(c⁄° 
°rög
& 
key
) const;

92 
	$gëFlﬂt
(c⁄° 
°rög
& 
key
) const;

101 
boﬁ
 
	$gëBoﬁ
(c⁄° 
°rög
& 
key
) const;

110 c⁄° 
°rög
& 
	$gëSåög
(c⁄° 
°rög
& 
key
) const;

118 
	`£tI¡
(c⁄° 
°rög
& 
key
, c⁄° 
vÆue
);

126 
	`£tFlﬂt
(c⁄° 
°rög
& 
key
, c⁄° 
vÆue
);

134 
	`£tBoﬁ
(c⁄° 
°rög
& 
key
, c⁄° 
boﬁ
 
vÆue
);

142 
	`£tSåög
(c⁄° 
°rög
& 
key
, c⁄° såög& 
vÆue
);

144 
¥iv©e
:

146 
	`Sëtögs
(c⁄° 
Sëtögs
&);

149 
Sëtögs
& 
›î©‹
 = (const Settings&);

152 
°rög
 
	$åim
(
°rög
& 
°r
)

154 
°rög
::
size_ty≥
 
fú°
 = 
°r
.
	`föd_fú°_nŸ_of
(' ');

155  (
fú°
 =
°rög
::
≈os
Ë? 
	`°rög
() :

156 
°r
.
	`sub°r
(
fú°
, så.
	`föd_œ°_nŸ_of
(' ')-first+1);

159 
¥Ÿe˘ed
:

161 
OSy°em
* 
myOSy°em
;

164 
	sSëtög


166 
°rög
 
key
;

167 
°rög
 
vÆue
;

168 
°rög
 
öôülVÆue
;

169 
	}
};

170 
	gComm⁄
::
	tAºay
<
	tSëtög
> 
	tSëtögsAºay
;

172 c⁄° 
	gSëtögsAºay
& 
	$gëI¡î«lSëtögs
() const

173 {  
myI¡î«lSëtögs
; 
	}
}

174 c⁄° 
	gSëtögsAºay
& 
	$gëExã∫ÆSëtögs
() const

175 {  
myExã∫ÆSëtögs
; 
	}
}

178 
	$gëI¡î«lPos
(c⁄° 
°rög
& 
key
) const;

179 
	$gëExã∫ÆPos
(c⁄° 
°rög
& 
key
) const;

182 
	`£tI¡î«l
(c⁄° 
°rög
& 
key
, c⁄° såög& 
vÆue
,

183 
pos
 = -1, 
boﬁ
 
u£AsInôül
 = 
Ál£
);

184 
	`£tExã∫Æ
(c⁄° 
°rög
& 
key
, c⁄° såög& 
vÆue
,

185 
pos
 = -1, 
boﬁ
 
u£AsInôül
 = 
Ál£
);

187 
¥iv©e
:

190 
SëtögsAºay
 
myI¡î«lSëtögs
;

194 
SëtögsAºay
 
myExã∫ÆSëtögs
;

195 
	}
};

	@emucore/Sound.hxx

19 #i‚de‡
SOUND_HXX


20 
	#SOUND_HXX


	)

22 
˛ass
 
	gOSy°em
;

23 
˛ass
 
	gSîülizî
;

24 
˛ass
 
	gDe£rülizî
;

26 
	~"b•f.hxx
"

35 ˛as†
	cSound


37 
	mpublic
:

42 
	$Sound
(
OSy°em
* 
osy°em
Ë{ 
myOSy°em
 = osystem; }

47 
vútuÆ
 ~
	$Sound
(Ë{ 
	}
};

49 
	gpublic
:

55 
vútuÆ
 
£tE«bÀd
(
boﬁ
 
íabÀ
) = 0;

63 
vútuÆ
 
adju°Cy˛eCou¡î
(
I¡32
 
amou¡
) = 0;

70 
vútuÆ
 
£tCh™√ls
(
uI¡32
 
ch™√ls
) = 0;

78 
vútuÆ
 
£tFømeR©e
(
uI¡32
 
‰amî©e
) = 0;

84 
vútuÆ
 
öôülize
() = 0;

90 
vútuÆ
 
˛o£
() = 0;

97 
vútuÆ
 
boﬁ
 
	$isSuc˚ssfuŒyInôülized
() const = 0;

104 
vútuÆ
 
	`muã
(
boﬁ
 
°©e
) = 0;

109 
vútuÆ
 
	`ª£t
() = 0;

118 
vútuÆ
 
	`£t
(
uI¡16
 
addr
, 
uI¡8
 
vÆue
, 
I¡32
 
cy˛e
) = 0;

127 
vútuÆ
 
	`£tVﬁume
(
I¡32
 
≥r˚¡
) = 0;

135 
vútuÆ
 
	`adju°Vﬁume
(
I¡8
 
dúe˘i⁄
) = 0;

137 
public
:

144 
vútuÆ
 
boﬁ
 
	`lﬂd
(
De£rülizî
& 
ö
) = 0;

152 
vútuÆ
 
boﬁ
 
	`ßve
(
Sîülizî
& 
out
) = 0;

154 
¥Ÿe˘ed
:

156 
OSy°em
* 
myOSy°em
;

157 
	}
};

	@emucore/Switches.cpp

19 
	~"Evít.hxx
"

20 
	~"Pr›s.hxx
"

21 
	~"Swôches.hxx
"

24 
	gSwôches
::
	$Swôches
(c⁄° 
Evít
& 
evít
, c⁄° 
Pr›îtõs
& 
¥›îtõs
)

25 : 
	`myEvít
(
evít
),

26 
	$mySwôches
(0xFF)

28 if(
¥›îtõs
.
	`gë
(
C⁄sﬁe_RightDifficu…y
) == "B")

30 
mySwôches
 &= ~0x80;

34 
mySwôches
 |= 0x80;

37 if(
¥›îtõs
.
	`gë
(
C⁄sﬁe_Le·Difficu…y
) == "B")

39 
mySwôches
 &= ~0x40;

43 
mySwôches
 |= 0x40;

46 if(
¥›îtõs
.
	`gë
(
C⁄sﬁe_Tñevisi⁄Ty≥
) == "COLOR")

48 
mySwôches
 |= 0x08;

52 
mySwôches
 &= ~0x08;

54 
	}
}

57 
	gSwôches
::~
	$Swôches
()

59 
	}
}

62 
uI¡8
 
Swôches
::
	$ªad
()

64 if(
myEvít
.
	`gë
(
Evít
::
C⁄sﬁeCﬁ‹
) != 0)

66 
mySwôches
 |= 0x08;

68 if(
myEvít
.
	`gë
(
Evít
::
C⁄sﬁeBœckWhôe
) != 0)

70 
mySwôches
 &= ~0x08;

73 if(
myEvít
.
	`gë
(
Evít
::
C⁄sﬁeRightDifficu…yA
) != 0)

75 
mySwôches
 |= 0x80;

77 if(
myEvít
.
	`gë
(
Evít
::
C⁄sﬁeRightDifficu…yB
) != 0)

79 
mySwôches
 &= ~0x80;

82 if(
myEvít
.
	`gë
(
Evít
::
C⁄sﬁeLe·Difficu…yA
) != 0)

84 
mySwôches
 |= 0x40;

86 if(
myEvít
.
	`gë
(
Evít
::
C⁄sﬁeLe·Difficu…yB
) != 0)

88 
mySwôches
 &= ~0x40;

91 if(
myEvít
.
	`gë
(
Evít
::
C⁄sﬁeSñe˘
) != 0)

93 
mySwôches
 &= ~0x02;

97 
mySwôches
 |= 0x02;

100 if(
myEvít
.
	`gë
(
Evít
::
C⁄sﬁeRe£t
) != 0)

102 
mySwôches
 &= ~0x01;

106 
mySwôches
 |= 0x01;

109  
mySwôches
;

110 
	}
}

	@emucore/Switches.hxx

19 #i‚de‡
SWITCHES_HXX


20 
	#SWITCHES_HXX


	)

22 
˛ass
 
	gEvít
;

23 
˛ass
 
	gPr›îtõs
;

24 
˛ass
 
	gSwôches
;

26 
	~"b•f.hxx
"

34 ˛as†
	cSwôches


36 
	mpublic
:

43 
Swôches
(c⁄° 
Evít
& 
evít
, c⁄° 
Pr›îtõs
& 
¥›îtõs
);

48 
	mvútuÆ
 ~
Swôches
();

50 
	mpublic
:

56 
uI¡8
 
ªad
();

58 
	m¥iv©e
:

60 c⁄° 
Evít
& 
myEvít
;

63 
uI¡8
 
	mmySwôches
;

	@emucore/System.cpp

19 
	~<as£π.h
>

20 
	~<io°ªam
>

22 
	~"Devi˚.hxx
"

23 
	~"M6502.hxx
"

24 
	~"TIA.hxx
"

25 
	~"Sy°em.hxx
"

26 
	~"Sîülizî.hxx
"

27 
	~"De£rülizî.hxx
"

30 
	gSy°em
::
	$Sy°em
(
uI¡16
 
n
, uI¡16 
m
)

31 : 
	`myAddªssMask
((1 << 
n
) - 1),

32 
	`myPageShi·
(
m
),

33 
	`myPageMask
((1 << 
m
) - 1),

34 
	`myNumbîOfPages
(1 << (
n
 - 
m
)),

35 
	`myNumbîOfDevi˚s
(0),

36 
	`myM6502
(0),

37 
	`myTIA
(0),

38 
	`myCy˛es
(0),

39 
	$myD©aBusSèã
(0)

42 
	`as£π
((1 <
m
Ë&& (m <
n
) && (n <= 16));

45 
myPageAc˚ssTabÀ
 = 
√w
 
PageAc˚ss
[
myNumbîOfPages
];

48 
PageAc˚ss
 
ac˚ss
;

49 
ac˚ss
.
dúe˘PìkBa£
 = 0;

50 
ac˚ss
.
dúe˘PokeBa£
 = 0;

51 
ac˚ss
.
devi˚
 = &
myNuŒDevi˚
;

52 
∑ge
 = 0;Öagê< 
myNumbîOfPages
; ++page)

54 
	`£tPageAc˚ss
(
∑ge
, 
ac˚ss
);

58 
myD©aBusLocked
 = 
Ál£
;

59 
	}
}

62 
	gSy°em
::~
	$Sy°em
()

65 
uI¡32
 
i
 = 0; i < 
myNumbîOfDevi˚s
; ++i)

67 
dñëe
 
myDevi˚s
[
i
];

71 
dñëe
 
myM6502
;

74 
dñëe
[] 
myPageAc˚ssTabÀ
;

75 
	}
}

78 
	gSy°em
::
	$ª£t
()

81 
	`ª£tCy˛es
();

84 
uI¡32
 
i
 = 0; i < 
myNumbîOfDevi˚s
; ++i)

86 
myDevi˚s
[
i
]->
	`ª£t
();

90 if(
myM6502
 != 0)

92 
myM6502
->
	`ª£t
();

94 
	}
}

97 
	gSy°em
::
	$©èch
(
Devi˚
* 
devi˚
)

99 
	`as£π
(
myNumbîOfDevi˚s
 < 100);

102 
myDevi˚s
[
myNumbîOfDevi˚s
++] = 
devi˚
;

105 
devi˚
->
	`ö°Æl
(*
this
);

106 
	}
}

109 
	gSy°em
::
	$©èch
(
M6502
* 
m6502
)

112 
myM6502
 = 
m6502
;

115 
myM6502
->
	`ö°Æl
(*
this
);

116 
	}
}

119 
	gSy°em
::
	$©èch
(
TIA
* 
tü
)

121 
myTIA
 = 
tü
;

122 
	`©èch
((
Devi˚
*Ë
tü
);

123 
	}
}

126 
boﬁ
 
	gSy°em
::
	$ßve
(
Sîülizî
& 
out
)

128 
__åy


130 
out
.
	`putSåög
("System");

131 
out
.
	`putI¡
(
myCy˛es
);

134 
	`ˇtch
(*
msg
)

136 
˚º
 << 
msg
 << 
ídl
;

137  
Ál£
;

140 
	`__ˇtch
(...)

142 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ \'Sy°em\'" << 
ídl
;

143  
Ál£
;

146  
åue
;

147 
	}
}

150 
boﬁ
 
	gSy°em
::
	$lﬂd
(
De£rülizî
& 
ö
)

152 
__åy


154 if(
ö
.
	`gëSåög
() != "System")

155  
Ál£
;

157 
myCy˛es
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

160 
	`ˇtch
(*
msg
)

162 
˚º
 << 
msg
 << 
ídl
;

163  
Ál£
;

166 
	`__ˇtch
(...)

168 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ \'Sy°em\'" << 
ídl
;

169  
Ál£
;

172  
åue
;

173 
	}
}

176 
	gSy°em
::
	$ª£tCy˛es
()

179 
uI¡32
 
i
 = 0; i < 
myNumbîOfDevi˚s
; ++i)

181 
myDevi˚s
[
i
]->
	`sy°emCy˛esRe£t
();

185 
myCy˛es
 = 0;

186 
	}
}

189 
	gSy°em
::
	$£tPageAc˚ss
(
uI¡16
 
∑ge
, c⁄° 
PageAc˚ss
& 
ac˚ss
)

192 
	`as£π
(
∑ge
 <
myNumbîOfPages
);

195 
	`as£π
(
ac˚ss
.
devi˚
 != 0);

197 
myPageAc˚ssTabÀ
[
∑ge
] = 
ac˚ss
;

198 
	}
}

201 c⁄° 
	gSy°em
::
PageAc˚ss
& 
Sy°em
::
	$gëPageAc˚ss
(
uI¡16
 
∑ge
)

204 
	`as£π
(
∑ge
 <
myNumbîOfPages
);

206  
myPageAc˚ssTabÀ
[
∑ge
];

207 
	}
}

210 
boﬁ
 
	gSy°em
::
	$ßveSèã
(c⁄° 
°rög
& 
md5sum
, 
Sîülizî
& 
out
)

213 if(!
out
.
	`isO≥n
())

214  
Ál£
;

216 
__åy


220 
out
.
	`putSåög
(
md5sum
);

223 if(!
	`ßve
(
out
))

224  
Ál£
;

227 if(!
myM6502
->
	`ßve
(
out
))

228  
Ál£
;

231 
uI¡32
 
i
 = 0; i < 
myNumbîOfDevi˚s
; ++i)

232 if(!
myDevi˚s
[
i
]->
	`ßve
(
out
))

233  
Ál£
;

236 
	`ˇtch
(*
msg
)

238 
˚º
 << 
msg
 << 
ídl
;

239  
Ál£
;

242 
	`__ˇtch
(...)

244 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ \'Sy°em\'" << 
ídl
;

245  
Ál£
;

248  
åue
;

249 
	}
}

252 
boﬁ
 
	gSy°em
::
	$lﬂdSèã
(c⁄° 
°rög
& 
md5sum
, 
De£rülizî
& 
ö
)

255 if(!
ö
.
	`isO≥n
())

256  
Ál£
;

258 
__åy


262 if(
ö
.
	`gëSåög
(Ë!
md5sum
)

263  
Ál£
;

266 if(!
	`lﬂd
(
ö
))

267  
Ál£
;

270 if(!
myM6502
->
	`lﬂd
(
ö
))

271  
Ál£
;

274 
uI¡32
 
i
 = 0; i < 
myNumbîOfDevi˚s
; ++i)

275 if(!
myDevi˚s
[
i
]->
	`lﬂd
(
ö
))

276  
Ál£
;

279 
	`ˇtch
(*
msg
)

281 
˚º
 << 
msg
 << 
ídl
;

282  
Ál£
;

285 
	`__ˇtch
(...)

287 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ \'Sy°em\'" << 
ídl
;

288  
Ál£
;

291  
åue
;

292 
	}
}

295 
	gSy°em
::
	$Sy°em
(c⁄° 
Sy°em
& 
s
)

296 : 
	`myAddªssMask
(
s
.
myAddªssMask
),

297 
	`myPageShi·
(
s
.
myPageShi·
),

298 
	`myPageMask
(
s
.
myPageMask
),

299 
	$myNumbîOfPages
(
s
.
myNumbîOfPages
)

301 
	`as£π
(
Ál£
);

302 
	}
}

305 
	gSy°em
& Sy°em::
›î©‹
 = (c⁄° 
Sy°em
&)

307 
as£π
(
Ál£
);

309  *
	gthis
;

313 
	gSy°em
::
PageAc˚ss
* 
œ°_ac˚ss
 = 0;

314 
uI¡16
 
	gœ°_addr
 = 0xffff;

316 
uI¡8
 
	gSy°em
::
	$≥ek
(
uI¡16
 
addr
)

318 
PageAc˚ss
* 
ac˚ss
;

319 
uI¡16
 
t
 = 
addr
 & 
myAddªssMask
;

320 i‡(
t
 =
œ°_addr
) {

321 
ac˚ss
 = 
œ°_ac˚ss
;

323 
œ°_addr
 = 
t
;

324 
ac˚ss
 = &
myPageAc˚ssTabÀ
[
œ°_addr
 >> 
myPageShi·
];

325 
œ°_ac˚ss
 = 
ac˚ss
;

328 
uI¡8
 
ªsu…
;

331 if(
ac˚ss
->
dúe˘PìkBa£
 != 0)

333 
ªsu…
 = *(
ac˚ss
->
dúe˘PìkBa£
 + (
addr
 & 
myPageMask
));

337 
ªsu…
 = 
ac˚ss
->
devi˚
->
	`≥ek
(
addr
);

340 #ifde‡
DEVELOPER_SUPPORT


341 if(!
myD©aBusLocked
)

343 
myD©aBusSèã
 = 
ªsu…
;

345  
ªsu…
;

346 
	}
}

349 
	gSy°em
::
	$poke
(
uI¡16
 
addr
, 
uI¡8
 
vÆue
)

351 
PageAc˚ss
* 
ac˚ss
;

352 
uI¡16
 
t
 = 
addr
 & 
myAddªssMask
;

353 i‡(
t
 =
œ°_addr
) {

354 
ac˚ss
 = 
œ°_ac˚ss
;

356 
œ°_addr
 = 
t
;

357 
ac˚ss
 = &
myPageAc˚ssTabÀ
[
œ°_addr
 >> 
myPageShi·
];

358 
œ°_ac˚ss
 = 
ac˚ss
;

362 if(
ac˚ss
->
dúe˘PokeBa£
 != 0)

364 *(
ac˚ss
->
dúe˘PokeBa£
 + (
addr
 & 
myPageMask
)Ë
vÆue
;

368 
ac˚ss
->
devi˚
->
	`poke
(
addr
, 
vÆue
);

371 #ifde‡
DEVELOPER_SUPPORT


372 if(!
myD©aBusLocked
)

374 
myD©aBusSèã
 = 
vÆue
;

375 
	}
}

378 
	gSy°em
::
	$lockD©aBus
()

380 
myD©aBusLocked
 = 
åue
;

381 
	}
}

384 
	gSy°em
::
	$u∆ockD©aBus
()

386 
myD©aBusLocked
 = 
Ál£
;

387 
	}
}

	@emucore/System.hxx

19 #i‚de‡
SYSTEM_HXX


20 
	#SYSTEM_HXX


	)

22 
˛ass
 
	gDevi˚
;

23 
˛ass
 
	gM6502
;

24 
˛ass
 
	gTIA
;

25 
˛ass
 
	gNuŒDevi˚
;

26 
˛ass
 
	gSîülizî
;

27 
˛ass
 
	gDe£rülizî
;

29 
	~"b•f.hxx
"

30 
	~"Devi˚.hxx
"

31 
	~"NuŒDev.hxx
"

52 ˛as†
	cSy°em


54 
	mpublic
:

62 
Sy°em
(
uI¡16
 
n
, uI¡16 
m
);

67 
	mvútuÆ
 ~
Sy°em
();

69 
	mpublic
:

74 
ª£t
();

82 
boﬁ
 
ßve
(
Sîülizî
& 
out
);

90 
boﬁ
 
lﬂd
(
De£rülizî
& 
ö
);

92 
	mpublic
:

99 
©èch
(
Devi˚
* 
devi˚
);

107 
©èch
(
M6502
* 
m6502
);

115 
©èch
(
TIA
* 
tü
);

126 
boﬁ
 
ßveSèã
(c⁄° 
°rög
& 
md5sum
, 
Sîülizî
& 
out
);

137 
boﬁ
 
lﬂdSèã
(c⁄° 
°rög
& 
md5sum
, 
De£rülizî
& 
ö
);

139 
	mpublic
:

146 
M6502
& 
	$m6502
()

148  *
myM6502
;

156 
TIA
& 
	$tü
()

158  *
myTIA
;

159 
	}
}

168 
	gNuŒDevi˚
& 
	$nuŒDevi˚
()

170  
myNuŒDevi˚
;

171 
	}
}

178 
uI¡16
 
	$numbîOfPages
() const

180  
myNumbîOfPages
;

181 
	}
}

188 
uI¡16
 
	$∑geShi·
() const

190  
myPageShi·
;

191 
	}
}

198 
uI¡16
 
	$∑geMask
() const

200  
myPageMask
;

201 
	}
}

203 
	gpublic
:

210 
uI¡32
 
	$cy˛es
() const

212  
myCy˛es
;

213 
	}
}

220 
	$ö¸emítCy˛es
(
uI¡32
 
amou¡
)

222 
myCy˛es
 +
amou¡
;

223 
	}
}

231 
ª£tCy˛es
();

233 
	gpublic
:

240 
uI¡8
 
	$gëD©aBusSèã
() const;

249 
uI¡8
 
	`≥ek
(
uI¡16
 
addªss
);

259 
	`poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

270 
	`lockD©aBus
();

271 
	`u∆ockD©aBus
();

273 
public
:

277 
	sPageAc˚ss


285 
uI¡8
* 
dúe˘PìkBa£
;

293 
uI¡8
* 
dúe˘PokeBa£
;

299 
Devi˚
* 
devi˚
;

300 
	}
};

308 
£tPageAc˚ss
(
uI¡16
 
∑ge
, c⁄° 
PageAc˚ss
& 
ac˚ss
);

316 c⁄° 
	gPageAc˚ss
& 
gëPageAc˚ss
(
uI¡16
 
∑ge
);

318 
	g¥iv©e
:

320 c⁄° 
uI¡16
 
myAddªssMask
;

323 c⁄° 
uI¡16
 
	gmyPageShi·
;

326 c⁄° 
uI¡16
 
	gmyPageMask
;

329 c⁄° 
uI¡16
 
	gmyNumbîOfPages
;

332 
PageAc˚ss
* 
	gmyPageAc˚ssTabÀ
;

335 
Devi˚
* 
	gmyDevi˚s
[100];

338 
uI¡32
 
	gmyNumbîOfDevi˚s
;

341 
M6502
* 
	gmyM6502
;

344 
TIA
* 
	gmyTIA
;

347 
uI¡32
 
	gmyCy˛es
;

350 
NuŒDevi˚
 
	gmyNuŒDevi˚
;

353 
uI¡8
 
	gmyD©aBusSèã
;

358 
boﬁ
 
	gmyD©aBusLocked
;

360 
	g¥iv©e
:

362 
Sy°em
(const System&);

365 
	gSy°em
& 
	g›î©‹
 = (c⁄° 
Sy°em
&);

369 
ölöe
 
uI¡8
 
	gSy°em
::
	$gëD©aBusSèã
() const

371  
myD©aBusSèã
;

372 
	}
}

	@emucore/TIA.cpp

19 
	~<ˇs£π
>

20 
	~<c°dlib
>

21 
	~<c°rög
>

22 
	~<io°ªam
>

24 
	~"C⁄sﬁe.hxx
"

25 
	~"C⁄åﬁ.hxx
"

26 
	~"M6502.hxx
"

27 
	~"Sy°em.hxx
"

28 
	~"TIA.hxx
"

29 
	~"Sîülizî.hxx
"

30 
	~"De£rülizî.hxx
"

31 
	~"Sëtögs.hxx
"

32 
	~"Sound.hxx
"

33 
	~"GuiUtûs.hxx
"

35 
	tuöçå_t
;

36 
	#HBLANK
 68

	)

39 
	gTIA
::
	$TIA
(c⁄° 
C⁄sﬁe
& 
c⁄sﬁe
, 
Sëtögs
& 
£âögs
)

40 : 
	`myC⁄sﬁe
(
c⁄sﬁe
),

41 
	`mySëtögs
(
£âögs
),

42 
	`mySound
(
NULL
),

43 
	`myCﬁ‹LossE«bÀd
(
Ál£
),

44 
	`myMaximumNumbîOfSˇ∆öes
(262),

45 
	`myCOLUBK
(
myCﬁ‹
[0]),

46 
	`myCOLUPF
(
myCﬁ‹
[1]),

47 
	`myCOLUP0
(
myCﬁ‹
[2]),

48 
	$myCOLUP1
(
myCﬁ‹
[3])

50 
uI¡32
 
i
;

53 
myCuºítFømeBuf„r
 = 
√w
 
uI¡8
[160 * 300];

54 
myPªviousFømeBuf„r
 = 
√w
 
uI¡8
[160 * 300];

56 
myFømeGªyed
 = 
Ál£
;

58 
i
 = 0; i < 6; ++i)

59 
myBôE«bÀd
[
i
] = 
åue
;

61 
uI¡16
 
x
 = 0; x < 2; ++x)

63 
uI¡16
 
íabÀd
 = 0;Énabled < 256; ++enabled)

65 if(
íabÀd
 & 
Pri‹ôyBô
)

67 
uI¡8
 
cﬁ‹
 = 0;

69 if((
íabÀd
 & (
myP1Bô
 | 
myM1Bô
)) != 0)

70 
cﬁ‹
 = 3;

71 if((
íabÀd
 & (
myP0Bô
 | 
myM0Bô
)) != 0)

72 
cﬁ‹
 = 2;

73 if((
íabÀd
 & 
myBLBô
) != 0)

74 
cﬁ‹
 = 1;

75 if((
íabÀd
 & 
myPFBô
) != 0)

76 
cﬁ‹
 = 1;

78 
myPri‹ôyEncodî
[
x
][
íabÀd
] = 
cﬁ‹
;

82 
uI¡8
 
cﬁ‹
 = 0;

84 if((
íabÀd
 & 
myBLBô
) != 0)

85 
cﬁ‹
 = 1;

86 if((
íabÀd
 & 
myPFBô
) != 0)

87 
cﬁ‹
 = (
íabÀd
 & 
Sc‹eBô
Ë? ((
x
 == 0) ? 2 : 3) : 1;

88 if((
íabÀd
 & (
myP1Bô
 | 
myM1Bô
)) != 0)

89 
cﬁ‹
 = 3;

90 if((
íabÀd
 & (
myP0Bô
 | 
myM0Bô
)) != 0)

91 
cﬁ‹
 = 2;

93 
myPri‹ôyEncodî
[
x
][
íabÀd
] = 
cﬁ‹
;

98 
i
 = 0; i < 640; ++i)

99 
ourDißbÀdMaskTabÀ
[
i
] = 0;

102 
	`compuãBÆlMaskTabÀ
();

103 
	`compuãCﬁlisi⁄TabÀ
();

104 
	`compuãMis¶eMaskTabÀ
();

105 
	`compuãPœyîMaskTabÀ
();

106 
	`compuãPœyîPosôi⁄Re£tWhíTabÀ
();

107 
	`compuãPœyîReÊe˘TabÀ
();

108 
	`compuãPœyfõldMaskTabÀ
();

111 
myFømeCou¡î
 = 0;

113 
myAUDV0
 = 
myAUDV1
 = 
myAUDF0
 = 
myAUDF1
 = 
myAUDC0
 = 
myAUDC1
 = 0;

114 
	}
}

117 
	gTIA
::~
	$TIA
()

119 
dñëe
[] 
myCuºítFømeBuf„r
;

120 
dñëe
[] 
myPªviousFømeBuf„r
;

121 
	}
}

124 c⁄° * 
	gTIA
::
	$«me
() const

127 
	}
}

130 
	gTIA
::
	$ª£t
()

133 
mySound
->
	`ª£t
();

136 
	`˛órBuf„rs
();

139 
myFømePoöãr
 = 
myCuºítFømeBuf„r
;

141 
myYSèπ
 = 
	`©oi
(
myC⁄sﬁe
.
	`¥›îtõs
().
	`gë
(
Di•œy_YSèπ
).
	`c_°r
());

142 
myHeight
 = 
	`©oi
(
myC⁄sﬁe
.
	`¥›îtõs
().
	`gë
(
Di•œy_Height
).
	`c_°r
());

145 
mySèπDi•œyOff£t
 = 228 * 
myYSèπ
;

146 
mySt›Di•œyOff£t
 = 
mySèπDi•œyOff£t
 + 228 * 
myHeight
;

149 
myClockWhíFømeSèπed
 = 
mySy°em
->
	`cy˛es
() * 3;

150 
myClockSèπDi•œy
 = 
myClockWhíFømeSèπed
 + 
mySèπDi•œyOff£t
;

151 
myClockSt›Di•œy
 = 
myClockWhíFømeSèπed
 + 
mySt›Di•œyOff£t
;

152 
myClockAtLa°Upd©e
 = 
myClockWhíFømeSèπed
;

153 
myClocksToEndOfSˇnLöe
 = 228;

154 
myVSYNCFöishClock
 = 0x7FFFFFFF;

155 
mySˇ∆öeCou¡F‹La°Føme
 = 0;

156 
myCuºítSˇ∆öe
 = 0;

159 
myE«bÀdObje˘s
 = 0;

162 
myVSYNC
 = 0;

163 
myVBLANK
 = 0;

164 
myNUSIZ0
 = 0;

165 
myNUSIZ1
 = 0;

166 
myCOLUP0
 = 0;

167 
myCOLUP1
 = 0;

168 
myCOLUPF
 = 0;

169 
myPœyfõldPri‹ôyAndSc‹e
 = 0;

170 
myCOLUBK
 = 0;

171 
myCTRLPF
 = 0;

172 
myREFP0
 = 
Ál£
;

173 
myREFP1
 = 
Ál£
;

174 
myPF
 = 0;

175 
myGRP0
 = 0;

176 
myGRP1
 = 0;

177 
myDGRP0
 = 0;

178 
myDGRP1
 = 0;

179 
myENAM0
 = 
Ál£
;

180 
myENAM1
 = 
Ál£
;

181 
myENABL
 = 
Ál£
;

182 
myDENABL
 = 
Ál£
;

183 
myHMP0
 = 0;

184 
myHMP1
 = 0;

185 
myHMM0
 = 0;

186 
myHMM1
 = 0;

187 
myHMBL
 = 0;

188 
myVDELP0
 = 
Ál£
;

189 
myVDELP1
 = 
Ál£
;

190 
myVDELBL
 = 
Ál£
;

191 
myRESMP0
 = 
Ál£
;

192 
myRESMP1
 = 
Ál£
;

193 
myCﬁlisi⁄
 = 0;

194 
myPOSP0
 = 0;

195 
myPOSP1
 = 0;

196 
myPOSM0
 = 0;

197 
myPOSM1
 = 0;

198 
myPOSBL
 = 0;

201 
myCuºítGRP0
 = 0;

202 
myCuºítGRP1
 = 0;

203 
myCuºítBLMask
 = 
ourBÆlMaskTabÀ
[0][0];

204 
myCuºítM0Mask
 = 
ourMis¶eMaskTabÀ
[0][0][0];

205 
myCuºítM1Mask
 = 
ourMis¶eMaskTabÀ
[0][0][0];

206 
myCuºítP0Mask
 = 
ourPœyîMaskTabÀ
[0][0][0];

207 
myCuºítP1Mask
 = 
ourPœyîMaskTabÀ
[0][0][0];

208 
myCuºítPFMask
 = 
ourPœyfõldTabÀ
[0];

210 
myLa°HMOVEClock
 = 0;

211 
myHMOVEBœnkE«bÀd
 = 
Ál£
;

212 
myM0CosmicArkMŸi⁄E«bÀd
 = 
Ál£
;

213 
myM0CosmicArkCou¡î
 = 0;

215 
uI¡32
 
i
 = 0; i < 6; ++i)

216 
myBôE«bÀd
[
i
] = 
åue
;

218 
myDumpE«bÀd
 = 
Ál£
;

219 
myDumpDißbÀdCy˛e
 = 0;

221 
myAŒowHMOVEBœnks
 =

222 (
myC⁄sﬁe
.
	`¥›îtõs
().
	`gë
(
Emuœti⁄_HmoveBœnks
) == "YES");

224 
myFømeXSèπ
 = 
	`©oi
(
myC⁄sﬁe
.
	`¥›îtõs
().
	`gë
(
Di•œy_XSèπ
).
	`c_°r
());

225 
myFømeWidth
 = 
	`©oi
(
myC⁄sﬁe
.
	`¥›îtõs
().
	`gë
(
Di•œy_Width
).
	`c_°r
());

226 
myFømeYSèπ
 = 
	`©oi
(
myC⁄sﬁe
.
	`¥›îtõs
().
	`gë
(
Di•œy_YSèπ
).
	`c_°r
());

227 
myFømeHeight
 = 
	`©oi
(
myC⁄sﬁe
.
	`¥›îtõs
().
	`gë
(
Di•œy_Height
).
	`c_°r
());

231 
myFømeHeight
 = 
	`MAX
(()myFrameHeight, 190);

234 if((
myFømeXSèπ
 + 
myFømeWidth
) > 160)

237 
myFømeXSèπ
 = 0;

238 
myFømeWidth
 = 160;

241 if(
myC⁄sﬁe
.
	`¥›îtõs
().
	`gë
(
Di•œy_F‹m©
) == "PAL")

243 
myCﬁ‹LossE«bÀd
 = 
åue
;

244 
myMaximumNumbîOfSˇ∆öes
 = 342;

248 
myCﬁ‹LossE«bÀd
 = 
Ál£
;

249 
myMaximumNumbîOfSˇ∆öes
 = 290;

252 
	`íabÀBôs
(
åue
);

253 
	}
}

256 
	gTIA
::
	$sy°emCy˛esRe£t
()

259 
uI¡32
 
cy˛es
 = 
mySy°em
->
	`cy˛es
();

262 
mySound
->
	`adju°Cy˛eCou¡î
(-1 * 
cy˛es
);

265 
myDumpDißbÀdCy˛e
 -
cy˛es
;

268 
uI¡32
 
˛ocks
 = 
cy˛es
 * 3;

271 
myClockWhíFømeSèπed
 -
˛ocks
;

272 
myClockSèπDi•œy
 -
˛ocks
;

273 
myClockSt›Di•œy
 -
˛ocks
;

274 
myClockAtLa°Upd©e
 -
˛ocks
;

275 
myVSYNCFöishClock
 -
˛ocks
;

276 
myLa°HMOVEClock
 -
˛ocks
;

277 
	}
}

280 
	gTIA
::
	$ö°Æl
(
Sy°em
& 
sy°em
)

283 
mySy°em
 = &
sy°em
;

285 
uI¡16
 
shi·
 = 
mySy°em
->
	`∑geShi·
();

286 
mySy°em
->
	`ª£tCy˛es
();

289 
Sy°em
::
PageAc˚ss
 
ac˚ss
;

290 
ac˚ss
.
dúe˘PìkBa£
 = 0;

291 
ac˚ss
.
dúe˘PokeBa£
 = 0;

292 
ac˚ss
.
devi˚
 = 
this
;

295 
uI¡32
 
i
 = 0; i < 8192; i +(1 << 
shi·
))

297 if((
i
 & 0x1080) == 0x0000)

299 
mySy°em
->
	`£tPageAc˚ss
(
i
 >> 
shi·
, 
ac˚ss
);

303 
	}
}

306 
boﬁ
 
	gTIA
::
	$ßve
(
Sîülizî
& 
out
)

308 
°rög
 
devi˚
 = 
	`«me
();

310 
__åy


312 
out
.
	`putSåög
(
devi˚
);

314 
out
.
	`putI¡
(
myClockWhíFømeSèπed
);

315 
out
.
	`putI¡
(
myClockSèπDi•œy
);

316 
out
.
	`putI¡
(
myClockSt›Di•œy
);

317 
out
.
	`putI¡
(
myClockAtLa°Upd©e
);

318 
out
.
	`putI¡
(
myClocksToEndOfSˇnLöe
);

319 
out
.
	`putI¡
(
mySˇ∆öeCou¡F‹La°Føme
);

320 
out
.
	`putI¡
(
myCuºítSˇ∆öe
);

321 
out
.
	`putI¡
(
myVSYNCFöishClock
);

323 
out
.
	`putI¡
(
myE«bÀdObje˘s
);

325 
out
.
	`putI¡
(
myVSYNC
);

326 
out
.
	`putI¡
(
myVBLANK
);

327 
out
.
	`putI¡
(
myNUSIZ0
);

328 
out
.
	`putI¡
(
myNUSIZ1
);

330 
out
.
	`putI¡
(
myCOLUP0
);

331 
out
.
	`putI¡
(
myCOLUP1
);

332 
out
.
	`putI¡
(
myCOLUPF
);

333 
out
.
	`putI¡
(
myCOLUBK
);

335 
out
.
	`putI¡
(
myCTRLPF
);

336 
out
.
	`putI¡
(
myPœyfõldPri‹ôyAndSc‹e
);

337 
out
.
	`putBoﬁ
(
myREFP0
);

338 
out
.
	`putBoﬁ
(
myREFP1
);

339 
out
.
	`putI¡
(
myPF
);

340 
out
.
	`putI¡
(
myGRP0
);

341 
out
.
	`putI¡
(
myGRP1
);

342 
out
.
	`putI¡
(
myDGRP0
);

343 
out
.
	`putI¡
(
myDGRP1
);

344 
out
.
	`putBoﬁ
(
myENAM0
);

345 
out
.
	`putBoﬁ
(
myENAM1
);

346 
out
.
	`putBoﬁ
(
myENABL
);

347 
out
.
	`putBoﬁ
(
myDENABL
);

348 
out
.
	`putI¡
(
myHMP0
);

349 
out
.
	`putI¡
(
myHMP1
);

350 
out
.
	`putI¡
(
myHMM0
);

351 
out
.
	`putI¡
(
myHMM1
);

352 
out
.
	`putI¡
(
myHMBL
);

353 
out
.
	`putBoﬁ
(
myVDELP0
);

354 
out
.
	`putBoﬁ
(
myVDELP1
);

355 
out
.
	`putBoﬁ
(
myVDELBL
);

356 
out
.
	`putBoﬁ
(
myRESMP0
);

357 
out
.
	`putBoﬁ
(
myRESMP1
);

358 
out
.
	`putI¡
(
myCﬁlisi⁄
);

359 
out
.
	`putI¡
(
myPOSP0
);

360 
out
.
	`putI¡
(
myPOSP1
);

361 
out
.
	`putI¡
(
myPOSM0
);

362 
out
.
	`putI¡
(
myPOSM1
);

363 
out
.
	`putI¡
(
myPOSBL
);

365 
out
.
	`putI¡
(
myCuºítGRP0
);

366 
out
.
	`putI¡
(
myCuºítGRP1
);

376 
out
.
	`putI¡
(
myLa°HMOVEClock
);

377 
out
.
	`putBoﬁ
(
myHMOVEBœnkE«bÀd
);

378 
out
.
	`putBoﬁ
(
myM0CosmicArkMŸi⁄E«bÀd
);

379 
out
.
	`putI¡
(
myM0CosmicArkCou¡î
);

381 
out
.
	`putBoﬁ
(
myDumpE«bÀd
);

382 
out
.
	`putI¡
(
myDumpDißbÀdCy˛e
);

385 
mySound
->
	`ßve
(
out
);

388 
	`ˇtch
(*
msg
)

390 
˚º
 << 
msg
 << 
ídl
;

391  
Ál£
;

394 
	`__ˇtch
(...)

396 
˚º
 << "Unknow¿îr‹ i¿ßvê°©êf‹ " << 
devi˚
 << 
ídl
;

397  
Ál£
;

400  
åue
;

401 
	}
}

404 
boﬁ
 
	gTIA
::
	$lﬂd
(
De£rülizî
& 
ö
)

406 
°rög
 
devi˚
 = 
	`«me
();

408 
__åy


410 if(
ö
.
	`gëSåög
(Ë!
devi˚
)

411  
Ál£
;

413 
myClockWhíFømeSèπed
 = (
I¡32
Ë
ö
.
	`gëI¡
();

414 
myClockSèπDi•œy
 = (
I¡32
Ë
ö
.
	`gëI¡
();

415 
myClockSt›Di•œy
 = (
I¡32
Ë
ö
.
	`gëI¡
();

416 
myClockAtLa°Upd©e
 = (
I¡32
Ë
ö
.
	`gëI¡
();

417 
myClocksToEndOfSˇnLöe
 = (
I¡32
Ë
ö
.
	`gëI¡
();

418 
mySˇ∆öeCou¡F‹La°Føme
 = (
I¡32
Ë
ö
.
	`gëI¡
();

419 
myCuºítSˇ∆öe
 = (
I¡32
Ë
ö
.
	`gëI¡
();

420 
myVSYNCFöishClock
 = (
I¡32
Ë
ö
.
	`gëI¡
();

422 
myE«bÀdObje˘s
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

424 
myVSYNC
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

425 
myVBLANK
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

426 
myNUSIZ0
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

427 
myNUSIZ1
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

429 
myCOLUP0
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

430 
myCOLUP1
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

431 
myCOLUPF
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

432 
myCOLUBK
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

434 
myCTRLPF
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

435 
myPœyfõldPri‹ôyAndSc‹e
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

436 
myREFP0
 = 
ö
.
	`gëBoﬁ
();

437 
myREFP1
 = 
ö
.
	`gëBoﬁ
();

438 
myPF
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

439 
myGRP0
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

440 
myGRP1
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

441 
myDGRP0
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

442 
myDGRP1
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

443 
myENAM0
 = 
ö
.
	`gëBoﬁ
();

444 
myENAM1
 = 
ö
.
	`gëBoﬁ
();

445 
myENABL
 = 
ö
.
	`gëBoﬁ
();

446 
myDENABL
 = 
ö
.
	`gëBoﬁ
();

447 
myHMP0
 = (
I¡8
Ë
ö
.
	`gëI¡
();

448 
myHMP1
 = (
I¡8
Ë
ö
.
	`gëI¡
();

449 
myHMM0
 = (
I¡8
Ë
ö
.
	`gëI¡
();

450 
myHMM1
 = (
I¡8
Ë
ö
.
	`gëI¡
();

451 
myHMBL
 = (
I¡8
Ë
ö
.
	`gëI¡
();

452 
myVDELP0
 = 
ö
.
	`gëBoﬁ
();

453 
myVDELP1
 = 
ö
.
	`gëBoﬁ
();

454 
myVDELBL
 = 
ö
.
	`gëBoﬁ
();

455 
myRESMP0
 = 
ö
.
	`gëBoﬁ
();

456 
myRESMP1
 = 
ö
.
	`gëBoﬁ
();

457 
myCﬁlisi⁄
 = (
uI¡16
Ë
ö
.
	`gëI¡
();

458 
myPOSP0
 = (
I¡16
Ë
ö
.
	`gëI¡
();

459 
myPOSP1
 = (
I¡16
Ë
ö
.
	`gëI¡
();

460 
myPOSM0
 = (
I¡16
Ë
ö
.
	`gëI¡
();

461 
myPOSM1
 = (
I¡16
Ë
ö
.
	`gëI¡
();

462 
myPOSBL
 = (
I¡16
Ë
ö
.
	`gëI¡
();

464 
myCuºítGRP0
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

465 
myCuºítGRP1
 = (
uI¡8
Ë
ö
.
	`gëI¡
();

475 
myLa°HMOVEClock
 = (
I¡32
Ë
ö
.
	`gëI¡
();

476 
myHMOVEBœnkE«bÀd
 = 
ö
.
	`gëBoﬁ
();

477 
myM0CosmicArkMŸi⁄E«bÀd
 = 
ö
.
	`gëBoﬁ
();

478 
myM0CosmicArkCou¡î
 = (
uI¡32
Ë
ö
.
	`gëI¡
();

480 
myDumpE«bÀd
 = 
ö
.
	`gëBoﬁ
();

481 
myDumpDißbÀdCy˛e
 = (
I¡32
Ë
ö
.
	`gëI¡
();

484 
mySound
->
	`lﬂd
(
ö
);

487 
	`íabÀBôs
(
åue
);

490 
	`ˇtch
(*
msg
)

492 
˚º
 << 
msg
 << 
ídl
;

493  
Ál£
;

496 
	`__ˇtch
(...)

498 
˚º
 << "Unknow¿îr‹ i¿lﬂd sèã f‹ " << 
devi˚
 << 
ídl
;

499  
Ál£
;

502  
åue
;

503 
	}
}

506 
	gTIA
::
	$upd©e
()

509 if(!
myP¨tülFømeFœg
)

510 
	`°¨tFøme
();

515 
myP¨tülFømeFœg
 = 
åue
;

518 
mySy°em
->
	`m6502
().
	`execuã
(25000);

522 
uI¡32
 
tŸÆClocks
 = (
mySy°em
->
	`cy˛es
(Ë* 3Ë- 
myClockWhíFømeSèπed
;

523 
myCuºítSˇ∆öe
 = 
tŸÆClocks
 / 228;

525 if(
myP¨tülFømeFœg
) {

527 if(!
myFømeGªyed
Ë
	`gªyOutFøme
();

528 
myFømeGªyed
 = 
åue
;

530 
	`ídFøme
();

532 
	}
}

535 
ölöe
 
	gTIA
::
	$°¨tFøme
()

538 
uI¡8
* 
tmp
 = 
myCuºítFømeBuf„r
;

539 
myCuºítFømeBuf„r
 = 
myPªviousFømeBuf„r
;

540 
myPªviousFømeBuf„r
 = 
tmp
;

546 
uI¡32
 
˛ocks
 = ((
mySy°em
->
	`cy˛es
(Ë* 3Ë- 
myClockWhíFømeSèπed
) % 228;

549 
mySy°em
->
	`ª£tCy˛es
();

552 
myClockWhíFømeSèπed
 = -1 * 
˛ocks
;

553 
myClockSèπDi•œy
 = 
myClockWhíFømeSèπed
 + 
mySèπDi•œyOff£t
;

554 
myClockSt›Di•œy
 = 
myClockWhíFømeSèπed
 + 
mySt›Di•œyOff£t
;

555 
myClockAtLa°Upd©e
 = 
myClockSèπDi•œy
;

556 
myClocksToEndOfSˇnLöe
 = 228;

559 
myFømePoöãr
 = 
myCuºítFømeBuf„r
;

563 if(
myCﬁ‹LossE«bÀd
)

565 if(
mySˇ∆öeCou¡F‹La°Føme
 & 0x01)

567 
myCOLUP0
 |= 0x01010101;

568 
myCOLUP1
 |= 0x01010101;

569 
myCOLUPF
 |= 0x01010101;

570 
myCOLUBK
 |= 0x01010101;

574 
myCOLUP0
 &= 0xfefefefe;

575 
myCOLUP1
 &= 0xfefefefe;

576 
myCOLUPF
 &= 0xfefefefe;

577 
myCOLUBK
 &= 0xfefefefe;

581 
myFømeGªyed
 = 
Ál£
;

582 
	}
}

585 
ölöe
 
	gTIA
::
	$ídFøme
()

589 
mySˇ∆öeCou¡F‹La°Føme
 = 
myCuºítSˇ∆öe
;

592 
myFømeCou¡î
++;

594 
myFømeGªyed
 = 
Ál£
;

595 
	}
}

597 #ifde‡
DEVELOPER_SUPPORT


599 
	gTIA
::
	$upd©eSˇ∆öe
()

602 if(!
myP¨tülFømeFœg
) {

603 
	`°¨tFøme
();

607 if(!
myFømeGªyed
Ë
	`gªyOutFøme
();

608 
myFømeGªyed
 = 
åue
;

611 
myP¨tülFømeFœg
 = 
åue
;

613 
tŸÆClocks
 = (
mySy°em
->
	`cy˛es
(Ë* 3Ë- 
myClockWhíFømeSèπed
;

614 
ídClock
 = ((
tŸÆClocks
 + 228) / 228) * 228;

616 
˛ock
;

618 
mySy°em
->
	`m6502
().
	`execuã
(1);

619 
˛ock
 = 
mySy°em
->
	`cy˛es
() * 3;

620 
	`upd©eFøme
(
˛ock
);

621 } 
˛ock
 < 
ídClock
);

623 
tŸÆClocks
 = (
mySy°em
->
	`cy˛es
(Ë* 3Ë- 
myClockWhíFømeSèπed
;

624 
myCuºítSˇ∆öe
 = 
tŸÆClocks
 / 228;

627 if(!
myP¨tülFømeFœg
)

628 
	`ídFøme
();

629 
	}
}

632 
	gTIA
::
	$upd©eSˇ∆öeBySãp
()

635 if(!
myP¨tülFømeFœg
) {

636 
	`°¨tFøme
();

640 if(!
myFømeGªyed
Ë
	`gªyOutFøme
();

641 
myFømeGªyed
 = 
åue
;

644 
myP¨tülFømeFœg
 = 
åue
;

646 
tŸÆClocks
 = (
mySy°em
->
	`cy˛es
(Ë* 3Ë- 
myClockWhíFømeSèπed
;

649 
mySy°em
->
	`m6502
().
	`execuã
(1);

650 
	`upd©eFøme
(
mySy°em
->
	`cy˛es
() * 3);

652 
tŸÆClocks
 = (
mySy°em
->
	`cy˛es
(Ë* 3Ë- 
myClockWhíFømeSèπed
;

653 
myCuºítSˇ∆öe
 = 
tŸÆClocks
 / 228;

656 if(!
myP¨tülFømeFœg
)

657 
	`ídFøme
();

658 
	}
}

661 
	gTIA
::
	$upd©eSˇ∆öeByTø˚
(
èrgë
)

664 if(!
myP¨tülFømeFœg
) {

665 
	`°¨tFøme
();

669 if(!
myFømeGªyed
Ë
	`gªyOutFøme
();

670 
myFømeGªyed
 = 
åue
;

673 
myP¨tülFømeFœg
 = 
åue
;

675 
tŸÆClocks
 = (
mySy°em
->
	`cy˛es
(Ë* 3Ë- 
myClockWhíFømeSèπed
;

677 
mySy°em
->
	`m6502
().
	`gëPC
(Ë!
èrgë
)

679 
mySy°em
->
	`m6502
().
	`execuã
(1);

680 
	`upd©eFøme
(
mySy°em
->
	`cy˛es
() * 3);

683 
tŸÆClocks
 = (
mySy°em
->
	`cy˛es
(Ë* 3Ë- 
myClockWhíFømeSèπed
;

684 
myCuºítSˇ∆öe
 = 
tŸÆClocks
 / 228;

687 if(!
myP¨tülFømeFœg
)

688 
	`ídFøme
();

689 
	}
}

693 c⁄° 
uI¡32
* 
	gTIA
::
	$∑Àâe
() const

696 c⁄° 
°rög
& 
ty≥
 = 
mySëtögs
.
	`gëSåög
("palette");

697 c⁄° 
°rög
& 
f‹m©
 = 
myC⁄sﬁe
.
	`¥›îtõs
().
	`gë
(
Di•œy_F‹m©
);

699 if(
ty≥
 == "standard")

700  (
f‹m©
 ="PAL"Ë? 
ourPALPÆëã
 : 
ourNTSCPÆëã
;

701 if(
ty≥
 == "original")

702  (
f‹m©
 ="PAL"Ë? 
ourPALPÆëã11
 : 
ourNTSCPÆëã11
;

703 if(
ty≥
 == "z26")

704  (
f‹m©
 ="PAL"Ë? 
ourPALPÆëãZ26
 : 
ourNTSCPÆëãZ26
;

706  (
f‹m©
 ="PAL"Ë? 
ourPALPÆëã
 : 
ourNTSCPÆëã
;

707 
	}
}

710 
uI¡32
 
	gTIA
::
	$width
() const

712  
myFømeWidth
;

713 
	}
}

716 
uI¡32
 
	gTIA
::
	$height
() const

718  
myFømeHeight
;

719 
	}
}

722 
uI¡32
 
	gTIA
::
	$sˇ∆öes
() const

725 
uI¡32
 
tŸÆClocks
 = (
mySy°em
->
	`cy˛es
(Ë* 3Ë- 
myClockWhíFømeSèπed
;

726  
tŸÆClocks
/228;

727 
	}
}

730 
uI¡32
 
	gTIA
::
	$˛ocksThisLöe
() const

733 
uI¡32
 
tŸÆClocks
 = (
mySy°em
->
	`cy˛es
(Ë* 3Ë- 
myClockWhíFømeSèπed
;

734  
tŸÆClocks
%228;

735 
	}
}

738 
	gTIA
::
	$£tSound
(
Sound
& 
sound
)

740 
mySound
 = &
sound
;

741 
	}
}

744 
	gTIA
::
	$compuãBÆlMaskTabÀ
()

747 
I¡32
 
size
 = 0; size < 4; ++size)

749 
I¡32
 
x
;

752 
x
 = 0; x < 160; ++x)

754 
ourBÆlMaskTabÀ
[0][
size
][
x
] = 
Ál£
;

758 
x
 = 0; x < 160 + 8; ++x)

760 if((
x
 >0Ë&& (x < (1 << 
size
)))

762 
ourBÆlMaskTabÀ
[0][
size
][
x
 % 160] = 
åue
;

767 
x
 = 0; x < 160; ++x)

769 
ourBÆlMaskTabÀ
[0][
size
][
x
 + 160] = ourBallMaskTable[0][size][x];

774 
uI¡32
 
Æign
 = 1;álign < 4; ++align)

776 
uI¡32
 
size
 = 0; size < 4; ++size)

778 
uI¡32
 
x
 = 0; x < 320; ++x)

780 
ourBÆlMaskTabÀ
[
Æign
][
size
][
x
] =

781 
ourBÆlMaskTabÀ
[0][
size
][(
x
 + 320 - 
Æign
) % 320];

785 
	}
}

788 
	gTIA
::
	$compuãCﬁlisi⁄TabÀ
()

790 
uI¡8
 
i
 = 0; i < 64; ++i)

792 
ourCﬁlisi⁄TabÀ
[
i
] = 0;

794 if((
i
 & 
myM0Bô
Ë&& (ò& 
myP1Bô
))

795 
ourCﬁlisi⁄TabÀ
[
i
] |= 0x0001;

797 if((
i
 & 
myM0Bô
Ë&& (ò& 
myP0Bô
))

798 
ourCﬁlisi⁄TabÀ
[
i
] |= 0x0002;

800 if((
i
 & 
myM1Bô
Ë&& (ò& 
myP0Bô
))

801 
ourCﬁlisi⁄TabÀ
[
i
] |= 0x0004;

803 if((
i
 & 
myM1Bô
Ë&& (ò& 
myP1Bô
))

804 
ourCﬁlisi⁄TabÀ
[
i
] |= 0x0008;

806 if((
i
 & 
myP0Bô
Ë&& (ò& 
myPFBô
))

807 
ourCﬁlisi⁄TabÀ
[
i
] |= 0x0010;

809 if((
i
 & 
myP0Bô
Ë&& (ò& 
myBLBô
))

810 
ourCﬁlisi⁄TabÀ
[
i
] |= 0x0020;

812 if((
i
 & 
myP1Bô
Ë&& (ò& 
myPFBô
))

813 
ourCﬁlisi⁄TabÀ
[
i
] |= 0x0040;

815 if((
i
 & 
myP1Bô
Ë&& (ò& 
myBLBô
))

816 
ourCﬁlisi⁄TabÀ
[
i
] |= 0x0080;

818 if((
i
 & 
myM0Bô
Ë&& (ò& 
myPFBô
))

819 
ourCﬁlisi⁄TabÀ
[
i
] |= 0x0100;

821 if((
i
 & 
myM0Bô
Ë&& (ò& 
myBLBô
))

822 
ourCﬁlisi⁄TabÀ
[
i
] |= 0x0200;

824 if((
i
 & 
myM1Bô
Ë&& (ò& 
myPFBô
))

825 
ourCﬁlisi⁄TabÀ
[
i
] |= 0x0400;

827 if((
i
 & 
myM1Bô
Ë&& (ò& 
myBLBô
))

828 
ourCﬁlisi⁄TabÀ
[
i
] |= 0x0800;

830 if((
i
 & 
myBLBô
Ë&& (ò& 
myPFBô
))

831 
ourCﬁlisi⁄TabÀ
[
i
] |= 0x1000;

833 if((
i
 & 
myP0Bô
Ë&& (ò& 
myP1Bô
))

834 
ourCﬁlisi⁄TabÀ
[
i
] |= 0x2000;

836 if((
i
 & 
myM0Bô
Ë&& (ò& 
myM1Bô
))

837 
ourCﬁlisi⁄TabÀ
[
i
] |= 0x4000;

839 
	}
}

842 
	gTIA
::
	$compuãMis¶eMaskTabÀ
()

845 
I¡32
 
x
, 
size
, 
numbî
;

848 
numbî
 = 0;Çumber < 8; ++number)

849 
size
 = 0; size < 4; ++size)

850 
x
 = 0; x < 160; ++x)

851 
ourMis¶eMaskTabÀ
[0][
numbî
][
size
][
x
] = 
Ál£
;

853 
numbî
 = 0;Çumber < 8; ++number)

855 
size
 = 0; size < 4; ++size)

857 
x
 = 0; x < 160 + 72; ++x)

860 if((
numbî
 == 0x00) || (number == 0x05) || (number == 0x07))

862 if((
x
 >0Ë&& (x < (1 << 
size
)))

863 
ourMis¶eMaskTabÀ
[0][
numbî
][
size
][
x
 % 160] = 
åue
;

866 if(
numbî
 == 0x01)

868 if((
x
 >0Ë&& (x < (1 << 
size
)))

869 
ourMis¶eMaskTabÀ
[0][
numbî
][
size
][
x
 % 160] = 
åue
;

870 if(((
x
 - 16Ë>0Ë&& ((x - 16Ë< (1 << 
size
)))

871 
ourMis¶eMaskTabÀ
[0][
numbî
][
size
][
x
 % 160] = 
åue
;

874 if(
numbî
 == 0x02)

876 if((
x
 >0Ë&& (x < (1 << 
size
)))

877 
ourMis¶eMaskTabÀ
[0][
numbî
][
size
][
x
 % 160] = 
åue
;

878 if(((
x
 - 32Ë>0Ë&& ((x - 32Ë< (1 << 
size
)))

879 
ourMis¶eMaskTabÀ
[0][
numbî
][
size
][
x
 % 160] = 
åue
;

882 if(
numbî
 == 0x03)

884 if((
x
 >0Ë&& (x < (1 << 
size
)))

885 
ourMis¶eMaskTabÀ
[0][
numbî
][
size
][
x
 % 160] = 
åue
;

886 if(((
x
 - 16Ë>0Ë&& ((x - 16Ë< (1 << 
size
)))

887 
ourMis¶eMaskTabÀ
[0][
numbî
][
size
][
x
 % 160] = 
åue
;

888 if(((
x
 - 32Ë>0Ë&& ((x - 32Ë< (1 << 
size
)))

889 
ourMis¶eMaskTabÀ
[0][
numbî
][
size
][
x
 % 160] = 
åue
;

892 if(
numbî
 == 0x04)

894 if((
x
 >0Ë&& (x < (1 << 
size
)))

895 
ourMis¶eMaskTabÀ
[0][
numbî
][
size
][
x
 % 160] = 
åue
;

896 if(((
x
 - 64Ë>0Ë&& ((x - 64Ë< (1 << 
size
)))

897 
ourMis¶eMaskTabÀ
[0][
numbî
][
size
][
x
 % 160] = 
åue
;

900 if(
numbî
 == 0x06)

902 if((
x
 >0Ë&& (x < (1 << 
size
)))

903 
ourMis¶eMaskTabÀ
[0][
numbî
][
size
][
x
 % 160] = 
åue
;

904 if(((
x
 - 32Ë>0Ë&& ((x - 32Ë< (1 << 
size
)))

905 
ourMis¶eMaskTabÀ
[0][
numbî
][
size
][
x
 % 160] = 
åue
;

906 if(((
x
 - 64Ë>0Ë&& ((x - 64Ë< (1 << 
size
)))

907 
ourMis¶eMaskTabÀ
[0][
numbî
][
size
][
x
 % 160] = 
åue
;

912 
x
 = 0; x < 160; ++x)

913 
ourMis¶eMaskTabÀ
[0][
numbî
][
size
][
x
 + 160] =

914 
ourMis¶eMaskTabÀ
[0][
numbî
][
size
][
x
];

919 
uI¡32
 
Æign
 = 1;álign < 4; ++align)

921 
numbî
 = 0;Çumber < 8; ++number)

923 
size
 = 0; size < 4; ++size)

925 
x
 = 0; x < 320; ++x)

927 
ourMis¶eMaskTabÀ
[
Æign
][
numbî
][
size
][
x
] =

928 
ourMis¶eMaskTabÀ
[0][
numbî
][
size
][(
x
 + 320 - 
Æign
) % 320];

933 
	}
}

936 
	gTIA
::
	$compuãPœyîMaskTabÀ
()

939 
I¡32
 
x
, 
íabÀ
, 
mode
;

942 
íabÀ
 = 0;Énable < 2; ++enable)

943 
mode
 = 0; mode < 8; ++mode)

944 
x
 = 0; x < 160; ++x)

945 
ourPœyîMaskTabÀ
[0][
íabÀ
][
mode
][
x
] = 0x00;

948 
íabÀ
 = 0;Énable < 2; ++enable)

950 
mode
 = 0; mode < 8; ++mode)

952 
x
 = 0; x < 160 + 72; ++x)

954 if(
mode
 == 0x00)

956 if((
íabÀ
 =0Ë&& (
x
 >= 0) && (x < 8))

957 
ourPœyîMaskTabÀ
[0][
íabÀ
][
mode
][
x
 % 160] = 0x80 >> x;

959 if(
mode
 == 0x01)

961 if((
íabÀ
 =0Ë&& (
x
 >= 0) && (x < 8))

962 
ourPœyîMaskTabÀ
[0][
íabÀ
][
mode
][
x
 % 160] = 0x80 >> x;

963 if(((
x
 - 16) >= 0) && ((x - 16) < 8))

964 
ourPœyîMaskTabÀ
[0][
íabÀ
][
mode
][
x
 % 160] = 0x80 >> (x - 16);

966 if(
mode
 == 0x02)

968 if((
íabÀ
 =0Ë&& (
x
 >= 0) && (x < 8))

969 
ourPœyîMaskTabÀ
[0][
íabÀ
][
mode
][
x
 % 160] = 0x80 >> x;

970 if(((
x
 - 32) >= 0) && ((x - 32) < 8))

971 
ourPœyîMaskTabÀ
[0][
íabÀ
][
mode
][
x
 % 160] = 0x80 >> (x - 32);

973 if(
mode
 == 0x03)

975 if((
íabÀ
 =0Ë&& (
x
 >= 0) && (x < 8))

976 
ourPœyîMaskTabÀ
[0][
íabÀ
][
mode
][
x
 % 160] = 0x80 >> x;

977 if(((
x
 - 16) >= 0) && ((x - 16) < 8))

978 
ourPœyîMaskTabÀ
[0][
íabÀ
][
mode
][
x
 % 160] = 0x80 >> (x - 16);

979 if(((
x
 - 32) >= 0) && ((x - 32) < 8))

980 
ourPœyîMaskTabÀ
[0][
íabÀ
][
mode
][
x
 % 160] = 0x80 >> (x - 32);

982 if(
mode
 == 0x04)

984 if((
íabÀ
 =0Ë&& (
x
 >= 0) && (x < 8))

985 
ourPœyîMaskTabÀ
[0][
íabÀ
][
mode
][
x
 % 160] = 0x80 >> x;

986 if(((
x
 - 64) >= 0) && ((x - 64) < 8))

987 
ourPœyîMaskTabÀ
[0][
íabÀ
][
mode
][
x
 % 160] = 0x80 >> (x - 64);

989 if(
mode
 == 0x05)

993 if((
íabÀ
 =0Ë&& (
x
 > 0) && (x <= 16))

994 
ourPœyîMaskTabÀ
[0][
íabÀ
][
mode
][
x
 % 160] = 0x80 >> ((x - 1)/2);

996 if(
mode
 == 0x06)

998 if((
íabÀ
 =0Ë&& (
x
 >= 0) && (x < 8))

999 
ourPœyîMaskTabÀ
[0][
íabÀ
][
mode
][
x
 % 160] = 0x80 >> x;

1000 if(((
x
 - 32) >= 0) && ((x - 32) < 8))

1001 
ourPœyîMaskTabÀ
[0][
íabÀ
][
mode
][
x
 % 160] = 0x80 >> (x - 32);

1002 if(((
x
 - 64) >= 0) && ((x - 64) < 8))

1003 
ourPœyîMaskTabÀ
[0][
íabÀ
][
mode
][
x
 % 160] = 0x80 >> (x - 64);

1005 if(
mode
 == 0x07)

1009 if((
íabÀ
 =0Ë&& (
x
 > 0) && (x <= 32))

1010 
ourPœyîMaskTabÀ
[0][
íabÀ
][
mode
][
x
 % 160] = 0x80 >> ((x - 1)/4);

1015 
x
 = 0; x < 160; ++x)

1017 
ourPœyîMaskTabÀ
[0][
íabÀ
][
mode
][
x
 + 160] =

1018 
ourPœyîMaskTabÀ
[0][
íabÀ
][
mode
][
x
];

1024 
uI¡32
 
Æign
 = 1;álign < 4; ++align)

1026 
íabÀ
 = 0;Énable < 2; ++enable)

1028 
mode
 = 0; mode < 8; ++mode)

1030 
x
 = 0; x < 320; ++x)

1032 
ourPœyîMaskTabÀ
[
Æign
][
íabÀ
][
mode
][
x
] =

1033 
ourPœyîMaskTabÀ
[0][
íabÀ
][
mode
][(
x
 + 320 - 
Æign
) % 320];

1038 
	}
}

1041 
	gTIA
::
	$compuãPœyîPosôi⁄Re£tWhíTabÀ
()

1043 
uI¡32
 
mode
, 
ﬁdx
, 
√wx
;

1050 
mode
 = 0; mode < 8; ++mode)

1052 
ﬁdx
 = 0; oldx < 160; ++oldx)

1055 
√wx
 = 0;Çewx < 160; ++newx)

1057 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
] = 0;

1061 
√wx
 = 0;Çewx < 160 + 72 + 5; ++newx)

1063 if(
mode
 == 0x00)

1065 if((
√wx
 >
ﬁdx
) && (newx < (oldx + 4)))

1066 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = -1;

1068 if((
√wx
 >
ﬁdx
 + 4) && (newx < (oldx + 4 + 8)))

1069 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = 1;

1071 if(
mode
 == 0x01)

1073 if((
√wx
 >
ﬁdx
) && (newx < (oldx + 4)))

1074 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = -1;

1075 if((
√wx
 >(
ﬁdx
 + 16)) && (newx < (oldx + 16 + 4)))

1076 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = -1;

1078 if((
√wx
 >
ﬁdx
 + 4) && (newx < (oldx + 4 + 8)))

1079 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = 1;

1080 if((
√wx
 >
ﬁdx
 + 16 + 4) && (newx < (oldx + 16 + 4 + 8)))

1081 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = 1;

1083 if(
mode
 == 0x02)

1085 if((
√wx
 >
ﬁdx
) && (newx < (oldx + 4)))

1086 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = -1;

1087 if((
√wx
 >(
ﬁdx
 + 32)) && (newx < (oldx + 32 + 4)))

1088 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = -1;

1090 if((
√wx
 >
ﬁdx
 + 4) && (newx < (oldx + 4 + 8)))

1091 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = 1;

1092 if((
√wx
 >
ﬁdx
 + 32 + 4) && (newx < (oldx + 32 + 4 + 8)))

1093 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = 1;

1095 if(
mode
 == 0x03)

1097 if((
√wx
 >
ﬁdx
) && (newx < (oldx + 4)))

1098 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = -1;

1099 if((
√wx
 >(
ﬁdx
 + 16)) && (newx < (oldx + 16 + 4)))

1100 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = -1;

1101 if((
√wx
 >(
ﬁdx
 + 32)) && (newx < (oldx + 32 + 4)))

1102 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = -1;

1104 if((
√wx
 >
ﬁdx
 + 4) && (newx < (oldx + 4 + 8)))

1105 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = 1;

1106 if((
√wx
 >
ﬁdx
 + 16 + 4) && (newx < (oldx + 16 + 4 + 8)))

1107 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = 1;

1108 if((
√wx
 >
ﬁdx
 + 32 + 4) && (newx < (oldx + 32 + 4 + 8)))

1109 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = 1;

1111 if(
mode
 == 0x04)

1113 if((
√wx
 >
ﬁdx
) && (newx < (oldx + 4)))

1114 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = -1;

1115 if((
√wx
 >(
ﬁdx
 + 64)) && (newx < (oldx + 64 + 4)))

1116 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = -1;

1118 if((
√wx
 >
ﬁdx
 + 4) && (newx < (oldx + 4 + 8)))

1119 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = 1;

1120 if((
√wx
 >
ﬁdx
 + 64 + 4) && (newx < (oldx + 64 + 4 + 8)))

1121 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = 1;

1123 if(
mode
 == 0x05)

1125 if((
√wx
 >
ﬁdx
) && (newx < (oldx + 4)))

1126 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = -1;

1128 if((
√wx
 >
ﬁdx
 + 4) && (newx < (oldx + 4 + 16)))

1129 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = 1;

1131 if(
mode
 == 0x06)

1133 if((
√wx
 >
ﬁdx
) && (newx < (oldx + 4)))

1134 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = -1;

1135 if((
√wx
 >(
ﬁdx
 + 32)) && (newx < (oldx + 32 + 4)))

1136 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = -1;

1137 if((
√wx
 >(
ﬁdx
 + 64)) && (newx < (oldx + 64 + 4)))

1138 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = -1;

1140 if((
√wx
 >
ﬁdx
 + 4) && (newx < (oldx + 4 + 8)))

1141 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = 1;

1142 if((
√wx
 >
ﬁdx
 + 32 + 4) && (newx < (oldx + 32 + 4 + 8)))

1143 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = 1;

1144 if((
√wx
 >
ﬁdx
 + 64 + 4) && (newx < (oldx + 64 + 4 + 8)))

1145 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = 1;

1147 if(
mode
 == 0x07)

1149 if((
√wx
 >
ﬁdx
) && (newx < (oldx + 4)))

1150 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = -1;

1152 if((
√wx
 >
ﬁdx
 + 4) && (newx < (oldx + 4 + 32)))

1153 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
 % 160] = 1;

1158 
uI¡32
 
s1
 = 0, 
s2
 = 0;

1159 
√wx
 = 0;Çewx < 160; ++newx)

1161 if(
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
] == -1)

1162 ++
s1
;

1163 if(
ourPœyîPosôi⁄Re£tWhíTabÀ
[
mode
][
ﬁdx
][
√wx
] == 1)

1164 ++
s2
;

1166 
	`as£π
((
s1
 % 4 =0Ë&& (
s2
 % 8 == 0));

1169 
	}
}

1172 
	gTIA
::
	$compuãPœyîReÊe˘TabÀ
()

1174 
uI¡16
 
i
 = 0; i < 256; ++i)

1176 
uI¡8
 
r
 = 0;

1178 
uI¡16
 
t
 = 1;Å <= 128;Å *= 2)

1180 
r
 = (∏<< 1Ë| ((
i
 & 
t
) ? 0x01 : 0x00);

1183 
ourPœyîReÊe˘TabÀ
[
i
] = 
r
;

1185 
	}
}

1188 
	gTIA
::
	$compuãPœyfõldMaskTabÀ
()

1190 
I¡32
 
x
;

1193 
x
 = 0; x < 160; ++x)

1195 if(
x
 < 16)

1196 
ourPœyfõldTabÀ
[0][
x
] = 0x00001 << (x / 4);

1197 if(
x
 < 48)

1198 
ourPœyfõldTabÀ
[0][
x
] = 0x00800 >> ((x - 16) / 4);

1199 if(
x
 < 80)

1200 
ourPœyfõldTabÀ
[0][
x
] = 0x01000 << ((x - 48) / 4);

1201 if(
x
 < 96)

1202 
ourPœyfõldTabÀ
[0][
x
] = 0x00001 << ((x - 80) / 4);

1203 if(
x
 < 128)

1204 
ourPœyfõldTabÀ
[0][
x
] = 0x00800 >> ((x - 96) / 4);

1205 if(
x
 < 160)

1206 
ourPœyfõldTabÀ
[0][
x
] = 0x01000 << ((x - 128) / 4);

1210 
x
 = 0; x < 160; ++x)

1212 if(
x
 < 16)

1213 
ourPœyfõldTabÀ
[1][
x
] = 0x00001 << (x / 4);

1214 if(
x
 < 48)

1215 
ourPœyfõldTabÀ
[1][
x
] = 0x00800 >> ((x - 16) / 4);

1216 if(
x
 < 80)

1217 
ourPœyfõldTabÀ
[1][
x
] = 0x01000 << ((x - 48) / 4);

1218 if(
x
 < 112)

1219 
ourPœyfõldTabÀ
[1][
x
] = 0x80000 >> ((x - 80) / 4);

1220 if(
x
 < 144)

1221 
ourPœyfõldTabÀ
[1][
x
] = 0x00010 << ((x - 112) / 4);

1222 if(
x
 < 160)

1223 
ourPœyfõldTabÀ
[1][
x
] = 0x00008 >> ((x - 144) / 4);

1225 
	}
}

1228 
ölöe
 
	gTIA
::
	$upd©eFømeSˇ∆öe
(
uI¡32
 
˛ocksToUpd©e
, uI¡32 
hpos
)

1231 
uI¡8
* 
ídög
 = 
myFømePoöãr
 + 
˛ocksToUpd©e
;

1234 if(
myVBLANK
 & 0x02)

1236 
uI¡8
* 
±r
 = 
myFømePoöãr
;

1237 
˛ocksToUpd©e
-- != 0) {

1238 *
±r
++ = 0;

1245 
myE«bÀdObje˘s
 | 
myPœyfõldPri‹ôyAndSc‹e
)

1249 0x00 | 
Sc‹eBô
:

1250 0x00 | 
Pri‹ôyBô
:

1251 0x00 | 
Pri‹ôyBô
 | 
Sc‹eBô
:

1253 
uI¡8
* 
±r
 = 
myFømePoöãr
;

1254 
˛ocksToUpd©e
-- != 0) {

1255 *
±r
++ = 
myCOLUBK
;

1262 
myPFBô
:

1263 
myPFBô
 | 
Pri‹ôyBô
:

1265 
uI¡32
* 
mask
 = &
myCuºítPFMask
[
hpos
];

1268 ; ((
uöçå_t
)
myFømePoöãr
 & 0x03Ë&& (myFømePoöã∏< 
ídög
);

1269 ++
myFømePoöãr
, ++
mask
)

1271 *
myFømePoöãr
 = (
myPF
 & *
mask
Ë? 
myCOLUPF
 : 
myCOLUBK
;

1275 ; 
myFømePoöãr
 < 
ídög
; myFømePoöã∏+4, 
mask
 += 4)

1277 *((
uI¡32
*)
myFømePoöãr
Ë(
myPF
 & *
mask
Ë? 
myCOLUPF
 : 
myCOLUBK
;

1283 
myPFBô
 | 
Sc‹eBô
:

1284 
myPFBô
 | 
Sc‹eBô
 | 
Pri‹ôyBô
:

1286 
uI¡32
* 
mask
 = &
myCuºítPFMask
[
hpos
];

1289 ; ((
uöçå_t
)
myFømePoöãr
 & 0x03Ë&& (myFømePoöã∏< 
ídög
);

1290 ++
myFømePoöãr
, ++
mask
, ++
hpos
)

1292 *
myFømePoöãr
 = (
myPF
 & *
mask
) ?

1293 (
hpos
 < 80 ? 
myCOLUP0
 : 
myCOLUP1
Ë: 
myCOLUBK
;

1297 ; 
myFømePoöãr
 < 
ídög
;

1298 
myFømePoöãr
 +4, 
mask
 +4, 
hpos
 += 4)

1300 *((
uI¡32
*)
myFømePoöãr
Ë(
myPF
 & *
mask
) ?

1301 (
hpos
 < 80 ? 
myCOLUP0
 : 
myCOLUP1
Ë: 
myCOLUBK
;

1307 
myP0Bô
:

1308 
myP0Bô
 | 
Sc‹eBô
:

1309 
myP0Bô
 | 
Pri‹ôyBô
:

1310 
myP0Bô
 | 
Sc‹eBô
 | 
Pri‹ôyBô
:

1312 
uI¡8
* 
mP0
 = &
myCuºítP0Mask
[
hpos
];

1314 
myFømePoöãr
 < 
ídög
)

1316 if(!((
uöçå_t
)
myFømePoöãr
 & 0x03Ë&& !*(
uI¡32
*)
mP0
)

1318 *(
uI¡32
*)
myFømePoöãr
 = 
myCOLUBK
;

1319 
mP0
 +4; 
myFømePoöãr
 += 4;

1323 *
myFømePoöãr
 = (
myCuºítGRP0
 & *
mP0
Ë? 
myCOLUP0
 : 
myCOLUBK
;

1324 ++
mP0
; ++
myFømePoöãr
;

1331 
myP1Bô
:

1332 
myP1Bô
 | 
Sc‹eBô
:

1333 
myP1Bô
 | 
Pri‹ôyBô
:

1334 
myP1Bô
 | 
Sc‹eBô
 | 
Pri‹ôyBô
:

1336 
uI¡8
* 
mP1
 = &
myCuºítP1Mask
[
hpos
];

1338 
myFømePoöãr
 < 
ídög
)

1340 if(!((
uöçå_t
)
myFømePoöãr
 & 0x03Ë&& !*(
uI¡32
*)
mP1
)

1342 *(
uI¡32
*)
myFømePoöãr
 = 
myCOLUBK
;

1343 
mP1
 +4; 
myFømePoöãr
 += 4;

1347 *
myFømePoöãr
 = (
myCuºítGRP1
 & *
mP1
Ë? 
myCOLUP1
 : 
myCOLUBK
;

1348 ++
mP1
; ++
myFømePoöãr
;

1355 
myP0Bô
 | 
myP1Bô
:

1356 
myP0Bô
 | 
myP1Bô
 | 
Sc‹eBô
:

1357 
myP0Bô
 | 
myP1Bô
 | 
Pri‹ôyBô
:

1358 
myP0Bô
 | 
myP1Bô
 | 
Sc‹eBô
 | 
Pri‹ôyBô
:

1360 
uI¡8
* 
mP0
 = &
myCuºítP0Mask
[
hpos
];

1361 
uI¡8
* 
mP1
 = &
myCuºítP1Mask
[
hpos
];

1363 
myFømePoöãr
 < 
ídög
)

1365 if(!((
uöçå_t
)
myFømePoöãr
 & 0x03Ë&& !*(
uI¡32
*)
mP0
 &&

1366 !*(
uI¡32
*)
mP1
)

1368 *(
uI¡32
*)
myFømePoöãr
 = 
myCOLUBK
;

1369 
mP0
 +4; 
mP1
 +4; 
myFømePoöãr
 += 4;

1373 *
myFømePoöãr
 = (
myCuºítGRP0
 & *
mP0
) ?

1374 
myCOLUP0
 : ((
myCuºítGRP1
 & *
mP1
Ë? 
myCOLUP1
 : 
myCOLUBK
);

1376 if((
myCuºítGRP0
 & *
mP0
Ë&& (
myCuºítGRP1
 & *
mP1
))

1377 
myCﬁlisi⁄
 |
ourCﬁlisi⁄TabÀ
[
myP0Bô
 | 
myP1Bô
];

1379 ++
mP0
; ++
mP1
; ++
myFømePoöãr
;

1386 
myM0Bô
:

1387 
myM0Bô
 | 
Sc‹eBô
:

1388 
myM0Bô
 | 
Pri‹ôyBô
:

1389 
myM0Bô
 | 
Sc‹eBô
 | 
Pri‹ôyBô
:

1391 
uI¡8
* 
mM0
 = &
myCuºítM0Mask
[
hpos
];

1393 
myFømePoöãr
 < 
ídög
)

1395 if(!((
uöçå_t
)
myFømePoöãr
 & 0x03Ë&& !*(
uI¡32
*)
mM0
)

1397 *(
uI¡32
*)
myFømePoöãr
 = 
myCOLUBK
;

1398 
mM0
 +4; 
myFømePoöãr
 += 4;

1402 *
myFømePoöãr
 = *
mM0
 ? 
myCOLUP0
 : 
myCOLUBK
;

1403 ++
mM0
; ++
myFømePoöãr
;

1410 
myM1Bô
:

1411 
myM1Bô
 | 
Sc‹eBô
:

1412 
myM1Bô
 | 
Pri‹ôyBô
:

1413 
myM1Bô
 | 
Sc‹eBô
 | 
Pri‹ôyBô
:

1415 
uI¡8
* 
mM1
 = &
myCuºítM1Mask
[
hpos
];

1417 
myFømePoöãr
 < 
ídög
)

1419 if(!((
uöçå_t
)
myFømePoöãr
 & 0x03Ë&& !*(
uI¡32
*)
mM1
)

1421 *(
uI¡32
*)
myFømePoöãr
 = 
myCOLUBK
;

1422 
mM1
 +4; 
myFømePoöãr
 += 4;

1426 *
myFømePoöãr
 = *
mM1
 ? 
myCOLUP1
 : 
myCOLUBK
;

1427 ++
mM1
; ++
myFømePoöãr
;

1434 
myBLBô
:

1435 
myBLBô
 | 
Sc‹eBô
:

1436 
myBLBô
 | 
Pri‹ôyBô
:

1437 
myBLBô
 | 
Sc‹eBô
 | 
Pri‹ôyBô
:

1439 
uI¡8
* 
mBL
 = &
myCuºítBLMask
[
hpos
];

1441 
myFømePoöãr
 < 
ídög
)

1443 if(!((
uöçå_t
)
myFømePoöãr
 & 0x03Ë&& !*(
uI¡32
*)
mBL
)

1445 *(
uI¡32
*)
myFømePoöãr
 = 
myCOLUBK
;

1446 
mBL
 +4; 
myFømePoöãr
 += 4;

1450 *
myFømePoöãr
 = *
mBL
 ? 
myCOLUPF
 : 
myCOLUBK
;

1451 ++
mBL
; ++
myFømePoöãr
;

1458 
myM0Bô
 | 
myM1Bô
:

1459 
myM0Bô
 | 
myM1Bô
 | 
Sc‹eBô
:

1460 
myM0Bô
 | 
myM1Bô
 | 
Pri‹ôyBô
:

1461 
myM0Bô
 | 
myM1Bô
 | 
Sc‹eBô
 | 
Pri‹ôyBô
:

1463 
uI¡8
* 
mM0
 = &
myCuºítM0Mask
[
hpos
];

1464 
uI¡8
* 
mM1
 = &
myCuºítM1Mask
[
hpos
];

1466 
myFømePoöãr
 < 
ídög
)

1468 if(!((
uöçå_t
)
myFømePoöãr
 & 0x03Ë&& !*(
uI¡32
*)
mM0
 && !*(uI¡32*)
mM1
)

1470 *(
uI¡32
*)
myFømePoöãr
 = 
myCOLUBK
;

1471 
mM0
 +4; 
mM1
 +4; 
myFømePoöãr
 += 4;

1475 *
myFømePoöãr
 = *
mM0
 ? 
myCOLUP0
 : (*
mM1
 ? 
myCOLUP1
 : 
myCOLUBK
);

1477 if(*
mM0
 && *
mM1
)

1478 
myCﬁlisi⁄
 |
ourCﬁlisi⁄TabÀ
[
myM0Bô
 | 
myM1Bô
];

1480 ++
mM0
; ++
mM1
; ++
myFømePoöãr
;

1487 
myBLBô
 | 
myM0Bô
:

1488 
myBLBô
 | 
myM0Bô
 | 
Sc‹eBô
:

1490 
uI¡8
* 
mBL
 = &
myCuºítBLMask
[
hpos
];

1491 
uI¡8
* 
mM0
 = &
myCuºítM0Mask
[
hpos
];

1493 
myFømePoöãr
 < 
ídög
)

1495 if(!((
uöçå_t
)
myFømePoöãr
 & 0x03Ë&& !*(
uI¡32
*)
mBL
 && !*(uI¡32*)
mM0
)

1497 *(
uI¡32
*)
myFømePoöãr
 = 
myCOLUBK
;

1498 
mBL
 +4; 
mM0
 +4; 
myFømePoöãr
 += 4;

1502 *
myFømePoöãr
 = (*
mM0
 ? 
myCOLUP0
 : (*
mBL
 ? 
myCOLUPF
 : 
myCOLUBK
));

1504 if(*
mBL
 && *
mM0
)

1505 
myCﬁlisi⁄
 |
ourCﬁlisi⁄TabÀ
[
myBLBô
 | 
myM0Bô
];

1507 ++
mBL
; ++
mM0
; ++
myFømePoöãr
;

1514 
myBLBô
 | 
myM0Bô
 | 
Pri‹ôyBô
:

1515 
myBLBô
 | 
myM0Bô
 | 
Sc‹eBô
 | 
Pri‹ôyBô
:

1517 
uI¡8
* 
mBL
 = &
myCuºítBLMask
[
hpos
];

1518 
uI¡8
* 
mM0
 = &
myCuºítM0Mask
[
hpos
];

1520 
myFømePoöãr
 < 
ídög
)

1522 if(!((
uöçå_t
)
myFømePoöãr
 & 0x03Ë&& !*(
uI¡32
*)
mBL
 && !*(uI¡32*)
mM0
)

1524 *(
uI¡32
*)
myFømePoöãr
 = 
myCOLUBK
;

1525 
mBL
 +4; 
mM0
 +4; 
myFømePoöãr
 += 4;

1529 *
myFømePoöãr
 = (*
mBL
 ? 
myCOLUPF
 : (*
mM0
 ? 
myCOLUP0
 : 
myCOLUBK
));

1531 if(*
mBL
 && *
mM0
)

1532 
myCﬁlisi⁄
 |
ourCﬁlisi⁄TabÀ
[
myBLBô
 | 
myM0Bô
];

1534 ++
mBL
; ++
mM0
; ++
myFømePoöãr
;

1541 
myBLBô
 | 
myM1Bô
:

1542 
myBLBô
 | 
myM1Bô
 | 
Sc‹eBô
:

1544 
uI¡8
* 
mBL
 = &
myCuºítBLMask
[
hpos
];

1545 
uI¡8
* 
mM1
 = &
myCuºítM1Mask
[
hpos
];

1547 
myFømePoöãr
 < 
ídög
)

1549 if(!((
uöçå_t
)
myFømePoöãr
 & 0x03Ë&& !*(
uI¡32
*)
mBL
 &&

1550 !*(
uI¡32
*)
mM1
)

1552 *(
uI¡32
*)
myFømePoöãr
 = 
myCOLUBK
;

1553 
mBL
 +4; 
mM1
 +4; 
myFømePoöãr
 += 4;

1557 *
myFømePoöãr
 = (*
mM1
 ? 
myCOLUP1
 : (*
mBL
 ? 
myCOLUPF
 : 
myCOLUBK
));

1559 if(*
mBL
 && *
mM1
)

1560 
myCﬁlisi⁄
 |
ourCﬁlisi⁄TabÀ
[
myBLBô
 | 
myM1Bô
];

1562 ++
mBL
; ++
mM1
; ++
myFømePoöãr
;

1569 
myBLBô
 | 
myM1Bô
 | 
Pri‹ôyBô
:

1570 
myBLBô
 | 
myM1Bô
 | 
Sc‹eBô
 | 
Pri‹ôyBô
:

1572 
uI¡8
* 
mBL
 = &
myCuºítBLMask
[
hpos
];

1573 
uI¡8
* 
mM1
 = &
myCuºítM1Mask
[
hpos
];

1575 
myFømePoöãr
 < 
ídög
)

1577 if(!((
uöçå_t
)
myFømePoöãr
 & 0x03Ë&& !*(
uI¡32
*)
mBL
 &&

1578 !*(
uI¡32
*)
mM1
)

1580 *(
uI¡32
*)
myFømePoöãr
 = 
myCOLUBK
;

1581 
mBL
 +4; 
mM1
 +4; 
myFømePoöãr
 += 4;

1585 *
myFømePoöãr
 = (*
mBL
 ? 
myCOLUPF
 : (*
mM1
 ? 
myCOLUP1
 : 
myCOLUBK
));

1587 if(*
mBL
 && *
mM1
)

1588 
myCﬁlisi⁄
 |
ourCﬁlisi⁄TabÀ
[
myBLBô
 | 
myM1Bô
];

1590 ++
mBL
; ++
mM1
; ++
myFømePoöãr
;

1597 
myBLBô
 | 
myP1Bô
:

1598 
myBLBô
 | 
myP1Bô
 | 
Sc‹eBô
:

1600 
uI¡8
* 
mBL
 = &
myCuºítBLMask
[
hpos
];

1601 
uI¡8
* 
mP1
 = &
myCuºítP1Mask
[
hpos
];

1603 
myFømePoöãr
 < 
ídög
)

1605 if(!((
uöçå_t
)
myFømePoöãr
 & 0x03Ë&& !*(
uI¡32
*)
mP1
 && !*(uI¡32*)
mBL
)

1607 *(
uI¡32
*)
myFømePoöãr
 = 
myCOLUBK
;

1608 
mBL
 +4; 
mP1
 +4; 
myFømePoöãr
 += 4;

1612 *
myFømePoöãr
 = (
myCuºítGRP1
 & *
mP1
Ë? 
myCOLUP1
 :

1613 (*
mBL
 ? 
myCOLUPF
 : 
myCOLUBK
);

1615 if(*
mBL
 && (
myCuºítGRP1
 & *
mP1
))

1616 
myCﬁlisi⁄
 |
ourCﬁlisi⁄TabÀ
[
myBLBô
 | 
myP1Bô
];

1618 ++
mBL
; ++
mP1
; ++
myFømePoöãr
;

1625 
myBLBô
 | 
myP1Bô
 | 
Pri‹ôyBô
:

1626 
myBLBô
 | 
myP1Bô
 | 
Pri‹ôyBô
 | 
Sc‹eBô
:

1628 
uI¡8
* 
mBL
 = &
myCuºítBLMask
[
hpos
];

1629 
uI¡8
* 
mP1
 = &
myCuºítP1Mask
[
hpos
];

1631 
myFømePoöãr
 < 
ídög
)

1633 if(!((
uöçå_t
)
myFømePoöãr
 & 0x03Ë&& !*(
uI¡32
*)
mP1
 && !*(uI¡32*)
mBL
)

1635 *(
uI¡32
*)
myFømePoöãr
 = 
myCOLUBK
;

1636 
mBL
 +4; 
mP1
 +4; 
myFømePoöãr
 += 4;

1640 *
myFømePoöãr
 = *
mBL
 ? 
myCOLUPF
 :

1641 ((
myCuºítGRP1
 & *
mP1
Ë? 
myCOLUP1
 : 
myCOLUBK
);

1643 if(*
mBL
 && (
myCuºítGRP1
 & *
mP1
))

1644 
myCﬁlisi⁄
 |
ourCﬁlisi⁄TabÀ
[
myBLBô
 | 
myP1Bô
];

1646 ++
mBL
; ++
mP1
; ++
myFømePoöãr
;

1653 
myPFBô
 | 
myP0Bô
:

1655 
uI¡32
* 
mPF
 = &
myCuºítPFMask
[
hpos
];

1656 
uI¡8
* 
mP0
 = &
myCuºítP0Mask
[
hpos
];

1658 
myFømePoöãr
 < 
ídög
)

1660 if(!((
uöçå_t
)
myFømePoöãr
 & 0x03Ë&& !*(
uI¡32
*)
mP0
)

1662 *(
uI¡32
*)
myFømePoöãr
 = (
myPF
 & *
mPF
Ë? 
myCOLUPF
 : 
myCOLUBK
;

1663 
mPF
 +4; 
mP0
 +4; 
myFømePoöãr
 += 4;

1667 *
myFømePoöãr
 = (
myCuºítGRP0
 & *
mP0
) ?

1668 
myCOLUP0
 : ((
myPF
 & *
mPF
Ë? 
myCOLUPF
 : 
myCOLUBK
);

1670 if((
myPF
 & *
mPF
Ë&& (
myCuºítGRP0
 & *
mP0
))

1671 
myCﬁlisi⁄
 |
ourCﬁlisi⁄TabÀ
[
myPFBô
 | 
myP0Bô
];

1673 ++
mPF
; ++
mP0
; ++
myFømePoöãr
;

1681 
myPFBô
 | 
myP0Bô
 | 
Pri‹ôyBô
:

1683 
uI¡32
* 
mPF
 = &
myCuºítPFMask
[
hpos
];

1684 
uI¡8
* 
mP0
 = &
myCuºítP0Mask
[
hpos
];

1686 
myFømePoöãr
 < 
ídög
)

1688 if(!((
uöçå_t
)
myFømePoöãr
 & 0x03Ë&& !*(
uI¡32
*)
mP0
)

1690 *(
uI¡32
*)
myFømePoöãr
 = (
myPF
 & *
mPF
Ë? 
myCOLUPF
 : 
myCOLUBK
;

1691 
mPF
 +4; 
mP0
 +4; 
myFømePoöãr
 += 4;

1695 *
myFømePoöãr
 = (
myPF
 & *
mPF
Ë? 
myCOLUPF
 :

1696 ((
myCuºítGRP0
 & *
mP0
Ë? 
myCOLUP0
 : 
myCOLUBK
);

1698 if((
myPF
 & *
mPF
Ë&& (
myCuºítGRP0
 & *
mP0
))

1699 
myCﬁlisi⁄
 |
ourCﬁlisi⁄TabÀ
[
myPFBô
 | 
myP0Bô
];

1701 ++
mPF
; ++
mP0
; ++
myFømePoöãr
;

1709 
myPFBô
 | 
myP1Bô
:

1711 
uI¡32
* 
mPF
 = &
myCuºítPFMask
[
hpos
];

1712 
uI¡8
* 
mP1
 = &
myCuºítP1Mask
[
hpos
];

1714 
myFømePoöãr
 < 
ídög
)

1716 if(!((
uöçå_t
)
myFømePoöãr
 & 0x03Ë&& !*(
uI¡32
*)
mP1
)

1718 *(
uI¡32
*)
myFømePoöãr
 = (
myPF
 & *
mPF
Ë? 
myCOLUPF
 : 
myCOLUBK
;

1719 
mPF
 +4; 
mP1
 +4; 
myFømePoöãr
 += 4;

1723 *
myFømePoöãr
 = (
myCuºítGRP1
 & *
mP1
) ?

1724 
myCOLUP1
 : ((
myPF
 & *
mPF
Ë? 
myCOLUPF
 : 
myCOLUBK
);

1726 if((
myPF
 & *
mPF
Ë&& (
myCuºítGRP1
 & *
mP1
))

1727 
myCﬁlisi⁄
 |
ourCﬁlisi⁄TabÀ
[
myPFBô
 | 
myP1Bô
];

1729 ++
mPF
; ++
mP1
; ++
myFømePoöãr
;

1737 
myPFBô
 | 
myP1Bô
 | 
Pri‹ôyBô
:

1739 
uI¡32
* 
mPF
 = &
myCuºítPFMask
[
hpos
];

1740 
uI¡8
* 
mP1
 = &
myCuºítP1Mask
[
hpos
];

1742 
myFømePoöãr
 < 
ídög
)

1744 if(!((
uöçå_t
)
myFømePoöãr
 & 0x03Ë&& !*(
uI¡32
*)
mP1
)

1746 *(
uI¡32
*)
myFømePoöãr
 = (
myPF
 & *
mPF
Ë? 
myCOLUPF
 : 
myCOLUBK
;

1747 
mPF
 +4; 
mP1
 +4; 
myFømePoöãr
 += 4;

1751 *
myFømePoöãr
 = (
myPF
 & *
mPF
Ë? 
myCOLUPF
 :

1752 ((
myCuºítGRP1
 & *
mP1
Ë? 
myCOLUP1
 : 
myCOLUBK
);

1754 if((
myPF
 & *
mPF
Ë&& (
myCuºítGRP1
 & *
mP1
))

1755 
myCﬁlisi⁄
 |
ourCﬁlisi⁄TabÀ
[
myPFBô
 | 
myP1Bô
];

1757 ++
mPF
; ++
mP1
; ++
myFømePoöãr
;

1765 
myPFBô
 | 
myBLBô
:

1766 
myPFBô
 | 
myBLBô
 | 
Pri‹ôyBô
:

1768 
uI¡32
* 
mPF
 = &
myCuºítPFMask
[
hpos
];

1769 
uI¡8
* 
mBL
 = &
myCuºítBLMask
[
hpos
];

1771 
myFømePoöãr
 < 
ídög
)

1773 if(!((
uöçå_t
)
myFømePoöãr
 & 0x03Ë&& !*(
uI¡32
*)
mBL
)

1775 *(
uI¡32
*)
myFømePoöãr
 = (
myPF
 & *
mPF
Ë? 
myCOLUPF
 : 
myCOLUBK
;

1776 
mPF
 +4; 
mBL
 +4; 
myFømePoöãr
 += 4;

1780 *
myFømePoöãr
 = ((
myPF
 & *
mPF
Ë|| *
mBL
Ë? 
myCOLUPF
 : 
myCOLUBK
;

1782 if((
myPF
 & *
mPF
Ë&& *
mBL
)

1783 
myCﬁlisi⁄
 |
ourCﬁlisi⁄TabÀ
[
myPFBô
 | 
myBLBô
];

1785 ++
mPF
; ++
mBL
; ++
myFømePoöãr
;

1794 ; 
myFømePoöãr
 < 
ídög
; ++myFømePoöãr, ++
hpos
)

1796 
uI¡8
 
íabÀd
 = (
myPF
 & 
myCuºítPFMask
[
hpos
]Ë? 
myPFBô
 : 0;

1798 if((
myE«bÀdObje˘s
 & 
myBLBô
Ë&& 
myCuºítBLMask
[
hpos
])

1799 
íabÀd
 |
myBLBô
;

1801 if(
myCuºítGRP1
 & 
myCuºítP1Mask
[
hpos
])

1802 
íabÀd
 |
myP1Bô
;

1804 if((
myE«bÀdObje˘s
 & 
myM1Bô
Ë&& 
myCuºítM1Mask
[
hpos
])

1805 
íabÀd
 |
myM1Bô
;

1807 if(
myCuºítGRP0
 & 
myCuºítP0Mask
[
hpos
])

1808 
íabÀd
 |
myP0Bô
;

1810 if((
myE«bÀdObje˘s
 & 
myM0Bô
Ë&& 
myCuºítM0Mask
[
hpos
])

1811 
íabÀd
 |
myM0Bô
;

1813 
myCﬁlisi⁄
 |
ourCﬁlisi⁄TabÀ
[
íabÀd
];

1814 *
myFømePoöãr
 = 
myCﬁ‹
[
myPri‹ôyEncodî
[
hpos
 < 80 ? 0 : 1]

1815 [
íabÀd
 | 
myPœyfõldPri‹ôyAndSc‹e
]];

1821 
myFømePoöãr
 = 
ídög
;

1822 
	}
}

1825 
ölöe
 
	gTIA
::
	$upd©eFøme
(
I¡32
 
˛ock
)

1829 if((
˛ock
 < 
myClockSèπDi•œy
) ||

1830 (
myClockAtLa°Upd©e
 >
myClockSt›Di•œy
) ||

1831 (
myClockAtLa°Upd©e
 >
˛ock
))

1837 if(
˛ock
 > 
myClockSt›Di•œy
)

1839 
˛ock
 = 
myClockSt›Di•œy
;

1846 
I¡32
 
˛ocksToUpd©e
 = 0;

1849 
I¡32
 
˛ocksFromSèπOfSˇnLöe
 = 228 - 
myClocksToEndOfSˇnLöe
;

1852 if(
˛ock
 > (
myClockAtLa°Upd©e
 + 
myClocksToEndOfSˇnLöe
))

1855 
˛ocksToUpd©e
 = 
myClocksToEndOfSˇnLöe
;

1856 
myClocksToEndOfSˇnLöe
 = 228;

1857 
myClockAtLa°Upd©e
 +
˛ocksToUpd©e
;

1862 
˛ocksToUpd©e
 = 
˛ock
 - 
myClockAtLa°Upd©e
;

1863 
myClocksToEndOfSˇnLöe
 -
˛ocksToUpd©e
;

1864 
myClockAtLa°Upd©e
 = 
˛ock
;

1867 
I¡32
 
°¨tOfSˇnLöe
 = 
HBLANK
 + 
myFømeXSèπ
;

1870 if(
˛ocksFromSèπOfSˇnLöe
 < 
°¨tOfSˇnLöe
)

1872 
uI¡32
 
tmp
;

1874 if((
°¨tOfSˇnLöe
 - 
˛ocksFromSèπOfSˇnLöe
Ë< 
˛ocksToUpd©e
)

1875 
tmp
 = 
°¨tOfSˇnLöe
 - 
˛ocksFromSèπOfSˇnLöe
;

1877 
tmp
 = 
˛ocksToUpd©e
;

1879 
˛ocksFromSèπOfSˇnLöe
 +
tmp
;

1880 
˛ocksToUpd©e
 -
tmp
;

1884 
uI¡8
* 
ﬁdFømePoöãr
 = 
myFømePoöãr
;

1887 if(
˛ocksToUpd©e
 != 0)

1889 
	`upd©eFømeSˇ∆öe
(
˛ocksToUpd©e
, 
˛ocksFromSèπOfSˇnLöe
 - 
HBLANK
);

1893 if(
myHMOVEBœnkE«bÀd
 && (
°¨tOfSˇnLöe
 < 
HBLANK
 + 8) &&

1894 (
˛ocksFromSèπOfSˇnLöe
 < (
HBLANK
 + 8)))

1896 
I¡32
 
bœnks
 = (
HBLANK
 + 8Ë- 
˛ocksFromSèπOfSˇnLöe
;

1897 
uI¡8
* 
±r
 = 
ﬁdFømePoöãr
;

1898 
bœnks
-- != 0) {

1899 *
±r
++ = 0;

1903 if((
˛ocksToUpd©e
 + 
˛ocksFromSèπOfSˇnLöe
Ë>(
HBLANK
 + 8))

1905 
myHMOVEBœnkE«bÀd
 = 
Ál£
;

1910 if(
myClocksToEndOfSˇnLöe
 == 228)

1912 
myFømePoöãr
 -(160 - 
myFømeWidth
 - 
myFømeXSèπ
);

1915 
myCuºítPFMask
 = 
ourPœyfõldTabÀ
[
myCTRLPF
 & 0x01];

1920 
myCuºítP0Mask
 = &
ourPœyîMaskTabÀ
[
myPOSP0
 & 0x03]

1921 [0][
myNUSIZ0
 & 0x07][160 - (
myPOSP0
 & 0xFC)];

1922 
myCuºítP1Mask
 = &
ourPœyîMaskTabÀ
[
myPOSP1
 & 0x03]

1923 [0][
myNUSIZ1
 & 0x07][160 - (
myPOSP1
 & 0xFC)];

1926 if(
myM0CosmicArkMŸi⁄E«bÀd
)

1929 
uI¡32
 
m
[4] = {18, 33, 0, 17};

1931 
myM0CosmicArkCou¡î
 = (myM0CosmicArkCounter + 1) & 3;

1932 
myPOSM0
 -
m
[
myM0CosmicArkCou¡î
];

1934 if(
myPOSM0
 >= 160)

1935 
myPOSM0
 -= 160;

1936 if(
myPOSM0
 < 0)

1937 
myPOSM0
 += 160;

1939 if(
myM0CosmicArkCou¡î
 == 1)

1942 
myCuºítM0Mask
 = &
ourMis¶eMaskTabÀ
[
myPOSM0
 & 0x03]

1943 [
myNUSIZ0
 & 0x07][((myNUSIZ0 & 0x30) >> 4) | 0x01]

1944 [160 - (
myPOSM0
 & 0xFC)];

1946 if(
myM0CosmicArkCou¡î
 == 2)

1949 
myCuºítM0Mask
 = &
ourDißbÀdMaskTabÀ
[0];

1953 
myCuºítM0Mask
 = &
ourMis¶eMaskTabÀ
[
myPOSM0
 & 0x03]

1954 [
myNUSIZ0
 & 0x07][(myNUSIZ0 & 0x30Ë>> 4][160 - (
myPOSM0
 & 0xFC)];

1959 
myClockAtLa°Upd©e
 < 
˛ock
);

1960 
	}
}

1963 
ölöe
 
	gTIA
::
	$waôH‹iz⁄èlSync
()

1965 
uI¡32
 
cy˛esToEndOfLöe
 = 76 - ((
mySy°em
->
	`cy˛es
() -

1966 (
myClockWhíFømeSèπed
 / 3)) % 76);

1968 if(
cy˛esToEndOfLöe
 < 76)

1970 
mySy°em
->
	`ö¸emítCy˛es
(
cy˛esToEndOfLöe
);

1972 
	}
}

1975 
	gTIA
::
	$gªyOutFøme
()

1977 
c
 = 
	`sˇ∆öes
();

1978 if(
c
 < 
myYSèπ
) c = myYStart;

1980 
s
 = 
c
; s < (
myHeight
 + 
myYSèπ
); s++)

1981 
i
 = 0; i < 160; i++) {

1982 
uI¡8
 
tmp
 = 
myCuºítFømeBuf„r
[ (
s
 - 
myYSèπ
Ë* 160 + 
i
] & 0x0f;

1983 
tmp
 >>= 1;

1984 
myCuºítFømeBuf„r
[ (
s
 - 
myYSèπ
Ë* 160 + 
i
] = 
tmp
;

1987 
	}
}

1990 
	gTIA
::
	$˛órBuf„rs
()

1992 
uI¡32
 
i
 = 0; i < 160 * 300; ++i)

1994 
myCuºítFømeBuf„r
[
i
] = 
myPªviousFømeBuf„r
[i] = 0;

1996 
	}
}

1999 
uI¡8
 
	gTIA
::
	$≥ek
(
uI¡16
 
addr
)

2002 
	`upd©eFøme
(
mySy°em
->
	`cy˛es
() * 3);

2004 
uI¡8
 
noi£
 = 
mySy°em
->
	`gëD©aBusSèã
() & 0x3F;

2006 
addr
 & 0x000f)

2009  ((
myCﬁlisi⁄
 & 0x0001) ? 0x80 : 0x00) |

2010 ((
myCﬁlisi⁄
 & 0x0002Ë? 0x40 : 0x00Ë| 
noi£
;

2013  ((
myCﬁlisi⁄
 & 0x0004) ? 0x80 : 0x00) |

2014 ((
myCﬁlisi⁄
 & 0x0008Ë? 0x40 : 0x00Ë| 
noi£
;

2017  ((
myCﬁlisi⁄
 & 0x0010) ? 0x80 : 0x00) |

2018 ((
myCﬁlisi⁄
 & 0x0020Ë? 0x40 : 0x00Ë| 
noi£
;

2021  ((
myCﬁlisi⁄
 & 0x0040) ? 0x80 : 0x00) |

2022 ((
myCﬁlisi⁄
 & 0x0080Ë? 0x40 : 0x00Ë| 
noi£
;

2025  ((
myCﬁlisi⁄
 & 0x0100) ? 0x80 : 0x00) |

2026 ((
myCﬁlisi⁄
 & 0x0200Ë? 0x40 : 0x00Ë| 
noi£
;

2029  ((
myCﬁlisi⁄
 & 0x0400) ? 0x80 : 0x00) |

2030 ((
myCﬁlisi⁄
 & 0x0800Ë? 0x40 : 0x00Ë| 
noi£
;

2033  ((
myCﬁlisi⁄
 & 0x1000Ë? 0x80 : 0x00Ë| 
noi£
;

2036  ((
myCﬁlisi⁄
 & 0x2000) ? 0x80 : 0x00) |

2037 ((
myCﬁlisi⁄
 & 0x4000Ë? 0x40 : 0x00Ë| 
noi£
;

2041 
I¡32
 
r
 = 
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Le·
).
	`ªad
(C⁄åﬁÀr::
Nöe
);

2042 if(
r
 =
C⁄åﬁÀr
::
möimumResi°™˚
)

2044  0x80 | 
noi£
;

2046 if((
r
 =
C⁄åﬁÀr
::
maximumResi°™˚
Ë|| 
myDumpE«bÀd
)

2048  
noi£
;

2052 
t
 = (1.6 * 
r
 * 0.01E-6);

2053 
uI¡32
 
√eded
 = (uI¡32)(
t
 * 1.19E6);

2054 if(
mySy°em
->
	`cy˛es
(Ë> (
myDumpDißbÀdCy˛e
 + 
√eded
))

2056  0x80 | 
noi£
;

2060  
noi£
;

2067 
I¡32
 
r
 = 
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Le·
).
	`ªad
(C⁄åﬁÀr::
Five
);

2068 if(
r
 =
C⁄åﬁÀr
::
möimumResi°™˚
)

2070  0x80 | 
noi£
;

2072 if((
r
 =
C⁄åﬁÀr
::
maximumResi°™˚
Ë|| 
myDumpE«bÀd
)

2074  
noi£
;

2078 
t
 = (1.6 * 
r
 * 0.01E-6);

2079 
uI¡32
 
√eded
 = (uI¡32)(
t
 * 1.19E6);

2080 if(
mySy°em
->
	`cy˛es
(Ë> (
myDumpDißbÀdCy˛e
 + 
√eded
))

2082  0x80 | 
noi£
;

2086  
noi£
;

2093 
I¡32
 
r
 = 
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Right
).
	`ªad
(C⁄åﬁÀr::
Nöe
);

2094 if(
r
 =
C⁄åﬁÀr
::
möimumResi°™˚
)

2096  0x80 | 
noi£
;

2098 if((
r
 =
C⁄åﬁÀr
::
maximumResi°™˚
Ë|| 
myDumpE«bÀd
)

2100  
noi£
;

2104 
t
 = (1.6 * 
r
 * 0.01E-6);

2105 
uI¡32
 
√eded
 = (uI¡32)(
t
 * 1.19E6);

2106 if(
mySy°em
->
	`cy˛es
(Ë> (
myDumpDißbÀdCy˛e
 + 
√eded
))

2108  0x80 | 
noi£
;

2112  
noi£
;

2119 
I¡32
 
r
 = 
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Right
).
	`ªad
(C⁄åﬁÀr::
Five
);

2120 if(
r
 =
C⁄åﬁÀr
::
möimumResi°™˚
)

2122  0x80 | 
noi£
;

2124 if((
r
 =
C⁄åﬁÀr
::
maximumResi°™˚
Ë|| 
myDumpE«bÀd
)

2126  
noi£
;

2130 
t
 = (1.6 * 
r
 * 0.01E-6);

2131 
uI¡32
 
√eded
 = (uI¡32)(
t
 * 1.19E6);

2132 if(
mySy°em
->
	`cy˛es
(Ë> (
myDumpDißbÀdCy˛e
 + 
√eded
))

2134  0x80 | 
noi£
;

2138  
noi£
;

2144  
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Le·
).
	`ªad
(C⁄åﬁÀr::
Six
) ?

2145 (0x80 | 
noi£
) :Çoise;

2148  
myC⁄sﬁe
.
	`c⁄åﬁÀr
(
C⁄åﬁÀr
::
Right
).
	`ªad
(C⁄åﬁÀr::
Six
) ?

2149 (0x80 | 
noi£
) :Çoise;

2152  
noi£
;

2155  
noi£
;

2157 
	}
}

2160 
	gTIA
::
	$poke
(
uI¡16
 
addr
, 
uI¡8
 
vÆue
)

2162 
addr
 =áddr & 0x003f;

2164 
I¡32
 
˛ock
 = 
mySy°em
->
	`cy˛es
() * 3;

2165 
I¡16
 
dñay
 = 
ourPokeDñayTabÀ
[
addr
];

2168 if(
dñay
 == -1)

2170 
uI¡32
 
d
[4] = {4, 5, 2, 3};

2171 
I¡32
 
x
 = ((
˛ock
 - 
myClockWhíFømeSèπed
) % 228);

2172 
dñay
 = 
d
[(
x
 / 3) & 3];

2176 
	`upd©eFøme
(
˛ock
 + 
dñay
);

2179 if(((
˛ock
 - 
myClockWhíFømeSèπed
Ë/ 228Ë> 
myMaximumNumbîOfSˇ∆öes
)

2181 
mySy°em
->
	`m6502
().
	`°›
();

2182 
myP¨tülFømeFœg
 = 
Ál£
;

2185 
addr
)

2189 
myVSYNC
 = 
vÆue
;

2191 if(
myVSYNC
 & 0x02)

2196 
myVSYNCFöishClock
 = 
˛ock
 + 228;

2198 if(!(
myVSYNC
 & 0x02Ë&& (
˛ock
 >
myVSYNCFöishClock
))

2201 
myVSYNCFöishClock
 = 0x7FFFFFFF;

2204 
mySy°em
->
	`m6502
().
	`°›
();

2205 
myP¨tülFømeFœg
 = 
Ál£
;

2213 if(!(
myVBLANK
 & 0x80Ë&& (
vÆue
 & 0x80))

2215 
myDumpE«bÀd
 = 
åue
;

2219 if((
myVBLANK
 & 0x80Ë&& !(
vÆue
 & 0x80))

2221 
myDumpE«bÀd
 = 
Ál£
;

2222 
myDumpDißbÀdCy˛e
 = 
mySy°em
->
	`cy˛es
();

2225 
myVBLANK
 = 
vÆue
;

2232 
	`waôH‹iz⁄èlSync
();

2244 
myNUSIZ0
 = 
vÆue
;

2249 
myCuºítP0Mask
 = &
ourPœyîMaskTabÀ
[
myPOSP0
 & 0x03]

2250 [0][
myNUSIZ0
 & 0x07][160 - (
myPOSP0
 & 0xFC)];

2252 
myCuºítM0Mask
 = &
ourMis¶eMaskTabÀ
[
myPOSM0
 & 0x03]

2253 [
myNUSIZ0
 & 0x07][(myNUSIZ0 & 0x30Ë>> 4][160 - (
myPOSM0
 & 0xFC)];

2260 
myNUSIZ1
 = 
vÆue
;

2265 
myCuºítP1Mask
 = &
ourPœyîMaskTabÀ
[
myPOSP1
 & 0x03]

2266 [0][
myNUSIZ1
 & 0x07][160 - (
myPOSP1
 & 0xFC)];

2268 
myCuºítM1Mask
 = &
ourMis¶eMaskTabÀ
[
myPOSM1
 & 0x03]

2269 [
myNUSIZ1
 & 0x07][(myNUSIZ1 & 0x30Ë>> 4][160 - (
myPOSM1
 & 0xFC)];

2276 
uI¡32
 
cﬁ‹
 = (uI¡32)(
vÆue
 & 0xfe);

2277 if(
myCﬁ‹LossE«bÀd
 && (
mySˇ∆öeCou¡F‹La°Føme
 & 0x01))

2279 
cﬁ‹
 |= 0x01;

2281 
myCOLUP0
 = (((((
cﬁ‹
 << 8) | color) << 8) | color) << 8) | color;

2287 
uI¡32
 
cﬁ‹
 = (uI¡32)(
vÆue
 & 0xfe);

2288 if(
myCﬁ‹LossE«bÀd
 && (
mySˇ∆öeCou¡F‹La°Føme
 & 0x01))

2290 
cﬁ‹
 |= 0x01;

2292 
myCOLUP1
 = (((((
cﬁ‹
 << 8) | color) << 8) | color) << 8) | color;

2298 
uI¡32
 
cﬁ‹
 = (uI¡32)(
vÆue
 & 0xfe);

2299 if(
myCﬁ‹LossE«bÀd
 && (
mySˇ∆öeCou¡F‹La°Føme
 & 0x01))

2301 
cﬁ‹
 |= 0x01;

2303 
myCOLUPF
 = (((((
cﬁ‹
 << 8) | color) << 8) | color) << 8) | color;

2309 
uI¡32
 
cﬁ‹
 = (uI¡32)(
vÆue
 & 0xfe);

2310 if(
myCﬁ‹LossE«bÀd
 && (
mySˇ∆öeCou¡F‹La°Føme
 & 0x01))

2312 
cﬁ‹
 |= 0x01;

2314 
myCOLUBK
 = (((((
cﬁ‹
 << 8) | color) << 8) | color) << 8) | color;

2320 
myCTRLPF
 = 
vÆue
;

2325 
myPœyfõldPri‹ôyAndSc‹e
 = ((
myCTRLPF
 & 0x06) << 5);

2329 if(((
˛ock
 - 
myClockWhíFømeSèπed
) % 228) < (68 + 79))

2331 
myCuºítPFMask
 = 
ourPœyfõldTabÀ
[
myCTRLPF
 & 0x01];

2334 
myCuºítBLMask
 = &
ourBÆlMaskTabÀ
[
myPOSBL
 & 0x03]

2335 [(
myCTRLPF
 & 0x30Ë>> 4][160 - (
myPOSBL
 & 0xFC)];

2343 if(((
vÆue
 & 0x08Ë&& !
myREFP0
) || (!(value & 0x08) && myREFP0))

2345 
myREFP0
 = (
vÆue
 & 0x08);

2346 
myCuºítGRP0
 = 
ourPœyîReÊe˘TabÀ
[myCurrentGRP0];

2354 if(((
vÆue
 & 0x08Ë&& !
myREFP1
) || (!(value & 0x08) && myREFP1))

2356 
myREFP1
 = (
vÆue
 & 0x08);

2357 
myCuºítGRP1
 = 
ourPœyîReÊe˘TabÀ
[myCurrentGRP1];

2364 
myPF
 = (myPF & 0x000FFFF0Ë| ((
vÆue
 >> 4) & 0x0F);

2366 if(!
myBôE«bÀd
[
TIA
::
PF
] || 
myPF
 == 0)

2367 
myE«bÀdObje˘s
 &~
myPFBô
;

2369 
myE«bÀdObje˘s
 |
myPFBô
;

2376 
myPF
 = (myPF & 0x000FF00FË| ((
uI¡32
)
vÆue
 << 4);

2378 if(!
myBôE«bÀd
[
TIA
::
PF
] || 
myPF
 == 0)

2379 
myE«bÀdObje˘s
 &~
myPFBô
;

2381 
myE«bÀdObje˘s
 |
myPFBô
;

2388 
myPF
 = (myPF & 0x00000FFFË| ((
uI¡32
)
vÆue
 << 12);

2390 if(!
myBôE«bÀd
[
TIA
::
PF
] || 
myPF
 == 0)

2391 
myE«bÀdObje˘s
 &~
myPFBô
;

2393 
myE«bÀdObje˘s
 |
myPFBô
;

2400 
I¡32
 
hpos
 = (
˛ock
 - 
myClockWhíFømeSèπed
) % 228;

2401 
I¡32
 
√wx
 = 
hpos
 < 
HBLANK
 ? 3 : (((hpos - HBLANK) + 5) % 160);

2404 
I¡8
 
whí
 = 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
myNUSIZ0
 & 7][
myPOSP0
][
√wx
];

2407 if(
whí
 == 1)

2413 
	`upd©eFøme
(
˛ock
 + 11);

2415 
myPOSP0
 = 
√wx
;

2418 
myCuºítP0Mask
 = &
ourPœyîMaskTabÀ
[
myPOSP0
 & 0x03]

2419 [1][
myNUSIZ0
 & 0x07][160 - (
myPOSP0
 & 0xFC)];

2422 if(
whí
 == 0)

2424 
myPOSP0
 = 
√wx
;

2427 
myCuºítP0Mask
 = &
ourPœyîMaskTabÀ
[
myPOSP0
 & 0x03]

2428 [1][
myNUSIZ0
 & 0x07][160 - (
myPOSP0
 & 0xFC)];

2431 if(
whí
 == -1)

2433 
myPOSP0
 = 
√wx
;

2436 
myCuºítP0Mask
 = &
ourPœyîMaskTabÀ
[
myPOSP0
 & 0x03]

2437 [0][
myNUSIZ0
 & 0x07][160 - (
myPOSP0
 & 0xFC)];

2444 
I¡32
 
hpos
 = (
˛ock
 - 
myClockWhíFømeSèπed
) % 228;

2445 
I¡32
 
√wx
 = 
hpos
 < 
HBLANK
 ? 3 : (((hpos - HBLANK) + 5) % 160);

2448 
I¡8
 
whí
 = 
ourPœyîPosôi⁄Re£tWhíTabÀ
[
myNUSIZ1
 & 7][
myPOSP1
][
√wx
];

2451 if(
whí
 == 1)

2457 
	`upd©eFøme
(
˛ock
 + 11);

2459 
myPOSP1
 = 
√wx
;

2462 
myCuºítP1Mask
 = &
ourPœyîMaskTabÀ
[
myPOSP1
 & 0x03]

2463 [1][
myNUSIZ1
 & 0x07][160 - (
myPOSP1
 & 0xFC)];

2466 if(
whí
 == 0)

2468 
myPOSP1
 = 
√wx
;

2471 
myCuºítP1Mask
 = &
ourPœyîMaskTabÀ
[
myPOSP1
 & 0x03]

2472 [1][
myNUSIZ1
 & 0x07][160 - (
myPOSP1
 & 0xFC)];

2475 if(
whí
 == -1)

2477 
myPOSP1
 = 
√wx
;

2480 
myCuºítP1Mask
 = &
ourPœyîMaskTabÀ
[
myPOSP1
 & 0x03]

2481 [0][
myNUSIZ1
 & 0x07][160 - (
myPOSP1
 & 0xFC)];

2488 
hpos
 = (
˛ock
 - 
myClockWhíFømeSèπed
) % 228;

2489 
myPOSM0
 = 
hpos
 < 
HBLANK
 ? 2 : (((hpos - HBLANK) + 4) % 160);

2494 if(((
˛ock
 - 
myLa°HMOVEClock
Ë=(20 * 3)Ë&& (
hpos
 == 69))

2496 
myPOSM0
 = 8;

2499 
myCuºítM0Mask
 = &
ourMis¶eMaskTabÀ
[
myPOSM0
 & 0x03]

2500 [
myNUSIZ0
 & 0x07][(myNUSIZ0 & 0x30Ë>> 4][160 - (
myPOSM0
 & 0xFC)];

2506 
hpos
 = (
˛ock
 - 
myClockWhíFømeSèπed
) % 228;

2507 
myPOSM1
 = 
hpos
 < 
HBLANK
 ? 2 : (((hpos - HBLANK) + 4) % 160);

2512 if(((
˛ock
 - 
myLa°HMOVEClock
Ë=(3 * 3)Ë&& (
hpos
 == 18))

2514 
myPOSM1
 = 3;

2517 
myCuºítM1Mask
 = &
ourMis¶eMaskTabÀ
[
myPOSM1
 & 0x03]

2518 [
myNUSIZ1
 & 0x07][(myNUSIZ1 & 0x30Ë>> 4][160 - (
myPOSM1
 & 0xFC)];

2524 
hpos
 = (
˛ock
 - 
myClockWhíFømeSèπed
) % 228 ;

2525 
myPOSBL
 = 
hpos
 < 
HBLANK
 ? 2 : (((hpos - HBLANK) + 4) % 160);

2530 if(((
˛ock
 - 
myLa°HMOVEClock
) == (18 * 3)) &&

2531 ((
hpos
 == 60) || (hpos == 69)))

2533 
myPOSBL
 = 10;

2538 if(((
˛ock
 - 
myLa°HMOVEClock
Ë=(3 * 3)Ë&& (
hpos
 == 18))

2540 
myPOSBL
 = 3;

2545 if(((
˛ock
 - 
myLa°HMOVEClock
Ë=(7 * 3)Ë&& (
hpos
 == 30))

2547 
myPOSBL
 = 6;

2552 if(((
˛ock
 - 
myLa°HMOVEClock
Ë=(6 * 3)Ë&& (
hpos
 == 27))

2554 
myPOSBL
 = 5;

2557 
myCuºítBLMask
 = &
ourBÆlMaskTabÀ
[
myPOSBL
 & 0x03]

2558 [(
myCTRLPF
 & 0x30Ë>> 4][160 - (
myPOSBL
 & 0xFC)];

2564 
myAUDC0
 = 
vÆue
 & 0x0f;

2565 
mySound
->
	`£t
(
addr
, 
vÆue
, 
mySy°em
->
	`cy˛es
());

2571 
myAUDC1
 = 
vÆue
 & 0x0f;

2572 
mySound
->
	`£t
(
addr
, 
vÆue
, 
mySy°em
->
	`cy˛es
());

2578 
myAUDF0
 = 
vÆue
 & 0x1f;

2579 
mySound
->
	`£t
(
addr
, 
vÆue
, 
mySy°em
->
	`cy˛es
());

2585 
myAUDF1
 = 
vÆue
 & 0x1f;

2586 
mySound
->
	`£t
(
addr
, 
vÆue
, 
mySy°em
->
	`cy˛es
());

2592 
myAUDV0
 = 
vÆue
 & 0x0f;

2593 
mySound
->
	`£t
(
addr
, 
vÆue
, 
mySy°em
->
	`cy˛es
());

2599 
myAUDV1
 = 
vÆue
 & 0x0f;

2600 
mySound
->
	`£t
(
addr
, 
vÆue
, 
mySy°em
->
	`cy˛es
());

2607 
myGRP0
 = (
myBôE«bÀd
[
TIA
::
P0
] ? 
vÆue
 : 0);

2610 
myDGRP1
 = 
myGRP1
;

2613 
uI¡8
 
gΩ0
 = 
myVDELP0
 ? 
myDGRP0
 : 
myGRP0
;

2614 
myCuºítGRP0
 = 
myREFP0
 ? 
ourPœyîReÊe˘TabÀ
[
gΩ0
] : grp0;

2617 
uI¡8
 
gΩ1
 = 
myVDELP1
 ? 
myDGRP1
 : 
myGRP1
;

2618 
myCuºítGRP1
 = 
myREFP1
 ? 
ourPœyîReÊe˘TabÀ
[
gΩ1
] : grp1;

2621 if(
myCuºítGRP0
 != 0)

2622 
myE«bÀdObje˘s
 |
myP0Bô
;

2624 
myE«bÀdObje˘s
 &~
myP0Bô
;

2626 if(
myCuºítGRP1
 != 0)

2627 
myE«bÀdObje˘s
 |
myP1Bô
;

2629 
myE«bÀdObje˘s
 &~
myP1Bô
;

2637 
myGRP1
 = (
myBôE«bÀd
[
TIA
::
P1
] ? 
vÆue
 : 0);

2640 
myDGRP0
 = 
myGRP0
;

2643 
myDENABL
 = 
myENABL
;

2646 
uI¡8
 
gΩ0
 = 
myVDELP0
 ? 
myDGRP0
 : 
myGRP0
;

2647 
myCuºítGRP0
 = 
myREFP0
 ? 
ourPœyîReÊe˘TabÀ
[
gΩ0
] : grp0;

2650 
uI¡8
 
gΩ1
 = 
myVDELP1
 ? 
myDGRP1
 : 
myGRP1
;

2651 
myCuºítGRP1
 = 
myREFP1
 ? 
ourPœyîReÊe˘TabÀ
[
gΩ1
] : grp1;

2654 if(
myCuºítGRP0
 != 0)

2655 
myE«bÀdObje˘s
 |
myP0Bô
;

2657 
myE«bÀdObje˘s
 &~
myP0Bô
;

2659 if(
myCuºítGRP1
 != 0)

2660 
myE«bÀdObje˘s
 |
myP1Bô
;

2662 
myE«bÀdObje˘s
 &~
myP1Bô
;

2664 if(
myVDELBL
 ? 
myDENABL
 : 
myENABL
)

2665 
myE«bÀdObje˘s
 |
myBLBô
;

2667 
myE«bÀdObje˘s
 &~
myBLBô
;

2674 
myENAM0
 = (
myBôE«bÀd
[
TIA
::
M0
] ? 
vÆue
 & 0x02 : 0);

2676 if(
myENAM0
 && !
myRESMP0
)

2677 
myE«bÀdObje˘s
 |
myM0Bô
;

2679 
myE«bÀdObje˘s
 &~
myM0Bô
;

2685 
myENAM1
 = (
myBôE«bÀd
[
TIA
::
M1
] ? 
vÆue
 & 0x02 : 0);

2687 if(
myENAM1
 && !
myRESMP1
)

2688 
myE«bÀdObje˘s
 |
myM1Bô
;

2690 
myE«bÀdObje˘s
 &~
myM1Bô
;

2696 
myENABL
 = (
myBôE«bÀd
[
TIA
::
BL
] ? 
vÆue
 & 0x02 : 0);

2698 if(
myVDELBL
 ? 
myDENABL
 : 
myENABL
)

2699 
myE«bÀdObje˘s
 |
myBLBô
;

2701 
myE«bÀdObje˘s
 &~
myBLBô
;

2708 
myHMP0
 = 
vÆue
 >> 4;

2714 
myHMP1
 = 
vÆue
 >> 4;

2720 
I¡8
 
tmp
 = 
vÆue
 >> 4;

2723 if((
˛ock
 =(
myLa°HMOVEClock
 + 21 * 3)Ë&& (
myHMM0
 =7Ë&& (
tmp
 == 6))

2725 
myM0CosmicArkMŸi⁄E«bÀd
 = 
åue
;

2726 
myM0CosmicArkCou¡î
 = 0;

2729 
myHMM0
 = 
tmp
;

2735 
myHMM1
 = 
vÆue
 >> 4;

2741 
myHMBL
 = 
vÆue
 >> 4;

2747 
myVDELP0
 = 
vÆue
 & 0x01;

2749 
uI¡8
 
gΩ0
 = 
myVDELP0
 ? 
myDGRP0
 : 
myGRP0
;

2750 
myCuºítGRP0
 = 
myREFP0
 ? 
ourPœyîReÊe˘TabÀ
[
gΩ0
] : grp0;

2752 if(
myCuºítGRP0
 != 0)

2753 
myE«bÀdObje˘s
 |
myP0Bô
;

2755 
myE«bÀdObje˘s
 &~
myP0Bô
;

2761 
myVDELP1
 = 
vÆue
 & 0x01;

2763 
uI¡8
 
gΩ1
 = 
myVDELP1
 ? 
myDGRP1
 : 
myGRP1
;

2764 
myCuºítGRP1
 = 
myREFP1
 ? 
ourPœyîReÊe˘TabÀ
[
gΩ1
] : grp1;

2766 if(
myCuºítGRP1
 != 0)

2767 
myE«bÀdObje˘s
 |
myP1Bô
;

2769 
myE«bÀdObje˘s
 &~
myP1Bô
;

2775 
myVDELBL
 = 
vÆue
 & 0x01;

2777 if(
myVDELBL
 ? 
myDENABL
 : 
myENABL
)

2778 
myE«bÀdObje˘s
 |
myBLBô
;

2780 
myE«bÀdObje˘s
 &~
myBLBô
;

2786 if(
myRESMP0
 && !(
vÆue
 & 0x02))

2788 
uI¡16
 
middÀ
;

2790 if((
myNUSIZ0
 & 0x07) == 0x05)

2791 
middÀ
 = 8;

2792 if((
myNUSIZ0
 & 0x07) == 0x07)

2793 
middÀ
 = 16;

2795 
middÀ
 = 4;

2797 
myPOSM0
 = (
myPOSP0
 + 
middÀ
) % 160;

2798 
myCuºítM0Mask
 = &
ourMis¶eMaskTabÀ
[
myPOSM0
 & 0x03]

2799 [
myNUSIZ0
 & 0x07][(myNUSIZ0 & 0x30Ë>> 4][160 - (
myPOSM0
 & 0xFC)];

2802 
myRESMP0
 = 
vÆue
 & 0x02;

2804 if(
myENAM0
 && !
myRESMP0
)

2805 
myE«bÀdObje˘s
 |
myM0Bô
;

2807 
myE«bÀdObje˘s
 &~
myM0Bô
;

2814 if(
myRESMP1
 && !(
vÆue
 & 0x02))

2816 
uI¡16
 
middÀ
;

2818 if((
myNUSIZ1
 & 0x07) == 0x05)

2819 
middÀ
 = 8;

2820 if((
myNUSIZ1
 & 0x07) == 0x07)

2821 
middÀ
 = 16;

2823 
middÀ
 = 4;

2825 
myPOSM1
 = (
myPOSP1
 + 
middÀ
) % 160;

2826 
myCuºítM1Mask
 = &
ourMis¶eMaskTabÀ
[
myPOSM1
 & 0x03]

2827 [
myNUSIZ1
 & 0x07][(myNUSIZ1 & 0x30Ë>> 4][160 - (
myPOSM1
 & 0xFC)];

2830 
myRESMP1
 = 
vÆue
 & 0x02;

2832 if(
myENAM1
 && !
myRESMP1
)

2833 
myE«bÀdObje˘s
 |
myM1Bô
;

2835 
myE«bÀdObje˘s
 &~
myM1Bô
;

2842 
I¡32
 
x
 = ((
˛ock
 - 
myClockWhíFømeSèπed
) % 228) / 3;

2845 if(
myAŒowHMOVEBœnks
 && 
ourHMOVEBœnkE«bÀCy˛es
[
x
])

2848 
myHMOVEBœnkE«bÀd
 = 
åue
;

2851 
myPOSP0
 +
ourCom∂ëeMŸi⁄TabÀ
[
x
][
myHMP0
];

2852 
myPOSP1
 +
ourCom∂ëeMŸi⁄TabÀ
[
x
][
myHMP1
];

2853 
myPOSM0
 +
ourCom∂ëeMŸi⁄TabÀ
[
x
][
myHMM0
];

2854 
myPOSM1
 +
ourCom∂ëeMŸi⁄TabÀ
[
x
][
myHMM1
];

2855 
myPOSBL
 +
ourCom∂ëeMŸi⁄TabÀ
[
x
][
myHMBL
];

2857 if(
myPOSP0
 >= 160)

2858 
myPOSP0
 -= 160;

2859 if(
myPOSP0
 < 0)

2860 
myPOSP0
 += 160;

2862 if(
myPOSP1
 >= 160)

2863 
myPOSP1
 -= 160;

2864 if(
myPOSP1
 < 0)

2865 
myPOSP1
 += 160;

2867 if(
myPOSM0
 >= 160)

2868 
myPOSM0
 -= 160;

2869 if(
myPOSM0
 < 0)

2870 
myPOSM0
 += 160;

2872 if(
myPOSM1
 >= 160)

2873 
myPOSM1
 -= 160;

2874 if(
myPOSM1
 < 0)

2875 
myPOSM1
 += 160;

2877 if(
myPOSBL
 >= 160)

2878 
myPOSBL
 -= 160;

2879 if(
myPOSBL
 < 0)

2880 
myPOSBL
 += 160;

2882 
myCuºítBLMask
 = &
ourBÆlMaskTabÀ
[
myPOSBL
 & 0x03]

2883 [(
myCTRLPF
 & 0x30Ë>> 4][160 - (
myPOSBL
 & 0xFC)];

2885 
myCuºítP0Mask
 = &
ourPœyîMaskTabÀ
[
myPOSP0
 & 0x03]

2886 [0][
myNUSIZ0
 & 0x07][160 - (
myPOSP0
 & 0xFC)];

2887 
myCuºítP1Mask
 = &
ourPœyîMaskTabÀ
[
myPOSP1
 & 0x03]

2888 [0][
myNUSIZ1
 & 0x07][160 - (
myPOSP1
 & 0xFC)];

2890 
myCuºítM0Mask
 = &
ourMis¶eMaskTabÀ
[
myPOSM0
 & 0x03]

2891 [
myNUSIZ0
 & 0x07][(myNUSIZ0 & 0x30Ë>> 4][160 - (
myPOSM0
 & 0xFC)];

2892 
myCuºítM1Mask
 = &
ourMis¶eMaskTabÀ
[
myPOSM1
 & 0x03]

2893 [
myNUSIZ1
 & 0x07][(myNUSIZ1 & 0x30Ë>> 4][160 - (
myPOSM1
 & 0xFC)];

2896 
myLa°HMOVEClock
 = 
˛ock
;

2899 
myM0CosmicArkMŸi⁄E«bÀd
 = 
Ál£
;

2905 
myHMP0
 = 0;

2906 
myHMP1
 = 0;

2907 
myHMM0
 = 0;

2908 
myHMM1
 = 0;

2909 
myHMBL
 = 0;

2915 
myCﬁlisi⁄
 = 0;

2921 #ifde‡
DEBUG_ACCESSES


2922 
˚º
 << "BAD TIA Poke: " << 
hex
 << 
addr
 << 
ídl
;

2927 
	}
}

2930 
uI¡8
 
	gTIA
::
ourBÆlMaskTabÀ
[4][4][320];

2933 
uI¡16
 
	gTIA
::
ourCﬁlisi⁄TabÀ
[64];

2936 
uI¡8
 
	gTIA
::
ourDißbÀdMaskTabÀ
[640];

2939 c⁄° 
I¡16
 
	gTIA
::
ourPokeDñayTabÀ
[64] = {

2947 
uI¡8
 
	gTIA
::
ourMis¶eMaskTabÀ
[4][8][4][320];

2950 c⁄° 
boﬁ
 
	gTIA
::
ourHMOVEBœnkE«bÀCy˛es
[76] = {

2951 
åue
,Årue,Årue,Årue,Årue,Årue,Årue,Årue,Årue,Årue,

2952 
åue
,Årue,Årue,Årue,Årue,Årue,Årue,Årue,Årue,Årue,

2953 
åue
, 
Ál£
, false, false, false, false, false, false, false, false,

2954 
Ál£
, false, false, false, false, false, false, false, false, false,

2955 
Ál£
, false, false, false, false, false, false, false, false, false,

2956 
Ál£
, false, false, false, false, false, false, false, false, false,

2957 
Ál£
, false, false, false, false, false, false, false, false, false,

2958 
Ál£
, fÆ£, fÆ£, fÆ£, fÆ£, 
åue


2962 c⁄° 
I¡32
 
	gTIA
::
ourCom∂ëeMŸi⁄TabÀ
[76][16] = {

3042 
uI¡8
 
	gTIA
::
ourPœyîMaskTabÀ
[4][2][8][320];

3045 
I¡8
 
	gTIA
::
ourPœyîPosôi⁄Re£tWhíTabÀ
[8][160][160];

3048 
uI¡8
 
	gTIA
::
ourPœyîReÊe˘TabÀ
[256];

3051 
uI¡32
 
	gTIA
::
ourPœyfõldTabÀ
[2][160];

3054 c⁄° 
uI¡32
 
	gTIA
::
ourNTSCPÆëã
[256] = {

3137 c⁄° 
uI¡32
 
	gTIA
::
ourPALPÆëã
[256] = {

3220 c⁄° 
uI¡32
 
	gTIA
::
ourNTSCPÆëã11
[256] = {

3288 c⁄° 
uI¡32
 
	gTIA
::
ourPALPÆëã11
[256] = {

3356 c⁄° 
uI¡32
 
	gTIA
::
ourNTSCPÆëãZ26
[256] = {

3424 c⁄° 
uI¡32
 
	gTIA
::
ourPALPÆëãZ26
[256] = {

3492 
	gTIA
::
	$TIA
(c⁄° 
TIA
& 
c
)

3493 : 
	`myC⁄sﬁe
(
c
.
myC⁄sﬁe
),

3494 
	`mySëtögs
(
c
.
mySëtögs
),

3495 
	`mySound
(
c
.
mySound
),

3496 
	`myCOLUBK
(
myCﬁ‹
[0]),

3497 
	`myCOLUPF
(
myCﬁ‹
[1]),

3498 
	`myCOLUP0
(
myCﬁ‹
[2]),

3499 
	$myCOLUP1
(
myCﬁ‹
[3])

3501 
	`as£π
(
Ál£
);

3502 
	}
}

3505 
	gTIA
& TIA::
›î©‹
 = (c⁄° 
TIA
&)

3507 
as£π
(
Ál£
);

3509  *
	gthis
;

	@emucore/TIA.hxx

19 #i‚de‡
TIA_HXX


20 
	#TIA_HXX


	)

22 
˛ass
 
	gC⁄sﬁe
;

23 
˛ass
 
	gSy°em
;

24 
˛ass
 
	gSîülizî
;

25 
˛ass
 
	gDe£rülizî
;

26 
˛ass
 
	gSëtögs
;

28 
	~"b•f.hxx
"

29 
	~"Sound.hxx
"

30 
	~"Devi˚.hxx
"

31 
	~"MedüSrc.hxx
"

47 
˛ass
 
	gTIA
 : 
public
 
Devi˚
 ,Öubli¯
	gMedüSour˚


49 
	gpublic
:

50 
‰õnd
 
˛ass
 
TIADebug
;

58 
TIA
(c⁄° 
C⁄sﬁe
& 
c⁄sﬁe
, 
Sëtögs
& 
£âögs
);

63 
	gvútuÆ
 ~
TIA
();

65 
	gpublic
:

71 
vútuÆ
 c⁄° * 
«me
() const;

76 
vútuÆ
 
ª£t
();

83 
vútuÆ
 
sy°emCy˛esRe£t
();

91 
vútuÆ
 
ö°Æl
(
Sy°em
& 
sy°em
);

99 
vútuÆ
 
boﬁ
 
ßve
(
Sîülizî
& 
out
);

107 
vútuÆ
 
boﬁ
 
lﬂd
(
De£rülizî
& 
ö
);

109 
	gpublic
:

115 
vútuÆ
 
uI¡8
 
≥ek
(
uI¡16
 
addªss
);

123 
vútuÆ
 
poke
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

125 
	gpublic
:

130 
vútuÆ
 
upd©e
();

137 
uI¡8
* 
cuºítFømeBuf„r
(Ëc⁄° {  
	gmyCuºítFømeBuf„r
; }

144 
uI¡8
* 
¥eviousFømeBuf„r
(Ëc⁄° {  
	gmyPªviousFømeBuf„r
; }

151 
vútuÆ
 c⁄° 
uI¡32
* 
∑Àâe
() const;

158 
uI¡32
 
height
() const;

165 
uI¡32
 
width
() const;

174 
uI¡32
 
sˇ∆öes
() const;

181 
uI¡32
 
˛ocksThisLöe
() const;

186 
£tSound
(
Sound
& 
sound
);

188 
	eTIABô
 {

189 
	gP0
,

190 
	gP1
,

191 
	gM0
,

192 
	gM1
,

193 
	gBL
,

194 
	gPF


202 
boﬁ
 
íabÀBô
(
TIABô
 
b
, boﬁ 
mode
Ë{ 
	gmyBôE«bÀd
[b] = mode;  
	gmode
; }

209 
boﬁ
 
toggÀBô
(
TIABô
 
b
Ë{ 
	gmyBôE«bÀd
[b] = !
myBôE«bÀd
[b];  myBitEnabled[b]; }

216 
íabÀBôs
(
boﬁ
 
mode
Ë{ 
uI¡8
 
	gi
 = 0; i < 6; ++iË
	gmyBôE«bÀd
[
i
] = mode; }

218 #ifde‡
DEVELOPER_SUPPORT


223 
vútuÆ
 
upd©eSˇ∆öe
();

229 
vútuÆ
 
upd©eSˇ∆öeBySãp
();

235 
vútuÆ
 
upd©eSˇ∆öeByTø˚
(
èrgë
);

238 
	g¥iv©e
:

240 
compuãBÆlMaskTabÀ
();

243 
compuãCﬁlisi⁄TabÀ
();

246 
compuãMis¶eMaskTabÀ
();

249 
compuãPœyîMaskTabÀ
();

252 
compuãPœyîPosôi⁄Re£tWhíTabÀ
();

255 
compuãPœyîReÊe˘TabÀ
();

258 
compuãPœyfõldMaskTabÀ
();

260 
	g¥iv©e
:

262 
upd©eFømeSˇ∆öe
(
uI¡32
 
˛ocksToUpd©e
, uI¡32 
hpos
);

265 
upd©eFøme
(
I¡32
 
˛ock
);

268 
waôH‹iz⁄èlSync
();

271 
gªyOutFøme
();

274 
˛órBuf„rs
();

277 
°¨tFøme
();

280 
ídFøme
();

282 
	g¥iv©e
:

284 c⁄° 
C⁄sﬁe
& 
myC⁄sﬁe
;

287 c⁄° 
	gSëtögs
& 
	gmySëtögs
;

290 
Sound
* 
	gmySound
;

292 
	g¥iv©e
:

296 
boﬁ
 
myCﬁ‹LossE«bÀd
;

300 
boﬁ
 
	gmyP¨tülFømeFœg
;

302 
	g¥iv©e
:

304 
myFømeCou¡î
;

307 
uI¡8
* 
	gmyCuºítFømeBuf„r
;

310 
uI¡8
* 
	gmyPªviousFømeBuf„r
;

313 
uI¡8
* 
	gmyFømePoöãr
;

316 
uI¡32
 
	gmyFømeXSèπ
;

319 
uI¡32
 
	gmyFømeWidth
;

322 
uI¡32
 
	gmyFømeYSèπ
;

325 
uI¡32
 
	gmyFømeHeight
;

327 
	g¥iv©e
:

330 
uI¡32
 
myYSèπ
;

333 
uI¡32
 
	gmyHeight
;

336 
uI¡32
 
	gmySèπDi•œyOff£t
;

339 
uI¡32
 
	gmySt›Di•œyOff£t
;

341 
	g¥iv©e
:

343 
I¡32
 
myClockWhíFømeSèπed
;

346 
I¡32
 
	gmyClockSèπDi•œy
;

349 
I¡32
 
	gmyClockSt›Di•œy
;

352 
I¡32
 
	gmyClockAtLa°Upd©e
;

357 
I¡32
 
	gmyClocksToEndOfSˇnLöe
;

360 
I¡32
 
	gmySˇ∆öeCou¡F‹La°Føme
;

363 
I¡32
 
	gmyCuºítSˇ∆öe
;

366 
I¡32
 
	gmyMaximumNumbîOfSˇ∆öes
;

368 
	g¥iv©e
:

370 
I¡32
 
myVSYNCFöishClock
;

372 
	g¥iv©e
:

375 
myP0Bô
 = 0x01,

376 
	gmyM0Bô
 = 0x02,

377 
	gmyP1Bô
 = 0x04,

378 
	gmyM1Bô
 = 0x08,

379 
	gmyBLBô
 = 0x10,

380 
	gmyPFBô
 = 0x20,

381 
	gSc‹eBô
 = 0x40,

382 
	gPri‹ôyBô
 = 0x080

386 
uI¡8
 
	gmyE«bÀdObje˘s
;

388 
	g¥iv©e
:

389 
uI¡8
 
myVSYNC
;

390 
uI¡8
 
	gmyVBLANK
;

392 
uI¡8
 
	gmyNUSIZ0
;

393 
uI¡8
 
	gmyNUSIZ1
;

395 
uI¡8
 
	gmyPœyfõldPri‹ôyAndSc‹e
;

396 
uI¡32
 
	gmyCﬁ‹
[4];

397 
uI¡8
 
	gmyPri‹ôyEncodî
[2][256];

399 
	guI¡32
& 
	gmyCOLUBK
;

400 
	guI¡32
& 
	gmyCOLUPF
;

401 
	guI¡32
& 
	gmyCOLUP0
;

402 
	guI¡32
& 
	gmyCOLUP1
;

404 
uI¡8
 
	gmyCTRLPF
;

406 
boﬁ
 
	gmyREFP0
;

407 
boﬁ
 
	gmyREFP1
;

409 
uI¡32
 
	gmyPF
;

411 
uI¡8
 
	gmyGRP0
;

412 
uI¡8
 
	gmyGRP1
;

414 
uI¡8
 
	gmyDGRP0
;

415 
uI¡8
 
	gmyDGRP1
;

417 
boﬁ
 
	gmyENAM0
;

418 
boﬁ
 
	gmyENAM1
;

420 
boﬁ
 
	gmyENABL
;

421 
boﬁ
 
	gmyDENABL
;

423 
I¡8
 
	gmyHMP0
;

424 
I¡8
 
	gmyHMP1
;

425 
I¡8
 
	gmyHMM0
;

426 
I¡8
 
	gmyHMM1
;

427 
I¡8
 
	gmyHMBL
;

429 
boﬁ
 
	gmyVDELP0
;

430 
boﬁ
 
	gmyVDELP1
;

431 
boﬁ
 
	gmyVDELBL
;

433 
boﬁ
 
	gmyRESMP0
;

434 
boﬁ
 
	gmyRESMP1
;

436 
uI¡16
 
	gmyCﬁlisi⁄
;

440 
I¡16
 
	gmyPOSP0
;

441 
I¡16
 
	gmyPOSP1
;

442 
I¡16
 
	gmyPOSM0
;

443 
I¡16
 
	gmyPOSM1
;

444 
I¡16
 
	gmyPOSBL
;

446 
	g¥iv©e
:

449 
uI¡8
 
myCuºítGRP0
;

453 
uI¡8
 
	gmyCuºítGRP1
;

460 
uI¡8
* 
	gmyCuºítBLMask
;

463 
uI¡8
* 
	gmyCuºítM0Mask
;

466 
uI¡8
* 
	gmyCuºítM1Mask
;

469 
uI¡8
* 
	gmyCuºítP0Mask
;

472 
uI¡8
* 
	gmyCuºítP1Mask
;

475 
uI¡32
* 
	gmyCuºítPFMask
;

478 
uI¡8
 
	gmyAUDV0
;

479 
uI¡8
 
	gmyAUDV1
;

480 
uI¡8
 
	gmyAUDC0
;

481 
uI¡8
 
	gmyAUDC1
;

482 
uI¡8
 
	gmyAUDF0
;

483 
uI¡8
 
	gmyAUDF1
;

485 
	g¥iv©e
:

487 
I¡32
 
myDumpDißbÀdCy˛e
;

490 
boﬁ
 
	gmyDumpE«bÀd
;

492 
	g¥iv©e
:

494 
I¡32
 
myLa°HMOVEClock
;

497 
boﬁ
 
	gmyHMOVEBœnkE«bÀd
;

500 
boﬁ
 
	gmyAŒowHMOVEBœnks
;

503 
boﬁ
 
	gmyM0CosmicArkMŸi⁄E«bÀd
;

506 
uI¡32
 
	gmyM0CosmicArkCou¡î
;

509 
boﬁ
 
	gmyBôE«bÀd
[6];

512 
boﬁ
 
	gmyFømeGªyed
;

514 
	g¥iv©e
:

516 
uI¡8
 
ourBÆlMaskTabÀ
[4][4][320];

519 
uI¡16
 
	gourCﬁlisi⁄TabÀ
[64];

522 
uI¡8
 
	gourDißbÀdMaskTabÀ
[640];

525 c⁄° 
I¡16
 
	gourPokeDñayTabÀ
[64];

528 
uI¡8
 
	gourMis¶eMaskTabÀ
[4][8][4][320];

532 c⁄° 
I¡32
 
	gourCom∂ëeMŸi⁄TabÀ
[76][16];

535 c⁄° 
boﬁ
 
	gourHMOVEBœnkE«bÀCy˛es
[76];

538 
uI¡8
 
	gourPœyîMaskTabÀ
[4][2][8][320];

541 
I¡8
 
	gourPœyîPosôi⁄Re£tWhíTabÀ
[8][160][160];

544 
uI¡8
 
	gourPœyîReÊe˘TabÀ
[256];

547 
uI¡32
 
	gourPœyfõldTabÀ
[2][160];

550 c⁄° 
uI¡32
 
	gourNTSCPÆëã
[256];

555 c⁄° 
uI¡32
 
	gourPALPÆëã
[256];

558 c⁄° 
uI¡32
 
	gourNTSCPÆëã11
[256];

561 c⁄° 
uI¡32
 
	gourPALPÆëã11
[256];

564 c⁄° 
uI¡32
 
	gourNTSCPÆëãZ26
[256];

567 c⁄° 
uI¡32
 
	gourPALPÆëãZ26
[256];

569 
	g¥iv©e
:

571 
TIA
(const TIA&);

574 
	gTIA
& 
	g›î©‹
 = (c⁄° 
TIA
&);

	@emucore/TIASnd.cpp

19 
	~"Sy°em.hxx
"

20 
	~"TIASnd.hxx
"

23 
	gTIASound
::
	$TIASound
(
I¡32
 
ouçutFªquícy
, I¡32 
tüFªquícy
, 
uI¡32
 
ch™√ls
)

24 : 
	`myOuçutFªquícy
(
ouçutFªquícy
),

25 
	`myTIAFªquícy
(
tüFªquícy
),

26 
	`myCh™√ls
(
ch™√ls
),

27 
	`myOuçutCou¡î
(0),

28 
	`myVﬁumePî˚¡age
(100),

29 
	$myVﬁumeClù
(128)

31 
	`ª£t
();

32 
	}
}

35 
	gTIASound
::~
	$TIASound
()

37 
	}
}

40 
TIASound
::
	$ª£t
()

42 
myAUDC
[0] = myAUDC[1] = 
myAUDF
[0] = myAUDF[1] = 
myAUDV
[0] = myAUDV[1] = 0;

43 
myP4
[0] = 
myP5
[0] = myP4[1] = myP5[1] = 1;

44 
myFªqDiv
[0].
	`£t
(0);

45 
myFªqDiv
[1].
	`£t
(0);

46 
myOuçutCou¡î
 = 0;

47 
	}
}

50 
	gTIASound
::
	$ouçutFªquícy
(
I¡32
 
‰eq
)

52 
myOuçutFªquícy
 = 
‰eq
;

53 
	}
}

56 
	gTIASound
::
	$tüFªquícy
(
I¡32
 
‰eq
)

58 
myTIAFªquícy
 = 
‰eq
;

59 
	}
}

62 
	gTIASound
::
	$ch™√ls
(
uI¡32
 
numbî
)

64 
myCh™√ls
 = 
numbî
 == 2 ? 2 : 1;

65 
	}
}

68 
	gTIASound
::
	$˛ùVﬁume
(
boﬁ
 
˛ù
)

70 
myVﬁumeClù
 = 
˛ù
 ? 128 : 0;

71 
	}
}

74 
	gTIASound
::
	$£t
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
)

76 
addªss
)

79 
myAUDC
[0] = 
vÆue
 & 0x0f;

83 
myAUDC
[1] = 
vÆue
 & 0x0f;

87 
myAUDF
[0] = 
vÆue
 & 0x1f;

88 
myFªqDiv
[0].
	`£t
(
myAUDF
[0]);

92 
myAUDF
[1] = 
vÆue
 & 0x1f;

93 
myFªqDiv
[1].
	`£t
(
myAUDF
[1]);

97 
myAUDV
[0] = 
vÆue
 & 0x0f;

101 
myAUDV
[1] = 
vÆue
 & 0x0f;

107 
	}
}

110 
uI¡8
 
	gTIASound
::
	$gë
(
uI¡16
 
addªss
)

112 
addªss
)

115  
myAUDC
[0];

118  
myAUDC
[1];

121  
myAUDF
[0];

124  
myAUDF
[1];

127  
myAUDV
[0];

130  
myAUDV
[1];

135 
	}
}

138 
	gTIASound
::
	$vﬁume
(
uI¡32
 
≥r˚¡
)

140 if((
≥r˚¡
 >= 0) && (percent <= 100))

141 
myVﬁumePî˚¡age
 = 
≥r˚¡
;

142 
	}
}

145 
	gTIASound
::
	$¥o˚ss
(
uI¡8
* 
buf„r
, 
uI¡32
 
ßm∂es
)

147 
I¡32
 
v0
 = ((
myAUDV
[0] << 2Ë* 
myVﬁumePî˚¡age
) / 100;

148 
I¡32
 
v1
 = ((
myAUDV
[1] << 2Ë* 
myVﬁumePî˚¡age
) / 100;

151 
ßm∂es
 > 0)

154 
uI¡32
 
c
 = 0; c < 2; ++c)

157 if((
myFªqDiv
[
c
].
	`˛ock
()))

159 
myAUDC
[
c
])

164 
myP4
[
c
] = (myP4[c] << 1) | 0x01;

171 
myP4
[
c
] = (myP4[c] & 0x0f) ?

172 ((
myP4
[
c
] << 1) | (((myP4[c] & 0x08) ? 1 : 0) ^

173 ((
myP4
[
c
] & 0x04) ? 1 : 0))) : 1;

180 
myP5
[
c
] = (myP5[c] & 0x1f) ?

181 ((
myP5
[
c
] << 1) | (((myP5[c] & 0x10) ? 1 : 0) ^

182 ((
myP5
[
c
] & 0x04) ? 1 : 0))) : 1;

185 if((
myP5
[
c
] & 0x0f) == 0x08)

188 
myP4
[
c
] = (myP4[c] & 0x0f) ?

189 ((
myP4
[
c
] << 1) | (((myP4[c] & 0x08) ? 1 : 0) ^

190 ((
myP4
[
c
] & 0x04) ? 1 : 0))) : 1;

198 
myP5
[
c
] = (myP5[c] & 0x1f) ?

199 ((
myP5
[
c
] << 1) | (((myP5[c] & 0x10) ? 1 : 0) ^

200 ((
myP5
[
c
] & 0x04) ? 1 : 0))) : 1;

203 if(
myP5
[
c
] & 0x10)

206 
myP4
[
c
] = (myP4[c] & 0x0f) ?

207 ((
myP4
[
c
] << 1) | (((myP4[c] & 0x08) ? 1 : 0) ^

208 ((
myP4
[
c
] & 0x04) ? 1 : 0))) : 1;

216 
myP4
[
c
] = (myP4[c] << 1) | ((myP4[c] & 0x01) ? 0 : 1);

223 
myP4
[
c
] = (myP4[c] << 1) | ((myP4[c] & 0x01) ? 0 : 1);

230 
myP5
[
c
] = (myP5[c] & 0x1f) ?

231 ((
myP5
[
c
] << 1) | (((myP5[c] & 0x10) ? 1 : 0) ^

232 ((
myP5
[
c
] & 0x04) ? 1 : 0))) : 1;

235 if((
myP5
[
c
] & 0x0f) == 0x08)

238 
myP4
[
c
] = (myP4[c] << 1) | ((myP4[c] & 0x01) ? 0 : 1);

246 
myP5
[
c
] = (myP5[c] & 0x1f) ?

247 ((
myP5
[
c
] << 1) | (((myP5[c] & 0x10) ? 1 : 0) ^

248 ((
myP5
[
c
] & 0x04) ? 1 : 0))) : 1;

251 if(
myP5
[
c
] & 0x10)

254 
myP4
[
c
] = (myP4[c] << 1) | ((myP4[c] & 0x01) ? 0 : 1);

262 
myP5
[
c
] = ((myP5[c] & 0x1fË|| (
myP4
[c] & 0x0f)) ?

263 ((
myP5
[
c
] << 1Ë| (((
myP4
[c] & 0x08) ? 1 : 0) ^

264 ((
myP5
[
c
] & 0x10) ? 1 : 0))) : 1;

265 
myP4
[
c
] = (myP4[c] << 1Ë| ((
myP5
[c] & 0x20) ? 1 : 0);

272 
myP5
[
c
] = (myP5[c] & 0x1f) ?

273 ((
myP5
[
c
] << 1) | (((myP5[c] & 0x10) ? 1 : 0) ^

274 ((
myP5
[
c
] & 0x04) ? 1 : 0))) : 1;

277 
myP4
[
c
] = (myP4[c] << 1Ë| ((
myP5
[c] & 0x20) ? 1 : 0);

284 
myP5
[
c
] = (myP5[c] & 0x1f) ?

285 ((
myP5
[
c
] << 1) | (((myP5[c] & 0x10) ? 1 : 0) ^

286 ((
myP5
[
c
] & 0x04) ? 1 : 0))) : 1;

289 if((
myP5
[
c
] & 0x0f) == 0x08)

292 
myP4
[
c
] = (myP4[c] << 1Ë| ((
myP5
[c] & 0x10) ? 1 : 0);

300 
myP4
[
c
] = (myP4[c] << 1) | 0x01;

307 
myP4
[
c
] = (~myP4[c] << 1) |

308 ((!(!(
myP4
[
c
] & 4) && ((myP4[c] & 7)))) ? 0 : 1);

315 
myP4
[
c
] = (~myP4[c] << 1) |

316 ((!(!(
myP4
[
c
] & 4) && ((myP4[c] & 7)))) ? 0 : 1);

323 
myP5
[
c
] = (myP5[c] & 0x1f) ?

324 ((
myP5
[
c
] << 1) | (((myP5[c] & 0x10) ? 1 : 0) ^

325 ((
myP5
[
c
] & 0x04) ? 1 : 0))) : 1;

328 if((
myP5
[
c
] & 0x0f) == 0x08)

331 
myP4
[
c
] = (~myP4[c] << 1) |

332 ((!(!(
myP4
[
c
] & 4) && ((myP4[c] & 7)))) ? 0 : 1);

340 
myP5
[
c
] = (myP5[c] & 0x1f) ?

341 ((
myP5
[
c
] << 1) | (((myP5[c] & 0x10) ? 1 : 0) ^

342 ((
myP5
[
c
] & 0x04) ? 1 : 0))) : 1;

345 if(
myP5
[
c
] & 0x10)

348 
myP4
[
c
] = (~myP4[c] << 1) |

349 ((!(!(
myP4
[
c
] & 4) && ((myP4[c] & 7)))) ? 0 : 1);

357 
myOuçutCou¡î
 +
myOuçutFªquícy
;

359 if(
myCh™√ls
 == 1)

362 (
ßm∂es
 > 0Ë&& (
myOuçutCou¡î
 >
myTIAFªquícy
))

364 *(
buf„r
++Ë(((
myP4
[0] & 8Ë? 
v0
 : 0) +

365 ((
myP4
[1] & 8Ë? 
v1
 : 0)Ë+ 
myVﬁumeClù
;

366 
myOuçutCou¡î
 -
myTIAFªquícy
;

367 
ßm∂es
--;

373 (
ßm∂es
 > 0Ë&& (
myOuçutCou¡î
 >
myTIAFªquícy
))

375 *(
buf„r
++Ë((
myP4
[0] & 8Ë? 
v0
 : 0Ë+ 
myVﬁumeClù
;

376 *(
buf„r
++Ë((
myP4
[1] & 8Ë? 
v1
 : 0Ë+ 
myVﬁumeClù
;

377 
myOuçutCou¡î
 -
myTIAFªquícy
;

378 
ßm∂es
--;

382 
	}
}

	@emucore/TIASnd.hxx

19 #i‚de‡
TIASOUND_HXX


20 
	#TIASOUND_HXX


	)

22 
	~"b•f.hxx
"

31 ˛as†
	cTIASound


33 
	mpublic
:

37 
TIASound
(
I¡32
 
ouçutFªquícy
 = 31400, I¡32 
tüFªquícy
 = 31400,

38 
uI¡32
 
ch™√ls
 = 1);

43 
	mvútuÆ
 ~
TIASound
();

45 
	mpublic
:

49 
ª£t
();

54 
ouçutFªquícy
(
I¡32
 
‰eq
);

59 
tüFªquícy
(
I¡32
 
‰eq
);

64 
ch™√ls
(
uI¡32
 
numbî
);

69 
˛ùVﬁume
(
boﬁ
 
˛ù
);

71 
	mpublic
:

78 
£t
(
uI¡16
 
addªss
, 
uI¡8
 
vÆue
);

85 
uI¡8
 
gë
(
uI¡16
 
addªss
);

95 
¥o˚ss
(
uI¡8
* 
buf„r
, 
uI¡32
 
ßm∂es
);

100 
vﬁume
(
uI¡32
 
≥r˚¡
);

102 
	m¥iv©e
:

107 ˛as†
	cFªqDiv


109 
public
:

110 
FªqDiv
()

112 
myDivideByVÆue
 = 
myCou¡î
 = 0;

115 
£t
(
uI¡32
 
divideBy
)

117 
	mmyDivideByVÆue
 = 
divideBy
;

120 
boﬁ
 
˛ock
()

122 if(++
	mmyCou¡î
 > 
	mmyDivideByVÆue
)

124 
	mmyCou¡î
 = 0;

125  
	måue
;

127  
	mÁl£
;

130 
	m¥iv©e
:

131 
uI¡32
 
myDivideByVÆue
;

132 
uI¡32
 
	mmyCou¡î
;

135 
	g¥iv©e
:

136 
uI¡8
 
myAUDC
[2];

137 
uI¡8
 
	gmyAUDF
[2];

138 
uI¡8
 
	gmyAUDV
[2];

140 
FªqDiv
 
	gmyFªqDiv
[2];

141 
uI¡8
 
	gmyP4
[2];

142 
uI¡8
 
	gmyP5
[2];

144 
I¡32
 
	gmyOuçutFªquícy
;

145 
I¡32
 
	gmyTIAFªquícy
;

146 
uI¡32
 
	gmyCh™√ls
;

147 
I¡32
 
	gmyOuçutCou¡î
;

148 
uI¡32
 
	gmyVﬁumePî˚¡age
;

149 
uI¡8
 
	gmyVﬁumeClù
;

	@emucore/bspf.hxx

19 #i‚de‡
BSPF_HXX


20 
	#BSPF_HXX


	)

31 sig√d 
	tI¡8
;

32 
	tuI¡8
;

35 sig√d 
	tI¡16
;

36 
	tuI¡16
;

39 sig√d 
	tI¡32
;

40 
	tuI¡32
;

44 #ifde‡
BSPF_OLD_STYLE_CXX_HEADERS


45 
	~<io°ªam.h
>

46 
	~<iom™ù.h
>

47 
	~<°rög
>

49 
	~<io°ªam
>

50 
	~<iom™ù
>

51 
	~<°rög
>

52 
usög
 
«me•a˚
 
	g°d
;

55 #ifde‡
PSP


56 
	~"p•°döt.h
"

59 #ifde‡
HAVE_INTTYPES


60 
	~<öây≥s.h
>

64 #i‡
deföed
 
BSPF_UNIX


65 
	#BSPF_PATH_SEPARATOR
 "/"

	)

66 #ñi‡(
deföed
(
BSPF_DOS
Ë|| deföed(
BSPF_WIN32
Ë|| deföed(
BSPF_OS2
))

67 
	#BSPF_PATH_SEPARATOR
 "\\"

	)

68 #ñi‡
deföed
 
BSPF_MAC_OSX


69 
	#BSPF_PATH_SEPARATOR
 "/"

	)

70 #ñi‡
deföed
 
BSPF_PSP


71 
	#BSPF_PATH_SEPARATOR
 "/"

	)

72 #ñi‡
deföed
 
BSPF_GP2X


73 
	#BSPF_PATH_SEPARATOR
 "/"

	)

77 #ifde‡
BSPF_WIN32


78 
	#STR_CASE_CMP
 
°ricmp


	)

79 
	#STR_N_CASE_CMP
 
°∫icmp


	)

80 
	#IS_BLANK
(
c
Ë((¯=' 'Ë|| (¯='\t'))

	)

81 
	#VSNPRINTF
 
_v¢¥ötf


	)

83 
	#STR_CASE_CMP
 
°rˇ£cmp


	)

84 
	#STR_N_CASE_CMP
 
°∫ˇ£cmp


	)

85 
	#IS_BLANK
(
c
Ë
	`isbœnk
(c)

	)

86 
	#VSNPRINTF
 
v¢¥ötf


	)

90 #ifde‡
_WIN32_WCE


91 
	~"missög.h
"

	@emucore/unzip.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<zlib.h
>

13 
	~"unzù.h
"

15 #ifde‡
STDC


16 
	~<°ddef.h
>

17 
	~<°rög.h
>

18 
	~<°dlib.h
>

20 #ifde‡
NO_ERRNO_H


21 
î∫o
;

23 
	~<î∫o.h
>

26 #i‚de‡
loˇl


27 
	#loˇl
 

	)

33 #i‡!
deföed
(
unix
Ë&& !deföed(
CASESENSITIVITYDEFAULT_YES
) && \

34 !
	$deföed
(
CASESENSITIVITYDEFAULT_NO
)

35 
	#CASESENSITIVITYDEFAULT_NO


	)

39 #i‚de‡
UNZ_BUFSIZE


40 
	#UNZ_BUFSIZE
 (16384)

	)

43 #i‚de‡
UNZ_MAXFILENAMEINZIP


44 
	#UNZ_MAXFILENAMEINZIP
 (256)

	)

47 #i‚de‡
ALLOC


48 
	#ALLOC
(
size
Ë(
	`mÆloc
(size))

	)

50 #i‚de‡
TRYFREE


51 
	#TRYFREE
(
p
Ë{i‡’Ë
	`‰ì
’);
	}

	)
}

54 
	#SIZECENTRALDIRITEM
 (0x2e)

	)

55 
	#SIZEZIPLOCALHEADER
 (0x1e)

	)

60 #i‚de‡
SEEK_CUR


61 
	#SEEK_CUR
 1

	)

64 #i‚de‡
SEEK_END


65 
	#SEEK_END
 2

	)

68 #i‚de‡
SEEK_SET


69 
	#SEEK_SET
 0

	)

72 c⁄° 
	gunz_c›yright
[] =

76 
	sunz_fûe_öfo_öã∫Æ_s


78 
uL⁄g
 
	moff£t_curfûe
;

79 } 
	tunz_fûe_öfo_öã∫Æ
;

86 *
	mªad_buf„r
;

87 
z_°ªam
 
	m°ªam
;

89 
uL⁄g
 
	mpos_ö_zùfûe
;

90 
uL⁄g
 
	m°ªam_öôüli£d
;

92 
uL⁄g
 
	moff£t_loˇl_exåafõld
;

93 
uI¡
 
	msize_loˇl_exåafõld
;

94 
uL⁄g
 
	mpos_loˇl_exåafõld
;

96 
uL⁄g
 
	m¸c32
;

97 
uL⁄g
 
	m¸c32_waô
;

98 
uL⁄g
 
	mª°_ªad_com¥es£d
;

99 
uL⁄g
 
	mª°_ªad_uncom¥es£d
;

100 
FILE
* 
	mfûe
;

101 
uL⁄g
 
	mcom¥essi⁄_mëhod
;

102 
uL⁄g
 
	mbyã_bef‹e_the_zùfûe
;

103 } 
	tfûe_ö_zù_ªad_öfo_s
;

110 
FILE
* 
	mfûe
;

111 
unz_globÆ_öfo
 
	mgi
;

112 
uL⁄g
 
	mbyã_bef‹e_the_zùfûe
;

113 
uL⁄g
 
	mnum_fûe
;

114 
uL⁄g
 
	mpos_ö_˚¡øl_dú
;

115 
uL⁄g
 
	mcuºít_fûe_ok
;

116 
uL⁄g
 
	m˚¡øl_pos
;

118 
uL⁄g
 
	msize_˚¡øl_dú
;

119 
uL⁄g
 
	moff£t_˚¡øl_dú
;

122 
unz_fûe_öfo
 
	mcur_fûe_öfo
;

123 
unz_fûe_öfo_öã∫Æ
 
	mcur_fûe_öfo_öã∫Æ
;

124 
fûe_ö_zù_ªad_öfo_s
* 
	mpfûe_ö_zù_ªad
;

126 } 
	tunz_s
;

136 
loˇl
 
	$unzloˇl_gëByã
(
FILE
* 
fö
, * 
pi
)

138 
c
;

139 
îr
 = 
	`‰ód
(&
c
, 1, 1, 
fö
);

140 i‡(
îr
==1)

142 *
pi
 = ()
c
;

143  
UNZ_OK
;

147 i‡(
	`„º‹
(
fö
))

148  
UNZ_ERRNO
;

150  
UNZ_EOF
;

152 
	}
}

158 
loˇl
 
	$unzloˇl_gëSh‹t
 (
FILE
* 
fö
,
uL⁄g
* 
pX
)

160 
uL⁄g
 
x
 ;

161 
i
 = 0;

162 
îr
;

164 
îr
 = 
	`unzloˇl_gëByã
(
fö
,&
i
);

165 
x
 = (
uL⁄g
)
i
;

167 i‡(
îr
==
UNZ_OK
)

168 
îr
 = 
	`unzloˇl_gëByã
(
fö
,&
i
);

169 
x
 +((
uL⁄g
)
i
)<<8;

171 i‡(
îr
==
UNZ_OK
)

172 *
pX
 = 
x
;

174 *
pX
 = 0;

175  
îr
;

176 
	}
}

178 
loˇl
 
	$unzloˇl_gëL⁄g
 (
FILE
* 
fö
,
uL⁄g
* 
pX
)

180 
uL⁄g
 
x
 ;

181 
i
 = 0;

182 
îr
;

184 
îr
 = 
	`unzloˇl_gëByã
(
fö
,&
i
);

185 
x
 = (
uL⁄g
)
i
;

187 i‡(
îr
==
UNZ_OK
)

188 
îr
 = 
	`unzloˇl_gëByã
(
fö
,&
i
);

189 
x
 +((
uL⁄g
)
i
)<<8;

191 i‡(
îr
==
UNZ_OK
)

192 
îr
 = 
	`unzloˇl_gëByã
(
fö
,&
i
);

193 
x
 +((
uL⁄g
)
i
)<<16;

195 i‡(
îr
==
UNZ_OK
)

196 
îr
 = 
	`unzloˇl_gëByã
(
fö
,&
i
);

197 
x
 +((
uL⁄g
)
i
)<<24;

199 i‡(
îr
==
UNZ_OK
)

200 *
pX
 = 
x
;

202 *
pX
 = 0;

203  
îr
;

204 
	}
}

208 
loˇl
 
	$°rcmpˇ£no£nsôive_öã∫Æ
 (c⁄° * 
fûeName1
, c⁄° * 
fûeName2
)

212 
c1
=*(
fûeName1
++);

213 
c2
=*(
fûeName2
++);

214 i‡((
c1
>='a') && (c1<='z'))

215 
c1
 -= 0x20;

216 i‡((
c2
>='a') && (c2<='z'))

217 
c2
 -= 0x20;

218 i‡(
c1
=='\0')

219  ((
c2
=='\0') ? 0 : -1);

220 i‡(
c2
=='\0')

222 i‡(
c1
<
c2
)

224 i‡(
c1
>
c2
)

227 
	}
}

230 #ifde‡ 
CASESENSITIVITYDEFAULT_NO


231 
	#CASESENSITIVITYDEFAULTVALUE
 2

	)

233 
	#CASESENSITIVITYDEFAULTVALUE
 1

	)

236 #i‚de‡
STRCMPCASENOSENTIVEFUNCTION


237 
	#STRCMPCASENOSENTIVEFUNCTION
 
°rcmpˇ£no£nsôive_öã∫Æ


	)

249 
ZEXPORT
 
unzSåögFûeNameCom∑ª


250 (c⁄° * 
fûeName1
, c⁄° * 
fûeName2
, 
iCa£Sísôivôy
)

252 i‡(
iCa£Sísôivôy
==0)

253 
iCa£Sísôivôy
=
CASESENSITIVITYDEFAULTVALUE
;

255 i‡(
iCa£Sísôivôy
==1)

256  
°rcmp
(
fûeName1
,
fûeName2
);

258  
STRCMPCASENOSENTIVEFUNCTION
(
fûeName1
,
fûeName2
);

261 
	#BUFREADCOMMENT
 (0x400)

	)

267 
loˇl
 
uL⁄g
 
	$unzloˇl_SórchCíåÆDú
(
FILE
* 
fö
)

269 * 
buf
;

270 
uL⁄g
 
uSizeFûe
;

271 
uL⁄g
 
uBackRód
;

272 
uL⁄g
 
uMaxBack
=0xffff;

273 
uL⁄g
 
uPosFound
=0;

275 i‡(
	`f£ek
(
fö
,0,
SEEK_END
) != 0)

279 
uSizeFûe
 = 
	`·ñl
–
fö
 );

281 i‡(
uMaxBack
>
uSizeFûe
)

282 
uMaxBack
 = 
uSizeFûe
;

284 
buf
 = (*)
	`ALLOC
(
BUFREADCOMMENT
+4);

285 i‡(
buf
==
NULL
)

288 
uBackRód
 = 4;

289 
uBackRód
<
uMaxBack
)

291 
uL⁄g
 
uRódSize
,
uRódPos
 ;

292 
i
;

293 i‡(
uBackRód
+
BUFREADCOMMENT
>
uMaxBack
)

294 
uBackRód
 = 
uMaxBack
;

296 
uBackRód
+=
BUFREADCOMMENT
;

297 
uRódPos
 = 
uSizeFûe
-
uBackRód
 ;

299 
uRódSize
 = ((
BUFREADCOMMENT
+4Ë< (
uSizeFûe
-
uRódPos
)) ?

300 (
BUFREADCOMMENT
+4Ë: (
uSizeFûe
-
uRódPos
);

301 i‡(
	`f£ek
(
fö
,
uRódPos
,
SEEK_SET
)!=0)

304 i‡(
	`‰ód
(
buf
,(
uI¡
)
uRódSize
,1,
fö
)!=1)

307 
i
=()
uRódSize
-3; (i--)>0;)

308 i‡(((*(
buf
+
i
))==0x50) && ((*(buf+i+1))==0x4b) &&

309 ((*(
buf
+
i
+2))==0x05) && ((*(buf+i+3))==0x06))

311 
uPosFound
 = 
uRódPos
+
i
;

315 i‡(
uPosFound
!=0)

318 
	`TRYFREE
(
buf
);

319  
uPosFound
;

320 
	}
}

331 
unzFûe
 
ZEXPORT
 
	$unzO≥n
(c⁄° *
∑th
)

333 
unz_s
 
us
;

334 
unz_s
 *
s
;

335 
uL⁄g
 
˚¡øl_pos
,
uL
;

336 
FILE
 * 
fö
 ;

338 
uL⁄g
 
numbî_disk
;

340 
uL⁄g
 
numbî_disk_wôh_CD
;

342 
uL⁄g
 
numbî_íåy_CD
;

346 
îr
=
UNZ_OK
;

348 i‡(
unz_c›yright
[0]!=' ')

349  
NULL
;

351 
fö
=
	`f›í
(
∑th
,"rb");

352 i‡(
fö
==
NULL
)

353  
NULL
;

355 
˚¡øl_pos
 = 
	`unzloˇl_SórchCíåÆDú
(
fö
);

356 i‡(
˚¡øl_pos
==0)

357 
îr
=
UNZ_ERRNO
;

359 i‡(
	`f£ek
(
fö
,
˚¡øl_pos
,
SEEK_SET
)!=0)

360 
îr
=
UNZ_ERRNO
;

363 i‡(
	`unzloˇl_gëL⁄g
(
fö
,&
uL
)!=
UNZ_OK
)

364 
îr
=
UNZ_ERRNO
;

367 i‡(
	`unzloˇl_gëSh‹t
(
fö
,&
numbî_disk
)!=
UNZ_OK
)

368 
îr
=
UNZ_ERRNO
;

371 i‡(
	`unzloˇl_gëSh‹t
(
fö
,&
numbî_disk_wôh_CD
)!=
UNZ_OK
)

372 
îr
=
UNZ_ERRNO
;

375 i‡(
	`unzloˇl_gëSh‹t
(
fö
,&
us
.
gi
.
numbî_íåy
)!=
UNZ_OK
)

376 
îr
=
UNZ_ERRNO
;

379 i‡(
	`unzloˇl_gëSh‹t
(
fö
,&
numbî_íåy_CD
)!=
UNZ_OK
)

380 
îr
=
UNZ_ERRNO
;

382 i‡((
numbî_íåy_CD
!=
us
.
gi
.
numbî_íåy
) ||

383 (
numbî_disk_wôh_CD
!=0) ||

384 (
numbî_disk
!=0))

385 
îr
=
UNZ_BADZIPFILE
;

388 i‡(
	`unzloˇl_gëL⁄g
(
fö
,&
us
.
size_˚¡øl_dú
)!=
UNZ_OK
)

389 
îr
=
UNZ_ERRNO
;

393 i‡(
	`unzloˇl_gëL⁄g
(
fö
,&
us
.
off£t_˚¡øl_dú
)!=
UNZ_OK
)

394 
îr
=
UNZ_ERRNO
;

397 i‡(
	`unzloˇl_gëSh‹t
(
fö
,&
us
.
gi
.
size_commít
)!=
UNZ_OK
)

398 
îr
=
UNZ_ERRNO
;

400 i‡((
˚¡øl_pos
<
us
.
off£t_˚¡øl_dú
+us.
size_˚¡øl_dú
) &&

401 (
îr
==
UNZ_OK
))

402 
îr
=
UNZ_BADZIPFILE
;

404 i‡(
îr
!=
UNZ_OK
)

406 
	`f˛o£
(
fö
);

407  
NULL
;

410 
us
.
fûe
=
fö
;

411 
us
.
byã_bef‹e_the_zùfûe
 = 
˚¡øl_pos
 -

412 (
us
.
off£t_˚¡øl_dú
+us.
size_˚¡øl_dú
);

413 
us
.
˚¡øl_pos
 = central_pos;

414 
us
.
pfûe_ö_zù_ªad
 = 
NULL
;

417 
s
=(
unz_s
*)
	`ALLOC
((unz_s));

418 *
s
=
us
;

419 
	`unzGoToFú°Fûe
((
unzFûe
)
s
);

420  (
unzFûe
)
s
;

421 
	}
}

429 
ZEXPORT
 
	$unzClo£
 (
unzFûe
 
fûe
)

431 
unz_s
* 
s
;

432 i‡(
fûe
==
NULL
)

433  
UNZ_PARAMERROR
;

434 
s
=(
unz_s
*)
fûe
;

436 i‡(
s
->
pfûe_ö_zù_ªad
!=
NULL
)

437 
	`unzClo£CuºítFûe
(
fûe
);

439 
	`f˛o£
(
s
->
fûe
);

440 
	`TRYFREE
(
s
);

441  
UNZ_OK
;

442 
	}
}

449 
ZEXPORT
 
	$unzGëGlobÆInfo
 (
unzFûe
 
fûe
, 
unz_globÆ_öfo
* 
pglobÆ_öfo
)

451 
unz_s
* 
s
;

452 i‡(
fûe
==
NULL
)

453  
UNZ_PARAMERROR
;

454 
s
=(
unz_s
*)
fûe
;

455 *
pglobÆ_öfo
=
s
->
gi
;

456  
UNZ_OK
;

457 
	}
}

463 
loˇl
 
	$unzloˇl_DosD©eToTmuD©e
 (
uL⁄g
 
ulDosD©e
, 
tm_unz
* 
±m
)

465 
uL⁄g
 
uD©e
;

466 
uD©e
 = (
uL⁄g
)(
ulDosD©e
>>16);

467 
±m
->
tm_mday
 = (
uI¡
)(
uD©e
&0x1f) ;

468 
±m
->
tm_m⁄
 = (
uI¡
)((((
uD©e
)&0x1E0)/0x20)-1) ;

469 
±m
->
tm_yór
 = (
uI¡
)(((
uD©e
&0x0FE00)/0x0200)+1980) ;

471 
±m
->
tm_hour
 = (
uI¡
Ë((
ulDosD©e
 &0xF800)/0x800);

472 
±m
->
tm_mö
 = (
uI¡
Ë((
ulDosD©e
&0x7E0)/0x20) ;

473 
±m
->
tm_£c
 = (
uI¡
Ë(2*(
ulDosD©e
&0x1f)) ;

474 
	}
}

479 
loˇl
 
unzloˇl_GëCuºítFûeInfoI¡î«l
 
OF
((
unzFûe
 
fûe
,

480 
unz_fûe_öfo
 *
pfûe_öfo
,

481 
unz_fûe_öfo_öã∫Æ


482 *
pfûe_öfo_öã∫Æ
,

483 *
szFûeName
,

484 
uL⁄g
 
fûeNameBuf„rSize
,

485 *
exåaFõld
,

486 
uL⁄g
 
exåaFõldBuf„rSize
,

487 *
szCommít
,

488 
uL⁄g
 
commítBuf„rSize
));

490 
loˇl
 
	gunzloˇl_GëCuºítFûeInfoI¡î«l


491 –
unzFûe
 
	gfûe
,

492 
unz_fûe_öfo
 *
	gpfûe_öfo
,

493 
unz_fûe_öfo_öã∫Æ
 *
	gpfûe_öfo_öã∫Æ
,

494 *
	gszFûeName
,

495 
uL⁄g
 
	gfûeNameBuf„rSize
,

496 *
	gexåaFõld
,

497 
uL⁄g
 
	gexåaFõldBuf„rSize
,

498 *
	gszCommít
,

499 
uL⁄g
 
	gcommítBuf„rSize
)

501 
unz_s
* 
	gs
;

502 
unz_fûe_öfo
 
	gfûe_öfo
;

503 
unz_fûe_öfo_öã∫Æ
 
	gfûe_öfo_öã∫Æ
;

504 
	gîr
=
UNZ_OK
;

505 
uL⁄g
 
	guMagic
;

506 
	glSìk
=0;

508 i‡(
	gfûe
==
NULL
)

509  
UNZ_PARAMERROR
;

510 
	gs
=(
unz_s
*)
fûe
;

511 i‡(
f£ek
(
s
->
fûe
,s->
pos_ö_˚¡øl_dú
+s->
byã_bef‹e_the_zùfûe
,
SEEK_SET
)!=0)

512 
îr
=
UNZ_ERRNO
;

516 i‡(
	gîr
==
UNZ_OK
)

518 i‡(
unzloˇl_gëL⁄g
(
s
->
fûe
,&
uMagic
Ë!
UNZ_OK
)

519 
îr
=
UNZ_ERRNO
;

520 i‡(
	guMagic
!=0x02014b50)

521 
îr
=
UNZ_BADZIPFILE
;

524 i‡(
unzloˇl_gëSh‹t
(
s
->
fûe
,&
fûe_öfo
.
vîsi⁄
Ë!
UNZ_OK
)

525 
îr
=
UNZ_ERRNO
;

527 i‡(
unzloˇl_gëSh‹t
(
s
->
fûe
,&
fûe_öfo
.
vîsi⁄_√eded
Ë!
UNZ_OK
)

528 
îr
=
UNZ_ERRNO
;

530 i‡(
unzloˇl_gëSh‹t
(
s
->
fûe
,&
fûe_öfo
.
Êag
Ë!
UNZ_OK
)

531 
îr
=
UNZ_ERRNO
;

533 i‡(
unzloˇl_gëSh‹t
(
s
->
fûe
,&
fûe_öfo
.
com¥essi⁄_mëhod
Ë!
UNZ_OK
)

534 
îr
=
UNZ_ERRNO
;

536 i‡(
unzloˇl_gëL⁄g
(
s
->
fûe
,&
fûe_öfo
.
dosD©e
Ë!
UNZ_OK
)

537 
îr
=
UNZ_ERRNO
;

539 
unzloˇl_DosD©eToTmuD©e
(
fûe_öfo
.
dosD©e
,&fûe_öfo.
tmu_d©e
);

541 i‡(
unzloˇl_gëL⁄g
(
s
->
fûe
,&
fûe_öfo
.
¸c
Ë!
UNZ_OK
)

542 
îr
=
UNZ_ERRNO
;

544 i‡(
unzloˇl_gëL⁄g
(
s
->
fûe
,&
fûe_öfo
.
com¥es£d_size
Ë!
UNZ_OK
)

545 
îr
=
UNZ_ERRNO
;

547 i‡(
unzloˇl_gëL⁄g
(
s
->
fûe
,&
fûe_öfo
.
uncom¥es£d_size
Ë!
UNZ_OK
)

548 
îr
=
UNZ_ERRNO
;

550 i‡(
unzloˇl_gëSh‹t
(
s
->
fûe
,&
fûe_öfo
.
size_fûíame
Ë!
UNZ_OK
)

551 
îr
=
UNZ_ERRNO
;

553 i‡(
unzloˇl_gëSh‹t
(
s
->
fûe
,&
fûe_öfo
.
size_fûe_exåa
Ë!
UNZ_OK
)

554 
îr
=
UNZ_ERRNO
;

556 i‡(
unzloˇl_gëSh‹t
(
s
->
fûe
,&
fûe_öfo
.
size_fûe_commít
Ë!
UNZ_OK
)

557 
îr
=
UNZ_ERRNO
;

559 i‡(
unzloˇl_gëSh‹t
(
s
->
fûe
,&
fûe_öfo
.
disk_num_°¨t
Ë!
UNZ_OK
)

560 
îr
=
UNZ_ERRNO
;

562 i‡(
unzloˇl_gëSh‹t
(
s
->
fûe
,&
fûe_öfo
.
öã∫Æ_Á
Ë!
UNZ_OK
)

563 
îr
=
UNZ_ERRNO
;

565 i‡(
unzloˇl_gëL⁄g
(
s
->
fûe
,&
fûe_öfo
.
exã∫Æ_Á
Ë!
UNZ_OK
)

566 
îr
=
UNZ_ERRNO
;

568 i‡(
unzloˇl_gëL⁄g
(
s
->
fûe
,&
fûe_öfo_öã∫Æ
.
off£t_curfûe
Ë!
UNZ_OK
)

569 
îr
=
UNZ_ERRNO
;

571 
	glSìk
+=
fûe_öfo
.
size_fûíame
;

572 i‡((
	gîr
==
UNZ_OK
Ë&& (
szFûeName
!=
NULL
))

574 
uL⁄g
 
uSizeRód
 ;

575 i‡(
	gfûe_öfo
.
	gsize_fûíame
<
	gfûeNameBuf„rSize
)

577 *(
	gszFûeName
+
	gfûe_öfo
.
	gsize_fûíame
)='\0';

578 
	guSizeRód
 = 
fûe_öfo
.
size_fûíame
;

581 
	guSizeRód
 = 
fûeNameBuf„rSize
;

583 i‡((
	gfûe_öfo
.
	gsize_fûíame
>0Ë&& (
	gfûeNameBuf„rSize
>0))

584 i‡(
‰ód
(
szFûeName
,(
uI¡
)
uSizeRód
,1,
s
->
fûe
)!=1)

585 
îr
=
UNZ_ERRNO
;

586 
	glSìk
 -
uSizeRód
;

590 i‡((
	gîr
==
UNZ_OK
Ë&& (
exåaFõld
!=
NULL
))

592 
uL⁄g
 
uSizeRód
 ;

593 i‡(
	gfûe_öfo
.
	gsize_fûe_exåa
<
	gexåaFõldBuf„rSize
)

594 
	guSizeRód
 = 
fûe_öfo
.
size_fûe_exåa
;

596 
	guSizeRód
 = 
exåaFõldBuf„rSize
;

598 i‡(
	glSìk
!=0)

600 i‡(
f£ek
(
s
->
fûe
,
lSìk
,
SEEK_CUR
)==0)

601 
lSìk
=0;

603 
	gîr
=
UNZ_ERRNO
;

605 i‡((
	gfûe_öfo
.
	gsize_fûe_exåa
>0Ë&& (
	gexåaFõldBuf„rSize
>0))

606 i‡(
‰ód
(
exåaFõld
,(
uI¡
)
uSizeRód
,1,
s
->
fûe
)!=1)

607 
îr
=
UNZ_ERRNO
;

608 
	glSìk
 +
fûe_öfo
.
size_fûe_exåa
 - 
uSizeRód
;

611 
	glSìk
+=
fûe_öfo
.
size_fûe_exåa
;

614 i‡((
	gîr
==
UNZ_OK
Ë&& (
szCommít
!=
NULL
))

616 
uL⁄g
 
uSizeRód
 ;

617 i‡(
	gfûe_öfo
.
	gsize_fûe_commít
<
	gcommítBuf„rSize
)

619 *(
	gszCommít
+
	gfûe_öfo
.
	gsize_fûe_commít
)='\0';

620 
	guSizeRód
 = 
fûe_öfo
.
size_fûe_commít
;

623 
	guSizeRód
 = 
commítBuf„rSize
;

625 i‡(
	glSìk
!=0)

627 i‡(
f£ek
(
s
->
fûe
,
lSìk
,
SEEK_CUR
)==0)

628 
lSìk
=0;

630 
	gîr
=
UNZ_ERRNO
;

632 i‡((
	gfûe_öfo
.
	gsize_fûe_commít
>0Ë&& (
	gcommítBuf„rSize
>0))

633 i‡(
‰ód
(
szCommít
,(
uI¡
)
uSizeRód
,1,
s
->
fûe
)!=1)

634 
îr
=
UNZ_ERRNO
;

635 
	glSìk
+=
fûe_öfo
.
size_fûe_commít
 - 
uSizeRód
;

638 
	glSìk
+=
fûe_öfo
.
size_fûe_commít
;

640 i‡((
	gîr
==
UNZ_OK
Ë&& (
pfûe_öfo
!=
NULL
))

641 *
pfûe_öfo
=
fûe_öfo
;

643 i‡((
	gîr
==
UNZ_OK
Ë&& (
pfûe_öfo_öã∫Æ
!=
NULL
))

644 *
pfûe_öfo_öã∫Æ
=
fûe_öfo_öã∫Æ
;

646  
	gîr
;

656 
ZEXPORT
 
unzGëCuºítFûeInfo


657 –
unzFûe
 
fûe
,

658 
unz_fûe_öfo
 *
pfûe_öfo
,

659 *
szFûeName
,

660 
uL⁄g
 
fûeNameBuf„rSize
,

661 *
exåaFõld
,

662 
uL⁄g
 
exåaFõldBuf„rSize
,

663 *
szCommít
,

664 
uL⁄g
 
commítBuf„rSize


667  
unzloˇl_GëCuºítFûeInfoI¡î«l
(
fûe
,
pfûe_öfo
,
NULL
,

668 
szFûeName
,
fûeNameBuf„rSize
,

669 
exåaFõld
,
exåaFõldBuf„rSize
,

670 
szCommít
,
commítBuf„rSize
);

677 
ZEXPORT
 
	$unzGoToFú°Fûe
 (
unzFûe
 
fûe
)

679 
îr
=
UNZ_OK
;

680 
unz_s
* 
s
;

681 i‡(
fûe
==
NULL
)

682  
UNZ_PARAMERROR
;

683 
s
=(
unz_s
*)
fûe
;

684 
s
->
pos_ö_˚¡øl_dú
=s->
off£t_˚¡øl_dú
;

685 
s
->
num_fûe
=0;

686 
îr
=
	`unzloˇl_GëCuºítFûeInfoI¡î«l
(
fûe
,&
s
->
cur_fûe_öfo
,

687 &
s
->
cur_fûe_öfo_öã∫Æ
,

688 
NULL
,0,NULL,0,NULL,0);

689 
s
->
cuºít_fûe_ok
 = (
îr
 =
UNZ_OK
);

690  
îr
;

691 
	}
}

699 
ZEXPORT
 
	$unzGoToNextFûe
 (
unzFûe
 
fûe
)

701 
unz_s
* 
s
;

702 
îr
;

704 i‡(
fûe
==
NULL
)

705  
UNZ_PARAMERROR
;

706 
s
=(
unz_s
*)
fûe
;

707 i‡(!
s
->
cuºít_fûe_ok
)

708  
UNZ_END_OF_LIST_OF_FILE
;

709 i‡(
s
->
num_fûe
+1==s->
gi
.
numbî_íåy
)

710  
UNZ_END_OF_LIST_OF_FILE
;

712 
s
->
pos_ö_˚¡øl_dú
 +
SIZECENTRALDIRITEM
 + s->
cur_fûe_öfo
.
size_fûíame
 +

713 
s
->
cur_fûe_öfo
.
size_fûe_exåa
 + s->cur_fûe_öfo.
size_fûe_commít
 ;

714 
s
->
num_fûe
++;

715 
îr
 = 
	`unzloˇl_GëCuºítFûeInfoI¡î«l
(
fûe
,&
s
->
cur_fûe_öfo
,

716 &
s
->
cur_fûe_öfo_öã∫Æ
,

717 
NULL
,0,NULL,0,NULL,0);

718 
s
->
cuºít_fûe_ok
 = (
îr
 =
UNZ_OK
);

719  
îr
;

720 
	}
}

731 
ZEXPORT
 
unzLoˇãFûe


732 –
unzFûe
 
fûe
,

733 c⁄° *
szFûeName
,

734 
iCa£Sísôivôy


737 
unz_s
* 
s
;

738 
îr
;

741 
uL⁄g
 
num_fûeSaved
;

742 
uL⁄g
 
pos_ö_˚¡øl_dúSaved
;

745 i‡(
fûe
==
NULL
)

746  
UNZ_PARAMERROR
;

748 i‡(
°æí
(
szFûeName
)>=
UNZ_MAXFILENAMEINZIP
)

749  
UNZ_PARAMERROR
;

751 
s
=(
unz_s
*)
fûe
;

752 i‡(!
s
->
cuºít_fûe_ok
)

753  
UNZ_END_OF_LIST_OF_FILE
;

755 
num_fûeSaved
 = 
s
->
num_fûe
;

756 
pos_ö_˚¡øl_dúSaved
 = 
s
->
pos_ö_˚¡øl_dú
;

758 
îr
 = 
unzGoToFú°Fûe
(
fûe
);

760 
îr
 =
UNZ_OK
)

762 
szCuºítFûeName
[
UNZ_MAXFILENAMEINZIP
+1];

763 
unzGëCuºítFûeInfo
(
fûe
,
NULL
,

764 
szCuºítFûeName
,(szCurrentFileName)-1,

765 
NULL
,0,NULL,0);

766 i‡(
unzSåögFûeNameCom∑ª
(
szCuºítFûeName
,

767 
szFûeName
,
iCa£Sísôivôy
)==0)

768  
UNZ_OK
;

769 
îr
 = 
unzGoToNextFûe
(
fûe
);

772 
s
->
num_fûe
 = 
num_fûeSaved
 ;

773 
s
->
pos_ö_˚¡øl_dú
 = 
pos_ö_˚¡øl_dúSaved
 ;

774  
îr
;

785 
loˇl
 
unzloˇl_CheckCuºítFûeCohîícyHódî


786 –
unz_s
* 
s
,

787 
uI¡
* 
piSizeV¨
,

788 
uL⁄g
 *
poff£t_loˇl_exåafõld
,

789 
uI¡
 *
psize_loˇl_exåafõld


792 
uL⁄g
 
uMagic
,
uD©a
,
uFœgs
;

793 
uL⁄g
 
size_fûíame
;

794 
uL⁄g
 
size_exåa_fõld
;

795 
îr
=
UNZ_OK
;

797 *
piSizeV¨
 = 0;

798 *
poff£t_loˇl_exåafõld
 = 0;

799 *
psize_loˇl_exåafõld
 = 0;

801 i‡(
f£ek
(
s
->
fûe
,s->
cur_fûe_öfo_öã∫Æ
.
off£t_curfûe
 +

802 
s
->
byã_bef‹e_the_zùfûe
,
SEEK_SET
)!=0)

803  
UNZ_ERRNO
;

806 i‡(
îr
==
UNZ_OK
)

808 i‡(
unzloˇl_gëL⁄g
(
s
->
fûe
,&
uMagic
Ë!
UNZ_OK
)

809 
îr
=
UNZ_ERRNO
;

810 i‡(
uMagic
!=0x04034b50)

811 
îr
=
UNZ_BADZIPFILE
;

814 i‡(
unzloˇl_gëSh‹t
(
s
->
fûe
,&
uD©a
Ë!
UNZ_OK
)

815 
îr
=
UNZ_ERRNO
;

820 i‡(
unzloˇl_gëSh‹t
(
s
->
fûe
,&
uFœgs
Ë!
UNZ_OK
)

821 
îr
=
UNZ_ERRNO
;

823 i‡(
unzloˇl_gëSh‹t
(
s
->
fûe
,&
uD©a
Ë!
UNZ_OK
)

824 
îr
=
UNZ_ERRNO
;

825 i‡((
îr
==
UNZ_OK
Ë&& (
uD©a
!=
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
))

826 
îr
=
UNZ_BADZIPFILE
;

828 i‡((
îr
==
UNZ_OK
Ë&& (
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
!=0) &&

829 (
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
!=
Z_DEFLATED
))

830 
îr
=
UNZ_BADZIPFILE
;

832 i‡(
unzloˇl_gëL⁄g
(
s
->
fûe
,&
uD©a
Ë!
UNZ_OK
)

833 
îr
=
UNZ_ERRNO
;

835 i‡(
unzloˇl_gëL⁄g
(
s
->
fûe
,&
uD©a
Ë!
UNZ_OK
)

836 
îr
=
UNZ_ERRNO
;

837 i‡((
îr
==
UNZ_OK
Ë&& (
uD©a
!=
s
->
cur_fûe_öfo
.
¸c
) &&

838 ((
uFœgs
 & 8)==0))

839 
îr
=
UNZ_BADZIPFILE
;

841 i‡(
unzloˇl_gëL⁄g
(
s
->
fûe
,&
uD©a
Ë!
UNZ_OK
)

842 
îr
=
UNZ_ERRNO
;

843 i‡((
îr
==
UNZ_OK
Ë&& (
uD©a
!=
s
->
cur_fûe_öfo
.
com¥es£d_size
) &&

844 ((
uFœgs
 & 8)==0))

845 
îr
=
UNZ_BADZIPFILE
;

847 i‡(
unzloˇl_gëL⁄g
(
s
->
fûe
,&
uD©a
Ë!
UNZ_OK
)

848 
îr
=
UNZ_ERRNO
;

849 i‡((
îr
==
UNZ_OK
Ë&& (
uD©a
!=
s
->
cur_fûe_öfo
.
uncom¥es£d_size
) &&

850 ((
uFœgs
 & 8)==0))

851 
îr
=
UNZ_BADZIPFILE
;

854 i‡(
unzloˇl_gëSh‹t
(
s
->
fûe
,&
size_fûíame
Ë!
UNZ_OK
)

855 
îr
=
UNZ_ERRNO
;

856 i‡((
îr
==
UNZ_OK
Ë&& (
size_fûíame
!=
s
->
cur_fûe_öfo
.size_filename))

857 
îr
=
UNZ_BADZIPFILE
;

859 *
piSizeV¨
 +(
uI¡
)
size_fûíame
;

861 i‡(
unzloˇl_gëSh‹t
(
s
->
fûe
,&
size_exåa_fõld
Ë!
UNZ_OK
)

862 
îr
=
UNZ_ERRNO
;

863 *
poff£t_loˇl_exåafõld

s
->
cur_fûe_öfo_öã∫Æ
.
off£t_curfûe
 +

864 
SIZEZIPLOCALHEADER
 + 
size_fûíame
;

865 *
psize_loˇl_exåafõld
 = (
uI¡
)
size_exåa_fõld
;

867 *
piSizeV¨
 +(
uI¡
)
size_exåa_fõld
;

869  
îr
;

876 
ZEXPORT
 
	$unzO≥nCuºítFûe
 (
unzFûe
 
fûe
)

878 
îr
=
UNZ_OK
;

879 
St‹e
;

880 
uI¡
 
iSizeV¨
;

881 
unz_s
* 
s
;

882 
fûe_ö_zù_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

883 
uL⁄g
 
off£t_loˇl_exåafõld
;

884 
uI¡
 
size_loˇl_exåafõld
;

886 i‡(
fûe
==
NULL
)

887  
UNZ_PARAMERROR
;

888 
s
=(
unz_s
*)
fûe
;

889 i‡(!
s
->
cuºít_fûe_ok
)

890  
UNZ_PARAMERROR
;

892 i‡(
s
->
pfûe_ö_zù_ªad
 !
NULL
)

893 
	`unzClo£CuºítFûe
(
fûe
);

895 i‡(
	`unzloˇl_CheckCuºítFûeCohîícyHódî
(
s
,&
iSizeV¨
,

896 &
off£t_loˇl_exåafõld
,&
size_loˇl_exåafõld
)!=
UNZ_OK
)

897  
UNZ_BADZIPFILE
;

899 
pfûe_ö_zù_ªad_öfo
 = (
fûe_ö_zù_ªad_öfo_s
*)

900 
	`ALLOC
((
fûe_ö_zù_ªad_öfo_s
));

901 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

902  
UNZ_INTERNALERROR
;

904 
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
=(*)
	`ALLOC
(
UNZ_BUFSIZE
);

905 
pfûe_ö_zù_ªad_öfo
->
off£t_loˇl_exåafõld
 = offset_local_extrafield;

906 
pfûe_ö_zù_ªad_öfo
->
size_loˇl_exåafõld
 = size_local_extrafield;

907 
pfûe_ö_zù_ªad_öfo
->
pos_loˇl_exåafõld
=0;

909 i‡(
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
==
NULL
)

911 
	`TRYFREE
(
pfûe_ö_zù_ªad_öfo
);

912  
UNZ_INTERNALERROR
;

915 
pfûe_ö_zù_ªad_öfo
->
°ªam_öôüli£d
=0;

917 i‡((
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
!=0) &&

918 (
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
!=
Z_DEFLATED
))

919 
îr
=
UNZ_BADZIPFILE
;

920 
St‹e
 = 
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
==0;

922 
pfûe_ö_zù_ªad_öfo
->
¸c32_waô
=
s
->
cur_fûe_öfo
.
¸c
;

923 
pfûe_ö_zù_ªad_öfo
->
¸c32
=0;

924 
pfûe_ö_zù_ªad_öfo
->
com¥essi⁄_mëhod
 =

925 
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
;

926 
pfûe_ö_zù_ªad_öfo
->
fûe
=
s
->file;

927 
pfûe_ö_zù_ªad_öfo
->
byã_bef‹e_the_zùfûe
=
s
->byte_before_the_zipfile;

929 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
 = 0;

931 i‡(!
St‹e
)

933 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
zÆloc
 = (
Æloc_func
)0;

934 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
z‰ì
 = (
‰ì_func
)0;

935 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
›aque
 = (
voidpf
)0;

937 
îr
=
	`öÊ©eInô2
(&
pfûe_ö_zù_ªad_öfo
->
°ªam
, -
MAX_WBITS
);

938 i‡(
îr
 =
Z_OK
)

939 
pfûe_ö_zù_ªad_öfo
->
°ªam_öôüli£d
=1;

948 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
 =

949 
s
->
cur_fûe_öfo
.
com¥es£d_size
 ;

950 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
 =

951 
s
->
cur_fûe_öfo
.
uncom¥es£d_size
 ;

954 
pfûe_ö_zù_ªad_öfo
->
pos_ö_zùfûe
 =

955 
s
->
cur_fûe_öfo_öã∫Æ
.
off£t_curfûe
 + 
SIZEZIPLOCALHEADER
 +

956 
iSizeV¨
;

958 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 = (
uI¡
)0;

961 
s
->
pfûe_ö_zù_ªad
 = 
pfûe_ö_zù_ªad_öfo
;

962  
UNZ_OK
;

963 
	}
}

976 
ZEXPORT
 
unzRódCuºítFûe


977 –
unzFûe
 
fûe
,

978 
voidp
 
buf
,

979 
Àn


982 
îr
=
UNZ_OK
;

983 
uI¡
 
iRód
 = 0;

984 
unz_s
* 
s
;

985 
fûe_ö_zù_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

986 i‡(
fûe
==
NULL
)

987  
UNZ_PARAMERROR
;

988 
s
=(
unz_s
*)
fûe
;

989 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

991 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

992  
UNZ_PARAMERROR
;

995 i‡((
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
 =
NULL
))

996  
UNZ_END_OF_LIST_OF_FILE
;

997 i‡(
Àn
==0)

1000 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
 = (
Byãf
*)
buf
;

1002 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 = (
uI¡
)
Àn
;

1004 i‡(
Àn
>
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
)

1005 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 =

1006 (
uI¡
)
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
;

1008 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
>0)

1010 i‡((
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
==0) &&

1011 (
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
>0))

1013 
uI¡
 
uRódThis
 = 
UNZ_BUFSIZE
;

1014 i‡(
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
<
uRódThis
)

1015 
uRódThis
 = (
uI¡
)
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
;

1016 i‡(
uRódThis
 == 0)

1017  
UNZ_EOF
;

1018 i‡(
f£ek
(
pfûe_ö_zù_ªad_öfo
->
fûe
,

1019 
pfûe_ö_zù_ªad_öfo
->
pos_ö_zùfûe
 +

1020 
pfûe_ö_zù_ªad_öfo
->
byã_bef‹e_the_zùfûe
,
SEEK_SET
)!=0)

1021  
UNZ_ERRNO
;

1022 i‡(
‰ód
(
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
,
uRódThis
,1,

1023 
pfûe_ö_zù_ªad_öfo
->
fûe
)!=1)

1024  
UNZ_ERRNO
;

1025 
pfûe_ö_zù_ªad_öfo
->
pos_ö_zùfûe
 +
uRódThis
;

1027 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
-=
uRódThis
;

1029 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_ö
 =

1030 (
Byãf
*)
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
;

1031 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 = (
uI¡
)
uRódThis
;

1034 i‡(
pfûe_ö_zù_ªad_öfo
->
com¥essi⁄_mëhod
==0)

1036 
uI¡
 
uDoC›y
,
i
 ;

1037 i‡(
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 <

1038 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
)

1039 
uDoC›y
 = 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 ;

1041 
uDoC›y
 = 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 ;

1043 
i
=0;i<
uDoC›y
;i++)

1044 *(
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
+
i
) =

1045 *(
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_ö
+
i
);

1047 
pfûe_ö_zù_ªad_öfo
->
¸c32
 = crc32(pfile_in_zip_read_info->crc32,

1048 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
,

1049 
uDoC›y
);

1050 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
-=
uDoC›y
;

1051 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 -
uDoC›y
;

1052 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 -
uDoC›y
;

1053 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
 +
uDoC›y
;

1054 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_ö
 +
uDoC›y
;

1055 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
 +
uDoC›y
;

1056 
iRód
 +
uDoC›y
;

1060 
uL⁄g
 
uTŸÆOutBef‹e
,
uTŸÆOutA·î
;

1061 c⁄° 
Byãf
 *
bufBef‹e
;

1062 
uL⁄g
 
uOutThis
;

1063 
Êush
=
Z_SYNC_FLUSH
;

1065 
uTŸÆOutBef‹e
 = 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
;

1066 
bufBef‹e
 = 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
;

1074 
îr
=
öÊ©e
(&
pfûe_ö_zù_ªad_öfo
->
°ªam
,
Êush
);

1076 
uTŸÆOutA·î
 = 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
;

1077 
uOutThis
 = 
uTŸÆOutA·î
-
uTŸÆOutBef‹e
;

1079 
pfûe_ö_zù_ªad_öfo
->
¸c32
 =

1080 
¸c32
(
pfûe_ö_zù_ªad_öfo
->¸c32,
bufBef‹e
,

1081 (
uI¡
)(
uOutThis
));

1083 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
 -=

1084 
uOutThis
;

1086 
iRód
 +(
uI¡
)(
uTŸÆOutA·î
 - 
uTŸÆOutBef‹e
);

1088 i‡(
îr
==
Z_STREAM_END
)

1089  (
iRód
==0Ë? 
UNZ_EOF
 : iRead;

1090 i‡(
îr
!=
Z_OK
)

1095 i‡(
îr
==
Z_OK
)

1096  
iRód
;

1097  
îr
;

1104 
z_off_t
 
ZEXPORT
 
	$unzãŒ
 (
unzFûe
 
fûe
)

1106 
unz_s
* 
s
;

1107 
fûe_ö_zù_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1108 i‡(
fûe
==
NULL
)

1109  
UNZ_PARAMERROR
;

1110 
s
=(
unz_s
*)
fûe
;

1111 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

1113 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1114  
UNZ_PARAMERROR
;

1116  (
z_off_t
)
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
;

1117 
	}
}

1123 
ZEXPORT
 
	$unzeof
 (
unzFûe
 
fûe
)

1125 
unz_s
* 
s
;

1126 
fûe_ö_zù_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1127 i‡(
fûe
==
NULL
)

1128  
UNZ_PARAMERROR
;

1129 
s
=(
unz_s
*)
fûe
;

1130 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

1132 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1133  
UNZ_PARAMERROR
;

1135 i‡(
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
 == 0)

1139 
	}
}

1155 
ZEXPORT
 
unzGëLoˇlExåafõld


1156 –
unzFûe
 
fûe
,

1157 
voidp
 
buf
,

1158 
Àn


1161 
unz_s
* 
s
;

1162 
fûe_ö_zù_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1163 
uI¡
 
ªad_now
;

1164 
uL⁄g
 
size_to_ªad
;

1166 i‡(
fûe
==
NULL
)

1167  
UNZ_PARAMERROR
;

1168 
s
=(
unz_s
*)
fûe
;

1169 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

1171 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1172  
UNZ_PARAMERROR
;

1174 
size_to_ªad
 = (
pfûe_ö_zù_ªad_öfo
->
size_loˇl_exåafõld
 -

1175 
pfûe_ö_zù_ªad_öfo
->
pos_loˇl_exåafõld
);

1177 i‡(
buf
==
NULL
)

1178  ()
size_to_ªad
;

1180 i‡(
Àn
>
size_to_ªad
)

1181 
ªad_now
 = (
uI¡
)
size_to_ªad
;

1183 
ªad_now
 = (
uI¡
)
Àn
 ;

1185 i‡(
ªad_now
==0)

1188 i‡(
f£ek
(
pfûe_ö_zù_ªad_öfo
->
fûe
,

1189 
pfûe_ö_zù_ªad_öfo
->
off£t_loˇl_exåafõld
 +

1190 
pfûe_ö_zù_ªad_öfo
->
pos_loˇl_exåafõld
,
SEEK_SET
)!=0)

1191  
UNZ_ERRNO
;

1193 i‡(
‰ód
(
buf
,(
uI¡
)
size_to_ªad
,1,
pfûe_ö_zù_ªad_öfo
->
fûe
)!=1)

1194  
UNZ_ERRNO
;

1196  ()
ªad_now
;

1203 
ZEXPORT
 
	$unzClo£CuºítFûe
 (
unzFûe
 
fûe
)

1205 
îr
=
UNZ_OK
;

1207 
unz_s
* 
s
;

1208 
fûe_ö_zù_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1209 i‡(
fûe
==
NULL
)

1210  
UNZ_PARAMERROR
;

1211 
s
=(
unz_s
*)
fûe
;

1212 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

1214 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1215  
UNZ_PARAMERROR
;

1218 i‡(
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
 == 0)

1220 i‡(
pfûe_ö_zù_ªad_öfo
->
¸c32
 !pfûe_ö_zù_ªad_öfo->
¸c32_waô
)

1221 
îr
=
UNZ_CRCERROR
;

1225 
	`TRYFREE
(
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
);

1226 
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
 = 
NULL
;

1227 i‡(
pfûe_ö_zù_ªad_öfo
->
°ªam_öôüli£d
)

1228 
	`öÊ©eEnd
(&
pfûe_ö_zù_ªad_öfo
->
°ªam
);

1230 
pfûe_ö_zù_ªad_öfo
->
°ªam_öôüli£d
 = 0;

1231 
	`TRYFREE
(
pfûe_ö_zù_ªad_öfo
);

1233 
s
->
pfûe_ö_zù_ªad
=
NULL
;

1235  
îr
;

1236 
	}
}

1244 
ZEXPORT
 
unzGëGlobÆCommít


1245 –
unzFûe
 
fûe
,

1246 *
szCommít
,

1247 
uL⁄g
 
uSizeBuf


1250 
unz_s
* 
s
;

1251 
uL⁄g
 
uRódThis
 ;

1252 i‡(
fûe
==
NULL
)

1253  
UNZ_PARAMERROR
;

1254 
s
=(
unz_s
*)
fûe
;

1256 
uRódThis
 = 
uSizeBuf
;

1257 i‡(
uRódThis
>
s
->
gi
.
size_commít
)

1258 
uRódThis
 = 
s
->
gi
.
size_commít
;

1260 i‡(
f£ek
(
s
->
fûe
,s->
˚¡øl_pos
+22,
SEEK_SET
)!=0)

1261  
UNZ_ERRNO
;

1263 i‡(
uRódThis
>0)

1265 *
szCommít
='\0';

1266 i‡(
‰ód
(
szCommít
,(
uI¡
)
uRódThis
,1,
s
->
fûe
)!=1)

1267  
UNZ_ERRNO
;

1270 i‡((
szCommít
 !
NULL
Ë&& (
uSizeBuf
 > 
s
->
gi
.
size_commít
))

1271 *(
szCommít
+
s
->
gi
.
size_commít
)='\0';

1272  ()
uRódThis
;

	@emucore/unzip.h

41 #i‚de‡
_unz_H


42 
	#_unz_H


	)

44 #ifde‡
__˝lu•lus


48 #i‚de‡
_ZLIB_H


49 
	~<zlib.h
>

52 #i‡
deföed
(
STRICTUNZIP
Ë|| deföed(
STRICTZIPUNZIP
)

55 
	sTagunzFûe__
 { 
unu£d
; } 
	tunzFûe__
;

56 
unzFûe__
 *
	tunzFûe
;

58 
voidp
 
	tunzFûe
;

62 
	#UNZ_OK
 (0)

	)

63 
	#UNZ_END_OF_LIST_OF_FILE
 (-100)

	)

64 
	#UNZ_ERRNO
 (
Z_ERRNO
)

	)

65 
	#UNZ_EOF
 (0)

	)

66 
	#UNZ_PARAMERROR
 (-102)

	)

67 
	#UNZ_BADZIPFILE
 (-103)

	)

68 
	#UNZ_INTERNALERROR
 (-104)

	)

69 
	#UNZ_CRCERROR
 (-105)

	)

72 
	stm_unz_s


74 
uI¡
 
	gtm_£c
;

75 
uI¡
 
	gtm_mö
;

76 
uI¡
 
	gtm_hour
;

77 
uI¡
 
	gtm_mday
;

78 
uI¡
 
	gtm_m⁄
;

79 
uI¡
 
	gtm_yór
;

80 } 
	ttm_unz
;

84 
	sunz_globÆ_öfo_s


86 
uL⁄g
 
	gnumbî_íåy
;

88 
uL⁄g
 
	gsize_commít
;

89 } 
	tunz_globÆ_öfo
;

93 
	sunz_fûe_öfo_s


95 
uL⁄g
 
	gvîsi⁄
;

96 
uL⁄g
 
	gvîsi⁄_√eded
;

97 
uL⁄g
 
	gÊag
;

98 
uL⁄g
 
	gcom¥essi⁄_mëhod
;

99 
uL⁄g
 
	gdosD©e
;

100 
uL⁄g
 
	g¸c
;

101 
uL⁄g
 
	gcom¥es£d_size
;

102 
uL⁄g
 
	guncom¥es£d_size
;

103 
uL⁄g
 
	gsize_fûíame
;

104 
uL⁄g
 
	gsize_fûe_exåa
;

105 
uL⁄g
 
	gsize_fûe_commít
;

107 
uL⁄g
 
	gdisk_num_°¨t
;

108 
uL⁄g
 
	göã∫Æ_Á
;

109 
uL⁄g
 
	gexã∫Æ_Á
;

111 
tm_unz
 
	gtmu_d©e
;

112 } 
	tunz_fûe_öfo
;

114 
ZEXPORT
 
unzSåögFûeNameCom∑ª
 
OF
 ((c⁄° * 
fûeName1
,

115 c⁄° * 
fûeName2
,

116 
iCa£Sísôivôy
));

127 
unzFûe
 
ZEXPORT
 
unzO≥n
 
OF
((c⁄° *
∑th
));

138 
ZEXPORT
 
unzClo£
 
OF
((
unzFûe
 
fûe
));

145 
ZEXPORT
 
unzGëGlobÆInfo
 
OF
((
unzFûe
 
fûe
,

146 
unz_globÆ_öfo
 *
pglobÆ_öfo
));

153 
ZEXPORT
 
unzGëGlobÆCommít
 
OF
((
unzFûe
 
fûe
,

154 *
szCommít
,

155 
uL⁄g
 
uSizeBuf
));

166 
ZEXPORT
 
unzGoToFú°Fûe
 
OF
((
unzFûe
 
fûe
));

172 
ZEXPORT
 
unzGoToNextFûe
 
OF
((
unzFûe
 
fûe
));

179 
ZEXPORT
 
unzLoˇãFûe
 
OF
((
unzFûe
 
fûe
,

180 c⁄° *
szFûeName
,

181 
iCa£Sísôivôy
));

192 
ZEXPORT
 
unzGëCuºítFûeInfo
 
OF
((
unzFûe
 
fûe
,

193 
unz_fûe_öfo
 *
pfûe_öfo
,

194 *
szFûeName
,

195 
uL⁄g
 
fûeNameBuf„rSize
,

196 *
exåaFõld
,

197 
uL⁄g
 
exåaFõldBuf„rSize
,

198 *
szCommít
,

199 
uL⁄g
 
commítBuf„rSize
));

218 
ZEXPORT
 
unzO≥nCuºítFûe
 
OF
((
unzFûe
 
fûe
));

224 
ZEXPORT
 
unzClo£CuºítFûe
 
OF
((
unzFûe
 
fûe
));

231 
ZEXPORT
 
unzRódCuºítFûe
 
OF
((
unzFûe
 
fûe
,

232 
voidp
 
buf
,

233 
Àn
));

245 
z_off_t
 
ZEXPORT
 
unzãŒ
 
OF
((
unzFûe
 
fûe
));

250 
ZEXPORT
 
unzeof
 
OF
((
unzFûe
 
fûe
));

255 
ZEXPORT
 
unzGëLoˇlExåafõld
 
OF
((
unzFûe
 
fûe
,

256 
voidp
 
buf
,

257 
Àn
));

271 #ifde‡
__˝lu•lus


	@global.h

1 #i‚de‡
_GLOBAL_H_


2 
	#_GLOBAL_H_


	)

4 
	~"Aèri.h
"

6 
	#ATARI_WIDTH
 320

	)

7 
	#ATARI_HEIGHT
 300

	)

8 
	#SNAP_WIDTH
 140

	)

9 
	#SNAP_HEIGHT
 100

	)

	@psp/FSNodePSP.cpp

22 
	~"FSNode.hxx
"

24 
	~<p•debug.h
>

25 
	~<p•iofûemgr.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<s°ªam
>

34 ˛as†
	cPSPFûesy°emNode
 : 
public
 
Ab°ø˘Fûesy°emNode


36 
public
:

37 
PSPFûesy°emNode
();

38 
PSPFûesy°emNode
(c⁄° 
°rög
& 
∑th
);

39 
PSPFûesy°emNode
(c⁄° PSPFûesy°emNode* 
node
);

41 
vútuÆ
 
°rög
 
	$di•œyName
(Ëc⁄° {  
_di•œyName
; }

42 
vútuÆ
 
boﬁ
 
	$isVÆid
(Ëc⁄° {  
_isVÆid
; 
	}
}

43 
vútuÆ
 
boﬁ
 
	$isDúe˘‹y
(Ëc⁄° {  
_isDúe˘‹y
; 
	}
}

44 
vútuÆ
 
°rög
 
	$∑th
(Ëc⁄° {  
_∑th
; 
	}
}

46 
vútuÆ
 
FSLi°
 
	$li°Dú
(
Li°Mode
 
mode
 = 
kLi°Dúe˘‹õsO∆y
) const;

47 
vútuÆ
 
Ab°ø˘Fûesy°emNode
* 
	$∑ª¡
() const;

48 
	`°rùTaûögSœshes
(* 
buf
);

49 
¥Ÿe˘ed
:

50 
°rög
 
_di•œyName
;

51 
boﬁ
 
_isDúe˘‹y
;

52 
boﬁ
 
_isVÆid
;

53 
°rög
 
_∑th
;

54 
	}
};

57 c⁄° * 
	$œ°P©hComp⁄ít
(c⁄° 
°rög
& 
°r
)

59 c⁄° *
°¨t
 = 
°r
.
	`c_°r
();

60 c⁄° *
cur
 = 
°¨t
 + 
°r
.
	`size
() - 2;

62 
cur
 > 
°¨t
 && *cur != '/')

63 --
cur
;

65  
cur
+1;

66 
	}
}

68 
	$°rùTaûögSœshes
(* 
buf
)

70 * 
±r
;

71 
±r
 = 
buf
 + 
	`°æí
(buf)-1;

72 *(
±r
)=='/') *(ptr--)='\0';

73 
	}
}

75 
°rög
 
	$vÆid©eP©h
(c⁄° 
°rög
& 
p
)

77 
°rög
 
∑th
 = 
p
;

78 if(
p
.
	`size
() <= 0 ||Ö[0] == '/')

79 
∑th
 = "ms0:/";

81  
∑th
;

82 
	}
}

85 
Ab°ø˘Fûesy°emNode
* 
	gFûesy°emNode
::
	$gëRoŸ
()

87  
√w
 
	`PSPFûesy°emNode
();

88 
	}
}

91 
Ab°ø˘Fûesy°emNode
* 
	gFûesy°emNode
::
	$gëNodeF‹P©h
(c⁄° 
°rög
& 
∑th
)

93  
√w
 
	`PSPFûesy°emNode
(
	`vÆid©eP©h
(
∑th
));

94 
	}
}

97 
	gPSPFûesy°emNode
::
	$PSPFûesy°emNode
()

99 c⁄° 
buf
[] = "ms0:/stella/";

100 
_∑th
 = 
buf
;

101 
_di•œyName
 = 
	`°rög
("stella");

102 
_isVÆid
 = 
åue
;

103 
_isDúe˘‹y
 = 
åue
;

104 
	}
}

107 
	gPSPFûesy°emNode
::
	$PSPFûesy°emNode
(c⁄° 
°rög
& 
p
)

109 
°rög
 
∑th
 = 
	`vÆid©eP©h
(
p
);

111 
I¡32
 
Àn
 = 0, 
off£t
 = 
∑th
.
	`size
();

112 #i‚de‡
LINUX_MODE


113 
S˚IoSèt
 
°
;

115 
°©
 
°
;

118 
_∑th
 = 
∑th
;

121 c⁄° *
°r
 = 
∑th
.
	`c_°r
();

122 
off£t
 > 0 && 
°r
[offset-1] == '/')

123 
off£t
--;

124 
off£t
 > 0 && 
°r
[offset-1] != '/')

126 
Àn
++;

127 
off£t
--;

129 
_di•œyName
 = 
	`°rög
(
°r
 + 
off£t
, 
Àn
);

134 #i‚de‡
LINUX_MODE


135 
_isVÆid
 = (0 =
	`s˚IoGë°©
(
_∑th
.
	`c_°r
(), &
°
));

136 
_isDúe˘‹y
 = 
	`FIO_S_ISDIR
(
°
.
°_mode
);

138 
_isVÆid
 = (0 =
	`°©
(
_∑th
.
	`c_°r
(), &
°
));

139 
_isDúe˘‹y
 = 
	`S_ISDIR
(
°
.
°_mode
);

142 
	}
}

145 
	gPSPFûesy°emNode
::
	$PSPFûesy°emNode
(c⁄° 
PSPFûesy°emNode
* 
node
)

147 
_di•œyName
 = 
node
->_displayName;

148 
_isVÆid
 = 
node
->_isValid;

149 
_isDúe˘‹y
 = 
node
->_isDirectory;

150 
_∑th
 = 
node
->_path;

151 
	}
}

154 
FSLi°
 
	gPSPFûesy°emNode
::
	$li°Dú
(
Li°Mode
 
mode
) const

157 
FSLi°
 
myLi°
;

158 #i‚de‡
LINUX_MODE


159 
S˚UID
 
dfd
 = 
	`s˚IoD›í
 (
_∑th
.
	`c_°r
());

160 
S˚IoDúít
 *
dp
;

161 
dp
 = (
S˚IoDúít
*)
	`mÆloc
((SceIoDirent));

162 #ifde‡
PSP_DEBUG


163 
	`Ârötf
(
°dout
,"PSPFûesy°emNode::li°Dú: dú='%s'\n",
_∑th
.
	`c_°r
());

166 i‡(!
dfd
){

167 #ifde‡
PSP_DEBUG


168 
	`Ârötf
(
°dout
,"PSPFilesystemNode::listDir:Ço dir handle\n");

170  
myLi°
;

173 
	`s˚IoDªad
(
dfd
,
dp
) > 0){

175 i‡(
dp
->
d_«me
[0]=='.')

178 
PSPFûesy°emNode
 
íåy
;

179 
íåy
.
_di•œyName
 = 
dp
->
d_«me
;

180 
íåy
.
_∑th
 = _path;

181 i‡(
íåy
.
_∑th
.
	`Àngth
() > 0 &&Éntry._path[entry._path.length()-1] != '/')

182 
íåy
.
_∑th
 += "/";

184 
íåy
.
_∑th
 +
dp
->
d_«me
;

185 
íåy
.
_isDúe˘‹y
 = 
dp
->
d_°©
.
°_©å
 & 
FIO_SO_IFDIR
;

188 i‡((
mode
 =
kLi°FûesO∆y
 && 
íåy
.
_isDúe˘‹y
) ||

189 (
mode
 =
kLi°Dúe˘‹õsO∆y
 && !
íåy
.
_isDúe˘‹y
))

192 i‡(
íåy
.
_isDúe˘‹y
)

193 
íåy
.
_∑th
 += "/";

195 
myLi°
.
	`push_back
(
	`wøp
(
√w
 
	`PSPFûesy°emNode
(&
íåy
)));

197 
	`s˚IoD˛o£
(
dfd
);

198 
	`‰ì
(
dp
);

200  
myLi°
;

201 
	}
}

204 
Ab°ø˘Fûesy°emNode
 *
	gPSPFûesy°emNode
::
	$∑ª¡
() const

206 i‡(
_∑th
 == "/")

209 
PSPFûesy°emNode
* 
p
 = 
√w
 
	`PSPFûesy°emNode
();

210 c⁄° *
°¨t
 = 
_∑th
.
	`c_°r
();

211 c⁄° *
íd
 = 
	`œ°P©hComp⁄ít
(
_∑th
);

213 
p
->
_∑th
 = 
	`°rög
(
°¨t
, 
íd
 - start);

214 
p
->
_di•œyName
 = 
	`œ°P©hComp⁄ít
’->
_∑th
);

216 
p
->
_isVÆid
 = 
åue
;

217 
p
->
_isDúe˘‹y
 = 
åue
;

219  
p
;

220 
	}
}

223 
boﬁ
 
	gAb°ø˘Fûesy°emNode
::
	$fûeExi°s
(c⁄° 
°rög
& 
∑th
)

225 #i‚de‡
LINUX_MODE


226 
S˚IoSèt
 
°
;

227 #ifde‡
PSP_DEBUG


228 
	`Ârötf
(
°dout
,"Ab°ø˘Fûesy°emNode::fûeExi°†'%s'\n",
∑th
.
	`c_°r
());

230 if(
	`s˚IoGë°©
(
∑th
.
	`c_°r
(), &
°
) != 0){

231 #ifde‡
PSP_DEBUG


232 
	`Ârötf
(
°dout
,"AbstractFilesystemNode::fileExistsÉrror \n");

234  
Ál£
;

236 #ifde‡
PSP_DEBUG


237 
	`Ârötf
(
°dout
,"Ab°ø˘Fûesy°emNode::fûeExi°†ªtu∫ '%i'\n", !
	`FIO_SO_ISREG
(
°
.
°_mode
));

239  !
	`FIO_SO_ISREG
(
°
.
°_mode
);

241  
åue
;

243 
	}
}

246 
boﬁ
 
	gAb°ø˘Fûesy°emNode
::
	$dúExi°s
(c⁄° 
°rög
& 
ö
)

248 #i‚de‡
LINUX_MODE


249 
tmp_buf
[1024];

250 
	`°∫˝y
(
tmp_buf
,
ö
.
	`c_°r
(),1023);

251 
	`°rùTaûögSœshes
(
tmp_buf
);

252 
°rög
 
∑th
 = (*)
tmp_buf
;

253 #ifde‡
PSP_DEBUG


254 
	`Ârötf
(
°dout
,"Ab°ø˘Fûesy°emNode::dúExi°†'%s'\n", 
∑th
.
	`c_°r
());

256 
S˚IoSèt
 
°
;

257 if(
	`s˚IoGë°©
(
∑th
.
	`c_°r
(), &
°
) != 0)

258  
Ál£
;

259 #ifde‡
PSP_DEBUG


260 
	`Ârötf
(
°dout
,"Ab°ø˘Fûesy°emNode::dúExi°†ªtu∫ '%i'\n", !
	`FIO_SO_ISDIR
(
°
.
°_mode
));

262  !
	`FIO_SO_ISDIR
(
°
.
°_mode
);

264  
Ál£
;

266 
	}
}

269 
boﬁ
 
	gAb°ø˘Fûesy°emNode
::
	$makeDú
(c⁄° 
°rög
& 
∑th
)

271 #i‚de‡
LINUX_MODE


272  
	`s˚IoMkdú
(
∑th
.
	`c_°r
(), 0777) == 0;

276 
	}
}

279 
°rög
 
	gAb°ø˘Fûesy°emNode
::
	$modTime
(c⁄° 
°rög
& 
ö
)

281 #i‚de‡
LINUX_MODE


282 
tmp_buf
[1024];

283 
	`°∫˝y
(
tmp_buf
,
ö
.
	`c_°r
(),1023);

284 
	`°rùTaûögSœshes
(
tmp_buf
);

285 
°rög
 
∑th
 = (*)
tmp_buf
;

286 
S˚IoSèt
 
°
;

287 #ifde‡
PSP_DEBUG


288 
	`Ârötf
(
°dout
,"Ab°ø˘Fûesy°emNode::modTimê'%s'\n",
∑th
.
	`c_°r
());

291 if(
	`s˚IoGë°©
(
∑th
.
	`c_°r
(), &
°
) < 0){

292 #ifde‡
PSP_DEBUG


293 
	`Ârötf
(
°dout
,"AbstractFilesystemNode::modTimeÑeturnsÉrror\n");

297 
o°rög°ªam
 
buf
;

298 
buf
 << ()
°
.
°_mtime
.
yór


299 << ()
°
.
°_mtime
.
m⁄th


300 << ()
°
.
°_mtime
.
day


301 << ()
°
.
°_mtime
.
hour


302 << ()
°
.
°_mtime
.
möuã


303 << ()
°
.
°_mtime
.
£c⁄d
;

305 #ifde‡
PSP_DEBUG


306 
	`Ârötf
(
°dout
,"Ab°ø˘Fûesy°emNode::modTimêªtu∫†'%s'\n",
buf
.
	`°r
().
	`c_°r
());

308  
buf
.
	`°r
();

312 
	}
}

	@psp/FrameBufferPSP.cpp

19 
	~<SDL.h
>

20 
	~<SDL_syswm.h
>

21 
	~<s°ªam
>

23 
	~"C⁄sﬁe.hxx
"

24 
	~"FømeBuf„rPSP.hxx
"

25 
	~"MedüSrc.hxx
"

26 
	~"Sëtögs.hxx
"

27 
	~"OSy°em.hxx
"

28 
	~"F⁄t.hxx
"

29 
	~"GuiUtûs.hxx
"

32 
	gFømeBuf„rPSP
::
	$FømeBuf„rPSP
(
OSy°em
* 
osy°em
)

33 : 
	$FømeBuf„rSo·
(
osy°em
)

35 
	}
}

38 
FømeBuf„rPSP
::~
	$FømeBuf„rPSP
()

40 
dñëe
 
myRe˘Li°
;

41 
dñëe
 
myOvîœyRe˘Li°
;

42 
	}
}

45 
boﬁ
 
	gFømeBuf„rPSP
::
	$öôSubsy°em
()

48 
dñëe
 
myRe˘Li°
;

49 
myRe˘Li°
 = 
√w
 
	`Re˘Li°
();

50 
dñëe
 
myOvîœyRe˘Li°
;

51 
myOvîœyRe˘Li°
 = 
√w
 
	`Re˘Li°
();

53 #ifde‡
PSP_DEBUG


54 
	`Ârötf
(
°dout
, "FrameBufferPSP::initSubsystem\n");

56 if(!
myRe˘Li°
 || !
myOvîœyRe˘Li°
)

58 
˚º
 << "ERROR: U«bÀÅÿgë mem‹y f‹ SDLÑe˘s" << 
ídl
;

59  
Ál£
;

63 if(!
	`¸óãS¸ìn
())

64  
Ál£
;

67 if(
myOSy°em
->
	`£âögs
().
	`gëBoﬁ
("showinfo"))

68 
cout
 << "Videÿªndîög: So·w¨êmode" << 
ídl
 <<Éndl;

72 
uI¡8
 
i
 = 0; i < 
kNumCﬁ‹s
-256; i++)

73 
myPÆëã
[
i
+256] = 
	`m≠RGB
(
ourGUICﬁ‹s
[i][0], ourGUIColors[i][1], ourGUIColors[i][2]);

75  
åue
;

76 
	}
}

79 
boﬁ
 
	gFømeBuf„rPSP
::
	$¸óãS¸ìn
()

81 
myS¸ìnDim
.
x
 = myS¸ìnDim.
y
 = 0;

83 
myS¸ìnDim
.
w
 = 
myBa£Dim
.w;

84 
myS¸ìnDim
.
h
 = 
myBa£Dim
.h;

87 
myImageDim
 = 
myS¸ìnDim
;

88 i‡(
mySDLFœgs
 & 
SDL_HWSURFACE
 )

91 
mySDLFœgs
 = 
SDL_HWSURFACE
;

92 
myS¸ìnDim
.
w
 = 
myDeskt›Dim
.w;

93 
myS¸ìnDim
.
h
 = 
myDeskt›Dim
.
w
;

94 #ifde‡
PSP_DEBUG


95 
	`Ârötf
(
°dout
, "FrameBufferPSP::createScreen Hardware Mode "

97 
myS¸ìnDim
.
w
,myS¸ìnDim.
h
);

102 #ifde‡
PSP_DEBUG


103 
	`Ârötf
(
°dout
, "FrameBufferPSP::createScreen Software Mode "

105 
myS¸ìnDim
.
w
,myS¸ìnDim.
h
);

109 
myS¸ìn
 = 
	`SDL_SëVideoMode
(
myS¸ìnDim
.
w
, myS¸ìnDim.
h
, 0, 
mySDLFœgs
);

110 if(
myS¸ìn
 =
NULL
)

112 
	`Ârötf
(
°dout
,"ERROR: U«bÀÅÿ›í SDL wödow: %s\n",
	`SDL_GëEº‹
());

113  
Ál£
;

115 
myOSy°em
->
	`evítH™dÀr
().
	`ª‰eshDi•œy
();

117  
åue
;

118 
	}
}

	@psp/FrameBufferPSP.hxx

19 #i‚de‡
FRAMEBUFFER_PSP_HXX


20 
	#FRAMEBUFFER_PSP_HXX


	)

25 
	~"F⁄t.hxx
"

27 
	~"b•f.hxx
"

28 
	~"GuiUtûs.hxx
"

29 
	~"FømeBuf„rSo·.hxx
"

38 ˛as†
	cFømeBuf„rPSP
 : 
public
 
FømeBuf„rSo·


40 
public
:

44 
FømeBuf„rPSP
(
OSy°em
* 
osy°em
);

49 
	mvútuÆ
 ~
FømeBuf„rPSP
();

58 
vútuÆ
 
boﬁ
 
öôSubsy°em
();

63 
vútuÆ
 
Buf„rTy≥
 
	$ty≥
(Ë{  
kSo·Buf„r
; }

69 
vútuÆ
 
boﬁ
 
	`¸óãS¸ìn
();

72 
	}
};

	@psp/OSystemPSP.cpp

19 
	~<c°dlib
>

20 
	~<s°ªam
>

21 
	~<f°ªam
>

23 
	~<uni°d.h
>

24 
	~<sys/°©.h
>

25 
	~<sys/ty≥s.h
>

27 
	~<p•kî√l.h
>

28 
	~<p•powî.h
>

30 
	~"b•f.hxx
"

31 
	~"OSy°em.hxx
"

32 
	~"OSy°emPSP.hxx
"

34 
	~"p•_kbd.h
"

35 
	~"p•_sdl.h
"

37 #ifde‡
HAVE_GETTIMEOFDAY


38 
	~<time.h
>

39 
	~<sys/time.h
>

61 
	gOSy°emPSP
::
	$OSy°emPSP
()

63 
buf„r
[128];

64 
	`gëcwd
(
buf„r
, 128);

66 
°rög
 
ba£dú
 = 
	`°rög
(
buf„r
);

67 
	`£tBa£Dú
(
ba£dú
);

69 
°rög
 
°©edú
 = 
ba£dú
 + "/state";

70 
	`£tSèãDú
(
°©edú
);

73 
°rög
 
u£rPr›îtõsFûe
 = 
ba£dú
 + "/stella.pro";

74 
°rög
 
sy°emPr›îtõsFûe
 = "/etc/stella.pro";

75 
	`£tC⁄figFûes
(
u£rPr›îtõsFûe
, 
sy°emPr›îtõsFûe
);

77 
°rög
 
u£rC⁄figFûe
 = 
ba£dú
 + "/stellarc";

78 
°rög
 
sy°emC⁄figFûe
 = "/etc/stellarc";

79 
	`£tC⁄figFûes
(
u£rC⁄figFûe
, 
sy°emC⁄figFûe
);

81 
°rög
 
ˇcheFûe
 = 
ba£dú
 + "/stella.cache";

82 
	`£tCacheFûe
(
ˇcheFûe
);

85 
	}
}

88 
	gOSy°emPSP
::~
	$OSy°emPSP
()

90 
	}
}

93 
OSy°emPSP
::
	$maöLo›
()

98 
uI¡32
 
‰ameTime
 = 0, 
numbîOfFømes
 = 0;

101 
uI¡32
 
°¨tTime
, 
vútuÆTime
, 
cuºítTime
;

104 
vútuÆTime
 = 
	`gëTicks
();

105 
‰ameTime
 = 0;

110 i‡(
	`£âögs
().
	`gëBoﬁ
("pspoverclock"))

112 
	`s˚PowîSëClockFªquícy
(333,333,166);

113 
	`Ârötf
(
°dîr
,"OSystemPSP::mainLoop overclockÅo 333\n");

117 
	`Ârötf
(
°dîr
,"OSystemPSP::mainLoop NOT overclock\n");

120 
	`p•_sdl_bœck_s¸ìn
();

127 if(
myEvítH™dÀr
->
	`doQuô
())

133 
°¨tTime
 = 
	`gëTicks
();

134 
myEvítH™dÀr
->
	`pﬁl
(
°¨tTime
);

136 
myFømeBuf„r
->
	`upd©e
();

138 
cuºítTime
 = 
	`gëTicks
();

139 
vútuÆTime
 +
myTimePîFøme
;

140 if(
cuºítTime
 < 
vútuÆTime
) {

141 
	`SDL_Dñay
((
vútuÆTime
 - 
cuºítTime
)/1000);

144 
cuºítTime
 = 
	`gëTicks
(Ë- 
°¨tTime
;

145 
‰ameTime
 +
cuºítTime
;

146 ++
numbîOfFømes
;

149 
	}
}

152 
uI¡32
 
	gOSy°emPSP
::
	$gëTicks
()

154 #i‡
	`deföed
(
HAVE_GETTIMEOFDAY
)

155 
timevÆ
 
now
;

156 
	`gëtimeofday
(&
now
, 0);

157  (
uI¡32
Ë(
now
.
tv_£c
 * 1000000 +Çow.
tv_u£c
);

159  (
uI¡32
Ë
	`SDL_GëTicks
() * 1000;

161 
	}
}

164 
	gOSy°emPSP
::
	$gëS¸ìnDimísi⁄s
(& 
width
, & 
height
)

166 
width
 = 480;

167 
height
 = 272;

168 
	}
}

171 
	gOSy°emPSP
::
	$£tDeÁu…Joym≠
()

174 
myEvítH™dÀr
->
	`£tDeÁu…JoyM≠pög
(
Evít
::
TakeS«pshŸ
, 0, 0);

175 
myEvítH™dÀr
->
	`£tDeÁu…JoyM≠pög
(
Evít
::
LﬂdSèã
, 0, 1);

176 
myEvítH™dÀr
->
	`£tDeÁu…JoyM≠pög
(
Evít
::
Joy°ickZîoFúe
, 0, 2);

177 
myEvítH™dÀr
->
	`£tDeÁu…JoyM≠pög
(
Evít
::
SaveSèã
, 0, 3);

178 
myEvítH™dÀr
->
	`£tDeÁu…JoyM≠pög
(
Evít
::
MíuMode
, 0, 4);

179 
myEvítH™dÀr
->
	`£tDeÁu…JoyM≠pög
(
Evít
::
CmdMíuMode
, 0, 5);

180 
myEvítH™dÀr
->
	`£tDeÁu…JoyM≠pög
(
Evít
::
Joy°ickZîoDown
, 0, 6);

181 
myEvítH™dÀr
->
	`£tDeÁu…JoyM≠pög
(
Evít
::
Joy°ickZîoLe·
, 0, 7);

182 
myEvítH™dÀr
->
	`£tDeÁu…JoyM≠pög
(
Evít
::
Joy°ickZîoUp
, 0, 8);

183 
myEvítH™dÀr
->
	`£tDeÁu…JoyM≠pög
(
Evít
::
Joy°ickZîoRight
, 0, 9);

184 
myEvítH™dÀr
->
	`£tDeÁu…JoyM≠pög
(
Evít
::
C⁄sﬁeSñe˘
, 0, 10);

185 
myEvítH™dÀr
->
	`£tDeÁu…JoyM≠pög
(
Evít
::
C⁄sﬁeRe£t
, 0, 11);

186 
myEvítH™dÀr
->
	`£tDeÁu…JoyM≠pög
(
Evít
::
NoTy≥
, 0, 12);

187 
myEvítH™dÀr
->
	`£tDeÁu…JoyM≠pög
(
Evít
::
NoTy≥
, 0, 13);

189 
	}
}

192 
	gOSy°emPSP
::
	$£tDeÁu…JoyAxisM≠
()

194 
	}
}

	@psp/OSystemPSP.hxx

19 #i‚de‡
OSYSTEM_PSP_HXX


20 
	#OSYSTEM_PSP_HXX


	)

22 
	~"b•f.hxx
"

31 ˛as†
	cOSy°emPSP
 : 
public
 
OSy°em


33 
public
:

37 
OSy°emPSP
();

42 
	mvútuÆ
 ~
OSy°emPSP
();

44 
	mpublic
:

50 
maöLo›
();

57 
uI¡32
 
gëTicks
();

63 
£tDeÁu…Joym≠
();

69 
£tDeÁu…JoyAxisM≠
();

74 
vútuÆ
 
gëS¸ìnDimísi⁄s
(& 
width
, & 
height
);

	@psp/SettingsPSP.cpp

19 
	~"b•f.hxx
"

20 
	~"Sëtögs.hxx
"

21 
	~"SëtögsPSP.hxx
"

24 
	gSëtögsPSP
::
	$SëtögsPSP
(
OSy°em
* 
osy°em
)

25 : 
	$Sëtögs
(
osy°em
)

28 
	`£t
("accurate", "false");

29 
	`£t
("zoom", "1");

30 
	`£t
("romdir", "ms0:/stella/roms/");

31 
	`£t
("ssdir", "ms0:/stella/snapshots/");

32 
	`£t
("sound", "true");

33 
	`£t
("pspoverclock", "false");

34 
	`£t
("joymouse", "true");

36 
	`£tBoﬁ
("accuøã", 
Ál£
);

37 
	`£tI¡
("zoom", 1);

38 
	`£tBoﬁ
("sound", 
åue
);

39 
	`£tBoﬁ
("p•ovî˛ock", 
Ál£
);

40 
	`£tBoﬁ
("joymou£", 
åue
);

42 
	}
}

45 
	gSëtögsPSP
::~
	$SëtögsPSP
()

47 
	}
}

	@psp/SettingsPSP.hxx

19 #i‚de‡
SETTINGS_PSP_HXX


20 
	#SETTINGS_PSP_HXX


	)

22 
˛ass
 
	gOSy°em
;

24 
	~"b•f.hxx
"

32 ˛as†
	cSëtögsPSP
 : 
public
 
Sëtögs


34 
public
:

38 
SëtögsPSP
(
OSy°em
* 
osy°em
);

43 
	mvútuÆ
 ~
SëtögsPSP
();

	@psp/pspstdint.h

21 #i‚de‡
_SCE_PSPSTDINT_H


22 
	#_SCE_PSPSTDINT_H


	)

25 #i‚de‡
_SCE_PSPSTDINT_öt8_t_DEFINED


26 
	#_SCE_PSPSTDINT_öt8_t_DEFINED


	)

27 sig√d 
	töt8_t
;

28 
	tuöt8_t
;

29 
	töt16_t
;

30 
	tuöt16_t
;

31 
	töt32_t
;

32 
	tuöt32_t
;

33 #i‡
deföed
(
__GNUC__
)

34 
__exãnsi⁄__
 
	töt64_t
 
	t__©åibuã__
((
	tmode
(
	tDI
)));

35 
__exãnsi⁄__
 
	tuöt64_t
 
	t__©åibuã__
((
	tmode
(
	tDI
)));

37 
	töt64_t
;

38 
	tuöt64_t
;

44 #i‚de‡
_SCE_PSPSTDINT_öt_Àa°8_t_DEFINED


45 
	#_SCE_PSPSTDINT_öt_Àa°8_t_DEFINED


	)

46 sig√d 
	töt_Àa°8_t
;

47 
	tuöt_Àa°8_t
;

48 
	töt_Àa°16_t
;

49 
	tuöt_Àa°16_t
;

50 
	töt_Àa°32_t
;

51 
	tuöt_Àa°32_t
;

52 #i‡
deföed
(
__GNUC__
)

53 
__exãnsi⁄__
 
	töt_Àa°64_t
 
	t__©åibuã__
((
	tmode
(
	tDI
)));

54 
__exãnsi⁄__
 
	tuöt_Àa°64_t
 
	t__©åibuã__
((
	tmode
(
	tDI
)));

56 
	töt_Àa°64_t
;

57 
	tuöt_Àa°64_t
;

63 #i‚de‡
_SCE_PSPSTDINT_öt_Á°8_t_DEFINED


64 
	#_SCE_PSPSTDINT_öt_Á°8_t_DEFINED


	)

65 
	töt_Á°8_t
;

66 
	tuöt_Á°8_t
;

67 
	töt_Á°16_t
;

68 
	tuöt_Á°16_t
;

69 
	töt_Á°32_t
;

70 
	tuöt_Á°32_t
;

71 #i‡
deföed
(
__GNUC__
)

72 
__exãnsi⁄__
 
	töt_Á°64_t
 
	t__©åibuã__
((
	tmode
(
	tDI
)));

73 
__exãnsi⁄__
 
	tuöt_Á°64_t
 
	t__©åibuã__
((
	tmode
(
	tDI
)));

75 
	töt_Á°64_t
;

76 
	tuöt_Á°64_t
;

82 #i‚de‡
_SCE_PSPSTDINT_öçå_t_DEFINED


83 
	#_SCE_PSPSTDINT_öçå_t_DEFINED


	)

84 
	töçå_t
;

85 
	tuöçå_t
;

90 #i‚de‡
_SCE_PSPSTDINT_ötmax_t_DEFINED


91 
	#_SCE_PSPSTDINT_ötmax_t_DEFINED


	)

92 #i‡
deföed
(
__GNUC__
)

93 
	tötmax_t
 
	t__©åibuã__
((
	tmode
(
	tDI
)));

94 
	tuötmax_t
 
	t__©åibuã__
((
	tmode
(
	tDI
)));

96 
	tötmax_t
;

97 
	tuötmax_t
;

103 #i‡(!(
deföed
(
_LANGUAGE_C_PLUS_PLUS
)||deföed(
__˝lu•lus
)||deföed(
c_∂u•lus
)))||deföed(
__STDC_CONSTANT_MACROS
)

106 
	#INT8_MIN
 (-128)

	)

107 
	#INT16_MIN
 (-32767-1)

	)

108 
	#INT32_MIN
 (-2147483647-1)

	)

109 
	#INT64_MIN
 (-9223372036854775807LL-1)

	)

110 
	#INT8_MAX
 (127)

	)

111 
	#INT16_MAX
 (32767)

	)

112 
	#INT32_MAX
 (2147483647)

	)

113 
	#INT64_MAX
 (9223372036854775807LL)

	)

114 
	#UINT8_MAX
 (255)

	)

115 
	#UINT16_MAX
 (65535)

	)

116 
	#UINT32_MAX
 (4294967295U)

	)

117 
	#UINT64_MAX
 (18446744073709551615ULL)

	)

120 
	#INT_LEAST8_MIN
 (-128)

	)

121 
	#INT_LEAST16_MIN
 (-32767-1)

	)

122 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

123 
	#INT_LEAST64_MIN
 (-9223372036854775807LL-1)

	)

124 
	#INT_LEAST8_MAX
 (127)

	)

125 
	#INT_LEAST16_MAX
 (32767)

	)

126 
	#INT_LEAST32_MAX
 (2147483647)

	)

127 
	#INT_LEAST64_MAX
 (9223372036854775807LL)

	)

128 
	#UINT_LEAST8_MAX
 (255)

	)

129 
	#UINT_LEAST16_MAX
 (65535)

	)

130 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

131 
	#UINT_LEAST64_MAX
 (18446744073709551615ULL)

	)

134 
	#INT_FAST8_MIN
 (-128)

	)

135 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

136 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_FAST64_MIN
 (-9223372036854775807LL-1)

	)

138 
	#INT_FAST8_MAX
 (127)

	)

139 
	#INT_FAST16_MAX
 (2147483647)

	)

140 
	#INT_FAST32_MAX
 (2147483647)

	)

141 
	#INT_FAST64_MAX
 (9223372036854775807LL)

	)

142 
	#UINT_FAST8_MAX
 (255)

	)

143 
	#UINT_FAST16_MAX
 (4294967295U)

	)

144 
	#UINT_FAST32_MAX
 (4294967295U)

	)

145 
	#UINT_FAST64_MAX
 (18446744073709551615ULL)

	)

148 
	#INTPTR_MIN
 (-2147483647-1)

	)

149 
	#INTPTR_MAX
 (2147483647)

	)

150 
	#UINTPTR_MAX
 (4294967295U)

	)

153 
	#INTMAX_MIN
 (-9223372036854775807LL-1)

	)

154 
	#INTMAX_MAX
 (9223372036854775807LL)

	)

155 
	#UINTMAX_MAX
 (18446744073709551615ULL)

	)

159 
	#INT8_C
(
c
Ë
	)
c

160 
	#INT16_C
(
c
Ë
	)
c

161 
	#INT32_C
(
c
Ë
	)
c

162 
	#INT64_C
(
c
Ë¯## 
LL


	)

163 
	#UINT8_C
(
c
Ë¯## 
U


	)

164 
	#UINT16_C
(
c
Ë¯## 
U


	)

165 
	#UINT32_C
(
c
Ë¯## 
U


	)

166 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

169 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

170 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@psp_battery.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<mÆloc.h
>

24 
	~<zlib.h
>

25 
	~<p•powî.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sys/°©.h
>

28 
	~<uni°d.h
>

30 
	~<SDL.h
>

31 
	~"p•_fmgr.h
"

32 
	~"p•_kbd.h
"

33 
	~"p•_b©ãry.h
"

35 
	gloc_b©t_°r
[128];

38 
	$p•_gë_b©ãry_°rög
()

40 
	`°r˝y
(
loc_b©t_°r
, "none");

42 #i‚de‡
LINUX_MODE


43 
tmp
[128];

44 
ªt
;

46 i‡(
	`s˚PowîIsB©ãryExi°
()) {

47 
ªt
 = 
	`s˚PowîGëB©ãryLi„Pî˚¡
();

48 i‡(
ªt
 >= 0) {

49 
	`•rötf
(
tmp
, "%d", 
ªt
);

50 
	`°r˝y
(
loc_b©t_°r
,
tmp
);

51 
	`°rˇt
(
loc_b©t_°r
,"%");

52 if(!
	`s˚PowîIsPowîO∆öe
()){

53 if((
ªt
=
	`s˚PowîGëB©ãryLi„Time
()) >= 0){

54 
	`•rötf
(
tmp
, " %dh", 
ªt
/60);

55 
	`°rˇt
(
loc_b©t_°r
,
tmp
);

56 
	`•rötf
(
tmp
, "%d", (
ªt
%60) + 100);

57 
	`°rˇt
(
loc_b©t_°r
,
tmp
+1);

63  
loc_b©t_°r
;

64 
	}
}

67 
	$p•_is_low_b©ãry
()

69 
ªt
 = 0;

70 #i‚de‡
LINUX_MODE


71 i‡(
	`s˚PowîIsB©ãryExi°
()) {

72 
ªt
 = 
	`s˚PowîGëB©ãryLi„Pî˚¡
();

73 i‡((
ªt
 > 0) && (ret < 4))  1;

77 
	}
}

	@psp_battery.h

19 #i‚de‡
_PSP_BATTERY_H_


20 
	#_PSP_BATTERY_H_


	)

22 *
p•_gë_b©ãry_°rög
();

23 
p•_is_low_b©ãry
();

	@psp_danzeff.c

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

3 
	~"p•_d™zeff.h
"

4 
	~"SDL_image.h
"

6 
	#Ál£
 0

	)

7 
	#åue
 1

	)

9 
	gp•_kbd_œ°_skö
 = 0;

10 
	gp•_kbd_skö
 = -1;

11 *
	gp•_kbd_skö_dú
[
PSP_KBD_MAX_SKIN
];

12 
	gp•_kbd_skö_fú°
 = 1;

14 
	ghﬁdög
 = 
Ál£
;

15 
	gdúty
 = 
åue
;

16 
	göôülized
 = 
Ál£
;

19 
	g£À˘ed_x
 = 1;

20 
	g£À˘ed_y
 = 1;

23 
	#guiSåögsSize
 3

	)

24 
	#PICS_BASEDIR
 "./gøphics/"

	)

26 *
	gguiSåögs
[] =

31 
	#MODE_COUNT
 1

	)

33 
	gmodeCh¨
[
MODE_COUNT
][3][3][5] =

38 { 
DANZEFF_SEL
, 0, 0, 0, '\0' }},

40 { { 
DANZEFF_LDIFFA
, 0, 0, 
DANZEFF_LDIFFB
, '\0' },

41 { 
DANZEFF_PAUSE
, 0, 0, 0, '\0' },

42 { 
DANZEFF_RDIFFA
, 0, 0, 
DANZEFF_RDIFFB
, '\0' }},

44 { { 
DANZEFF_RESET
, 0, 0, 0, '\0' },

51 
	$d™zeff_isöôülized
()

53  
öôülized
;

54 
	}
}

57 
	$d™zeff_dúty
()

59  
dúty
;

60 
	}
}

69 
	$d™zeff_ªadI≈ut
(
S˚CålD©a
 
p•˘æ
)

72 
x
 = 1;

73 
y
 = 1;

74 i‡(
p•˘æ
.
Lx
 < 85Ë
x
 -= 1;

75 i‡(
p•˘æ
.
Lx
 > 170Ë
x
 += 1;

77 i‡(
p•˘æ
.
Ly
 < 85Ë
y
 -= 1;

78 i‡(
p•˘æ
.
Ly
 > 170Ë
y
 += 1;

80 i‡(
£À˘ed_x
 !
x
 || 
£À˘ed_y
 !
y
)

82 
dúty
 = 
åue
;

83 
£À˘ed_x
 = 
x
;

84 
£À˘ed_y
 = 
y
;

87 
¥es£d
 = 0;

89 i‡(!
hﬁdög
)

91 i‡(
p•˘æ
.
Buâ⁄s
& (
PSP_CTRL_CROSS
|
PSP_CTRL_CIRCLE
|
PSP_CTRL_TRIANGLE
|
PSP_CTRL_SQUARE
))

93 
ö√rChoi˚
 = 0;

94 i‡(
p•˘æ
.
Buâ⁄s
 & 
PSP_CTRL_TRIANGLE
)

95 
ö√rChoi˚
 = 0;

96 i‡(
p•˘æ
.
Buâ⁄s
 & 
PSP_CTRL_SQUARE
)

97 
ö√rChoi˚
 = 1;

98 i‡(
p•˘æ
.
Buâ⁄s
 & 
PSP_CTRL_CROSS
)

99 
ö√rChoi˚
 = 2;

101 
ö√rChoi˚
 = 3;

104 
¥es£d
 = 
modeCh¨
[0][
y
][
x
][
ö√rChoi˚
];

106 i‡(
p•˘æ
.
Buâ⁄s
& 
PSP_CTRL_LEFT
)

108 
¥es£d
 = 
DANZEFF_LEFT
;

110 i‡(
p•˘æ
.
Buâ⁄s
& 
PSP_CTRL_RIGHT
)

112 
¥es£d
 = 
DANZEFF_RIGHT
;

114 i‡(
p•˘æ
.
Buâ⁄s
& 
PSP_CTRL_DOWN
)

116 
¥es£d
 = 
DANZEFF_DOWN
;

118 i‡(
p•˘æ
.
Buâ⁄s
& 
PSP_CTRL_UP
)

120 
¥es£d
 = 
DANZEFF_UP
;

122 i‡(
p•˘æ
.
Buâ⁄s
& 
PSP_CTRL_SELECT
)

124 
¥es£d
 = 
DANZEFF_SELECT
;

126 i‡(
p•˘æ
.
Buâ⁄s
& 
PSP_CTRL_START
)

128 
¥es£d
 = 
DANZEFF_START
;

132 
hﬁdög
 = 
p•˘æ
.
Buâ⁄s
 & ~
PSP_CTRL_RTRIGGER
;

134  
¥es£d
;

135 
	}
}

143 #ifde‡
DANZEFF_SDL


145 
SDL_SurÁ˚
* 
	gkeyBôs
[
guiSåögsSize
];

146 
	gmoved_x
 = 0, 
	gmoved_y
 = 0;

149 
SDL_SurÁ˚
* 
	gd™zeff_s¸ìn
;

150 
SDL_Re˘
 
	gd™zeff_s¸ìn_ª˘
;

153 
	$d™zeff_£t_s¸ìn
(
SDL_SurÁ˚
* 
s¸ìn
)

155 
d™zeff_s¸ìn
 = 
s¸ìn
;

156 
d™zeff_s¸ìn_ª˘
.
x
 = 0;

157 
d™zeff_s¸ìn_ª˘
.
y
 = 0;

158 
d™zeff_s¸ìn_ª˘
.
h
 = 
s¸ìn
->h;

159 
d™zeff_s¸ìn_ª˘
.
w
 = 
s¸ìn
->w;

161 
moved_x
 = 
d™zeff_s¸ìn
->
w
 - 150;

162 
moved_y
 = 
d™zeff_s¸ìn
->
h
 - 150;

163 
	}
}

170 
	$surÁ˚_døw_off£t
(
SDL_SurÁ˚
* 
pixñs
, 
s¸ìnX
, 
s¸ìnY
, 
off£tX
, 
off£tY
, 
ötWidth
, 
ötHeight
)

173 
d™zeff_s¸ìn_ª˘
.
x
 = 
moved_x
 + 
s¸ìnX
;

174 
d™zeff_s¸ìn_ª˘
.
y
 = 
moved_y
 + 
s¸ìnY
;

177 
SDL_Re˘
 
pixñs_ª˘
;

178 
pixñs_ª˘
.
x
 = 
off£tX
;

179 
pixñs_ª˘
.
y
 = 
off£tY
;

180 
pixñs_ª˘
.
w
 = 
ötWidth
;

181 
pixñs_ª˘
.
h
 = 
ötHeight
;

183 
	`SDL_BlôSurÁ˚
(
pixñs
, &
pixñs_ª˘
, 
d™zeff_s¸ìn
, &
d™zeff_s¸ìn_ª˘
);

184 
	}
}

188 
	$surÁ˚_døw
(
SDL_SurÁ˚
* 
pixñs
)

190 
	`surÁ˚_døw_off£t
(
pixñs
, 0, 0, 0, 0,Öixñs->
w
,Öixñs->
h
);

191 
	}
}

194 
	$d™zeff_öô_skö
()

196 
p•_kbd_œ°_skö
 = 
	`p•_fmgr_gë_dú_li°
(
PICS_BASEDIR
, 
PSP_KBD_MAX_SKIN
, 
p•_kbd_skö_dú
) - 1;

199 i‡(
p•_kbd_œ°_skö
 < 0) {

200 
	`Ârötf
(
°dout
, "nÿkeybﬂrd skö i¿%†dúe˘‹y !\n", 
PICS_BASEDIR
);

201 
	`exô
(1);

204 i‡((
p•_kbd_skö
 =-1Ë|| (p•_kbd_skö > 
p•_kbd_œ°_skö
)) {

205 
p•_kbd_skö_fú°
 = 0;

206 
p•_kbd_skö
 = 0;Ö•_kbd_skö <
p•_kbd_œ°_skö
;Ösp_kbd_skin++) {

207 i‡(!
	`°rˇ£cmp
(
p•_kbd_skö_dú
[
p•_kbd_skö
], "default/")) ;

209 i‡(
p•_kbd_skö
 > 
p•_kbd_œ°_skö
)Ösp_kbd_skin = 0;

211 
	}
}

215 
	$d™zeff_lﬂd
()

217 
tmp_fûíame
[128];

219 i‡(
öôülized
)  1;

221 i‡(
p•_kbd_skö_fú°
) {

222 
	`d™zeff_öô_skö
();

224 
a
;

225 
a
 = 0;á < 
guiSåögsSize
;á++)

227 
	`°r˝y
(
tmp_fûíame
, 
PICS_BASEDIR
);

228 
	`°rˇt
(
tmp_fûíame
, 
p•_kbd_skö_dú
[
p•_kbd_skö
] );

229 
	`°rˇt
(
tmp_fûíame
, 
guiSåögs
[
a
] );

230 
keyBôs
[
a
] = 
	`IMG_Lﬂd
(
tmp_fûíame
);

231 i‡(
keyBôs
[
a
] =
NULL
)

235 
b
;

236 
b
 = 0; b < 
a
; b++)

238 
	`SDL_FªeSurÁ˚
(
keyBôs
[
b
]);

239 
keyBôs
[
b
] = 
NULL
;

241 
öôülized
 = 
Ál£
;

242 
	`exô
(1);

245 
öôülized
 = 
åue
;

247 
	}
}

251 
	$d™zeff_‰ì
()

253 i‡(!
öôülized
) ;

255 
a
;

256 
a
 = 0;á < 
guiSåögsSize
;á++)

258 
	`SDL_FªeSurÁ˚
(
keyBôs
[
a
]);

259 
keyBôs
[
a
] = 
NULL
;

261 
öôülized
 = 
Ál£
;

262 
	}
}

266 
	$d™zeff_ªndî
()

268 
dúty
 = 
Ál£
;

273 i‡(
£À˘ed_x
 =1 && 
£À˘ed_y
 == 1)

274 
	`surÁ˚_døw
(
keyBôs
[0]);

276 
	`surÁ˚_døw
(
keyBôs
[1]);

279 
	`surÁ˚_døw_off£t
(
keyBôs
[2],

281 
£À˘ed_x
*43, 
£À˘ed_y
*43,

283 
£À˘ed_x
*64,
£À˘ed_y
*64,

286 
	}
}

290 
	$d™zeff_moveTo
(c⁄° 
√wX
, c⁄° 
√wY
)

292 
moved_x
 = 
d™zeff_s¸ìn
->
w
 - 150 + 
√wX
;

293 
moved_y
 = 
d™zeff_s¸ìn
->
h
 - 150 + 
√wY
;

294 
	}
}

297 
	$d™zeff_ch™ge_skö
()

299 
	`d™zeff_‰ì
();

300 
	`d™zeff_lﬂd
();

301 
	}
}

	@psp_danzeff.h

1 #i‚de‡
INCLUDED_KEYBOARDS_DANZEFF_H


2 
	#INCLUDED_KEYBOARDS_DANZEFF_H


	)

8 
	#DANZEFF_SDL


	)

11 
	#DANZEFF_LEFT
 -5

	)

12 
	#DANZEFF_RIGHT
 -4

	)

13 
	#DANZEFF_UP
 -3

	)

14 
	#DANZEFF_DOWN
 -2

	)

16 
	#DANZEFF_SELECT
 1

	)

17 
	#DANZEFF_START
 2

	)

19 
	#DANZEFF_LDIFFA
 3

	)

20 
	#DANZEFF_LDIFFB
 4

	)

21 
	#DANZEFF_RDIFFA
 5

	)

22 
	#DANZEFF_RDIFFB
 6

	)

23 
	#DANZEFF_PAUSE
 7

	)

24 
	#DANZEFF_SEL
 8

	)

25 
	#DANZEFF_RESET
 9

	)

30 
	~<p•˘æ.h
>

32 #ifde‡
__˝lu•lus


36 
	#PSP_KBD_MAX_SKIN
 128

	)

38 
p•_kbd_skö
;

39 
p•_kbd_œ°_skö
;

40 *
p•_kbd_skö_dú
[
PSP_KBD_MAX_SKIN
];

43 
d™zeff_lﬂd
();

44 
d™zeff_‰ì
();

47 
d™zeff_isöôülized
();

55 
d™zeff_ªadI≈ut
(
S˚CålD©a
 
p•˘æ
);

58 
d™zeff_moveTo
(c⁄° 
√wX
, c⁄° 
√wY
);

62 
d™zeff_dúty
();

65 
d™zeff_ªndî
();

69 
	~<SDL/SDL.h
>

71 
d™zeff_£t_s¸ìn
(
SDL_SurÁ˚
* 
s¸ìn
);

73 
d™zeff_ch™ge_skö
();

75 #ifde‡
__˝lu•lus


	@psp_fmgr.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<sig«l.h
>

22 
	~<uni°d.h
>

23 
	~<°rög.h
>

24 
	~<î∫o.h
>

25 
	~<sys/time.h
>

26 
	~<f˙é.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<SDL/SDL.h
>

33 
	~<p•˘æ.h
>

34 
	~<p•kî√l.h
>

35 
	~<p•debug.h
>

36 
	~<p•iofûemgr.h
>

38 
	~"globÆ.h
"

39 
	~"Aèri.h
"

40 
	~"p•_sdl.h
"

41 
	~"p•_míu.h
"

42 
	~"p•_úkeyb.h
"

43 
	~"p•_d™zeff.h
"

45 
SDL_SurÁ˚
 *
back_surÁ˚
;

47 
	~"p•_kbd.h
"

48 
	~"p•_sdl.h
"

49 
	~"p•_fmgr.h
"

51 
	#PSP_FMGR_MIN_TIME
 150000

	)

53 
S˚IoDúít
 
	gfûes
[
PSP_FMGR_MAX_ENTRY
];

54 
S˚IoDúít
 *
	gs‹tfûes
[
PSP_FMGR_MAX_ENTRY
];

55 
	gnfûes
;

56 
	gu£r_fûe_f‹m©
 = 0;

59 
	$SJISC›y
(
S˚IoDúít
 *
a
, *
fûe
)

61 
ˇ
;

62 
i
;

63 
Àn
 = 
	`°æí
(
a
->
d_«me
);

65 
i
=0;i<=
Àn
;i++){

66 
ˇ
 = 
a
->
d_«me
[
i
];

67 i‡(((0x81 <
ˇ
)&&(ca <= 0x9f))

68 || ((0xe0 <
ˇ
)&&(ca <= 0xef))){

69 
fûe
[
i
++] = 
ˇ
;

70 
fûe
[
i
] = 
a
->
d_«me
[i];

73 if(
ˇ
>='a' && ca<='z') ca-=0x20;

74 
fûe
[
i
] = 
ˇ
;

77 
	}
}

80 
	$cmpFûe
(
S˚IoDúít
 *
a
, S˚IoDúíà*
b
)

82 
fûe1
[0x108];

83 
fûe2
[0x108];

84 
ˇ
, 
cb
;

85 
i
, 
n
, 
ªt
;

87 #i‚de‡
LINUX_MODE


88 if(
a
->
d_°©
.
°_mode
 =
b
->d_stat.st_mode)

91 
	`SJISC›y
(
a
, 
fûe1
);

92 
	`SJISC›y
(
b
, 
fûe2
);

93 
n
=
	`°æí
(
fûe1
);

94 
i
=0; i<=
n
; i++){

95 
ˇ
=
fûe1
[
i
]; 
cb
=
fûe2
[i];

96 
ªt
 = 
ˇ
-
cb
;

97 if(
ªt
!=0) Ñet;

102 #i‚de‡
LINUX_MODE


103 if(
	`FIO_S_ISDIR
(
a
->
d_°©
.
°_mode
))  -1;

106 if(
a
->
d_ty≥
 =
DT_DIR
)  -1;

109 
	}
}

112 
	$s‹t
(
S˚IoDúít
 **
a
, 
À·
, 
right
)

114 
S˚IoDúít
 *
tmp
, *
pivŸ
;

115 
i
, 
p
;

117 i‡(
À·
 < 
right
) {

118 
pivŸ
 = 
a
[
À·
];

119 
p
 = 
À·
;

120 
i
=
À·
+1; i<=
right
; i++) {

121 i‡(
	`cmpFûe
(
a
[
i
],
pivŸ
)<0){

122 
p
=p+1;

123 
tmp
=
a
[
p
];

124 
a
[
p
]˜[
i
];

125 
a
[
i
]=
tmp
;

128 
a
[
À·
] =á[
p
];

129 
a
[
p
] = 
pivŸ
;

130 
	`s‹t
(
a
, 
À·
, 
p
-1);

131 
	`s‹t
(
a
, 
p
+1, 
right
);

133 
	}
}

136 
	$my_s‹t
(
S˚IoDúít
 **
a
, 
À·
, 
right
)

138 
S˚IoDúít
* 
sw≠_ñem
;

139 
Àngth
 = 
right
 - 
À·
;

140 
ödex
;

144 
ödex
 = 0; index < 
Àngth
; index++) {

145 
≥rm
 = 
	`ønd
(Ë% 
Àngth
;

146 
sw≠_ñem
 = 
a
[
≥rm
];

147 
a
[
≥rm
] =á[
ödex
];

148 
a
[
ödex
] = 
sw≠_ñem
;

150 
	`s‹t
(
a
, 
À·
, 
right
);

151 
	}
}

154 
	$p•_fmgr_gëExtId
(c⁄° *
szFûeP©h
)

156 *
pszExt
;

157 if((
pszExt
 = 
	`°ºchr
(
szFûeP©h
, '.'))) {

158 i‡((!
	`°rˇ£cmp
(
pszExt
, ".rom")) ||

159 (!
	`°rˇ£cmp
(
pszExt
, ".a26")) ||

160 (!
	`°rˇ£cmp
(
pszExt
, ".bin"))) {

161  
FMGR_FORMAT_ROM
;

162 } i‡(!
	`°rˇ£cmp
(
pszExt
, ".kbd")) {

163  
FMGR_FORMAT_KBD
;

164 } i‡(!
	`°rˇ£cmp
(
pszExt
, ".set")) {

165  
FMGR_FORMAT_SET
;

166 } i‡(!
	`°rˇ£cmp
(
pszExt
, ".zip")) {

167  
FMGR_FORMAT_ZIP
;

171 
	}
}

175 
	$gëDú
(c⁄° *
∑th
)

177 #i‚de‡
LINUX_MODE


178 
fd
, 
b
=0;

179 
f‹m©
 = 0;

181 
nfûes
 = 0;

183 if(
	`°rcmp
(
∑th
,"ms0:/")){

184 
	`°r˝y
(
fûes
[
nfûes
].
d_«me
,"..");

185 
fûes
[
nfûes
].
d_°©
.
°_mode
 = 
FIO_S_IFDIR
;

186 
s‹tfûes
[
nfûes
] = 
fûes
 +Çfiles;

187 
nfûes
++;

188 
b
=1;

190 
fd
 = 
	`s˚IoD›í
(
∑th
);

191 
nfûes
<
PSP_FMGR_MAX_ENTRY
){

192 
	`mem£t
(&
fûes
[
nfûes
], 0x00, (
S˚IoDúít
));

193 if(
	`s˚IoDªad
(
fd
, &
fûes
[
nfûes
])<=0) ;

194 if(
fûes
[
nfûes
].
d_«me
[0] == '.') ;

196 if(
	`FIO_S_ISDIR
(
fûes
[
nfûes
].
d_°©
.
°_mode
)) {

197 
	`°rˇt
(
fûes
[
nfûes
].
d_«me
, "/");

198 
s‹tfûes
[
nfûes
] = 
fûes
 +Çfiles;

199 
nfûes
++;

202 
s‹tfûes
[
nfûes
] = 
fûes
 +Çfiles;

203 
f‹m©
 = 
	`p•_fmgr_gëExtId
(
fûes
[
nfûes
].
d_«me
);

204 i‡–(
f‹m©
 =
u£r_fûe_f‹m©
 ) ||

205 ((
f‹m©
 =
FMGR_FORMAT_ZIP
 ) &&

206 (
u£r_fûe_f‹m©
 !
FMGR_FORMAT_KBD
) ) )

208 
nfûes
++;

211 
	`s˚IoD˛o£
(
fd
);

213 
DIR
* 
fd
;

214 
b
=0;

215 
f‹m©
 = 0;

217 
nfûes
 = 0;

219 if(
	`°rcmp
(
∑th
,"./")){

220 
	`°r˝y
(
fûes
[
nfûes
].
d_«me
,"..");

221 
fûes
[
nfûes
].
d_ty≥
 = 
DT_DIR
;

222 
s‹tfûes
[
nfûes
] = 
fûes
 +Çfiles;

223 
nfûes
++;

224 
b
=1;

226 
fd
 = 
	`›ídú
(
∑th
);

227 i‡(! 
fd
) ;

228 
nfûes
<
PSP_FMGR_MAX_ENTRY
){

229 
	`mem£t
(&
fûes
[
nfûes
], 0x00, (
dúít
));

230 
dúít
 *
fûe_íåy
 = 
	`ªaddú
(
fd
);

231 i‡(! 
fûe_íåy
) ;

232 
	`mem˝y
(&
fûes
[
nfûes
], 
fûe_íåy
, (
dúít
));

233 if(
fûes
[
nfûes
].
d_«me
[0] == '.') ;

235 if(
fûes
[
nfûes
].
d_ty≥
 =
DT_DIR
) {

236 
	`°rˇt
(
fûes
[
nfûes
].
d_«me
, "/");

237 
s‹tfûes
[
nfûes
] = 
fûes
 +Çfiles;

238 
nfûes
++;

241 
s‹tfûes
[
nfûes
] = 
fûes
 +Çfiles;

242 
f‹m©
 = 
	`p•_fmgr_gëExtId
(
fûes
[
nfûes
].
d_«me
);

243 i‡(
f‹m©
 =
u£r_fûe_f‹m©
)

245 
nfûes
++;

248 
	`˛o£dú
(
fd
);

251 if(
b
)

252 
	`my_s‹t
(
s‹tfûes
+1, 0, 
nfûes
-2);

254 
	`my_s‹t
(
s‹tfûes
, 0, 
nfûes
-1);

255 
	}
}

258 
	$p•_fmgr_gë_dú_li°
(*
ba£dú
, 
dúmax
, **
dú«me
)

260 #i‚de‡
LINUX_MODE


261 
ödex
 = 0;

262 
fd
 = 0;

263 
nfûes
 = 0;

264 
fd
 = 
	`s˚IoD›í
(
ba£dú
);

265 (
nfûes
<
PSP_FMGR_MAX_ENTRY
Ë&& (nfûe†< 
dúmax
)) {

266 
	`mem£t
(&
fûes
[
nfûes
], 0x00, (
S˚IoDúít
));

267 if(
	`s˚IoDªad
(
fd
, &
fûes
[
nfûes
])<=0) ;

268 if(
fûes
[
nfûes
].
d_«me
[0] == '.') ;

270 if(
	`FIO_S_ISDIR
(
fûes
[
nfûes
].
d_°©
.
°_mode
)) {

271 
	`°rˇt
(
fûes
[
nfûes
].
d_«me
, "/");

272 
s‹tfûes
[
nfûes
] = 
fûes
 +Çfiles;

273 
nfûes
++;

277 
	`s˚IoD˛o£
(
fd
);

278 
	`my_s‹t
(
s‹tfûes
, 0, 
nfûes
-1);

279 
ödex
 = 0; index < 
nfûes
; index++) {

280 
dú«me
[
ödex
] = 
	`°rdup
(
s‹tfûes
[ödex]->
d_«me
);

283 
ödex
 = 0;

284 
DIR
* 
fd
 = 0;

285 
nfûes
 = 0;

286 
fd
 = 
	`›ídú
(
ba£dú
);

287 i‡(! 
fd
)  0;

288 (
nfûes
<
PSP_FMGR_MAX_ENTRY
Ë&& (nfûe†< 
dúmax
)) {

289 
	`mem£t
(&
fûes
[
nfûes
], 0x00, (
dúít
));

290 
dúít
 *
fûe_íåy
 = 
	`ªaddú
(
fd
);

291 i‡(! 
fûe_íåy
) ;

292 
	`mem˝y
(&
fûes
[
nfûes
], 
fûe_íåy
, (
dúít
));

293 if(
fûes
[
nfûes
].
d_«me
[0] == '.') ;

295 if(
fûes
[
nfûes
].
d_ty≥
 =
DT_DIR
) {

296 
	`°rˇt
(
fûes
[
nfûes
].
d_«me
, "/");

297 
s‹tfûes
[
nfûes
] = 
fûes
 +Çfiles;

298 
nfûes
++;

302 
	`˛o£dú
(
fd
);

303 
	`my_s‹t
(
s‹tfûes
, 0, 
nfûes
-1);

304 
ödex
 = 0; index < 
nfûes
; index++) {

305 
dú«me
[
ödex
] = 
	`°rdup
(
s‹tfûes
[ödex]->
d_«me
);

308  
nfûes
;

309 
	}
}

312 
	$p•_di•œy_s¸ìn_fmgr
()

314 
	`p•_sdl_blô_background
();

316 
	`p•_sdl_døw_ª˘™gÀ
(10,10,459,249,
PSP_MENU_BORDER_COLOR
,0);

317 
	`p•_sdl_døw_ª˘™gÀ
(11,11,457,247,
PSP_MENU_BORDER_COLOR
,0);

319 
	`p•_sdl_back2_¥öt
–30, 6, " Sèπ+L+R: EXIT ", 
PSP_MENU_WARNING_COLOR
);

321 
	`p•_di•œy_s¸ìn_míu_b©ãry
();

323 
	`p•_sdl_back2_¥öt
–370, 6, " R: Dñëê", 
PSP_MENU_NOTE_COLOR
);

325 
	`p•_sdl_back2_¥öt
( 30, 254, " []: Cancel O/X: Valid Triangle: Up ",

326 
PSP_MENU_BORDER_COLOR
);

327 
	`p•_sdl_back2_¥öt
(370, 254, " By Zx-81 ",

328 
PSP_MENU_AUTHOR_COLOR
);

329 
	}
}

333 
	$p•_fmgr_ask_c⁄fúm
()

335 
S˚CålD©a
 
c
;

336 
c⁄fúm
 = 0;

338 
	`p•_sdl_back2_¥öt
(290, 70, "Deleteá file",

339 
PSP_MENU_WARNING_COLOR
);

340 
	`p•_sdl_back2_¥öt
(270, 80, "press XÅo confirm !",

341 
PSP_MENU_WARNING_COLOR
);

342 
	`p•_sdl_Êù
();

344 
	`p•_kbd_waô_no_buâ⁄
();

348 
	`s˚CålPìkBuf„rPosôive
(&
c
, 1);

349 
c
.
Buâ⁄s
 &
PSP_ALL_BUTTON_MASK
;

351 #ifde‡
USE_PSP_IRKEYB


352 
	`p•_úkeyb_£t_p•_key
(&
c
);

354 i‡(
c
.
Buâ⁄s
 & 
PSP_CTRL_CROSS
Ë{ 
c⁄fúm
 = 1; ; }

356 } 
c
.
Buâ⁄s
 == 0);

358 
	`p•_kbd_waô_no_buâ⁄
();

360  
c⁄fúm
;

361 
	}
}

364 
	$p•_fûe_föd_fú°
(
fú°_ch¨
)

366 
ödex
;

367 
fú°_ch¨
 = 
	`touµî
(first_char);

368 
ödex
 = 0; index < 
nfûes
; index++) {

369 
ã°_ch¨
 = 
	`touµî
(
s‹tfûes
[
ödex
]->
d_«me
[0]);

370 i‡(
ã°_ch¨
 =
fú°_ch¨
) {

371  
ödex
;

375 
	}
}

378 
	$p•_fûe_ªque°
(*
out
, *
pszSèπP©h
)

380 
£l
=0;

382 
S˚CålD©a
 
c
;

383 
œ°_time
;

384 
tmp
;

386 
cﬁ‹
;

387 
t›
, 
rows
=23, 
x
, 
y
, 
i
, 
up
=0;

388 
∑th
[
PSP_FMGR_MAX_PATH
];

389 
ﬁdDú
[
PSP_FMGR_MAX_NAME
];

390 
buf„r
[
PSP_FMGR_MAX_NAME
];

391 *
p
;

392 
√w_∑d
;

393 
ﬁd_∑d
;

394 
fûe_£À˘ed
;

395 
di•œy_thumb
;

396 
check_thumb
;

397 
úkeyb_key
;

400 #ifde‡
USE_PSP_IRKEYB


401 
úkeyb_key
 = 
PSP_IRKEYB_EMPTY
;

404 
	`mem£t
(
fûes
, 0x00, (
S˚IoDúít
Ë* 
PSP_FMGR_MAX_ENTRY
);

405 
	`mem£t
(
s‹tfûes
, 0x00, (
S˚IoDúít
 *Ë* 
PSP_FMGR_MAX_ENTRY
);

406 
nfûes
 = 0;

408 
	`°r˝y
(
∑th
, 
pszSèπP©h
);

409 
	`gëDú
(
∑th
);

411 
œ°_time
 = 0;

412 
ﬁd_∑d
 = 0;

413 
t›
 = 0;

414 
fûe_£À˘ed
 = 0;

416 i‡(
£l
 >
nfûes
) sel = 0;

418 
di•œy_thumb
 = 0;

419 
check_thumb
 = 1;

421 
	`lﬂd_thumb_li°
();

425 
x
 = 20; 
y
 = 15;

427 i‡(
check_thumb
) {

428 
check_thumb
 = 0;

429 
di•œy_thumb
 = 0;

430 #i‚de‡
LINUX_MODE


431 i‡(! 
	`FIO_S_ISDIR
(
s‹tfûes
[
£l
]->
d_°©
.
°_mode
) )

433 i‡(
s‹tfûes
[
£l
]->
d_ty≥
 !
DT_DIR
)

436 i‡(
	`lﬂd_thumb_if_exi°s
(
s‹tfûes
[
£l
]->
d_«me
)) {

437 
di•œy_thumb
 = 1;

442 
	`p•_di•œy_s¸ìn_fmgr
();

443 
	`p•_sdl_back2_ª˘™gÀ
(
x
, 
y
, 290, 
rows
 * 10);

444 i‡(
di•œy_thumb
) {

445 
	`p•_sdl_blô_thumb
(320, 40, 
ßve_surÁ˚
);

448 
i
=0; i<
rows
; i++){

449 if(
t›
+
i
 >
nfûes
) ;

450 if(
t›
+
i
 =
£l
Ë
cﬁ‹
 = 
PSP_MENU_SEL_COLOR
;

451 
cﬁ‹
 = 
PSP_MENU_TEXT_COLOR
;

452 
	`°∫˝y
(
buf„r
, 
s‹tfûes
[
t›
+
i
]->
d_«me
, 35);

453 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 35);

454 
	`p•_sdl_back2_¥öt
(
x
, 
y
, 
buf„r
, 
cﬁ‹
);

455 
y
 += 10;

458 
	`p•_sdl_Êù
();

462 
	`s˚CålPìkBuf„rPosôive
(&
c
, 1);

463 
c
.
Buâ⁄s
 &
PSP_ALL_BUTTON_MASK
;

465 #ifde‡
USE_PSP_IRKEYB


466 
úkeyb_key
 = 
	`p•_úkeyb_£t_p•_key
(&
c
);

468 
√w_∑d
 = 
c
.
Buâ⁄s
;

470 i‡((
ﬁd_∑d
 !
√w_∑d
Ë|| ((
c
.
TimeSèmp
 - 
œ°_time
Ë> 
PSP_FMGR_MIN_TIME
)) {

471 
œ°_time
 = 
c
.
TimeSèmp
;

472 
ﬁd_∑d
 = 
√w_∑d
;

475 #ifde‡
USE_PSP_IRKEYB


476 i‡(
úkeyb_key
 !
PSP_IRKEYB_EMPTY
) ;

480 #ifde‡
USE_PSP_IRKEYB


481 
úkeyb_key
 = 
	`p•_úkeyb_ªad_key
();

483 i‡(
úkeyb_key
 !
PSP_IRKEYB_EMPTY
) {

485 i‡(
úkeyb_key
 > ' ') {

486 
√w_£l
 = 
	`p•_fûe_föd_fú°
(
úkeyb_key
);

487 i‡(
√w_£l
 >= 0) {

488 
£l
 = 
√w_£l
;

489 
check_thumb
 = 1;

490 
œb_íd
;

496 
√w_Lx
 = 0;

497 
√w_Ly
 = 0;

499 
	`kbd_gë_™Æog_dúe˘i⁄
–
c
.
Lx
, c.
Ly
, &
√w_Lx
, &
√w_Ly
);

501 i‡((
c
.
Buâ⁄s
 & (
PSP_CTRL_LTRIGGER
|
PSP_CTRL_RTRIGGER
|
PSP_CTRL_START
)) ==

502 (
PSP_CTRL_LTRIGGER
|
PSP_CTRL_RTRIGGER
|
PSP_CTRL_START
)) {

504 
	`p•_sdl_exô
(0);

507 i‡((
√w_∑d
 & 
PSP_CTRL_CROSS
 ) ||

508 (
√w_∑d
 & 
PSP_CTRL_CIRCLE
)) {

509 #i‚de‡
LINUX_MODE


510 i‡–
	`FIO_S_ISDIR
(
s‹tfûes
[
£l
]->
d_°©
.
°_mode
) )

512 i‡(
s‹tfûes
[
£l
]->
d_ty≥
 =
DT_DIR
)

515 if(!
	`°rcmp
(
s‹tfûes
[
£l
]->
d_«me
,"..")){

516 
up
=1;

518 
	`°rˇt
(
∑th
,
s‹tfûes
[
£l
]->
d_«me
);

519 
	`gëDú
(
∑th
);

520 
£l
=0;

521 
check_thumb
 = 1;

524 
	`°r˝y
(
out
, 
∑th
);

525 
	`°rˇt
(
out
, 
s‹tfûes
[
£l
]->
d_«me
);

526 
	`°r˝y
(
pszSèπP©h
,
∑th
);

527 
fûe_£À˘ed
 = 1;

530 } if(
√w_∑d
 & 
PSP_CTRL_TRIANGLE
){

531 
up
=1;

532 } if((
√w_∑d
 & 
PSP_CTRL_SQUARE
Ë|| (√w_∑d & 
PSP_CTRL_SELECT
)) {

534 
fûe_£À˘ed
 = 0;

536 } if(
√w_∑d
 & 
PSP_CTRL_UP
){

537 
£l
--;

538 
check_thumb
 = 1;

539 } if(
√w_∑d
 & 
PSP_CTRL_DOWN
){

540 
£l
++;

541 
check_thumb
 = 1;

542 } if(
√w_∑d
 & 
PSP_CTRL_LEFT
){

543 
£l
-=10;

544 
check_thumb
 = 1;

545 } if(
√w_∑d
 & 
PSP_CTRL_RIGHT
){

546 
£l
+=10;

547 
check_thumb
 = 1;

548 } if(
√w_∑d
 & 
PSP_CTRL_RTRIGGER
){

549 #i‚de‡
LINUX_MODE


550 i‡(! 
	`FIO_S_ISDIR
(
s‹tfûes
[
£l
]->
d_°©
.
°_mode
) )

552 i‡(
s‹tfûes
[
£l
]->
d_ty≥
 !
DT_DIR
)

555 
	`°r˝y
(
out
, 
∑th
);

556 
	`°rˇt
(
out
, 
s‹tfûes
[
£l
]->
d_«me
);

557 
	`°r˝y
(
pszSèπP©h
,
∑th
);

558 i‡(
	`p•_fmgr_ask_c⁄fúm
()) {

559 
tmp
 = 
£l
;Åm∞< (
nfûes
 - 1);Åmp++) {

560 
s‹tfûes
[
tmp
] = sortfiles[tmp + 1];

562 
nfûes
--;

563 
	`ªmove
(
out
);

565 
check_thumb
 = 1;

568 i‡(
√w_Ly
 > 0) {

569 
£l
 += 20;

570 
check_thumb
 = 1;

572 i‡(
√w_Ly
 < 0) {

573 
£l
 -= 20;

574 
check_thumb
 = 1;

577 if(
up
) {

578 
check_thumb
 = 1;

579 #i‚de‡
LINUX_MODE


580 if(
	`°rcmp
(
∑th
,"ms0:/"))

582 if(
	`°rcmp
(
∑th
,"./"))

585 
p
=
	`°ºchr
(
∑th
,'/');

586 *
p
=0;

587 
p
=
	`°ºchr
(
∑th
,'/');

588 
p
++;

589 
	`°r˝y
(
ﬁdDú
,
p
);

590 
	`°rˇt
(
ﬁdDú
,"/");

591 *
p
=0;

592 
	`gëDú
(
∑th
);

593 
£l
=0;

594 
i
=0; i<
nfûes
; i++) {

595 if(!
	`°rcmp
(
ﬁdDú
, 
s‹tfûes
[
i
]->
d_«me
)) {

596 
£l
=
i
;

597 
t›
=
£l
-3;

602 
up
=0;

604 
œb_íd
:

606 if(
t›
 > 
nfûes
-
rows
)Åop=nfiles-rows;

607 if(
t›
 < 0)Åop=0;

608 if(
£l
 >
nfûes
) sel=nfiles-1;

609 if(
£l
 < 0) sel=0;

610 if(
£l
 >
t›
+
rows
)Åop=sel-rows+1;

611 if(
£l
 < 
t›
)Åop=sel;

614  
fûe_£À˘ed
;

615 
	}
}

617 
	gu£r_fûedú_kbd
[
PSP_FMGR_MAX_NAME
];

618 
	gu£r_fûedú_£t
[
PSP_FMGR_MAX_NAME
];

619 
	gu£r_fûedú_rom
[
PSP_FMGR_MAX_NAME
];

622 
	$p•_fmgr_míu
(
f‹m©
)

624 
fú°
 = 1;

626 *
u£r_fûedú
;

627 
u£r_fûíame
[
PSP_FMGR_MAX_NAME
];

628 
°©
 
aSèt
;

629 
fûe_f‹m©
;

630 
îr‹
;

631 
ªt
;

633 
u£r_fûe_f‹m©
 = 
f‹m©
;

634 
ªt
 = 0;

636 i‡(
fú°
) {

637 
fú°
 = 0;

638 
	`gëcwd
(
u£r_fûedú_kbd
, 
PSP_FMGR_MAX_NAME
);

639 
	`gëcwd
(
u£r_fûedú_£t
, 
PSP_FMGR_MAX_NAME
);

640 
	`°r˝y
(
u£r_fûedú_rom
, 
u£r_fûedú_kbd
);

641 
	`°rˇt
(
u£r_fûedú_kbd
, "/kbd/");

642 
	`°rˇt
(
u£r_fûedú_£t
, "/set/");

643 
	`°rˇt
(
u£r_fûedú_rom
, "/roms/");

646 i‡(
f‹m©
 =
FMGR_FORMAT_KBD
Ë
u£r_fûedú
 = 
u£r_fûedú_kbd
;

648 i‡(
f‹m©
 =
FMGR_FORMAT_SET
Ë
u£r_fûedú
 = 
u£r_fûedú_£t
;

649 
u£r_fûedú
 = 
u£r_fûedú_rom
;

651 
	`p•_kbd_waô_no_buâ⁄
();

653 i‡(
	`p•_fûe_ªque°
(
u£r_fûíame
, 
u£r_fûedú
)) {

654 
îr‹
 = 0;

655 i‡(
	`°©
(
u£r_fûíame
, &
aSèt
)Ë
îr‹
 = 1;

658 
fûe_f‹m©
 = 
	`p•_fmgr_gëExtId
(
u£r_fûíame
);

660 i‡(
fûe_f‹m©
 =
FMGR_FORMAT_ZIP
) {

662 i‡(
u£r_fûe_f‹m©
 =
FMGR_FORMAT_ROM
Ë 
îr‹
 = 
	`©¨i_lﬂd_rom
(
u£r_fûíame
, 1);

666 i‡(
fûe_f‹m©
 =
FMGR_FORMAT_ROM
Ë 
îr‹
 = 
	`©¨i_lﬂd_rom
(
u£r_fûíame
, 0);

668 i‡(
fûe_f‹m©
 =
FMGR_FORMAT_KBD
Ë 
îr‹
 = 
	`p•_kbd_lﬂd_m≠pög
(
u£r_fûíame
);

670 i‡(
fûe_f‹m©
 =
FMGR_FORMAT_SET
Ë 
îr‹
 = 
	`©¨i_lﬂd_fûe_£âögs
(
u£r_fûíame
);

674 i‡(
îr‹
Ë
ªt
 = -1;

675 
ªt
 = 1;

678 
	`p•_kbd_waô_no_buâ⁄
();

680  
ªt
;

681 
	}
}

	@psp_fmgr.h

19 #i‚de‡
_PSP_FMGR_H_


20 
	#_PSP_FMGR_H_


	)

21 #ifde‡
__˝lu•lus


25 
	#PSP_FMGR_MAX_PATH
 512

	)

26 
	#PSP_FMGR_MAX_NAME
 256

	)

27 
	#PSP_FMGR_MAX_ENTRY
 2048

	)

29 
	#FMGR_FORMAT_ROM
 1

	)

30 
	#FMGR_FORMAT_STATE
 2

	)

31 
	#FMGR_FORMAT_KBD
 3

	)

32 
	#FMGR_FORMAT_ZIP
 4

	)

33 
	#FMGR_FORMAT_SET
 5

	)

35 
p•_fmgr_míu
(
f‹m©
);

36 
p•_fmgr_gëExtId
(c⁄° *
szFûeP©h
);

37 #ifde‡
__˝lu•lus


	@psp_font.c

19 
	gp•_f⁄t
[] = {

	@psp_gu.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

20 
	~<SDL/SDL.h
>

21 
	~<SDL/SDL_mixî.h
>

22 
	~<SDL/SDL_image.h
>

23 
	~<p•˘æ.h
>

24 
	~<p•ty≥s.h
>

25 
	~<≤g.h
>

26 #i‚de‡
LINUX_MODE


27 
	~<p•gu.h
>

28 
	~<p•di•œy.h
>

29 
	~<p•kî√l.h
>

30 
	~<p•πc.h
>

33 
SDL_SurÁ˚
 *
blô_surÁ˚
;

34 
SDL_SurÁ˚
 *
back_surÁ˚
;

36 #i‚de‡
LINUX_MODE


37 
	#PSP_SLICE_SIZE
 (32)

	)

38 
	#SCREEN_WIDTH
 (480)

	)

39 
	#SCREEN_HEIGHT
 (272)

	)

41 
__©åibuã__
((
	$Æig√d
(16))Ë
li°
[4096];

44 
	$p•_sdl_gu_öô
()

46 
	`s˚GuSèπ
(
GU_DIRECT
,
li°
);

47 
	`s˚GuE«bÀ
(
GU_TEXTURE_2D
);

48 
	`s˚GuTexMode
(
GU_PSM_5650
, 0, 0, 
GU_FALSE
);

49 
	`s˚GuTexFunc
(
GU_TFX_REPLACE
, 
GU_TCC_RGB
);

50 
	`s˚GuTexFûãr
(
GU_LINEAR
, GU_LINEAR);

51 
	`s˚GuDißbÀ
(
GU_BLEND
);

52 
	`s˚GuDißbÀ
(
GU_DEPTH_TEST
);

53 
	`s˚GuFöish
();

54 
	`s˚GuSync
(0, 0);

56 
	`s˚Di•œyWaôVbœnkSèπ
();

57 
	}
}

59 
	sãxVîãx
 {

60 
	mu
, 
	mv
;

61 
	mx
, 
	my
, 
	mz
;

64 
	sª˘Vîãx
 {

65 
	mx
, 
	my
, 
	mz
;

68 
ölöe
 
	$roundUpToPowîOfTwo
 (
x
)

70  1 << (32 - 
	`__buûtö_ÆÀgªx_˛z
(
x
 - 1));

71 
	}
}

74 
	$p•_sdl_gu_°ªtch
(
SDL_Re˘
* 
§¸e˘
, SDL_Re˘* 
d°ª˘
)

76 
SDL_SurÁ˚
* 
§c
 = 
blô_surÁ˚
;

77 
ﬁd_¶i˚
 = 0;

78 
¶i˚
, 
num_¶i˚s
, 
width
, 
height
, 
tbw
, 
off_x
, 
off_byãs
;

79 
ãxVîãx
 *
vîti˚s
;

80 *
pixñs
;

82 
	`s˚Kî√lDˇcheWrôebackAŒ
();

84 
off_byãs
 = ()(((*)
§c
->
pixñs
Ë+ 
§¸e˘
->
x
 * src->
f‹m©
->
ByãsPîPixñ
) & 0xf;

85 
off_x
 = 
off_byãs
 / 
§c
->
f‹m©
->
ByãsPîPixñ
;

86 
width
 = 
	`roundUpToPowîOfTwo
(
§¸e˘
->
w
 + 
off_byãs
);

87 
height
 = 
	`roundUpToPowîOfTwo
(
§¸e˘
->
h
);

88 
tbw
 = 
§c
->
pôch
 / src->
f‹m©
->
ByãsPîPixñ
;

91 
pixñs
 = ((*)
§c
->pixñsË+ (
§¸e˘
->
x
 - 
off_x
Ë* src->
f‹m©
->
ByãsPîPixñ
 +

92 
§c
->
pôch
 * 
§¸e˘
->
y
;

93 
num_¶i˚s
 = (
§¸e˘
->
w
 + (
PSP_SLICE_SIZE
 - 1)) / PSP_SLICE_SIZE;

96 i‡(
width
 > 512)

97 
width
 = 512;

99 
	`s˚GuSèπ
(
GU_DIRECT
,
li°
);

100 
	`s˚GuE«bÀ
(
GU_TEXTURE_2D
);

101 
	`s˚GuTexMode
(
GU_PSM_5650
, 0, 0, 
GU_FALSE
);

102 
	`s˚GuTexImage
(0, 
width
, 
height
, 
tbw
, 
pixñs
);

103 
	`s˚GuTexFunc
(
GU_TFX_REPLACE
, 
GU_TCC_RGB
);

104 
	`s˚GuTexFûãr
(
GU_LINEAR
, GU_LINEAR);

106 
¶i˚
 = 0; sli˚ < 
num_¶i˚s
; slice++) {

108 
vîti˚s
 = (
ãxVîãx
*)
	`s˚GuGëMem‹y
(2 * (texVertex));

110 i‡((
¶i˚
 * 
PSP_SLICE_SIZE
Ë< 
width
) {

111 
vîti˚s
[0].
u
 = 
¶i˚
 * 
PSP_SLICE_SIZE
 + 
off_x
;

113 i‡(!
ﬁd_¶i˚
) {

115 
pixñs
 +
width
 * 
§c
->
f‹m©
->
ByãsPîPixñ
;

116 
	`s˚GuTexImage
(0, 
	`roundUpToPowîOfTwo
(
§¸e˘
->
w
 - 
width
),

117 
height
, 
tbw
, 
pixñs
);

118 
	`s˚GuTexSync
();

119 
ﬁd_¶i˚
 = 
¶i˚
;

121 
vîti˚s
[0].
u
 = (
¶i˚
 - 
ﬁd_¶i˚
Ë* 
PSP_SLICE_SIZE
 + 
off_x
;

123 
vîti˚s
[1].
u
 = vîti˚s[0].u + 
PSP_SLICE_SIZE
;

124 i‡(
vîti˚s
[1].
u
 > (
off_x
 + 
§¸e˘
->
w
))

125 
vîti˚s
[1].
u
 = 
off_x
 + 
§¸e˘
->
w
;

127 
vîti˚s
[0].
v
 = 0;

128 
vîti˚s
[1].
v
 = vîti˚s[0].v + 
§¸e˘
->
h
;

130 
vîti˚s
[0].
x
 = 
d°ª˘
->x + (
¶i˚
 * 
PSP_SLICE_SIZE
 * d°ª˘->
w
 + (
§¸e˘
->w - 1)) / srcrect->w;

131 
vîti˚s
[1].
x
 = vîti˚s[0].x + (
PSP_SLICE_SIZE
 * 
d°ª˘
->
w
 + (
§¸e˘
->w - 1)) / srcrect->w;

132 i‡(
vîti˚s
[1].
x
 > (
d°ª˘
->x + d°ª˘->
w
))

133 
vîti˚s
[1].
x
 = 
d°ª˘
->x + d°ª˘->
w
;

135 
vîti˚s
[0].
y
 = 
d°ª˘
->y;

136 
vîti˚s
[1].
y
 = vîti˚s[0].y + 
d°ª˘
->
h
;

138 
vîti˚s
[0].
z
 = 0;

139 
vîti˚s
[1].
z
 = 0;

141 
	`s˚GuDøwAºay
(
GU_SPRITES
,
GU_TEXTURE_16BIT
|
GU_VERTEX_16BIT
|
GU_TRANSFORM_2D
,

142 2,0,
vîti˚s
);

145 
	`s˚GuFöish
();

146 
	`s˚GuSync
(0, 0);

147 
	}
}

150 
	$p•_sdl_gu_°ªtch
(
SDL_Re˘
* 
§¸e˘
, SDL_Re˘* 
d°ª˘
)

152 
	`SDL_BlôSurÁ˚
(
blô_surÁ˚
, 
§¸e˘
, 
back_surÁ˚
, 
d°ª˘
);

153 
	}
}

	@psp_gu.h

17 #i‚de‡
_PSP_GU_H_


18 
	#_PSP_GU_H_


	)

20 
p•_sdl_gu_°ªtch
(
SDL_Re˘
* 
§cRe˘
, SDL_Re˘* 
d°Re˘
);

	@psp_irkeyb.c

19 #ifde‡
USE_PSP_IRKEYB


21 
	~<p•kî√l.h
>

22 
	~<p•debug.h
>

23 
	~<p•di•œy.h
>

24 
	~<p•˘æ.h
>

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

29 
	~"p•_úkeyb.h
"

31 
	gloc_p•_úkeyb_mode
 = 0;

34 
	#KERNELMODE
 0

	)

44 
	$p•_úkeyb_öô
()

46 
loc_p•_úkeyb_mode
 = 0;

48 #ifde‡
PSPFW30X


50 
u32
 
mod_id
 = 
	`s˚Kî√lLﬂdModuÀ
("Êash0:/kd/úda.¥x", 0, 
NULL
);

51 
	`s˚Kî√lSèπModuÀ
(
mod_id
, 0, 
NULL
, NULL, NULL);

54 
ªt
 = 
	`p•IrKeybInô
–"./p•úkeyb.öi", 
KERNELMODE
 );

56 if–
ªt
 =
PSP_IRKBD_RESULT_OK
 ) {

57 
	`p•IrKeybOuçutMode
–
PSP_IRKBD_OUTPUT_MODE_VT100
 );

58 
loc_p•_úkeyb_mode
 = 1;

62  
ªt
 )

64 
PSP_IRKBD_RESULT_CANT_OPEN_DEVICE
:

65 
	`Ârötf
(
°dout
, "error: can't open device\n" );

67 
PSP_IRKBD_RESULT_CANT_OPEN_MAPFILE
:

68 
	`Ârötf
(
°dout
, "error: can't open mapfile\n" );

70 
PSP_IRKBD_RESULT_MAPFILE_MAXDEPTHLEVEL
:

71 
	`Ârötf
(
°dout
, "error: mapfile max includeÜevelÑeached -Ñecursion?\n" );

73 
PSP_IRKBD_RESULT_CANT_OPEN_MAPFILE_INCLUDE
:

74 
	`Ârötf
(
°dout
, "error: can't open include in mapfile\n" );

76 
PSP_IRKBD_RESULT_CANT_SET_BAUDTATE
:

77 
	`Ârötf
(
°dout
, "error: can't set baudrate - youÇeed kernel support\n" );

79 
PSP_IRKBD_RESULT_CONFIG_FILE_NOT_FOUND
:

80 
	`Ârötf
(
°dout
, "error: can'tÑead config file\n" );

82 
PSP_IRKBD_RESULT_UNKNOW_KEYBOARD
:

83 
	`Ârötf
(
°dout
, "error: unknown keyboard\n" );

85 
PSP_IRKBD_RESULT_FAILED
:

87 
	`Ârötf
(
°dout
, "error: init failed\n" );

92 
	}
}

94 
u8
 
	gloc_úkbd_buf„r
[ 512 ];

95 
	gloc_úkbd_Àngth
 = 0;

96 
	gloc_úkbd_cuºít
 = 0;

97 
	gloc_úkbd_öc_°ï
 = 0;

100 
	$p•_úkeyb_check_key
()

102 
key
 = 
PSP_IRKEYB_EMPTY
;

103 
loc_úkbd_öc_°ï
 = 0;

104 i‡(
loc_p•_úkeyb_mode
) {

105 i‡(
loc_úkbd_cuºít
 >
loc_úkbd_Àngth
) {

106 
loc_úkbd_cuºít
 = 0;

107 
loc_úkbd_Àngth
 = 0;

108 
	`p•IrKeybRódöput
(
loc_úkbd_buf„r
, &
loc_úkbd_Àngth
);

110 
dñè
 = 
loc_úkbd_Àngth
 - 
loc_úkbd_cuºít
;

111 i‡(
dñè
 >= 3) {

112 
u8
* 
sˇn_buf„r
 = &
loc_úkbd_buf„r
[
loc_úkbd_cuºít
];

113 i‡(!
	`°∫cmp
(
sˇn_buf„r
, "\033[B", 3)) {

114 
key
 = 
PSP_IRKEYB_DOWN
;

115 
loc_úkbd_öc_°ï
 = 3;

117 i‡(!
	`°∫cmp
(
sˇn_buf„r
, "\033[A", 3)) {

118 
key
 = 
PSP_IRKEYB_UP
;

119 
loc_úkbd_öc_°ï
 = 3;

121 i‡(!
	`°∫cmp
(
sˇn_buf„r
, "\033[C", 3)) {

122 
key
 = 
PSP_IRKEYB_RIGHT
;

123 
loc_úkbd_öc_°ï
 = 3;

125 i‡(!
	`°∫cmp
(
sˇn_buf„r
, "\033[D", 3)) {

126 
key
 = 
PSP_IRKEYB_LEFT
;

127 
loc_úkbd_öc_°ï
 = 3;

130 i‡(
dñè
 >= 1) {

131 i‡(
key
 =
PSP_IRKEYB_EMPTY
) {

133 
key
 = 
loc_úkbd_buf„r
[
loc_úkbd_cuºít
];

134 i‡((
key
 =9Ë|| (key =23)Ëkey = 
PSP_IRKEYB_START
;

136 i‡((
key
 =0x1bË|| (key =17)Ëkey = 
PSP_IRKEYB_SELECT
;

138 i‡(
key
 =5Ëkey = 
PSP_IRKEYB_TRIANGLE
;

140 i‡(
key
 =19Ëkey = 
PSP_IRKEYB_SQUARE
;

142 i‡(
key
 =24Ëkey = 
PSP_IRKEYB_CROSS
;

144 i‡(
key
 =6Ëkey = 
PSP_IRKEYB_CIRCLE
;

146 i‡(
key
 =26Ëkey = 
PSP_IRKEYB_LTRIGGER
;

148 i‡(
key
 =3Ëkey = 
PSP_IRKEYB_RTRIGGER
;

150 
loc_úkbd_öc_°ï
 = 1;

155 i‡(
key
 !
PSP_IRKEYB_EMPTY
) {

156 
	`Ârötf
(
°dout
, "¥es†%x %c\n", 
key
, key);

159  
key
;

160 
	}
}

163 
	$p•_úkeyb_öc_buf„r
()

165 i‡(
loc_úkbd_öc_°ï
) {

166 
loc_úkbd_cuºít
 +
loc_úkbd_öc_°ï
;

167 
loc_úkbd_öc_°ï
 = 0;

169 
	}
}

172 
	$loc_p•_úkeyb_ªad_key
()

174 
p•_úkeyb
 = 
	`p•_úkeyb_check_key
();

175 i‡(
p•_úkeyb
 < 0Ëp•_úkeyb = 
PSP_IRKEYB_EMPTY
;

177 
	`p•_úkeyb_öc_buf„r
();

179  
p•_úkeyb
;

180 
	}
}

183 
	$p•_úkeyb_ªad_key
()

185 
p•_úkeyb
 = 
	`loc_p•_úkeyb_ªad_key
();

186 i‡(
p•_úkeyb
 !
PSP_IRKEYB_EMPTY
) {

187 i‡((
p•_úkeyb
 == 0xc2) || (psp_irkeyb == 0xc3)) {

188 
u8
 
c1
 = 
p•_úkeyb
;

189 
√w_key
 = 
	`loc_p•_úkeyb_ªad_key
();

190 i‡(
√w_key
 !
PSP_IRKEYB_EMPTY
) {

191 
u8
 
c2
 = 
√w_key
;

192 
p•_úkeyb
 = 
	`p•_c⁄vît_utf8_to_iso_8859_1
(
c1
, 
c2
);

196  
p•_úkeyb
;

197 
	}
}

200 
	$p•_úkeyb_£t_p•_key
(
S˚CålD©a
* 
c
)

202 
¥ev_öc_°ï
 = 
loc_úkbd_öc_°ï
;

203 
úkeyb_key
 = 
	`p•_úkeyb_check_key
();

204 i‡(
úkeyb_key
 !
PSP_IRKEYB_EMPTY
) {

206 i‡(
úkeyb_key
 =
PSP_IRKEYB_UP
Ë
c
->
Buâ⁄s
 |
PSP_CTRL_UP
;

208 i‡(
úkeyb_key
 =
PSP_IRKEYB_DOWN
Ë
c
->
Buâ⁄s
 |
PSP_CTRL_DOWN
;

210 i‡(
úkeyb_key
 =
PSP_IRKEYB_RIGHT
Ë
c
->
Buâ⁄s
 |
PSP_CTRL_RIGHT
;

212 i‡(
úkeyb_key
 =
PSP_IRKEYB_LEFT
Ë
c
->
Buâ⁄s
 |
PSP_CTRL_LEFT
;

214 i‡(
úkeyb_key
 =
PSP_IRKEYB_START
Ë
c
->
Buâ⁄s
 |
PSP_CTRL_START
;

216 i‡(
úkeyb_key
 =
PSP_IRKEYB_SELECT
Ë
c
->
Buâ⁄s
 |
PSP_CTRL_SELECT
;

218 i‡(
úkeyb_key
 =
PSP_IRKEYB_TRIANGLE
Ë
c
->
Buâ⁄s
 |
PSP_CTRL_TRIANGLE
;

220 i‡(
úkeyb_key
 =
PSP_IRKEYB_SQUARE
Ë
c
->
Buâ⁄s
 |
PSP_CTRL_SQUARE
;

222 i‡(
úkeyb_key
 =
PSP_IRKEYB_CROSS
Ë
c
->
Buâ⁄s
 |
PSP_CTRL_CROSS
;

224 i‡(
úkeyb_key
 =
PSP_IRKEYB_CIRCLE
Ë
c
->
Buâ⁄s
 |
PSP_CTRL_CIRCLE
;

226 i‡(
úkeyb_key
 =
PSP_IRKEYB_LTRIGGER
Ë
c
->
Buâ⁄s
 |
PSP_CTRL_LTRIGGER
;

228 i‡(
úkeyb_key
 =
PSP_IRKEYB_RTRIGGER
Ë
c
->
Buâ⁄s
 |
PSP_CTRL_RTRIGGER
;

230 i‡(
¥ev_öc_°ï
) {

232 
loc_úkbd_öc_°ï
 = 
¥ev_öc_°ï
;

233 
	`p•_úkeyb_öc_buf„r
();

235  
úkeyb_key
;

237 
	`p•_úkeyb_öc_buf„r
();

239  
úkeyb_key
;

240 
	}
}

243 
	$p•_úkeyb_exô
()

245 i‡(
loc_p•_úkeyb_mode
) {

246 
loc_p•_úkeyb_mode
 = 0;

247 
	`p•IrKeybFöish
();

249 
	}
}

	@psp_irkeyb.h

19 #i‚de‡
_PSP_IRKEYB_H_


20 
	#_PSP_IRKEYB_H_


	)

22 #ifde‡
__˝lu•lus


26 #ifde‡
USE_PSP_IRKEYB


28 
	~<p•úkeyb.h
>

29 
	~<p•úkeyb_øwkeys.h
>

31 
	#PSP_IRKEYB_UP
 -100

	)

32 
	#PSP_IRKEYB_DOWN
 -101

	)

33 
	#PSP_IRKEYB_LEFT
 -102

	)

34 
	#PSP_IRKEYB_RIGHT
 -103

	)

35 
	#PSP_IRKEYB_CROSS
 -104

	)

36 
	#PSP_IRKEYB_TRIANGLE
 -105

	)

37 
	#PSP_IRKEYB_CIRCLE
 -106

	)

38 
	#PSP_IRKEYB_SQUARE
 -107

	)

39 
	#PSP_IRKEYB_SELECT
 -108

	)

40 
	#PSP_IRKEYB_START
 -109

	)

41 
	#PSP_IRKEYB_LTRIGGER
 -110

	)

42 
	#PSP_IRKEYB_RTRIGGER
 -111

	)

43 
	#PSP_IRKEYB_EMPTY
 -1

	)

45 
p•_úkeyb_öô
();

46 
p•_úkeyb_exô
();

47 
p•_úkeyb_waô_key
();

48 
p•_úkeyb_ªad_key
();

49 
p•_úkeyb_£t_p•_key
(
S˚CålD©a
* 
c
);

53 #ifde‡
__˝lu•lus


	@psp_kbd.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<sig«l.h
>

22 
	~<uni°d.h
>

23 
	~<°rög.h
>

24 
	~<î∫o.h
>

25 
	~<sys/time.h
>

26 
	~<f˙é.h
>

28 
	~<p•˘æ.h
>

29 
	~<p•kî√l.h
>

30 
	~<p•debug.h
>

31 
	~<SDL.h
>

33 
	~"Aèri.h
"

34 
	~"globÆ.h
"

35 
	~"p•_kbd.h
"

36 
	~"p•_míu.h
"

37 
	~"p•_sdl.h
"

38 
	~"p•_d™zeff.h
"

39 
	~"p•_úkeyb.h
"

41 
	#KBD_MIN_ANALOG_TIME
 150000

	)

42 
	#KBD_MIN_START_TIME
 800000

	)

43 
	#KBD_MAX_EVENT_TIME
 500000

	)

44 
	#KBD_MIN_PENDING_TIME
 300000

	)

45 
	#KBD_MIN_HOTKEY_TIME
 1000000

	)

46 
	#KBD_MIN_DANZEFF_TIME
 150000

	)

47 
	#KBD_MIN_COMMAND_TIME
 100000

	)

48 
	#KBD_MIN_BATTCHECK_TIME
 90000000

	)

49 
	#KBD_MIN_AUTOFIRE_TIME
 1000000

	)

51 
S˚CålD©a
 
	gloc_buâ⁄_d©a
;

52 
	gloc_œ°_evít_time
 = 0;

53 
	gloc_œ°_hŸkey_time
 = 0;

54 #ifde‡
USE_PSP_IRKEYB


55 
	gloc_œ°_úkbd_evít_time
 = 0;

57 
	gloc_œ°_™Æog_time
 = 0;

58 
	gfú°_time_°amp
 = -1;

59 
	gfú°_time_b©t_°amp
 = -1;

60 
	gfú°_time_auto_°amp
 = -1;

61 
	gloc_buâ⁄_¥ess
[ 
KBD_MAX_BUTTONS
 ];

62 
	gloc_buâ⁄_ªÀa£
[ 
KBD_MAX_BUTTONS
 ];

63 
	gloc_buâ⁄_mask
[ 
KBD_MAX_BUTTONS
 ] =

65 
PSP_CTRL_UP
 ,

66 
PSP_CTRL_RIGHT
 ,

67 
PSP_CTRL_DOWN
 ,

68 
PSP_CTRL_LEFT
 ,

69 
PSP_CTRL_TRIANGLE
 ,

70 
PSP_CTRL_CIRCLE
 ,

71 
PSP_CTRL_CROSS
 ,

72 
PSP_CTRL_SQUARE
 ,

73 
PSP_CTRL_SELECT
 ,

74 
PSP_CTRL_START
 ,

75 
PSP_CTRL_HOME
 ,

76 
PSP_CTRL_HOLD
 ,

77 
PSP_CTRL_LTRIGGER
 ,

78 
PSP_CTRL_RTRIGGER
 ,

81 
	gloc_buâ⁄_«me
[ 
KBD_ALL_BUTTONS
 ][10] =

103 
	gloc_buâ⁄_«me_L
[ 
KBD_ALL_BUTTONS
 ][20] =

125 
	gloc_buâ⁄_«me_R
[ 
KBD_ALL_BUTTONS
 ][20] =

147 
©¨i_key_å™s
 
	gp•_©¨i_key_to_«me
[
ATARI_MAX_KEY
]=

149 { 
NoTy≥
, "None" },

150 { 
C⁄sﬁeOn
, "On" },

151 { 
C⁄sﬁeOff
, "Off" },

152 { 
C⁄sﬁeCﬁ‹
, "Color" },

153 { 
C⁄sﬁeBœckWhôe
, "B&W" },

154 { 
C⁄sﬁeLe·Difficu…yA
, "LDiffA" },

155 { 
C⁄sﬁeLe·Difficu…yB
, "LDiffB" },

156 { 
C⁄sﬁeRightDifficu…yA
, "RDiffA" },

157 { 
C⁄sﬁeRightDifficu…yB
, "RDiffB" },

158 { 
C⁄sﬁeSñe˘
, "Select" },

159 { 
C⁄sﬁeRe£t
, "Reset" },

160 { 
Joy°ickZîoUp
, "J0_Up" },

161 { 
Joy°ickZîoDown
, "J0_Down" },

162 { 
Joy°ickZîoLe·
, "J0_Left" },

163 { 
Joy°ickZîoRight
, "J0_Right" },

164 { 
Joy°ickZîoFúe
, "J0_Fire" },

165 { 
Joy°ickO√Up
, "J1_Up" },

166 { 
Joy°ickO√Down
, "J1_Down" },

167 { 
Joy°ickO√Le·
, "J1_Left" },

168 { 
Joy°ickO√Right
, "J1_Right" },

169 { 
Joy°ickO√Fúe
, "J1_Fire" },

170 { 
PaddÀZîoResi°™˚
, "P0_Resistance" },

171 { 
PaddÀZîoFúe
, "P0_Fire" },

172 { 
PaddÀO√Resi°™˚
, "P1_Resistance" },

173 { 
PaddÀO√Fúe
, "P1_Fire" },

174 { 
PaddÀTwoResi°™˚
, "P2_Resistance" },

175 { 
PaddÀTwoFúe
, "P2_Fire" },

176 { 
PaddÀThªeResi°™˚
, "P3_Resistance" },

177 { 
PaddÀThªeFúe
, "P3_Fire" } ,

178 { 
ATARIC_FPS
, "C_FPS" },

179 { 
ATARIC_JOY
, "C_JOY" },

180 { 
ATARIC_RENDER
, "C_RENDER" },

181 { 
ATARIC_LOAD
, "C_LOAD" },

182 { 
ATARIC_SAVE
, "C_SAVE" },

183 { 
ATARIC_RESET
, "C_RESET" },

184 { 
ATARIC_AUTOFIRE
, "C_AUTOFIRE" },

185 { 
ATARIC_INCFIRE
, "C_INCFIRE" },

186 { 
ATARIC_DECFIRE
, "C_DECFIRE" },

187 { 
ATARIC_SCREEN
, "C_SCREEN" }

190 
	gloc_deÁu…_m≠pög
[ 
KBD_ALL_BUTTONS
 ] = {

191 
Joy°ickO√Up
 ,

192 
Joy°ickO√Right
 ,

193 
Joy°ickO√Down
 ,

194 
Joy°ickO√Le·
 ,

195 
C⁄sﬁeRe£t
 ,

196 
C⁄sﬁeSñe˘
 ,

197 
Joy°ickZîoFúe
 ,

198 
C⁄sﬁeRightDifficu…yA
,

203 
KBD_LTRIGGER_MAPPING
 ,

204 
KBD_RTRIGGER_MAPPING
 ,

205 
Joy°ickZîoUp
 ,

206 
Joy°ickZîoRight
 ,

207 
Joy°ickZîoDown
 ,

208 
Joy°ickZîoLe·


211 
	gloc_deÁu…_m≠pög_L
[ 
KBD_ALL_BUTTONS
 ] = {

212 
Joy°ickO√Up
 ,

213 
ATARIC_RENDER
 ,

214 
Joy°ickO√Down
 ,

215 
ATARIC_RENDER
 ,

216 
ATARIC_LOAD
 ,

217 
ATARIC_JOY
 ,

218 
ATARIC_SAVE
 ,

219 
ATARIC_FPS
 ,

224 
KBD_LTRIGGER_MAPPING
 ,

225 
KBD_RTRIGGER_MAPPING
 ,

226 
Joy°ickZîoUp
 ,

227 
Joy°ickZîoRight
 ,

228 
Joy°ickZîoDown
 ,

229 
Joy°ickZîoLe·


232 
	gloc_deÁu…_m≠pög_R
[ 
KBD_ALL_BUTTONS
 ] = {

233 
Joy°ickO√Up
 ,

234 
ATARIC_INCFIRE
 ,

235 
Joy°ickO√Down
 ,

236 
ATARIC_DECFIRE
 ,

237 
C⁄sﬁeRe£t
 ,

238 
C⁄sﬁeSñe˘
 ,

239 
ATARIC_AUTOFIRE
 ,

240 
C⁄sﬁeRightDifficu…yB
,

245 
KBD_LTRIGGER_MAPPING
 ,

246 
KBD_RTRIGGER_MAPPING
 ,

247 
Joy°ickZîoUp
 ,

248 
Joy°ickZîoRight
 ,

249 
Joy°ickZîoDown
 ,

250 
Joy°ickZîoLe·


253 
	gp•_kbd_m≠pög
[ 
KBD_ALL_BUTTONS
 ];

254 
	gp•_kbd_m≠pög_L
[ 
KBD_ALL_BUTTONS
 ];

255 
	gp•_kbd_m≠pög_R
[ 
KBD_ALL_BUTTONS
 ];

256 
	gp•_kbd_¥es£s
[ 
KBD_ALL_BUTTONS
 ];

257 
	gkbd_…riggî_m≠pög_a˘ive
;

258 
	gkbd_πriggî_m≠pög_a˘ive
;

260 
	gd™zeff_©¨i_key
 = 0;

261 
	gd™zeff_©¨i_≥ndög
 = 0;

262 
	gd™zeff_mode
 = 0;

264 #ifde‡
USE_PSP_IRKEYB


265 
	gúkeyb_©¨i_key
 = 0;

266 
	gúkeyb_©¨i_≥ndög
 = 0;

269 
	#KBD_MAX_ENTRIES
 20

	)

271 
	gkbd_œyout
[
KBD_MAX_ENTRIES
][2] = {

273 { 
C⁄sﬁeOn
, -1 },

274 { 
C⁄sﬁeOff
, -1 },

275 { 
C⁄sﬁeCﬁ‹
, -1 },

276 { 
C⁄sﬁeBœckWhôe
, -1 },

277 { 
C⁄sﬁeLe·Difficu…yA
, 
DANZEFF_LDIFFA
},

278 { 
C⁄sﬁeLe·Difficu…yB
, 
DANZEFF_LDIFFB
},

279 { 
C⁄sﬁeRightDifficu…yA
, 
DANZEFF_RDIFFA
 },

280 { 
C⁄sﬁeRightDifficu…yB
, 
DANZEFF_RDIFFB
 },

281 { 
C⁄sﬁeSñe˘
, 
DANZEFF_SEL
 },

282 { 
C⁄sﬁeRe£t
, 
DANZEFF_RESET
 },

283 { 
Joy°ickZîoUp
, -1 },

284 { 
Joy°ickZîoDown
, -1 },

285 { 
Joy°ickZîoLe·
, -1 },

286 { 
Joy°ickZîoRight
, -1 },

287 { 
Joy°ickZîoFúe
, -1 },

288 { 
Joy°ickO√Up
, -1 },

289 { 
Joy°ickO√Down
, -1 },

290 { 
Joy°ickO√Le·
, -1 },

291 { 
Joy°ickO√Right
, -1 },

292 { 
Joy°ickO√Fúe
 , -1 },

295 
	#PADDLE_MIN_RES
 10000

	)

296 
	#PADDLE_STEP_RES
 10000

	)

297 
	#PADDLE_MAX_RES
 1000000

	)

299 
	#PADDLE_MIDDLE_RES
 500000

	)

301 
	g∑ddÀ_zîo_ªsi°™˚
 = 
PADDLE_MIDDLE_RES
;

302 
	g∑ddÀ_⁄e_ªsi°™˚
 = 
PADDLE_MIDDLE_RES
;

304 
ölöe
 

305 
	$©¨i_öc_ªsi°™˚
(*
∑ddÀ
, 
°ï
)

307 *
∑ddÀ
 = *∑ddÀ + 
°ï
;

309 i‡(*
∑ddÀ
 < 
PADDLE_MIN_RES
) *paddle = PADDLE_MIN_RES;

310 i‡(*
∑ddÀ
 > 
PADDLE_MAX_RES
) *paddle = PADDLE_MAX_RES;

311 
	}
}

314 
	$©¨i_∑ddÀ_evít
(
©¨i_idx
)

316 
°ï
 = 
ATARI
.
©¨i_∑ddÀ_•ìd
 * 
PADDLE_STEP_RES
;

318 i‡(! 
ATARI
.
©¨i_∑ddÀ_íabÀ
) ;

320 i‡(
ATARI
.
p•_a˘ive_joy°ick
) {

321 i‡((
©¨i_idx
 >
Joy°ickZîoUp
) &&

322 (
©¨i_idx
 <
Joy°ickZîoFúe
)) {

324 
©¨i_idx
 =áèri_idx - 
Joy°ickZîoUp
 + 
Joy°ickO√Up
;

328 i‡(
©¨i_idx
 =
Joy°ickZîoLe·
) {

329 
	`©¨i_öc_ªsi°™˚
(&
∑ddÀ_zîo_ªsi°™˚
, 
°ï
);

330 
	`maö_©¨i_£nd_∑ddÀ_evít
(
PaddÀZîoResi°™˚
, 
∑ddÀ_zîo_ªsi°™˚
);

332 i‡(
©¨i_idx
 =
Joy°ickZîoRight
) {

333 
	`©¨i_öc_ªsi°™˚
(&
∑ddÀ_zîo_ªsi°™˚
, - 
°ï
);

334 
	`maö_©¨i_£nd_∑ddÀ_evít
(
PaddÀZîoResi°™˚
, 
∑ddÀ_zîo_ªsi°™˚
);

337 i‡(
©¨i_idx
 =
Joy°ickO√Le·
) {

338 
	`©¨i_öc_ªsi°™˚
(&
∑ddÀ_⁄e_ªsi°™˚
, 
°ï
);

339 
	`maö_©¨i_£nd_∑ddÀ_evít
(
PaddÀO√Resi°™˚
, 
∑ddÀ_⁄e_ªsi°™˚
);

341 i‡(
©¨i_idx
 =
Joy°ickO√Right
) {

342 
	`©¨i_öc_ªsi°™˚
(&
∑ddÀ_⁄e_ªsi°™˚
, - 
°ï
);

343 
	`maö_©¨i_£nd_∑ddÀ_evít
(
PaddÀO√Resi°™˚
, 
∑ddÀ_⁄e_ªsi°™˚
);

345 
	}
}

348 
	$©¨i_key_evít
(
©¨i_idx
, 
key_¥ess
)

350 i‡(
ATARI
.
p•_a˘ive_joy°ick
) {

351 i‡((
©¨i_idx
 >
Joy°ickZîoUp
) &&

352 (
©¨i_idx
 <
Joy°ickZîoFúe
)) {

354 
©¨i_idx
 =áèri_idx - 
Joy°ickZîoUp
 + 
Joy°ickO√Up
;

357 i‡((
©¨i_idx
 >
ATARIC_FPS
) &&

358 (
©¨i_idx
 <
ATARIC_SCREEN
)) {

360 i‡(
key_¥ess
) {

361 
S˚CålD©a
 
c
;

362 
	`s˚CålPìkBuf„rPosôive
(&
c
, 1);

363 i‡((
c
.
TimeSèmp
 - 
loc_œ°_hŸkey_time
Ë> 
KBD_MIN_HOTKEY_TIME
) {

364 
loc_œ°_hŸkey_time
 = 
c
.
TimeSèmp
;

365 
	`©¨i_åót_comm™d_key
(
©¨i_idx
);

370 i‡((
©¨i_idx
 >= 0) &&

371 (
©¨i_idx
 < 
ATARI_MAX_KEY
)) {

372 
	`maö_©¨i_£nd_key_evít
(
©¨i_idx
, 
key_¥ess
);

373 i‡(
©¨i_idx
 =
Joy°ickZîoFúe
) {

374 
	`maö_©¨i_£nd_key_evít
(
PaddÀZîoFúe
, 
key_¥ess
);

376 i‡(
©¨i_idx
 =
Joy°ickO√Fúe
) {

377 
	`maö_©¨i_£nd_key_evít
(
PaddÀO√Fúe
, 
key_¥ess
);

382 
	}
}

386 
	$©¨i_kbd_ª£t
()

388 
	`mem£t
(
loc_buâ⁄_¥ess
 , 0, (loc_button_press));

389 
	`mem£t
(
loc_buâ⁄_ªÀa£
, 0, (loc_button_release));

391 
∑ddÀ_⁄e_ªsi°™˚
 = 
PADDLE_MIDDLE_RES
;

392 
∑ddÀ_zîo_ªsi°™˚
 = 
PADDLE_MIDDLE_RES
;

395 
	}
}

398 
	$©¨i_gë_key_‰om_ascii
(
key_ascii
)

400 
ödex
;

401 
ödex
 = 0; index < 
KBD_MAX_ENTRIES
; index++) {

402 i‡(
kbd_œyout
[
ödex
][1] =
key_ascii
)  kbd_layout[index][0];

405 
	}
}

408 
	$p•_kbd_ª£t_m≠pög
()

410 
	`mem˝y
(
p•_kbd_m≠pög
, 
loc_deÁu…_m≠pög
, (loc_default_mapping));

411 
	`mem˝y
(
p•_kbd_m≠pög_L
, 
loc_deÁu…_m≠pög_L
, (loc_default_mapping_L));

412 
	`mem˝y
(
p•_kbd_m≠pög_R
, 
loc_deÁu…_m≠pög_R
, (loc_default_mapping_R));

414 
	}
}

417 
	$p•_kbd_ª£t_hŸkeys
()

419 
ödex
;

420 
key_id
;

421 
ödex
 = 0; index < 
KBD_ALL_BUTTONS
; index++) {

422 
key_id
 = 
loc_deÁu…_m≠pög
[
ödex
];

423 i‡((
key_id
 >
ATARIC_FPS
Ë&& (key_id <
ATARIC_SCREEN
)) {

424 
p•_kbd_m≠pög
[
ödex
] = 
key_id
;

426 
key_id
 = 
loc_deÁu…_m≠pög_L
[
ödex
];

427 i‡((
key_id
 >
ATARIC_FPS
Ë&& (key_id <
ATARIC_SCREEN
)) {

428 
p•_kbd_m≠pög_L
[
ödex
] = 
key_id
;

430 
key_id
 = 
loc_deÁu…_m≠pög_R
[
ödex
];

431 i‡((
key_id
 >
ATARIC_FPS
Ë&& (key_id <
ATARIC_SCREEN
)) {

432 
p•_kbd_m≠pög_R
[
ödex
] = 
key_id
;

436 
	}
}

439 
	$p•_kbd_lﬂd_m≠pög
(*
kbd_fûíame
)

441 
FILE
 *
KbdFûe
;

442 
îr‹
 = 0;

444 
KbdFûe
 = 
	`f›í
(
kbd_fûíame
, "r");

445 
îr‹
 = 1;

447 i‡(
KbdFûe
 !(
FILE
*)0) {

448 
	`p•_kbd_lﬂd_m≠pög_fûe
(
KbdFûe
);

449 
îr‹
 = 0;

450 
	`f˛o£
(
KbdFûe
);

453 
kbd_…riggî_m≠pög_a˘ive
 = 0;

454 
kbd_πriggî_m≠pög_a˘ive
 = 0;

456  
îr‹
;

457 
	}
}

460 
	$p•_kbd_lﬂd_m≠pög_fûe
(
FILE
 *
KbdFûe
)

462 
Buf„r
[512];

463 *
Sˇn
;

464 
tmp_m≠pög
[
KBD_ALL_BUTTONS
];

465 
tmp_m≠pög_L
[
KBD_ALL_BUTTONS
];

466 
tmp_m≠pög_R
[
KBD_ALL_BUTTONS
];

467 
©¨i_key_id
 = 0;

468 
kbd_id
 = 0;

470 
	`mem˝y
(
tmp_m≠pög
, 
loc_deÁu…_m≠pög
, (loc_default_mapping));

471 
	`mem˝y
(
tmp_m≠pög_L
, 
loc_deÁu…_m≠pög_L
, (loc_default_mapping_L));

472 
	`mem˝y
(
tmp_m≠pög_R
, 
loc_deÁu…_m≠pög_R
, (loc_default_mapping_R));

474 
	`fgës
(
Buf„r
,512,
KbdFûe
) != (*)0) {

476 
Sˇn
 = 
	`°rchr
(
Buf„r
,'\n');

477 i‡(
Sˇn
) *Scan = '\0';

479 
Sˇn
 = 
	`°rchr
(
Buf„r
,'\r');

480 i‡(
Sˇn
) *Scan = '\0';

481 i‡(
Buf„r
[0] == '#') ;

483 
Sˇn
 = 
	`°rchr
(
Buf„r
,'=');

484 i‡(! 
Sˇn
) ;

486 *
Sˇn
 = '\0';

487 
©¨i_key_id
 = 
	`©oi
(
Sˇn
 + 1);

489 
kbd_id
 = 0; kbd_id < 
KBD_ALL_BUTTONS
; kbd_id++) {

490 i‡(!
	`°rˇ£cmp
(
Buf„r
,
loc_buâ⁄_«me
[
kbd_id
])) {

491 
tmp_m≠pög
[
kbd_id
] = 
©¨i_key_id
;

495 
kbd_id
 = 0; kbd_id < 
KBD_ALL_BUTTONS
; kbd_id++) {

496 i‡(!
	`°rˇ£cmp
(
Buf„r
,
loc_buâ⁄_«me_L
[
kbd_id
])) {

497 
tmp_m≠pög_L
[
kbd_id
] = 
©¨i_key_id
;

501 
kbd_id
 = 0; kbd_id < 
KBD_ALL_BUTTONS
; kbd_id++) {

502 i‡(!
	`°rˇ£cmp
(
Buf„r
,
loc_buâ⁄_«me_R
[
kbd_id
])) {

503 
tmp_m≠pög_R
[
kbd_id
] = 
©¨i_key_id
;

509 
	`mem˝y
(
p•_kbd_m≠pög
, 
tmp_m≠pög
, (psp_kbd_mapping));

510 
	`mem˝y
(
p•_kbd_m≠pög_L
, 
tmp_m≠pög_L
, (psp_kbd_mapping_L));

511 
	`mem˝y
(
p•_kbd_m≠pög_R
, 
tmp_m≠pög_R
, (psp_kbd_mapping_R));

514 
	}
}

517 
	$p•_kbd_ßve_m≠pög
(*
kbd_fûíame
)

519 
FILE
 *
KbdFûe
;

520 
kbd_id
 = 0;

521 
îr‹
 = 0;

523 
KbdFûe
 = 
	`f›í
(
kbd_fûíame
, "w");

524 
îr‹
 = 1;

526 i‡(
KbdFûe
 !(
FILE
*)0) {

528 
kbd_id
 = 0; kbd_id < 
KBD_ALL_BUTTONS
; kbd_id++)

530 
	`Ârötf
(
KbdFûe
, "%s=%d\n", 
loc_buâ⁄_«me
[
kbd_id
], 
p•_kbd_m≠pög
[kbd_id]);

532 
kbd_id
 = 0; kbd_id < 
KBD_ALL_BUTTONS
; kbd_id++)

534 
	`Ârötf
(
KbdFûe
, "%s=%d\n", 
loc_buâ⁄_«me_L
[
kbd_id
], 
p•_kbd_m≠pög_L
[kbd_id]);

536 
kbd_id
 = 0; kbd_id < 
KBD_ALL_BUTTONS
; kbd_id++)

538 
	`Ârötf
(
KbdFûe
, "%s=%d\n", 
loc_buâ⁄_«me_R
[
kbd_id
], 
p•_kbd_m≠pög_R
[kbd_id]);

540 
îr‹
 = 0;

541 
	`f˛o£
(
KbdFûe
);

544  
îr‹
;

545 
	}
}

548 
	$p•_kbd_is_d™zeff_mode
()

550  
d™zeff_mode
;

551 
	}
}

554 
	$p•_kbd_íãr_d™zeff
()

556 
d™zeff_key
 = 0;

557 
©¨i_key
 = 0;

558 
key_code
 = 
C⁄sﬁeSñe˘
;

559 
S˚CålD©a
 
c
;

561 i‡(! 
d™zeff_mode
) {

562 
	`p•_öô_keybﬂrd
();

563 
d™zeff_mode
 = 1;

566 
	`s˚CålPìkBuf„rPosôive
(&
c
, 1);

567 
c
.
Buâ⁄s
 &
PSP_ALL_BUTTON_MASK
;

569 i‡(
d™zeff_©¨i_≥ndög
)

571 i‡((
c
.
TimeSèmp
 - 
loc_œ°_evít_time
Ë> 
KBD_MIN_PENDING_TIME
) {

572 
loc_œ°_evít_time
 = 
c
.
TimeSèmp
;

573 
d™zeff_©¨i_≥ndög
 = 0;

574 
	`©¨i_key_evít
(
d™zeff_©¨i_key
, 0);

580 i‡((
c
.
TimeSèmp
 - 
loc_œ°_evít_time
Ë> 
KBD_MIN_DANZEFF_TIME
) {

581 
loc_œ°_evít_time
 = 
c
.
TimeSèmp
;

583 
	`s˚CålPìkBuf„rPosôive
(&
c
, 1);

584 
c
.
Buâ⁄s
 &
PSP_ALL_BUTTON_MASK
;

585 #ifde‡
USE_PSP_IRKEYB


586 
	`p•_úkeyb_£t_p•_key
(&
c
);

588 
d™zeff_key
 = 
	`d™zeff_ªadI≈ut
(
c
);

591 i‡(
d™zeff_key
 =
DANZEFF_LEFT
) {

592 
d™zeff_key
 = 
DANZEFF_LDIFFA
;

593 } i‡(
d™zeff_key
 =
DANZEFF_DOWN
) {

594 
d™zeff_key
 = 
DANZEFF_LDIFFB
;

595 } i‡(
d™zeff_key
 =
DANZEFF_RIGHT
) {

596 } i‡(
d™zeff_key
 =
DANZEFF_UP
) {

599 i‡(
d™zeff_key
 > 
DANZEFF_START
) {

600 
©¨i_key
 = 
	`©¨i_gë_key_‰om_ascii
(
d™zeff_key
);

602 i‡(
©¨i_key
 != -1) {

603 
d™zeff_©¨i_key
 = 
©¨i_key
;

604 
d™zeff_©¨i_≥ndög
 = 10;

605 
	`©¨i_key_evít
(
d™zeff_©¨i_key
, 1);

610 } i‡(
d™zeff_key
 =
DANZEFF_START
) {

611 
d™zeff_mode
 = 0;

612 
d™zeff_©¨i_≥ndög
 = 0;

613 
d™zeff_©¨i_key
 = 0;

615 
	`p•_kbd_waô_no_buâ⁄
();

617 } i‡(
d™zeff_key
 =
DANZEFF_SELECT
) {

618 
d™zeff_mode
 = 0;

619 
d™zeff_©¨i_≥ndög
 = 0;

620 
d™zeff_©¨i_key
 = 0;

621 
	`p•_maö_míu
();

622 
	`p•_öô_keybﬂrd
();

624 
	`p•_kbd_waô_no_buâ⁄
();

628 
	}
}

630 #ifde‡
USE_PSP_IRKEYB


632 
	$p•_kbd_íãr_úkeyb
()

634 
©¨i_key
 = 0;

635 
p•_úkeyb
 = 
PSP_IRKEYB_EMPTY
;

637 
S˚CålD©a
 
c
;

638 
	`s˚CålPìkBuf„rPosôive
(&
c
, 1);

640 i‡(
úkeyb_©¨i_≥ndög
)

642 i‡((
c
.
TimeSèmp
 - 
loc_œ°_úkbd_evít_time
Ë> 
KBD_MIN_PENDING_TIME
) {

643 
loc_œ°_úkbd_evít_time
 = 
c
.
TimeSèmp
;

644 
úkeyb_©¨i_≥ndög
 = 0;

645 
	`©¨i_key_evít
(
úkeyb_©¨i_key
, 0);

650 
p•_úkeyb
 = 
	`p•_úkeyb_ªad_key
();

651 i‡(
p•_úkeyb
 !
PSP_IRKEYB_EMPTY
) {

653 i‡(
p•_úkeyb
 =
PSP_IRKEYB_UP
) {

654 
©¨i_key
 = 
Joy°ickZîoUp
;

656 i‡(
p•_úkeyb
 =
PSP_IRKEYB_DOWN
) {

657 
©¨i_key
 = 
Joy°ickZîoDown
;

659 i‡(
p•_úkeyb
 =
PSP_IRKEYB_LEFT
) {

660 
©¨i_key
 = 
Joy°ickZîoLe·
;

662 i‡(
p•_úkeyb
 =
PSP_IRKEYB_RIGHT
) {

663 
©¨i_key
 = 
Joy°ickZîoRight
;

665 
©¨i_key
 = 
	`©¨i_gë_key_‰om_ascii
(
p•_úkeyb
);

667 i‡(
©¨i_key
 != -1) {

668 
úkeyb_©¨i_key
 = 
©¨i_key
;

669 
úkeyb_©¨i_≥ndög
 = 1;

670 
	`©¨i_key_evít
(
©¨i_key
, 1);

675 
	}
}

679 
	$p•_kbd_di•œy_a˘ive_m≠pög
()

681 i‡(
kbd_…riggî_m≠pög_a˘ive
) {

682 
	`p•_sdl_fûl_ª˘™gÀ
(0, 0, 10, 3, 
	`p•_sdl_rgb
(0x0, 0x0, 0xff), 0);

684 
	`p•_sdl_fûl_ª˘™gÀ
(0, 0, 10, 3, 0x0, 0);

687 i‡(
kbd_πriggî_m≠pög_a˘ive
) {

688 
	`p•_sdl_fûl_ª˘™gÀ
(470, 0, 10, 3, 
	`p•_sdl_rgb
(0x0, 0x0, 0xff), 0);

690 
	`p•_sdl_fûl_ª˘™gÀ
(470, 0, 10, 3, 0x0, 0);

692 
	}
}

695 
	$©¨i_decode_key
(
p•_b
, 
buâ⁄_¥es£d
)

697 
wake
 = 0;

698 
ªvî£_™Æog
 = 
ATARI
.
p•_ªvî£_™Æog
;

700 i‡(
ªvî£_™Æog
) {

701 i‡((
p•_b
 >
KBD_JOY_UP
 ) &&

702 (
p•_b
 <
KBD_JOY_LEFT
)) {

703 
p•_b
 =Ö•_b - 
KBD_JOY_UP
 + 
KBD_UP
;

705 i‡((
p•_b
 >
KBD_UP
 ) &&

706 (
p•_b
 <
KBD_LEFT
)) {

707 
p•_b
 =Ö•_b - 
KBD_UP
 + 
KBD_JOY_UP
;

711 i‡(
p•_b
 =
KBD_START
) {

712 i‡(
buâ⁄_¥es£d
Ë
	`p•_kbd_íãr_d™zeff
();

714 i‡(
p•_b
 =
KBD_SELECT
) {

715 i‡(
buâ⁄_¥es£d
) {

716 
	`p•_maö_míu
();

717 
	`p•_öô_keybﬂrd
();

721 i‡(
p•_kbd_m≠pög
[
p•_b
] >= 0) {

722 
wake
 = 1;

723 i‡(
buâ⁄_¥es£d
) {

725 i‡(
kbd_…riggî_m≠pög_a˘ive
) {

727 
p•_kbd_¥es£s
[
p•_b
] = 
p•_kbd_m≠pög_L
[psp_b];

728 
	`©¨i_key_evít
(
p•_kbd_¥es£s
[
p•_b
], 
buâ⁄_¥es£d
);

730 i‡(
kbd_πriggî_m≠pög_a˘ive
) {

732 
p•_kbd_¥es£s
[
p•_b
] = 
p•_kbd_m≠pög_R
[psp_b];

733 
	`©¨i_key_evít
(
p•_kbd_¥es£s
[
p•_b
], 
buâ⁄_¥es£d
);

736 
p•_kbd_¥es£s
[
p•_b
] = 
p•_kbd_m≠pög
[psp_b];

737 
	`©¨i_key_evít
(
p•_kbd_¥es£s
[
p•_b
], 
buâ⁄_¥es£d
);

741 
	`©¨i_key_evít
(
p•_kbd_¥es£s
[
p•_b
], 
buâ⁄_¥es£d
);

745 i‡(
p•_kbd_m≠pög
[
p•_b
] =
KBD_LTRIGGER_MAPPING
) {

746 
kbd_…riggî_m≠pög_a˘ive
 = 
buâ⁄_¥es£d
;

747 
kbd_πriggî_m≠pög_a˘ive
 = 0;

749 i‡(
p•_kbd_m≠pög
[
p•_b
] =
KBD_RTRIGGER_MAPPING
) {

750 
kbd_πriggî_m≠pög_a˘ive
 = 
buâ⁄_¥es£d
;

751 
kbd_…riggî_m≠pög_a˘ive
 = 0;

756 
	}
}

759 
	$©¨i_decode_∑ddÀ
(
p•_b
)

761 
ªvî£_™Æog
 = 
ATARI
.
p•_ªvî£_™Æog
;

763 i‡(
ªvî£_™Æog
) {

764 i‡((
p•_b
 >
KBD_JOY_UP
 ) &&

765 (
p•_b
 <
KBD_JOY_LEFT
)) {

766 
p•_b
 =Ö•_b - 
KBD_JOY_UP
 + 
KBD_UP
;

768 i‡((
p•_b
 >
KBD_UP
 ) &&

769 (
p•_b
 <
KBD_LEFT
)) {

770 
p•_b
 =Ö•_b - 
KBD_UP
 + 
KBD_JOY_UP
;

774 i‡(
p•_kbd_m≠pög
[
p•_b
] != -1) {

775 
	`©¨i_∑ddÀ_evít
(
p•_kbd_m≠pög
[
p•_b
]);

778 
	}
}

780 
	#ANALOG_THRESHOLD
 60

	)

783 
	$kbd_gë_™Æog_dúe˘i⁄
(
A«log_x
, 
A«log_y
, *
x
, *
y
)

785 
DñèX
 = 255;

786 
DñèY
 = 255;

787 
DúX
 = 0;

788 
DúY
 = 0;

790 *
x
 = 0;

791 *
y
 = 0;

793 i‡(
A«log_x
 <
ANALOG_THRESHOLD
Ë{ 
DñèX
 = A«log_x; 
DúX
 = -1; }

795 i‡(
A«log_x
 >(255 - 
ANALOG_THRESHOLD
)Ë{ 
DñèX
 = 255 - A«log_x; 
DúX
 = 1; }

797 i‡(
A«log_y
 <
ANALOG_THRESHOLD
Ë{ 
DñèY
 = A«log_y; 
DúY
 = -1; }

799 i‡(
A«log_y
 >(255 - 
ANALOG_THRESHOLD
)Ë{ 
DñèY
 = 255 - A«log_y; 
DúY
 = 1; }

801 *
x
 = 
DúX
;

802 *
y
 = 
DúY
;

803 
	}
}

806 
	$kbd_ch™ge_auto_fúe
(
auto_fúe
)

808 
ATARI
.
©¨i_auto_fúe
 = 
auto_fúe
;

809 i‡(
ATARI
.
©¨i_auto_fúe_¥es£d
) {

810 i‡(
ATARI
.
p•_a˘ive_joy°ick
) {

811 
	`©¨i_key_evít
(
Joy°ickO√Fúe
, 0);

813 
	`©¨i_key_evít
(
Joy°ickZîoFúe
, 0);

815 
ATARI
.
©¨i_auto_fúe_¥es£d
 = 0;

817 
	}
}

821 
	$kbd_ª£t_buâ⁄_°©us
()

823 
b
 = 0;

825 
b
 = 0; b < 
KBD_MAX_BUTTONS
; b++) {

826 
loc_buâ⁄_¥ess
[
b
] = 0;

827 
loc_buâ⁄_ªÀa£
[
b
] = 0;

829 
	`p•_öô_keybﬂrd
();

831 
	}
}

834 
	$kbd_sˇn_keybﬂrd
()

836 
S˚CålD©a
 
c
;

837 
dñè_°amp
;

838 
evít
;

839 
b
;

841 
√w_Lx
;

842 
√w_Ly
;

843 
ﬁd_Lx
;

844 
ﬁd_Ly
;

846 
evít
 = 0;

847 
	`s˚CålPìkBuf„rPosôive
–&
c
, 1 );

848 
c
.
Buâ⁄s
 &
PSP_ALL_BUTTON_MASK
;

850 #ifde‡
USE_PSP_IRKEYB


851 
	`p•_úkeyb_£t_p•_key
(&
c
);

854 i‡((
c
.
Buâ⁄s
 & (
PSP_CTRL_LTRIGGER
|
PSP_CTRL_RTRIGGER
|
PSP_CTRL_START
)) ==

855 (
PSP_CTRL_LTRIGGER
|
PSP_CTRL_RTRIGGER
|
PSP_CTRL_START
)) {

857 
	`p•_sdl_exô
(0);

860 
dñè_°amp
 = 
c
.
TimeSèmp
 - 
fú°_time_°amp
;

861 i‡((
dñè_°amp
 < 0Ë|| (dñè_°am∞> 
KBD_MIN_BATTCHECK_TIME
)) {

862 
fú°_time_°amp
 = 
c
.
TimeSèmp
;

863 i‡(
	`p•_is_low_b©ãry
()) {

864 
	`p•_maö_míu
();

865 
	`p•_öô_keybﬂrd
();

870 i‡(
ATARI
.
©¨i_auto_fúe
) {

871 
dñè_°amp
 = 
c
.
TimeSèmp
 - 
fú°_time_auto_°amp
;

872 i‡((
dñè_°amp
 < 0) ||

873 (
dñè_°amp
 > (
KBD_MIN_AUTOFIRE_TIME
 / (1 + 
ATARI
.
©¨i_auto_fúe_≥riod
)))) {

874 
fú°_time_auto_°amp
 = 
c
.
TimeSèmp
;

876 i‡(
ATARI
.
p•_a˘ive_joy°ick
) {

877 
	`©¨i_key_evít
(
Joy°ickO√Fúe
, 
ATARI
.
©¨i_auto_fúe_¥es£d
);

879 
	`©¨i_key_evít
(
Joy°ickZîoFúe
, 
ATARI
.
©¨i_auto_fúe_¥es£d
);

881 
ATARI
.
©¨i_auto_fúe_¥es£d
 = ! ATARI.atari_auto_fire_pressed;

885 i‡(
dñè_°amp
 < 
KBD_MAX_EVENT_TIME
) {

890 
	`kbd_gë_™Æog_dúe˘i⁄
(
loc_buâ⁄_d©a
.
Lx
,loc_buâ⁄_d©a.
Ly
,&
ﬁd_Lx
,&
ﬁd_Ly
);

891 
	`kbd_gë_™Æog_dúe˘i⁄
–
c
.
Lx
, c.
Ly
, &
√w_Lx
, &
√w_Ly
);

893 i‡(
√w_Lx
 > 0) {

894 
	`©¨i_decode_∑ddÀ
(
KBD_JOY_RIGHT
);

896 i‡(
√w_Lx
 < 0) {

897 
	`©¨i_decode_∑ddÀ
(
KBD_JOY_LEFT
);

901 i‡(
√w_Lx
 > 0) {

902 i‡(
ﬁd_Lx
 > 0Ë
	`©¨i_decode_key
(
KBD_JOY_LEFT
 , 0);

903 
	`©¨i_decode_key
(
KBD_JOY_RIGHT
, 1);

906 i‡(
√w_Lx
 < 0) {

907 i‡(
ﬁd_Lx
 < 0Ë
	`©¨i_decode_key
(
KBD_JOY_RIGHT
, 0);

908 
	`©¨i_decode_key
(
KBD_JOY_LEFT
 , 1);

911 i‡(
ﬁd_Lx
 > 0Ë
	`©¨i_decode_key
(
KBD_JOY_LEFT
 , 0);

913 i‡(
ﬁd_Lx
 < 0Ë
	`©¨i_decode_key
(
KBD_JOY_RIGHT
, 0);

915 
	`©¨i_decode_key
(
KBD_JOY_LEFT
 , 0);

916 
	`©¨i_decode_key
(
KBD_JOY_RIGHT
 , 0);

920 i‡(
√w_Ly
 < 0) {

921 i‡(
ﬁd_Ly
 > 0Ë
	`©¨i_decode_key
(
KBD_JOY_DOWN
 , 0);

922 
	`©¨i_decode_key
(
KBD_JOY_UP
 , 1);

925 i‡(
√w_Ly
 > 0) {

926 i‡(
ﬁd_Ly
 < 0Ë
	`©¨i_decode_key
(
KBD_JOY_UP
 , 0);

927 
	`©¨i_decode_key
(
KBD_JOY_DOWN
 , 1);

930 i‡(
ﬁd_Ly
 > 0Ë
	`©¨i_decode_key
(
KBD_JOY_DOWN
 , 0);

932 i‡(
ﬁd_Ly
 < 0Ë
	`©¨i_decode_key
(
KBD_JOY_UP
 , 0);

934 
	`©¨i_decode_key
(
KBD_JOY_DOWN
 , 0);

935 
	`©¨i_decode_key
(
KBD_JOY_UP
 , 0);

939 
b
 = 0; b < 
KBD_MAX_BUTTONS
; b++)

941 i‡(
c
.
Buâ⁄s
 & 
loc_buâ⁄_mask
[
b
]) {

943 
	`©¨i_decode_∑ddÀ
(
b
);

945 i‡(!(
loc_buâ⁄_d©a
.
Buâ⁄s
 & 
loc_buâ⁄_mask
[
b
])) {

946 
loc_buâ⁄_¥ess
[
b
] = 1;

947 
evít
 = 1;

950 i‡(
loc_buâ⁄_d©a
.
Buâ⁄s
 & 
loc_buâ⁄_mask
[
b
]) {

951 
loc_buâ⁄_ªÀa£
[
b
] = 1;

952 
evít
 = 1;

957 
	`mem˝y
(&
loc_buâ⁄_d©a
,&
c
,(
S˚CålD©a
));

959  
evít
;

960 
	}
}

963 
	$kbd_waô_°¨t
()

967 
S˚CålD©a
 
c
;

968 
	`s˚CålRódBuf„rPosôive
(&
c
, 1);

969 
c
.
Buâ⁄s
 &
PSP_ALL_BUTTON_MASK
;

970 i‡(
c
.
Buâ⁄s
 & 
PSP_CTRL_START
) ;

972 
	`p•_kbd_waô_no_buâ⁄
();

973 
	}
}

976 
	$p•_öô_keybﬂrd
()

978 
	`©¨i_kbd_ª£t
();

979 
kbd_…riggî_m≠pög_a˘ive
 = 0;

980 
kbd_πriggî_m≠pög_a˘ive
 = 0;

981 
	}
}

984 
	$p•_kbd_waô_no_buâ⁄
()

986 
S˚CålD©a
 
c
;

989 
	`s˚CålPìkBuf„rPosôive
(&
c
, 1);

990 
c
.
Buâ⁄s
 &
PSP_ALL_BUTTON_MASK
;

992 } 
c
.
Buâ⁄s
 != 0);

993 
	}
}

996 
	$p•_kbd_waô_buâ⁄
()

998 
S˚CålD©a
 
c
;

1001 
	`s˚CålRódBuf„rPosôive
(&
c
, 1);

1002 } 
c
.
Buâ⁄s
 == 0);

1003 
	}
}

1006 
	$p•_upd©e_keys
()

1008 
b
;

1010 
fú°_time
 = 1;

1011 
ªÀa£_≥ndög
 = 0;

1013 i‡(
fú°_time
) {

1015 
	`mem˝y
(
p•_kbd_m≠pög
, 
loc_deÁu…_m≠pög
, (loc_default_mapping));

1016 
	`mem˝y
(
p•_kbd_m≠pög_L
, 
loc_deÁu…_m≠pög_L
, (loc_default_mapping_L));

1017 
	`mem˝y
(
p•_kbd_m≠pög_R
, 
loc_deÁu…_m≠pög_R
, (loc_default_mapping_R));

1019 
	`©¨i_kbd_lﬂd
();

1021 
S˚CålD©a
 
c
;

1022 
	`s˚CålPìkBuf„rPosôive
(&
c
, 1);

1023 
c
.
Buâ⁄s
 &
PSP_ALL_BUTTON_MASK
;

1025 i‡(
fú°_time_°amp
 =-1Ëfú°_time_°am∞
c
.
TimeSèmp
;

1026 i‡((! 
c
.
Buâ⁄s
Ë&& ((c.
TimeSèmp
 - 
fú°_time_°amp
Ë< 
KBD_MIN_START_TIME
))  0;

1028 
fú°_time
 = 0;

1029 
ªÀa£_≥ndög
 = 0;

1031 
b
 = 0; b < 
KBD_MAX_BUTTONS
; b++) {

1032 
loc_buâ⁄_ªÀa£
[
b
] = 0;

1033 
loc_buâ⁄_¥ess
[
b
] = 0;

1035 
	`s˚CålPìkBuf„rPosôive
(&
loc_buâ⁄_d©a
, 1);

1036 
loc_buâ⁄_d©a
.
Buâ⁄s
 &
PSP_ALL_BUTTON_MASK
;

1038 
	`p•_maö_míu
();

1039 
	`p•_öô_keybﬂrd
();

1044 i‡(
d™zeff_mode
) {

1045 
	`p•_kbd_íãr_d™zeff
();

1049 #ifde‡
USE_PSP_IRKEYB


1050 i‡(
	`p•_kbd_íãr_úkeyb
()) {

1056 i‡(
ªÀa£_≥ndög
)

1058 
ªÀa£_≥ndög
 = 0;

1059 
b
 = 0; b < 
KBD_MAX_BUTTONS
; b++) {

1060 i‡(
loc_buâ⁄_ªÀa£
[
b
]) {

1061 
loc_buâ⁄_ªÀa£
[
b
] = 0;

1062 
loc_buâ⁄_¥ess
[
b
] = 0;

1063 
	`©¨i_decode_key
(
b
, 0);

1068 
	`kbd_sˇn_keybﬂrd
();

1071 
b
 = 0; b < 
KBD_MAX_BUTTONS
; b++) {

1072 i‡(
loc_buâ⁄_¥ess
[
b
]) {

1073 
loc_buâ⁄_¥ess
[
b
] = 0;

1074 
ªÀa£_≥ndög
 = 0;

1075 
	`©¨i_decode_key
(
b
, 1);

1079 
b
 = 0; b < 
KBD_MAX_BUTTONS
; b++) {

1080 i‡(
loc_buâ⁄_ªÀa£
[
b
]) {

1081 
ªÀa£_≥ndög
 = 1;

1087 
	}
}

	@psp_kbd.h

19 #i‚de‡
_KBD_H_


20 
	#_KBD_H_


	)

21 #ifde‡
__˝lu•lus


25 
	#PSP_ALL_BUTTON_MASK
 0xFFFF

	)

27 
	e©¨i_keys_emum
 {

28 
NoTy≥
,

29 
C⁄sﬁeOn
,

30 
C⁄sﬁeOff
,

31 
C⁄sﬁeCﬁ‹
,

32 
C⁄sﬁeBœckWhôe
,

33 
C⁄sﬁeLe·Difficu…yA
,

34 
C⁄sﬁeLe·Difficu…yB
,

35 
C⁄sﬁeRightDifficu…yA
,

36 
C⁄sﬁeRightDifficu…yB
,

37 
C⁄sﬁeSñe˘
,

38 
C⁄sﬁeRe£t
,

39 
Joy°ickZîoUp
,

40 
Joy°ickZîoDown
,

41 
Joy°ickZîoLe·
,

42 
Joy°ickZîoRight
,

43 
Joy°ickZîoFúe
,

44 
Joy°ickO√Up
,

45 
Joy°ickO√Down
,

46 
Joy°ickO√Le·
,

47 
Joy°ickO√Right
,

48 
Joy°ickO√Fúe
,

49 
PaddÀZîoResi°™˚
,

50 
PaddÀZîoFúe
,

51 
PaddÀO√Resi°™˚
,

52 
PaddÀO√Fúe
,

53 
PaddÀTwoResi°™˚
,

54 
PaddÀTwoFúe
,

55 
PaddÀThªeResi°™˚
,

56 
PaddÀThªeFúe
,

58 
ATARIC_FPS
,

59 
ATARIC_JOY
,

60 
ATARIC_RENDER
,

61 
ATARIC_LOAD
,

62 
ATARIC_SAVE
,

63 
ATARIC_RESET
,

64 
ATARIC_AUTOFIRE
,

65 
ATARIC_INCFIRE
,

66 
ATARIC_DECFIRE
,

67 
ATARIC_SCREEN
,

69 
ATARI_MAX_KEY


72 
	#KBD_UP
 0

	)

73 
	#KBD_RIGHT
 1

	)

74 
	#KBD_DOWN
 2

	)

75 
	#KBD_LEFT
 3

	)

76 
	#KBD_TRIANGLE
 4

	)

77 
	#KBD_CIRCLE
 5

	)

78 
	#KBD_CROSS
 6

	)

79 
	#KBD_SQUARE
 7

	)

80 
	#KBD_SELECT
 8

	)

81 
	#KBD_START
 9

	)

82 
	#KBD_HOME
 10

	)

83 
	#KBD_HOLD
 11

	)

84 
	#KBD_LTRIGGER
 12

	)

85 
	#KBD_RTRIGGER
 13

	)

87 
	#KBD_MAX_BUTTONS
 14

	)

89 
	#KBD_JOY_UP
 14

	)

90 
	#KBD_JOY_RIGHT
 15

	)

91 
	#KBD_JOY_DOWN
 16

	)

92 
	#KBD_JOY_LEFT
 17

	)

94 
	#KBD_ALL_BUTTONS
 18

	)

96 
	#KBD_UNASSIGNED
 -1

	)

98 
	#KBD_LTRIGGER_MAPPING
 -2

	)

99 
	#KBD_RTRIGGER_MAPPING
 -3

	)

100 
	#KBD_NORMAL_MAPPING
 -1

	)

102 
	s©¨i_key_å™s
 {

103 
©¨i_keys_emum
 
key
;

104 
«me
[32];

108 
p•_s¸ìnshŸ_mode
;

109 
p•_kbd_m≠pög
[ 
KBD_ALL_BUTTONS
 ];

110 
p•_kbd_m≠pög_L
[ 
KBD_ALL_BUTTONS
 ];

111 
p•_kbd_m≠pög_R
[ 
KBD_ALL_BUTTONS
 ];

112 
p•_kbd_¥es£s
[ 
KBD_ALL_BUTTONS
 ];

113 
kbd_…riggî_m≠pög_a˘ive
;

114 
kbd_πriggî_m≠pög_a˘ive
;

116 
©¨i_key_å™s
 
p•_©¨i_key_to_«me
[
ATARI_MAX_KEY
];

118 
p•_upd©e_keys
();

119 
kbd_waô_°¨t
();

120 
p•_öô_keybﬂrd
();

121 
p•_kbd_waô_no_buâ⁄
();

122 
p•_kbd_is_d™zeff_mode
();

123 
p•_kbd_lﬂd_m≠pög
(*
kbd_fûíame
);

124 
p•_kbd_ßve_m≠pög
(*
kbd_fûíame
);

125 
p•_kbd_di•œy_a˘ive_m≠pög
();

126 
kbd_ch™ge_auto_fúe
(
auto_fúe
);

128 #ifde‡
__˝lu•lus


	@psp_main.cpp

17 
	~<°dio.h
>

18 
	~<zlib.h
>

19 
	~"SDL.h
"

21 
	~<p•kî√l.h
>

22 
	~<p•debug.h
>

23 
	~<p•sdk.h
>

24 
	~<p•˘æ.h
>

25 
	~<p•thªadm™.h
>

26 
	~<°dlib.h
>

27 
	~<°dio.h
>

28 
	~"p•_úkeyb.h
"

30 
	#STDOUT_FILE
 "°dout.txt"

	)

31 
	#STDERR_FILE
 "°dîr.txt"

	)

38 
SDL_maö
(
¨gc
, *
¨gv
[]);

40 
˛ónup_ouçut
();

42 #i‚de‡
LINUX_MODE


43 #i‚de‡
PSPFW30X


44 
PSP_MODULE_INFO
("PSP2600", 0x1000, 1, 1);

46 
PSP_MODULE_INFO
("PSP2600", 0x0, 1, 1);

47 
PSP_HEAP_SIZE_KB
(12*1024);

49 
PSP_MAIN_THREAD_ATTR
(0);

50 
PSP_MAIN_THREAD_STACK_SIZE_KB
(64);

53 #i‚de‡
LINUX_MODE


55 
	$sdl_p•_exô_ˇŒback
(
¨g1
, 
¨g2
, *
comm⁄
)

57 
	`˛ónup_ouçut
();

58 
	`s˚Kî√lExôGame
();

60 
	}
}

62 
	$sdl_p•_ˇŒback_thªad
(
S˚Size
 
¨gs
, *
¨gp
)

64 
cbid
;

65 
cbid
 = 
	`s˚Kî√lCª©eCÆlback
("Exô CÆlback", 
sdl_p•_exô_ˇŒback
, 
NULL
);

66 
	`s˚Kî√lRegi°îExôCÆlback
(
cbid
);

68 
	`s˚Kî√lSÀïThªadCB
();

70 
	}
}

72 
	$sdl_p•_£tup_ˇŒbacks
()

74 
thid
 = 0;

76 
	`s˚CålSëSam∂ögCy˛e
(0);

77 
	`s˚CålSëSam∂ögMode
(
PSP_CTRL_MODE_ANALOG
);

79 
thid
 = 
	`s˚Kî√lCª©eThªad
("upd©e_thªad", 
sdl_p•_ˇŒback_thªad
, 0x11, 0xFA0, 0, 0);

80 if(
thid
 >= 0)

81 
	`s˚Kî√lSèπThªad
(
thid
, 0, 0);

82  
thid
;

83 
	}
}

87 
	$˛ónup_ouçut
()

89 #i‚de‡
NO_STDIO_REDIRECT


90 
FILE
 *
fûe
;

91 
em±y
;

95 
	`f˛o£
(
°dout
);

96 
	`f˛o£
(
°dîr
);

98 #i‚de‡
NO_STDIO_REDIRECT


100 
fûe
 = 
	`f›í
(
STDOUT_FILE
, "rb");

101 i‡–
fûe
 ) {

102 
em±y
 = (
	`fgëc
(
fûe
Ë=
EOF
) ? 1 : 0;

103 
	`f˛o£
(
fûe
);

104 i‡–
em±y
 ) {

105 
	`ªmove
(
STDOUT_FILE
);

108 
fûe
 = 
	`f›í
(
STDERR_FILE
, "rb");

109 i‡–
fûe
 ) {

110 
em±y
 = (
	`fgëc
(
fûe
Ë=
EOF
) ? 1 : 0;

111 
	`f˛o£
(
fûe
);

112 i‡–
em±y
 ) {

113 
	`ªmove
(
STDERR_FILE
);

117 
	}
}

119 #ifde‡
maö


120 #unde‡
maö


124 
	$maö
(
¨gc
, *
¨gv
[])

126 
	`p•DebugS¸ìnInô
();

128 #i‚de‡
LINUX_MODE


129 
	`sdl_p•_£tup_ˇŒbacks
();

132 #i‚de‡
NO_STDIO_REDIRECT


135 
	`‰e›í
(
STDOUT_FILE
, "w", 
°dout
);

136 
	`‰e›í
(
STDERR_FILE
, "w", 
°dîr
);

137 
	`£tvbuf
(
°dout
, 
NULL
, 
_IOLBF
, 
BUFSIZ
);

138 
	`£tbuf
(
°dîr
, 
NULL
);

143 #i‚de‡
LINUX_MODE


144 
	`©exô
(
s˚Kî√lExôGame
);

146 
	`©exô
(
˛ónup_ouçut
);

148 #i‚de‡
LINUX_MODE


149 #ifde‡
USE_PSP_IRKEYB


150 i‡(
	`p•_úkeyb_öô
()) {

151 
	`Ârötf
(
°dout
, "failedÅo initialize IR keyboard !\n");

156 
	`SDL_maö
(
¨gc
, 
¨gv
);

159 #i‚de‡
LINUX_MODE


160 
	`s˚Kî√lDñayThªad
(2500000);

164 
	}
}

	@psp_menu.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<sig«l.h
>

22 
	~<uni°d.h
>

23 
	~<°rög.h
>

24 
	~<î∫o.h
>

25 
	~<sys/time.h
>

26 
	~<f˙é.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<SDL/SDL.h
>

33 
	~<p•˘æ.h
>

34 
	~<p•kî√l.h
>

35 
	~<p•debug.h
>

36 
	~<p•iofûemgr.h
>

38 
	~"Aèri.h
"

39 
	~"globÆ.h
"

40 
	~"p•_sdl.h
"

41 
	~"p•_kbd.h
"

42 
	~"p•_míu.h
"

43 
	~"p•_fmgr.h
"

44 
	~"p•_míu_kbd.h
"

45 
	~"p•_míu_£t.h
"

46 
	~"p•_b©ãry.h
"

47 
	~"p•_míu_hñp.h
"

48 
	~"p•_úkeyb.h
"

50 
SDL_SurÁ˚
 *
back_surÁ˚
;

51 
	gp•_míu_dúty
 = 1;

53 
	#MENU_SCREENSHOT
 0

	)

55 
	#MENU_LOAD_SLOT
 1

	)

56 
	#MENU_SAVE_SLOT
 2

	)

57 
	#MENU_DEL_SLOT
 3

	)

59 
	#MENU_HELP
 4

	)

61 
	#MENU_LOAD_ROM
 5

	)

62 
	#MENU_KEYBOARD
 6

	)

63 
	#MENU_SETTINGS
 7

	)

65 
	#MENU_RESET
 8

	)

66 
	#MENU_BACK
 9

	)

68 
	#MENU_EXIT
 10

	)

70 
	#MAX_MENU_ITEM
 (
MENU_EXIT
 + 1)

	)

72 
míu_ôem_t
 
	gmíu_li°
[] =

91 
	gcur_míu_id
 = 
MENU_LOAD_ROM
;

92 
	gcur_¶Ÿ
 = 0;

95 
	$p•_míu_di•œy_ßve_«me
()

97 
buf„r
[128];

98 
Lígth
;

100 
	`¢¥ötf
(
buf„r
, 20, "Game: %s", 
ATARI
.
©¨i_ßve_«me
);

101 
Lígth
 = 
	`°æí
(
buf„r
);

102 
	`p•_sdl_back2_¥öt
(460 - (8*
Lígth
), 25, 
buf„r
, 
PSP_MENU_TEXT2_COLOR
);

103 
	}
}

106 
	$°rög_fûl_wôh_•a˚
(*
buf„r
, 
size
)

108 
Àngth
 = 
	`°æí
(
buf„r
);

109 
ödex
;

111 
ödex
 = 
Àngth
; index < 
size
; index++) {

112 
buf„r
[
ödex
] = ' ';

114 
buf„r
[
size
] = 0;

115 
	}
}

118 
	$p•_di•œy_s¸ìn_míu_b©ãry
()

120 
buf„r
[64];

122 
Lígth
;

123 
cﬁ‹
;

125 
	`¢¥ötf
(
buf„r
, 50, " [%s] ", 
	`p•_gë_b©ãry_°rög
());

126 
Lígth
 = 
	`°æí
(
buf„r
);

128 i‡(
	`p•_is_low_b©ãry
()Ë
cﬁ‹
 = 
PSP_MENU_RED_COLOR
;

129 
cﬁ‹
 = 
PSP_MENU_GREEN_COLOR
;

131 
	`p•_sdl_back2_¥öt
(240 - ((8*
Lígth
Ë/ 2), 6, 
buf„r
, 
cﬁ‹
);

132 
	}
}

135 
	$p•_di•œy_s¸ìn_míu
()

137 
buf„r
[64];

138 
míu_id
 = 0;

139 
¶Ÿ_id
 = 0;

140 
cﬁ‹
 = 0;

141 
x
 = 0;

142 
y
 = 0;

143 
y_°ï
 = 0;

147 
	`p•_sdl_blô_background
();

148 
p•_míu_dúty
 = 0;

150 
	`p•_sdl_døw_ª˘™gÀ
(10,10,459,249,
PSP_MENU_BORDER_COLOR
,0);

151 
	`p•_sdl_døw_ª˘™gÀ
(11,11,457,247,
PSP_MENU_BORDER_COLOR
,0);

153 
	`p•_sdl_back2_¥öt
–30, 6, " L: Sëtög†", 
PSP_MENU_NOTE_COLOR
);

155 
	`p•_di•œy_s¸ìn_míu_b©ãry
();

157 
	`p•_sdl_back2_¥öt
–370, 6, " R: Re£à", 
PSP_MENU_WARNING_COLOR
);

159 
	`p•_sdl_back2_¥öt
(30, 254, " []: Cancel O/X: Valid SELECT: Back ",

160 
PSP_MENU_BORDER_COLOR
);

162 
	`p•_sdl_back2_¥öt
(370, 254, " By Zx-81 ",

163 
PSP_MENU_AUTHOR_COLOR
);

166 
x
 = 20;

167 
y
 = 25;

168 
y_°ï
 = 10;

170 
míu_id
 = 0; míu_id < 
MAX_MENU_ITEM
; menu_id++) {

171 
cﬁ‹
 = 
PSP_MENU_TEXT_COLOR
;

172 i‡(
cur_míu_id
 =
míu_id
Ë
cﬁ‹
 = 
PSP_MENU_SEL_COLOR
;

174 i‡(
míu_id
 =
MENU_EXIT
Ë
cﬁ‹
 = 
PSP_MENU_WARNING_COLOR
;

176 i‡(
míu_id
 =
MENU_HELP
Ë
cﬁ‹
 = 
PSP_MENU_GREEN_COLOR
;

178 
	`p•_sdl_back2_¥öt
(
x
, 
y
, 
míu_li°
[
míu_id
].
tôÀ
, 
cﬁ‹
);

180 i‡(
míu_id
 =
MENU_SCREENSHOT
) {

181 
	`•rötf
(
buf„r
,"%d", 
ATARI
.
p•_s¸ìnshŸ_id
);

182 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 4);

183 
	`p•_sdl_back2_¥öt
(160, 
y
, 
buf„r
, 
cﬁ‹
);

184 
y
 +
y_°ï
;

186 i‡(
míu_id
 =
MENU_DEL_SLOT
) {

187 
y
 +
y_°ï
;

189 i‡(
míu_id
 =
MENU_SETTINGS
) {

190 
y
 +
y_°ï
;

192 i‡(
míu_id
 =
MENU_BACK
) {

193 
y
 +
y_°ï
;

195 i‡(
míu_id
 =
MENU_LOAD_ROM
) {

196 
y
 +
y_°ï
;

198 i‡(
míu_id
 =
MENU_HELP
) {

199 
y
 +
y_°ï
;

202 
y
 +
y_°ï
;

204 
y_°ï
 = 10;

205 
y
 = 45;

207 
¶Ÿ_id
 = 0; slŸ_id < 
ATARI_MAX_SAVE_STATE
; slot_id++) {

208 i‡(
¶Ÿ_id
 =
cur_¶Ÿ
Ë
cﬁ‹
 = 
PSP_MENU_SEL2_COLOR
;

209 
cﬁ‹
 = 
PSP_MENU_TEXT_COLOR
;

211 i‡(
ATARI
.
©¨i_ßve_°©e
[
¶Ÿ_id
].
u£d
) {

212 
S˚P•D©eTime
* 
my_d©e
 = &
ATARI
.
©¨i_ßve_°©e
[
¶Ÿ_id
].
d©e
;

213 #i‚de‡
LINUX_MODE


214 
	`•rötf
(
buf„r
, "- %02d/%02d %02d:%02d:%02d",

215 
my_d©e
->
day
, my_d©e->
m⁄th
,

216 
my_d©e
->
hour
, my_d©e->
möuã
, my_d©e->
£c⁄d
 );

218 
	`•rötf
(
buf„r
, "- used");

221 
	`•rötf
(
buf„r
, "-Émpty");

223 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 32);

224 
	`p•_sdl_back2_¥öt
(120, 
y
, 
buf„r
, 
cﬁ‹
);

226 
y
 +
y_°ï
;

229 i‡(
ATARI
.
©¨i_ßve_°©e
[
cur_¶Ÿ
].
thumb
) {

230 
	`p•_sdl_blô_thumb
(320, 40, 
ATARI
.
©¨i_ßve_°©e
[
cur_¶Ÿ
].
surÁ˚
);

232 
	`p•_sdl_blô_thumb
(320, 40, 
thumb_surÁ˚
);

235 
	`p•_míu_di•œy_ßve_«me
();

236 
	}
}

239 
	$p•_maö_míu_ª£t
()

242 
	`p•_di•œy_s¸ìn_míu
();

243 
	`p•_sdl_back2_¥öt
(140, 160, "Re£àAèrò!", 
PSP_MENU_WARNING_COLOR
);

244 
p•_míu_dúty
 = 1;

245 
	`p•_sdl_Êù
();

246 
	`©¨i_emuœt‹_ª£t
();

247 
	`¶ìp
(1);

248 
	}
}

251 
	$p•_maö_míu_lﬂd
(
f‹m©
)

253 
ªt
;

255 
ªt
 = 
	`p•_fmgr_míu
(
f‹m©
);

256 i‡(
ªt
 == 1)

258 
p•_míu_dúty
 = 1;

259 
	`p•_di•œy_s¸ìn_míu
();

260 
	`p•_sdl_back2_¥öt
(140, 160, "FileÜoaded !",

261 
PSP_MENU_NOTE_COLOR
);

262 
p•_míu_dúty
 = 1;

263 
	`p•_sdl_Êù
();

264 
	`¶ìp
(1);

268 i‡(
ªt
 == -1)

270 
p•_míu_dúty
 = 1;

271 
	`p•_di•œy_s¸ìn_míu
();

272 
	`p•_sdl_back2_¥öt
(140, 160, "Can'tÜoad file !",

273 
PSP_MENU_WARNING_COLOR
);

274 
p•_míu_dúty
 = 1;

275 
	`p•_sdl_Êù
();

276 
	`¶ìp
(1);

279 
	}
}

283 
	$p•_maö_míu_lﬂd_cuºít
()

285 i‡(
ATARI
.
©¨i_ßve_°©e
[
cur_¶Ÿ
].
u£d
) {

286  
	`©¨i_¢≠shŸ_lﬂd_¶Ÿ
(
cur_¶Ÿ
);

289 
	}
}

292 
	$p•_maö_míu_ßve_cuºít
()

294  
	`©¨i_¢≠shŸ_ßve_¶Ÿ
(
cur_¶Ÿ
);

295 
	}
}

298 
	$p•_maö_míu_lﬂd_¶Ÿ
()

300 
îr‹
;

302 i‡(! 
ATARI
.
©¨i_ßve_°©e
[
cur_¶Ÿ
].
u£d
) {

304 
	`p•_di•œy_s¸ìn_míu
();

305 
	`p•_sdl_back2_¥öt
(140, 160, "Slot isÉmpty !",

306 
PSP_MENU_NOTE_COLOR
);

307 
p•_míu_dúty
 = 1;

308 
	`p•_sdl_Êù
();

309 
	`¶ìp
(1);

314 
îr‹
 = 
	`©¨i_¢≠shŸ_lﬂd_¶Ÿ
(
cur_¶Ÿ
);

316 i‡(! 
îr‹
)

318 
	`p•_di•œy_s¸ìn_míu
();

319 
	`p•_sdl_back2_¥öt
(140, 160, "FileÜoaded !",

320 
PSP_MENU_NOTE_COLOR
);

321 
p•_míu_dúty
 = 1;

322 
	`p•_sdl_Êù
();

323 
	`¶ìp
(1);

329 
	`p•_di•œy_s¸ìn_míu
();

330 
	`p•_sdl_back2_¥öt
(140, 160, "Can'tÜoad file !",

331 
PSP_MENU_WARNING_COLOR
);

332 
p•_míu_dúty
 = 1;

333 
	`p•_sdl_Êù
();

334 
	`¶ìp
(1);

337 
	}
}

340 
	$p•_maö_míu_ßve_¶Ÿ
()

342 
îr‹
;

343 
îr‹
 = 
	`©¨i_¢≠shŸ_ßve_¶Ÿ
(
cur_¶Ÿ
);

345 i‡(! 
îr‹
)

347 
	`p•_di•œy_s¸ìn_míu
();

348 
	`p•_sdl_back2_¥öt
(140, 160, "File saved !",

349 
PSP_MENU_NOTE_COLOR
);

350 
p•_míu_dúty
 = 1;

351 
	`p•_sdl_Êù
();

352 
	`¶ìp
(1);

356 
	`p•_di•œy_s¸ìn_míu
();

357 
	`p•_sdl_back2_¥öt
(140, 160, "Can't save file !",

358 
PSP_MENU_WARNING_COLOR
);

359 
p•_míu_dúty
 = 1;

360 
	`p•_sdl_Êù
();

361 
	`¶ìp
(1);

363 
	}
}

366 
	$p•_maö_míu_dñ_¶Ÿ
()

368 
îr‹
;

370 i‡(! 
ATARI
.
©¨i_ßve_°©e
[
cur_¶Ÿ
].
u£d
) {

372 
	`p•_di•œy_s¸ìn_míu
();

373 
	`p•_sdl_back2_¥öt
(140, 160, "Slot isÉmpty !",

374 
PSP_MENU_NOTE_COLOR
);

375 
p•_míu_dúty
 = 1;

376 
	`p•_sdl_Êù
();

377 
	`¶ìp
(1);

382 
îr‹
 = 
	`©¨i_¢≠shŸ_dñ_¶Ÿ
(
cur_¶Ÿ
);

384 i‡(! 
îr‹
)

386 
	`p•_di•œy_s¸ìn_míu
();

387 
	`p•_sdl_back2_¥öt
(140, 160, "File deleted !",

388 
PSP_MENU_NOTE_COLOR
);

389 
p•_míu_dúty
 = 1;

390 
	`p•_sdl_Êù
();

391 
	`¶ìp
(1);

395 
	`p•_di•œy_s¸ìn_míu
();

396 
	`p•_sdl_back2_¥öt
(140, 160, "Can't delete file !",

397 
PSP_MENU_WARNING_COLOR
);

398 
p•_míu_dúty
 = 1;

399 
	`p•_sdl_Êù
();

400 
	`¶ìp
(1);

402 
	}
}

405 
	$p•_maö_míu_cur_¶Ÿ
(
°ï
)

407 i‡(
°ï
 == 1) {

408 
cur_¶Ÿ
++; i‡(cur_¶Ÿ >
ATARI_MAX_SAVE_STATE
) cur_slot = 0;

409 } i‡(
°ï
 == -1) {

410 
cur_¶Ÿ
--; i‡(cur_¶Ÿ < 0Ëcur_¶Ÿ = 
ATARI_MAX_SAVE_STATE
 - 1;

412 
	}
}

415 
	$p•_maö_míu_s¸ìnshŸ
()

417 
p•_s¸ìnshŸ_mode
 = 10;

418 
	}
}

421 
	$p•_maö_míu_exô
()

423 
S˚CålD©a
 
c
;

425 
	`p•_di•œy_s¸ìn_míu
();

426 
	`p•_sdl_back2_¥öt
(140, 160, "¥es†XÅÿc⁄fúm !", 
PSP_MENU_WARNING_COLOR
);

427 
p•_míu_dúty
 = 1;

428 
	`p•_sdl_Êù
();

430 
	`p•_kbd_waô_no_buâ⁄
();

434 
	`s˚CålRódBuf„rPosôive
(&
c
, 1);

435 
c
.
Buâ⁄s
 &
PSP_ALL_BUTTON_MASK
;

437 i‡(
c
.
Buâ⁄s
 & 
PSP_CTRL_CROSS
Ë
	`p•_sdl_exô
(0);

439 } 
c
.
Buâ⁄s
 == 0);

441 
	`p•_kbd_waô_no_buâ⁄
();

444 
	}
}

447 
	$p•_maö_míu
()

449 
S˚CålD©a
 
c
;

450 
√w_∑d
;

451 
ﬁd_∑d
;

452 
œ°_time
;

453 
íd_míu
;

455 
	`©¨i_audio_∑u£
();

457 
	`p•_kbd_waô_no_buâ⁄
();

459 
ﬁd_∑d
 = 0;

460 
œ°_time
 = 0;

461 
íd_míu
 = 0;

463 
p•_míu_dúty
 = 1;

465 ! 
íd_míu
)

467 
	`p•_di•œy_s¸ìn_míu
();

468 
	`p•_sdl_Êù
();

472 
	`s˚CålRódBuf„rPosôive
(&
c
, 1);

473 
c
.
Buâ⁄s
 &
PSP_ALL_BUTTON_MASK
;

475 #ifde‡
USE_PSP_IRKEYB


476 
	`p•_úkeyb_£t_p•_key
(&
c
);

478 i‡(
c
.
Buâ⁄s
) ;

481 
√w_∑d
 = 
c
.
Buâ⁄s
;

483 i‡((
ﬁd_∑d
 !
√w_∑d
Ë|| ((
c
.
TimeSèmp
 - 
œ°_time
Ë> 
PSP_MENU_MIN_TIME
)) {

484 
œ°_time
 = 
c
.
TimeSèmp
;

485 
ﬁd_∑d
 = 
√w_∑d
;

489 i‡((
c
.
Buâ⁄s
 & (
PSP_CTRL_LTRIGGER
|
PSP_CTRL_RTRIGGER
|
PSP_CTRL_START
)) ==

490 (
PSP_CTRL_LTRIGGER
|
PSP_CTRL_RTRIGGER
|
PSP_CTRL_START
)) {

492 
	`p•_sdl_exô
(0);

494 i‡((
c
.
Buâ⁄s
 & 
PSP_CTRL_LTRIGGER
) == PSP_CTRL_LTRIGGER) {

495 
	`p•_£âögs_míu
();

496 
p•_míu_dúty
 = 1;

497 
ﬁd_∑d
 = 
√w_∑d
 = 0;

499 i‡((
c
.
Buâ⁄s
 & 
PSP_CTRL_RTRIGGER
) == PSP_CTRL_RTRIGGER) {

500 
	`p•_maö_míu_ª£t
();

501 
íd_míu
 = 1;

503 i‡((
√w_∑d
 & 
PSP_CTRL_CROSS
 ) ||

504 (
√w_∑d
 & 
PSP_CTRL_CIRCLE
) ||

505 (
√w_∑d
 & 
PSP_CTRL_RIGHT
 ) ||

506 (
√w_∑d
 & 
PSP_CTRL_LEFT
 ))

508 
°ï
;

510 i‡(
√w_∑d
 & 
PSP_CTRL_LEFT
Ë
°ï
 = -1;

512 i‡(
√w_∑d
 & 
PSP_CTRL_RIGHT
Ë
°ï
 = 1;

513 
°ï
 = 0;

515 
cur_míu_id
 )

517 
MENU_LOAD_SLOT
 : i‡(
°ï
Ë
	`p•_maö_míu_cur_¶Ÿ
(step);

519 i‡(
	`p•_maö_míu_lﬂd_¶Ÿ
()) {

520 
íd_míu
 = 1;

523 
MENU_SAVE_SLOT
 : i‡(
°ï
Ë
	`p•_maö_míu_cur_¶Ÿ
(step);

524 
	`p•_maö_míu_ßve_¶Ÿ
();

526 
MENU_DEL_SLOT
 : i‡(
°ï
Ë
	`p•_maö_míu_cur_¶Ÿ
(step);

527 
	`p•_maö_míu_dñ_¶Ÿ
();

530 
MENU_LOAD_ROM
 : 
p•_míu_dúty
 = 1;

531 i‡(
	`p•_maö_míu_lﬂd
(
FMGR_FORMAT_ROM
)) {

532 
íd_míu
 = 1;

534 
p•_míu_dúty
 = 1;

535 
ﬁd_∑d
 = 
√w_∑d
 = 0;

538 
MENU_KEYBOARD
 : 
	`p•_keybﬂrd_míu
();

539 
p•_míu_dúty
 = 1;

540 
ﬁd_∑d
 = 
√w_∑d
 = 0;

542 
MENU_SETTINGS
 : 
p•_míu_dúty
 = 1;

543 
	`p•_£âögs_míu
();

544 
p•_míu_dúty
 = 1;

545 
ﬁd_∑d
 = 
√w_∑d
 = 0;

548 
MENU_SCREENSHOT
 : 
	`p•_maö_míu_s¸ìnshŸ
();

549 
íd_míu
 = 1;

552 
MENU_RESET
 : 
	`p•_maö_míu_ª£t
();

553 
íd_míu
 = 1;

556 
MENU_BACK
 : 
íd_míu
 = 1;

559 
MENU_EXIT
 : 
	`p•_maö_míu_exô
();

562 
MENU_HELP
 : 
p•_míu_dúty
 = 1;

563 
	`p•_hñp_míu
();

564 
ﬁd_∑d
 = 
√w_∑d
 = 0;

565 
p•_míu_dúty
 = 1;

570 if(
√w_∑d
 & 
PSP_CTRL_UP
) {

572 i‡(
cur_míu_id
 > 0) cur_menu_id--;

573 
cur_míu_id
 = 
MAX_MENU_ITEM
-1;

576 if(
√w_∑d
 & 
PSP_CTRL_DOWN
) {

578 i‡(
cur_míu_id
 < (
MAX_MENU_ITEM
-1)) cur_menu_id++;

579 
cur_míu_id
 = 0;

582 if(
√w_∑d
 & 
PSP_CTRL_SQUARE
) {

584 
íd_míu
 = -1;

586 if(
√w_∑d
 & 
PSP_CTRL_SELECT
) {

588 
íd_míu
 = 1;

592 
	`p•_kbd_waô_no_buâ⁄
();

594 
	`p•_sdl_˛ór_s¸ìn
–
PSP_MENU_BLACK_COLOR
 );

595 
	`p•_sdl_Êù
();

596 
	`p•_sdl_˛ór_s¸ìn
–
PSP_MENU_BLACK_COLOR
 );

597 
	`p•_sdl_Êù
();

599 
	`p•_sdl_˛ór_blô
(0);

601 #i‚de‡
LINUX_MODE


602 
	`p•_sdl_gu_öô
();

605 
	`©¨i_audio_ªsume
();

608 
	}
}

	@psp_menu.h

19 #i‚de‡
_PSP_MENU_H_


20 
	#_PSP_MENU_H_


	)

22 #ifde‡
__˝lu•lus


26 
	#PSP_MENU_BORDER_COLOR
 
	`p•_sdl_rgb
(0x80,0x80,0xF0)

	)

27 
	#PSP_MENU_WARNING_COLOR
 
	`p•_sdl_rgb
(0xFF,0x00,0x00)

	)

28 
	#PSP_MENU_NOTE_COLOR
 
	`p•_sdl_rgb
(0xFF,0xFF,0x00)

	)

29 
	#PSP_MENU_BACKGROUND_COLOR
 
	`p•_sdl_rgb
(0x00,0x00,0x00)

	)

30 
	#PSP_MENU_BLACK_COLOR
 
	`p•_sdl_rgb
(0x00,0x00,0x00)

	)

31 
	#PSP_MENU_AUTHOR_COLOR
 
	`p•_sdl_rgb
(0x00,0x00,0xFF)

	)

32 
	#PSP_MENU_BLUE_COLOR
 
	`p•_sdl_rgb
(0x00,0x00,0xFF)

	)

33 
	#PSP_MENU_GREEN_COLOR
 
	`p•_sdl_rgb
(0x00,0xFF,0x00)

	)

34 
	#PSP_MENU_RED_COLOR
 
	`p•_sdl_rgb
(0xFF,0x00,0x00)

	)

36 
	#PSP_MENU_TEXT_COLOR
 
	`p•_sdl_rgb
(0x80,0x80,0x80)

	)

37 
	#PSP_MENU_TEXT2_COLOR
 
	`p•_sdl_rgb
(0xff,0xff,0xff)

	)

38 
	#PSP_MENU_SEL_COLOR
 
	`p•_sdl_rgb
(0x00,0xff,0xff)

	)

39 
	#PSP_MENU_SEL2_COLOR
 
	`p•_sdl_rgb
(0xFF,0x00,0x80)

	)

41 
	#PSP_MENU_MIN_TIME
 150000

	)

43 
	smíu_ôem_t
 {

44 *
tôÀ
;

45 } 
	tmíu_ôem_t
;

48 
p•_maö_míu
();

49 
p•_di•œy_s¸ìn_míu_b©ãry
();

50 
°rög_fûl_wôh_•a˚
(*
buf„r
, 
size
);

51 
p•_míu_di•œy_ßve_«me
();

52 
p•_maö_míu_lﬂd_cuºít
();

53 
p•_maö_míu_ßve_cuºít
();

54 #ifde‡
__˝lu•lus


	@psp_menu_help.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<sig«l.h
>

23 
	~<uni°d.h
>

24 
	~<°rög.h
>

25 
	~<î∫o.h
>

26 
	~<sys/time.h
>

27 
	~<f˙é.h
>

29 
	~<p•˘æ.h
>

30 
	~<p•kî√l.h
>

31 
	~<p•debug.h
>

32 
	~<p•iofûemgr.h
>

34 
	~"SDL.h
"

36 
	~"globÆ.h
"

37 
	~"p•_kbd.h
"

38 
	~"p•_sdl.h
"

39 
	~"p•_b©ãry.h
"

40 
	~"p•_míu.h
"

41 
	~"p•_míu_hñp.h
"

42 
	~"p•_úkeyb.h
"

43 
	~"Aèri.h
"

45 
	gp•_míu_dúty
 = 1;

47 
	#MAX_HELP_LINE
 4096

	)

49 
	#HELP_LINE_BY_PAGE
 22

	)

50 
	#HELP_CHAR_BY_LINE
 55

	)

52 * 
	gp•_hñp
[
MAX_HELP_LINE
];

53 
	gp•_hñp_size
 = -1;

54 
	gp•_hñp_cuºít
 = 0;

57 
	$p•_öôülize_hñp
()

59 
FûeName
[
MAX_PATH
+1];

61 
Buf„r
[512];

62 *
Sˇn
;

63 
FILE
* 
FûeDesc
;

66 i‡(
p•_hñp_size
 > 0) ;

68 
	`¢¥ötf
(
FûeName
, 
MAX_PATH
, "%s/hñp.txt", 
ATARI
.
©¨i_home_dú
);

69 
FûeDesc
 = 
	`f›í
(
FûeName
, "r");

71 
p•_hñp_cuºít
 = 0;

73 i‡(
FûeDesc
 =(
FILE
 *)0 ) {

74 
p•_hñp
[0] = 
	`°rdup
( "no help file found !");

75 
p•_hñp_size
 = 1;

79 
p•_hñp_size
 = 0;

80 
	`fgës
(
Buf„r
,512, 
FûeDesc
) != (*)0) {

82 
Sˇn
 = 
	`°rchr
(
Buf„r
,'\n');

83 i‡(
Sˇn
) *Scan = '\0';

85 
Sˇn
 = 
	`°rchr
(
Buf„r
,'\r');

86 i‡(
Sˇn
) *Scan = '\0';

88 
p•_hñp
[
p•_hñp_size
++] = 
	`°rdup
(
Buf„r
);

89 i‡(
p•_hñp_size
 >
MAX_HELP_LINE
) ;

91 
	`f˛o£
(
FûeDesc
);

92 
	}
}

95 
	$p•_di•œy_s¸ìn_hñp
()

97 
buf„r
[512];

99 
hñp_löe
 = 0;

100 
ödex
 = 0;

102 
x
 = 0;

103 
y
 = 0;

104 
y_°ï
 = 0;

108 
	`p•_sdl_blô_background
();

109 
p•_míu_dúty
 = 0;

111 
	`p•_sdl_døw_ª˘™gÀ
(10,10,459,249,
PSP_MENU_BORDER_COLOR
,0);

112 
	`p•_sdl_døw_ª˘™gÀ
(11,11,457,247,
PSP_MENU_BORDER_COLOR
,0);

114 
	`p•_sdl_back2_¥öt
–30, 6, " Sèπ+L+R: EXIT ", 
PSP_MENU_WARNING_COLOR
);

116 
	`p•_di•œy_s¸ìn_míu_b©ãry
();

118 
	`p•_sdl_back2_¥öt
(30, 254, " Arrows: Scroll SELECT: Back ",

119 
PSP_MENU_BORDER_COLOR
);

121 
	`p•_sdl_back2_¥öt
(370, 254, " By Zx-81 ",

122 
PSP_MENU_AUTHOR_COLOR
);

126 
x
 = 20;

127 
y
 = 25;

128 
y_°ï
 = 10;

130 
hñp_löe
 = 
p•_hñp_cuºít
;

131 
ödex
 = 0;

133 (
ödex
 < 
HELP_LINE_BY_PAGE
Ë&& (
hñp_löe
 < 
p•_hñp_size
)) {

134 
	`°r˝y
(
buf„r
, 
p•_hñp
[
hñp_löe
]);

135 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 
HELP_CHAR_BY_LINE
);

136 
	`p•_sdl_back2_¥öt
(
x
, 
y
, 
buf„r
, 
PSP_MENU_SEL_COLOR
);

137 
y
 +
y_°ï
;

138 
ödex
++;

139 
hñp_löe
++;

142 i‡(
ödex
 !
HELP_LINE_BY_PAGE
) {

143 
buf„r
[0]=0;

144 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 
HELP_CHAR_BY_LINE
);

145 
ödex
 < 
HELP_LINE_BY_PAGE
) {

146 
	`p•_sdl_back2_¥öt
(
x
, 
y
, 
buf„r
, 
PSP_MENU_SEL_COLOR
);

147 
y
 +
y_°ï
;

148 
ödex
++;

151 
	}
}

154 
	$p•_hñp_míu
()

156 
S˚CålD©a
 
c
;

157 
√w_∑d
;

158 
ﬁd_∑d
;

159 
œ°_time
;

160 
íd_míu
;

162 
	`p•_kbd_waô_no_buâ⁄
();

164 
	`p•_öôülize_hñp
();

166 
ﬁd_∑d
 = 0;

167 
œ°_time
 = 0;

168 
íd_míu
 = 0;

170 
p•_míu_dúty
 = 1;

172 ! 
íd_míu
)

174 
	`p•_di•œy_s¸ìn_hñp
();

175 
	`p•_sdl_Êù
();

179 
	`s˚CålPìkBuf„rPosôive
(&
c
, 1);

180 
c
.
Buâ⁄s
 &
PSP_ALL_BUTTON_MASK
;

182 #ifde‡
USE_PSP_IRKEYB


183 
	`p•_úkeyb_£t_p•_key
(&
c
);

185 i‡(
c
.
Buâ⁄s
) ;

188 
√w_∑d
 = 
c
.
Buâ⁄s
;

190 i‡((
ﬁd_∑d
 !
√w_∑d
Ë|| ((
c
.
TimeSèmp
 - 
œ°_time
Ë> 
PSP_MENU_MIN_TIME
)) {

191 
œ°_time
 = 
c
.
TimeSèmp
;

192 
ﬁd_∑d
 = 
√w_∑d
;

196 i‡((
c
.
Buâ⁄s
 & (
PSP_CTRL_LTRIGGER
|
PSP_CTRL_RTRIGGER
|
PSP_CTRL_START
)) ==

197 (
PSP_CTRL_LTRIGGER
|
PSP_CTRL_RTRIGGER
|
PSP_CTRL_START
)) {

199 
	`p•_sdl_exô
(0);

201 if(
√w_∑d
 & 
PSP_CTRL_SELECT
) {

203 
íd_míu
 = 1;

205 if(
√w_∑d
 & 
PSP_CTRL_UP
) {

206 i‡(
p•_hñp_cuºít
 > 0)Ösp_help_current--;

208 if(
√w_∑d
 & 
PSP_CTRL_DOWN
) {

209 i‡((
p•_hñp_cuºít
 + 1Ë< 
p•_hñp_size
)Ösp_help_current++;

211 if(
√w_∑d
 & 
PSP_CTRL_LEFT
) {

212 i‡(
p•_hñp_cuºít
 > 
HELP_LINE_BY_PAGE
)Ösp_help_current -= HELP_LINE_BY_PAGE;

213 
p•_hñp_cuºít
 = 0;

215 if(
√w_∑d
 & 
PSP_CTRL_RIGHT
) {

216 i‡((
p•_hñp_cuºít
 + 
HELP_LINE_BY_PAGE
 + 1Ë< 
p•_hñp_size
)Ösp_help_current += HELP_LINE_BY_PAGE;

220 
	`p•_kbd_waô_no_buâ⁄
();

223 
	}
}

	@psp_menu_help.h

19 #i‚de‡
_PSP_MENU_HELP_H_


20 
	#_PSP_MENU_HELP_H_


	)

22 
p•_hñp_míu
();

	@psp_menu_kbd.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<sig«l.h
>

22 
	~<uni°d.h
>

23 
	~<°rög.h
>

24 
	~<î∫o.h
>

25 
	~<sys/time.h
>

26 
	~<f˙é.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<SDL/SDL.h
>

33 
	~<p•˘æ.h
>

34 
	~<p•kî√l.h
>

35 
	~<p•debug.h
>

36 
	~<p•iofûemgr.h
>

38 
	~"p•_sdl.h
"

39 
	~"p•_kbd.h
"

40 
	~"p•_míu.h
"

41 
	~"p•_fmgr.h
"

42 
	~"p•_míu_kbd.h
"

43 
	~"p•_d™zeff.h
"

44 
	~"p•_úkeyb.h
"

46 
	#MENU_KBD_SKIN
 0

	)

47 
	#MENU_KBD_KBD_SELECT
 1

	)

48 
	#MENU_KBD_UP
 2

	)

49 
	#MENU_KBD_DOWN
 3

	)

50 
	#MENU_KBD_LEFT
 4

	)

51 
	#MENU_KBD_RIGHT
 5

	)

52 
	#MENU_KBD_CROSS
 6

	)

53 
	#MENU_KBD_SQUARE
 7

	)

54 
	#MENU_KBD_TRIANGLE
 8

	)

55 
	#MENU_KBD_CIRCLE
 9

	)

56 
	#MENU_KBD_LTRIGGER
 10

	)

57 
	#MENU_KBD_RTRIGGER
 11

	)

58 
	#MENU_KBD_JOY_UP
 12

	)

59 
	#MENU_KBD_JOY_DOWN
 13

	)

60 
	#MENU_KBD_JOY_LEFT
 14

	)

61 
	#MENU_KBD_JOY_RIGHT
 15

	)

63 
	#MENU_KBD_LOAD
 16

	)

64 
	#MENU_KBD_SAVE
 17

	)

65 
	#MENU_KBD_HOTKEYS
 18

	)

66 
	#MENU_KBD_RESET
 19

	)

68 
	#MENU_KBD_BACK
 20

	)

70 
	#MAX_MENU_KBD_ITEM
 (
MENU_KBD_BACK
 + 1)

	)

72 
míu_ôem_t
 
	gmíu_li°
[] =

103 
	gcur_míu_id
 = 
MENU_KBD_LOAD
;

105 
	gloc_kbd_m≠pög
[ 
KBD_ALL_BUTTONS
 ];

106 
	gloc_kbd_m≠pög_L
[ 
KBD_ALL_BUTTONS
 ];

107 
	gloc_kbd_m≠pög_R
[ 
KBD_ALL_BUTTONS
 ];

109 
	gp•_míu_dúty
 = 1;

111 
	gmíu_kbd_£À˘ed
 = -1;

114 
	$p•_kbd_míu_id_to_key_id
(
míu_id
)

116 
kbd_id
 = 0;

118  
míu_id
 )

120 
MENU_KBD_UP
 : 
kbd_id
 = 
KBD_UP
; ;

121 
MENU_KBD_DOWN
 : 
kbd_id
 = 
KBD_DOWN
; ;

122 
MENU_KBD_LEFT
 : 
kbd_id
 = 
KBD_LEFT
; ;

123 
MENU_KBD_RIGHT
 : 
kbd_id
 = 
KBD_RIGHT
; ;

124 
MENU_KBD_TRIANGLE
 : 
kbd_id
 = 
KBD_TRIANGLE
; ;

125 
MENU_KBD_CROSS
 : 
kbd_id
 = 
KBD_CROSS
; ;

126 
MENU_KBD_SQUARE
 : 
kbd_id
 = 
KBD_SQUARE
; ;

127 
MENU_KBD_CIRCLE
 : 
kbd_id
 = 
KBD_CIRCLE
; ;

128 
MENU_KBD_LTRIGGER
 : 
kbd_id
 = 
KBD_LTRIGGER
; ;

129 
MENU_KBD_RTRIGGER
 : 
kbd_id
 = 
KBD_RTRIGGER
; ;

130 
MENU_KBD_JOY_UP
 : 
kbd_id
 = 
KBD_JOY_UP
; ;

131 
MENU_KBD_JOY_DOWN
 : 
kbd_id
 = 
KBD_JOY_DOWN
; ;

132 
MENU_KBD_JOY_LEFT
 : 
kbd_id
 = 
KBD_JOY_LEFT
; ;

133 
MENU_KBD_JOY_RIGHT
 : 
kbd_id
 = 
KBD_JOY_RIGHT
; ;

135  
kbd_id
;

136 
	}
}

139 
	$p•_di•œy_s¸ìn_kbd_míu
()

141 
buf„r
[32];

142 *
sˇn
;

143 
míu_id
 = 0;

144 
kbd_id
 = 0;

145 
©¨i_key
 = 0;

146 
cﬁ‹
 = 0;

147 
x
 = 0;

148 
y
 = 0;

149 
y_°ï
 = 0;

153 
	`p•_sdl_blô_background
();

154 
p•_míu_dúty
 = 0;

156 
	`p•_sdl_døw_ª˘™gÀ
(10,10,459,249,
PSP_MENU_BORDER_COLOR
,0);

157 
	`p•_sdl_døw_ª˘™gÀ
(11,11,457,247,
PSP_MENU_BORDER_COLOR
,0);

159 
	`p•_sdl_back2_¥öt
–30, 6, " Sèπ+L+R: EXIT ", 
PSP_MENU_WARNING_COLOR
);

161 
	`p•_di•œy_s¸ìn_míu_b©ãry
();

163 
	`p•_sdl_back2_¥öt
–310, 6, " Sèπ: Keybﬂrd ", 
PSP_MENU_NOTE_COLOR
);

165 
	`p•_sdl_back2_¥öt
(30, 254, " []: Cancel O/X: Valid Select: Back ",

166 
PSP_MENU_BORDER_COLOR
);

167 
	`p•_sdl_back2_¥öt
(370, 254, " By Zx-81 ",

168 
PSP_MENU_AUTHOR_COLOR
);

171 
x
 = 20;

172 
y
 = 25;

173 
y_°ï
 = 10;

175 
míu_id
 = 0; míu_id < 
MAX_MENU_KBD_ITEM
; menu_id++)

177 i‡(
cur_míu_id
 =
míu_id
Ë
cﬁ‹
 = 
PSP_MENU_SEL_COLOR
;

179 i‡(
míu_id
 =
MENU_KBD_KBD_SELECT
Ë
cﬁ‹
 = 
PSP_MENU_NOTE_COLOR
;

180 
cﬁ‹
 = 
PSP_MENU_TEXT_COLOR
;

182 
	`p•_sdl_back2_¥öt
(
x
, 
y
, 
míu_li°
[
míu_id
].
tôÀ
, 
cﬁ‹
);

184 i‡(
míu_id
 =
MENU_KBD_SKIN
) {

185 
	`¢¥ötf
(
buf„r
, 30, 
p•_kbd_skö_dú
[
p•_kbd_skö
]);

186 
sˇn
 = 
	`°rchr
(
buf„r
, '/');

187 i‡(
sˇn
) *scan = 0;

188 
	`p•_sdl_back2_¥öt
(110, 
y
, 
buf„r
, 
cﬁ‹
);

190 i‡(
míu_id
 =
MENU_KBD_KBD_SELECT
) {

192 i‡(
míu_kbd_£À˘ed
 =-1Ë
	`•rötf
(
buf„r
, "standard");

194 i‡(
míu_kbd_£À˘ed
 =
KBD_LTRIGGER_MAPPING
Ë
	`•rötf
(
buf„r
, "left");

196 i‡(
míu_kbd_£À˘ed
 =
KBD_RTRIGGER_MAPPING
Ë
	`•rötf
(
buf„r
, "right");

198 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 20);

199 
	`p•_sdl_back2_¥öt
(110, 
y
, 
buf„r
, 
cﬁ‹
);

202 i‡((
míu_id
 >
MENU_KBD_UP
 ) &&

203 (
míu_id
 <
MENU_KBD_JOY_RIGHT
))

205 
kbd_id
 = 
	`p•_kbd_míu_id_to_key_id
(
míu_id
);

207 i‡(
míu_kbd_£À˘ed
 =
KBD_NORMAL_MAPPING
 ) 
©¨i_key
 = 
loc_kbd_m≠pög
[
kbd_id
];

209 i‡(
míu_kbd_£À˘ed
 =
KBD_LTRIGGER_MAPPING
Ë
©¨i_key
 = 
loc_kbd_m≠pög_L
[
kbd_id
];

211 i‡(
míu_kbd_£À˘ed
 =
KBD_RTRIGGER_MAPPING
Ë
©¨i_key
 = 
loc_kbd_m≠pög_R
[
kbd_id
];

213 i‡((
©¨i_key
 >0Ë&& (©¨i_key < 
ATARI_MAX_KEY
)) {

214 
	`°r˝y
(
buf„r
, 
p•_©¨i_key_to_«me
[
©¨i_key
].
«me
);

216 i‡(
©¨i_key
 =
KBD_UNASSIGNED
) {

217 
	`•rötf
(
buf„r
, "UNASSIGNED");

219 i‡(
©¨i_key
 =
KBD_LTRIGGER_MAPPING
) {

220 
	`•rötf
(
buf„r
, "L MAPPING");

222 i‡(
©¨i_key
 =
KBD_RTRIGGER_MAPPING
) {

223 
	`•rötf
(
buf„r
, "R MAPPING");

225 
	`•rötf
(
buf„r
, "KEY %d", 
©¨i_key
);

227 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 12);

228 
	`p•_sdl_back2_¥öt
(110, 
y
, 
buf„r
, 
cﬁ‹
);

230 i‡(
míu_id
 =
MENU_KBD_JOY_RIGHT
) {

231 
y
 +
y_°ï
;

234 
y
 +
y_°ï
;

237 
	`p•_míu_di•œy_ßve_«me
();

238 
	}
}

241 
	$p•_keybﬂrd_míu_upd©e_Ã
()

243 
kbd_id
;

245 
kbd_id
 = 0; kbd_id < 
KBD_ALL_BUTTONS
; kbd_id++) {

246 i‡(
loc_kbd_m≠pög
[
kbd_id
] =
KBD_LTRIGGER_MAPPING
) {

247 
loc_kbd_m≠pög_L
[
kbd_id
] = 
KBD_LTRIGGER_MAPPING
;

248 
loc_kbd_m≠pög_R
[
kbd_id
] = 
KBD_LTRIGGER_MAPPING
;

250 i‡(
loc_kbd_m≠pög
[
kbd_id
] =
KBD_RTRIGGER_MAPPING
) {

251 
loc_kbd_m≠pög_L
[
kbd_id
] = 
KBD_RTRIGGER_MAPPING
;

252 
loc_kbd_m≠pög_R
[
kbd_id
] = 
KBD_RTRIGGER_MAPPING
;

255 
	}
}

258 
	$p•_keybﬂrd_míu_ª£t_kbd
()

260 
	`p•_di•œy_s¸ìn_kbd_míu
();

261 
	`p•_sdl_back2_¥öt
(270, 80, "Reset Keyboard !",

262 
PSP_MENU_WARNING_COLOR
);

263 
p•_míu_dúty
 = 1;

264 
	`p•_sdl_Êù
();

265 
	`p•_kbd_ª£t_m≠pög
();

266 
	`¶ìp
(1);

268 
	`mem˝y
(
loc_kbd_m≠pög
, 
p•_kbd_m≠pög
, (psp_kbd_mapping));

269 
	`mem˝y
(
loc_kbd_m≠pög_L
, 
p•_kbd_m≠pög_L
, (psp_kbd_mapping_L));

270 
	`mem˝y
(
loc_kbd_m≠pög_R
, 
p•_kbd_m≠pög_R
, (psp_kbd_mapping_R));

271 
	}
}

274 
	$p•_keybﬂrd_míu_hŸkeys
()

276 
	`p•_di•œy_s¸ìn_kbd_míu
();

277 
	`p•_sdl_back2_¥öt
(270, 80, "Set Hotkeys !",

278 
PSP_MENU_WARNING_COLOR
);

279 
p•_míu_dúty
 = 1;

280 
	`p•_sdl_Êù
();

281 
	`p•_kbd_ª£t_hŸkeys
();

282 
	`¶ìp
(1);

284 
	`mem˝y
(
loc_kbd_m≠pög
, 
p•_kbd_m≠pög
, (psp_kbd_mapping));

285 
	`mem˝y
(
loc_kbd_m≠pög_L
, 
p•_kbd_m≠pög_L
, (psp_kbd_mapping_L));

286 
	`mem˝y
(
loc_kbd_m≠pög_R
, 
p•_kbd_m≠pög_R
, (psp_kbd_mapping_R));

287 
	}
}

290 
	$p•_keybﬂrd_míu_lﬂd
()

292 
ªt
;

294 
ªt
 = 
	`p•_fmgr_míu
(
FMGR_FORMAT_KBD
);

295 i‡(
ªt
 == 1)

297 
	`p•_di•œy_s¸ìn_kbd_míu
();

298 
	`p•_sdl_back2_¥öt
(270, 80, "FileÜoaded !",

299 
PSP_MENU_NOTE_COLOR
);

300 
p•_míu_dúty
 = 1;

301 
	`p•_sdl_Êù
();

302 
	`¶ìp
(1);

305 i‡(
ªt
 == -1)

307 
	`p•_di•œy_s¸ìn_kbd_míu
();

308 
	`p•_sdl_back2_¥öt
(270, 80, "Can'tÜoad file !",

309 
PSP_MENU_WARNING_COLOR
);

310 
p•_míu_dúty
 = 1;

311 
	`p•_sdl_Êù
();

312 
	`¶ìp
(1);

315 
	`mem˝y
(
loc_kbd_m≠pög
 , 
p•_kbd_m≠pög
, (psp_kbd_mapping));

316 
	`mem˝y
(
loc_kbd_m≠pög_L
, 
p•_kbd_m≠pög_L
, (psp_kbd_mapping_L));

317 
	`mem˝y
(
loc_kbd_m≠pög_R
, 
p•_kbd_m≠pög_R
, (psp_kbd_mapping_R));

318 
	}
}

321 
	$p•_keybﬂrd_míu_m≠pög
(
kbd_id
, 
°ï
)

323 *
∂oc_kbd_m≠pög
;

325 
∂oc_kbd_m≠pög
 = 
loc_kbd_m≠pög
;

327 i‡(
míu_kbd_£À˘ed
 =
KBD_LTRIGGER_MAPPING
) {

328 
∂oc_kbd_m≠pög
 = 
loc_kbd_m≠pög_L
;

330 i‡(
míu_kbd_£À˘ed
 =
KBD_RTRIGGER_MAPPING
) {

331 
∂oc_kbd_m≠pög
 = 
loc_kbd_m≠pög_R
;

334 i‡(
°ï
 < 0Ë
∂oc_kbd_m≠pög
[
kbd_id
]--;

336 i‡(
°ï
 > 0Ë
∂oc_kbd_m≠pög
[
kbd_id
]++;

338 i‡(
∂oc_kbd_m≠pög
[
kbd_id
] < -3Ë∂oc_kbd_m≠pög[kbd_id] = 
ATARI_MAX_KEY
-1;

340 i‡(
∂oc_kbd_m≠pög
[
kbd_id
] >
ATARI_MAX_KEY
)Öloc_kbd_mapping[kbd_id] = -3;

341 
	}
}

344 
	$p•_keybﬂrd_míu_ßve
()

346 
îr‹
;

348 
	`p•_keybﬂrd_míu_upd©e_Ã
();

350 
	`mem˝y
(
p•_kbd_m≠pög
 , 
loc_kbd_m≠pög
 , (psp_kbd_mapping));

351 
	`mem˝y
(
p•_kbd_m≠pög_L
, 
loc_kbd_m≠pög_L
, (psp_kbd_mapping_L));

352 
	`mem˝y
(
p•_kbd_m≠pög_R
, 
loc_kbd_m≠pög_R
, (psp_kbd_mapping_R));

354 
îr‹
 = 
	`©¨i_kbd_ßve
();

356 i‡(! 
îr‹
)

358 
	`p•_di•œy_s¸ìn_kbd_míu
();

359 
	`p•_sdl_back2_¥öt
(270, 80, "File saved !",

360 
PSP_MENU_NOTE_COLOR
);

361 
p•_míu_dúty
 = 1;

362 
	`p•_sdl_Êù
();

363 
	`¶ìp
(1);

367 
	`p•_di•œy_s¸ìn_kbd_míu
();

368 
	`p•_sdl_back2_¥öt
(270, 80, "Can't save file !",

369 
PSP_MENU_WARNING_COLOR
);

370 
p•_míu_dúty
 = 1;

371 
	`p•_sdl_Êù
();

372 
	`¶ìp
(1);

374 
	}
}

377 
	$p•_keybﬂrd_£À˘_ch™ge
(
°ï
)

379 i‡(
°ï
 > 0) {

380 i‡(
míu_kbd_£À˘ed
 =
KBD_RTRIGGER_MAPPING
) menu_kbd_selected = -1;

381 
míu_kbd_£À˘ed
--;

383 i‡(
míu_kbd_£À˘ed
 =-1Ëmíu_kbd_£À˘ed = 
KBD_RTRIGGER_MAPPING
;

384 
míu_kbd_£À˘ed
++;

386 
	`p•_keybﬂrd_míu_upd©e_Ã
();

387 
	}
}

390 
	$p•_keybﬂrd_míu_skö
(
°ï
)

392 i‡(
°ï
 > 0) {

393 i‡(
p•_kbd_skö
 < 
p•_kbd_œ°_skö
)Ösp_kbd_skin++;

394 
p•_kbd_skö
 = 0;

396 i‡(
p•_kbd_skö
 > 0)Ösp_kbd_skin--;

397 
p•_kbd_skö
 = 
p•_kbd_œ°_skö
;

400 
	`d™zeff_ch™ge_skö
();

401 
	}
}

404 
	$p•_keybﬂrd_míu
()

406 
S˚CålD©a
 
c
;

407 
√w_∑d
;

408 
ﬁd_∑d
;

409 
œ°_time
;

410 
íd_míu
;

411 
kbd_id
;

412 
©¨i_key
;

413 
d™zeff_mode
;

414 
d™zeff_key
;

415 
p•_úkeyb
;

417 
p•_míu_dúty
 = 1;

419 
	`p•_kbd_waô_no_buâ⁄
();

421 
ﬁd_∑d
 = 0;

422 
œ°_time
 = 0;

423 
íd_míu
 = 0;

424 
kbd_id
 = 0;

426 
d™zeff_key
 = 0;

427 
d™zeff_mode
 = 0;

429 
	`mem˝y
(
loc_kbd_m≠pög
 , 
p•_kbd_m≠pög
 , (psp_kbd_mapping));

430 
	`mem˝y
(
loc_kbd_m≠pög_L
, 
p•_kbd_m≠pög_L
, (psp_kbd_mapping_L));

431 
	`mem˝y
(
loc_kbd_m≠pög_R
, 
p•_kbd_m≠pög_R
, (psp_kbd_mapping_R));

433 #ifde‡
USE_PSP_IRKEYB


434 
p•_úkeyb
 = 
PSP_IRKEYB_EMPTY
;

437 ! 
íd_míu
)

439 
	`p•_di•œy_s¸ìn_kbd_míu
();

441 i‡(
d™zeff_mode
) {

442 
	`d™zeff_moveTo
(-50, -50);

443 
	`d™zeff_ªndî
();

445 
	`p•_sdl_Êù
();

449 
	`s˚CålPìkBuf„rPosôive
(&
c
, 1);

450 
c
.
Buâ⁄s
 &
PSP_ALL_BUTTON_MASK
;

452 #ifde‡
USE_PSP_IRKEYB


453 
p•_úkeyb
 = 
	`p•_úkeyb_£t_p•_key
(&
c
);

455 
√w_∑d
 = 
c
.
Buâ⁄s
;

457 i‡((
ﬁd_∑d
 !
√w_∑d
Ë|| ((
c
.
TimeSèmp
 - 
œ°_time
Ë> 
PSP_MENU_MIN_TIME
)) {

458 
œ°_time
 = 
c
.
TimeSèmp
;

459 
ﬁd_∑d
 = 
√w_∑d
;

462 #ifde‡
USE_PSP_IRKEYB


463 i‡(
p•_úkeyb
 !
PSP_IRKEYB_EMPTY
) ;

467 #ifde‡
USE_PSP_IRKEYB


468 
p•_úkeyb
 = 
	`p•_úkeyb_ªad_key
();

470 i‡(
p•_úkeyb
 !
PSP_IRKEYB_EMPTY
) {

472 i‡(
p•_úkeyb
 =
PSP_IRKEYB_UP
) {

473 
©¨i_key
 = 
Joy°ickZîoUp
;

475 i‡(
p•_úkeyb
 =
PSP_IRKEYB_DOWN
) {

476 
©¨i_key
 = 
Joy°ickZîoDown
;

478 i‡(
p•_úkeyb
 =
PSP_IRKEYB_LEFT
) {

479 
©¨i_key
 = 
Joy°ickZîoLe·
;

481 i‡(
p•_úkeyb
 =
PSP_IRKEYB_RIGHT
) {

482 
©¨i_key
 = 
Joy°ickZîoRight
;

484 
©¨i_key
 = 
	`©¨i_gë_key_‰om_ascii
(
p•_úkeyb
);

487 i‡(
©¨i_key
 != -1) {

488 i‡((
cur_míu_id
 >
MENU_KBD_UP
 ) &&

489 (
cur_míu_id
 <
MENU_KBD_JOY_RIGHT
))

491 
kbd_id
 = 
	`p•_kbd_míu_id_to_key_id
(
cur_míu_id
);

493 i‡(
míu_kbd_£À˘ed
 =-1Ë
loc_kbd_m≠pög
[
kbd_id
] = 
©¨i_key
;

495 i‡(
míu_kbd_£À˘ed
 =
KBD_LTRIGGER_MAPPING
Ë
loc_kbd_m≠pög_L
[
kbd_id
] = 
©¨i_key
;

497 i‡(
míu_kbd_£À˘ed
 =
KBD_RTRIGGER_MAPPING
Ë
loc_kbd_m≠pög_R
[
kbd_id
] = 
©¨i_key
;

503 i‡(
d™zeff_mode
) {

505 
d™zeff_key
 = 
	`d™zeff_ªadI≈ut
(
c
);

507 i‡(
d™zeff_key
 > 
DANZEFF_START
) {

508 
©¨i_key
 = 
	`©¨i_gë_key_‰om_ascii
(
d™zeff_key
);

510 i‡(
©¨i_key
 != -1) {

511 i‡((
cur_míu_id
 >
MENU_KBD_UP
 ) &&

512 (
cur_míu_id
 <
MENU_KBD_JOY_RIGHT
))

514 
kbd_id
 = 
	`p•_kbd_míu_id_to_key_id
(
cur_míu_id
);

516 i‡(
míu_kbd_£À˘ed
 =-1Ë
loc_kbd_m≠pög
[
kbd_id
] = 
©¨i_key
;

518 i‡(
míu_kbd_£À˘ed
 =
KBD_LTRIGGER_MAPPING
Ë
loc_kbd_m≠pög_L
[
kbd_id
] = 
©¨i_key
;

520 i‡(
míu_kbd_£À˘ed
 =
KBD_RTRIGGER_MAPPING
Ë
loc_kbd_m≠pög_R
[
kbd_id
] = 
©¨i_key
;

525 i‡((
d™zeff_key
 =
DANZEFF_START
 ) ||

526 (
d™zeff_key
 =
DANZEFF_SELECT
))

528 
d™zeff_mode
 = 0;

529 
ﬁd_∑d
 = 
√w_∑d
 = 0;

531 
	`p•_kbd_waô_no_buâ⁄
();

534 i‡(
d™zeff_key
 >= -1) {

539 i‡((
c
.
Buâ⁄s
 & (
PSP_CTRL_LTRIGGER
|
PSP_CTRL_RTRIGGER
|
PSP_CTRL_START
)) ==

540 (
PSP_CTRL_LTRIGGER
|
PSP_CTRL_RTRIGGER
|
PSP_CTRL_START
)) {

542 
	`p•_sdl_exô
(0);

544 i‡(
√w_∑d
 & 
PSP_CTRL_LTRIGGER
) {

545 
	`p•_keybﬂrd_£À˘_ch™ge
(-1);

547 i‡(
√w_∑d
 & 
PSP_CTRL_RTRIGGER
) {

548 
	`p•_keybﬂrd_£À˘_ch™ge
(+1);

550 i‡((
√w_∑d
 & 
PSP_CTRL_CROSS
 ) ||

551 (
√w_∑d
 & 
PSP_CTRL_CIRCLE
) ||

552 (
√w_∑d
 & 
PSP_CTRL_RIGHT
 ) ||

553 (
√w_∑d
 & 
PSP_CTRL_LEFT
 ))

555 
°ï
;

557 i‡(
√w_∑d
 & 
PSP_CTRL_LEFT
Ë
°ï
 = -1;

559 i‡(
√w_∑d
 & 
PSP_CTRL_RIGHT
Ë
°ï
 = 1;

560 
°ï
 = 0;

562 i‡((
cur_míu_id
 >
MENU_KBD_UP
 ) &&

563 (
cur_míu_id
 <
MENU_KBD_JOY_RIGHT
))

565 
kbd_id
 = 
	`p•_kbd_míu_id_to_key_id
(
cur_míu_id
);

566 
	`p•_keybﬂrd_míu_m≠pög
(
kbd_id
, 
°ï
);

570 
cur_míu_id
 )

572 
MENU_KBD_SKIN
 : 
	`p•_keybﬂrd_míu_skö
(
°ï
);

574 
MENU_KBD_KBD_SELECT
 : 
	`p•_keybﬂrd_£À˘_ch™ge
(
°ï
);

576 
MENU_KBD_LOAD
 : 
p•_míu_dúty
 = 1;

577 
	`p•_keybﬂrd_míu_lﬂd
();

578 
p•_míu_dúty
 = 1;

579 
ﬁd_∑d
 = 
√w_∑d
 = 0;

580 
míu_kbd_£À˘ed
 = -1;

582 
MENU_KBD_SAVE
 : 
	`p•_keybﬂrd_míu_ßve
();

584 
MENU_KBD_HOTKEYS
 : 
	`p•_keybﬂrd_míu_hŸkeys
();

586 
MENU_KBD_RESET
 : 
	`p•_keybﬂrd_míu_ª£t_kbd
();

589 
MENU_KBD_BACK
 : 
íd_míu
 = 1;

595 if(
√w_∑d
 & 
PSP_CTRL_UP
) {

597 i‡(
cur_míu_id
 > 0) cur_menu_id--;

598 
cur_míu_id
 = 
MAX_MENU_KBD_ITEM
-1;

601 if(
√w_∑d
 & 
PSP_CTRL_DOWN
) {

603 i‡(
cur_míu_id
 < (
MAX_MENU_KBD_ITEM
-1)) cur_menu_id++;

604 
cur_míu_id
 = 0;

607 if(
√w_∑d
 & 
PSP_CTRL_SQUARE
) {

609 
íd_míu
 = -1;

611 i‡((
√w_∑d
 & 
PSP_CTRL_SELECT
) == PSP_CTRL_SELECT) {

613 
íd_míu
 = 1;

615 i‡((
√w_∑d
 & 
PSP_CTRL_START
) == PSP_CTRL_START) {

616 i‡((
cur_míu_id
 < 
MENU_KBD_UP
 ) ||

617 (
cur_míu_id
 > 
MENU_KBD_JOY_RIGHT
)) {

618 
cur_míu_id
 = 
MENU_KBD_UP
;

620 
d™zeff_mode
 = 1;

624 i‡(
íd_míu
 > 0) {

626 
	`p•_keybﬂrd_míu_upd©e_Ã
();

628 
	`mem˝y
(
p•_kbd_m≠pög
 , 
loc_kbd_m≠pög
 , (psp_kbd_mapping));

629 
	`mem˝y
(
p•_kbd_m≠pög_L
, 
loc_kbd_m≠pög_L
, (psp_kbd_mapping_L));

630 
	`mem˝y
(
p•_kbd_m≠pög_R
, 
loc_kbd_m≠pög_R
, (psp_kbd_mapping_R));

633 
	`p•_kbd_waô_no_buâ⁄
();

634 
	}
}

	@psp_menu_kbd.h

19 #i‚de‡
_PSP_MENU_KBD_H_


20 
	#_PSP_MENU_KBD_H_


	)

22 
	#PSP_MENU_KBD_MIN_TIME
 100000

	)

24 
p•_keybﬂrd_míu
();

	@psp_menu_set.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<sig«l.h
>

22 
	~<uni°d.h
>

23 
	~<°rög.h
>

24 
	~<î∫o.h
>

25 
	~<sys/time.h
>

26 
	~<f˙é.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<SDL/SDL.h
>

32 
	~<SDL/SDL_mixî.h
>

34 
	~<p•˘æ.h
>

35 
	~<p•kî√l.h
>

36 
	~<p•debug.h
>

37 
	~<p•iofûemgr.h
>

39 
	~"Aèri.h
"

40 
	~"globÆ.h
"

41 
	~"p•_sdl.h
"

42 
	~"p•_kbd.h
"

43 
	~"p•_míu.h
"

44 
	~"p•_fmgr.h
"

45 
	~"p•_míu_kbd.h
"

46 
	~"p•_míu_£t.h
"

47 
	~"p•_b©ãry.h
"

48 
	~"p•_úkeyb.h
"

50 
SDL_SurÁ˚
 *
back_surÁ˚
;

51 
	gp•_míu_dúty
 = 1;

53 
	#MENU_SET_SOUND
 0

	)

54 
	#MENU_SET_JOYSTICK
 1

	)

55 
	#MENU_SET_PADDLE
 2

	)

56 
	#MENU_SET_PADDLE_SPEED
 3

	)

57 
	#MENU_SET_SPEED_LIMIT
 4

	)

58 
	#MENU_SET_SKIP_FPS
 5

	)

59 
	#MENU_SET_VIEW_FPS
 6

	)

60 
	#MENU_SET_RENDER
 7

	)

61 
	#MENU_SET_VSYNC
 8

	)

62 
	#MENU_SET_FLICKER_MODE
 9

	)

63 
	#MENU_SET_ANALOG
 10

	)

64 
	#MENU_SET_AUTOFIRE_T
 11

	)

65 
	#MENU_SET_AUTOFIRE_M
 12

	)

66 
	#MENU_SET_DISPLAY_LR
 13

	)

67 
	#MENU_SET_CLOCK
 14

	)

69 
	#MENU_SET_LOAD
 15

	)

70 
	#MENU_SET_SAVE
 16

	)

71 
	#MENU_SET_RESET
 17

	)

73 
	#MENU_SET_BACK
 18

	)

75 
	#MAX_MENU_SET_ITEM
 (
MENU_SET_BACK
 + 1)

	)

77 
míu_ôem_t
 
	gmíu_li°
[] =

100 
	gcur_míu_id
 = 
MENU_SET_LOAD
;

102 
	g©¨i_¢d_íabÀ
 = 0;

103 
	g©¨i_ªndî_mode
 = 0;

104 
	g©¨i_vsync
 = 0;

105 
	g©¨i_võw_Âs
 = 0;

106 
	g©¨i_Êickî_mode
 = 
ATARI_FLICKER_NONE
;

107 
	g©¨i_•ìd_limôî
 = 60;

108 
	g©¨i_∑ddÀ_•ìd
 = 2;

109 
	g©¨i_∑ddÀ_íabÀ
 = 1;

110 
	gp•_ªvî£_™Æog
 = 0;

111 
	gp•_di•œy_Ã
 = 0;

112 
	gp•_a˘ive_joy°ick
 = 0;

113 
	gp•_˝u_˛ock
 = 222;

114 
	g©¨i_skù_Âs
 = 0;

115 
	g©¨i_auto_fúe_≥riod
 = 0;

116 
	g©¨i_auto_fúe_mode
 = 0;

119 
p•_£âögs_míu_ª£t
();

122 
	$p•_di•œy_s¸ìn_£âögs_míu
()

124 
buf„r
[64];

125 
míu_id
 = 0;

126 
cﬁ‹
 = 0;

127 
x
 = 0;

128 
y
 = 0;

129 
y_°ï
 = 0;

134 
	`p•_sdl_blô_background
();

135 
p•_míu_dúty
 = 0;

137 
	`p•_sdl_døw_ª˘™gÀ
(10,10,459,249,
PSP_MENU_BORDER_COLOR
,0);

138 
	`p•_sdl_døw_ª˘™gÀ
(11,11,457,247,
PSP_MENU_BORDER_COLOR
,0);

140 
	`p•_sdl_back2_¥öt
–30, 6, " L: Keybﬂrd ", 
PSP_MENU_NOTE_COLOR
);

142 
	`p•_di•œy_s¸ìn_míu_b©ãry
();

144 
	`p•_sdl_back2_¥öt
–370, 6, " R: Re£à", 
PSP_MENU_WARNING_COLOR
);

146 
	`p•_sdl_back2_¥öt
(30, 254, " []: Cancel O/X: Valid SELECT: Back ",

147 
PSP_MENU_BORDER_COLOR
);

149 
	`p•_sdl_back2_¥öt
(370, 254, " By Zx-81 ",

150 
PSP_MENU_AUTHOR_COLOR
);

153 
x
 = 20;

154 
y
 = 25;

155 
y_°ï
 = 10;

157 
míu_id
 = 0; míu_id < 
MAX_MENU_SET_ITEM
; menu_id++) {

158 
cﬁ‹
 = 
PSP_MENU_TEXT_COLOR
;

159 i‡(
cur_míu_id
 =
míu_id
Ë
cﬁ‹
 = 
PSP_MENU_SEL_COLOR
;

161 
	`p•_sdl_back2_¥öt
(
x
, 
y
, 
míu_li°
[
míu_id
].
tôÀ
, 
cﬁ‹
);

163 i‡(
míu_id
 =
MENU_SET_SOUND
) {

164 i‡(
©¨i_¢d_íabÀ
Ë
	`°r˝y
(
buf„r
,"yes");

165 
	`°r˝y
(
buf„r
,"no ");

166 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 4);

167 
	`p•_sdl_back2_¥öt
(190, 
y
, 
buf„r
, 
cﬁ‹
);

169 i‡(
míu_id
 =
MENU_SET_VIEW_FPS
) {

170 i‡(
©¨i_võw_Âs
Ë
	`°r˝y
(
buf„r
,"on ");

171 
	`°r˝y
(
buf„r
,"off");

172 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 4);

173 
	`p•_sdl_back2_¥öt
(190, 
y
, 
buf„r
, 
cﬁ‹
);

175 i‡(
míu_id
 =
MENU_SET_ANALOG
) {

176 i‡(
p•_ªvî£_™Æog
Ë
	`°r˝y
(
buf„r
,"yes");

177 
	`°r˝y
(
buf„r
,"no ");

178 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 4);

179 
	`p•_sdl_back2_¥öt
(190, 
y
, 
buf„r
, 
cﬁ‹
);

181 i‡(
míu_id
 =
MENU_SET_AUTOFIRE_T
) {

182 
	`•rötf
(
buf„r
,"%d", 
©¨i_auto_fúe_≥riod
+1);

183 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 7);

184 
	`p•_sdl_back2_¥öt
(190, 
y
, 
buf„r
, 
cﬁ‹
);

186 i‡(
míu_id
 =
MENU_SET_AUTOFIRE_M
) {

187 i‡(
©¨i_auto_fúe_mode
Ë
	`°r˝y
(
buf„r
,"yes");

188 
	`°r˝y
(
buf„r
,"no ");

189 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 4);

190 
	`p•_sdl_back2_¥öt
(190, 
y
, 
buf„r
, 
cﬁ‹
);

192 i‡(
míu_id
 =
MENU_SET_JOYSTICK
) {

193 i‡(
p•_a˘ive_joy°ick
Ë
	`°r˝y
(
buf„r
,"player 2");

194 
	`°r˝y
(
buf„r
,"player 1 ");

195 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 10);

196 
	`p•_sdl_back2_¥öt
(190, 
y
, 
buf„r
, 
cﬁ‹
);

198 i‡(
míu_id
 =
MENU_SET_PADDLE
) {

199 i‡(
©¨i_∑ddÀ_íabÀ
Ë
	`°r˝y
(
buf„r
,"yes");

200 
	`°r˝y
(
buf„r
,"no ");

201 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 4);

202 
	`p•_sdl_back2_¥öt
(190, 
y
, 
buf„r
, 
cﬁ‹
);

204 i‡(
míu_id
 =
MENU_SET_PADDLE_SPEED
) {

205 
	`•rötf
(
buf„r
, "%d", 
©¨i_∑ddÀ_•ìd
);

206 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 10);

207 
	`p•_sdl_back2_¥öt
(190, 
y
, 
buf„r
, 
cﬁ‹
);

209 i‡(
míu_id
 =
MENU_SET_DISPLAY_LR
) {

210 i‡(
p•_di•œy_Ã
Ë
	`°r˝y
(
buf„r
,"yes");

211 
	`°r˝y
(
buf„r
,"no ");

212 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 4);

213 
	`p•_sdl_back2_¥öt
(190, 
y
, 
buf„r
, 
cﬁ‹
);

215 i‡(
míu_id
 =
MENU_SET_SKIP_FPS
) {

216 
	`•rötf
(
buf„r
,"%d", 
©¨i_skù_Âs
);

217 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 4);

218 
	`p•_sdl_back2_¥öt
(190, 
y
, 
buf„r
, 
cﬁ‹
);

220 i‡(
míu_id
 =
MENU_SET_SPEED_LIMIT
) {

221 i‡(
©¨i_•ìd_limôî
 =0Ë
	`°r˝y
(
buf„r
,"no");

222 
	`•rötf
(
buf„r
, "%d fps", 
©¨i_•ìd_limôî
);

223 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 10);

224 
	`p•_sdl_back2_¥öt
(190, 
y
, 
buf„r
, 
cﬁ‹
);

226 i‡(
míu_id
 =
MENU_SET_VSYNC
) {

227 i‡(
©¨i_vsync
Ë
	`°r˝y
(
buf„r
,"yes");

228 
	`°r˝y
(
buf„r
,"no ");

229 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 4);

230 
	`p•_sdl_back2_¥öt
(190, 
y
, 
buf„r
, 
cﬁ‹
);

232 i‡(
míu_id
 =
MENU_SET_RENDER
) {

234 i‡(
©¨i_ªndî_mode
 =
ATARI_RENDER_NORMAL
Ë
	`°r˝y
(
buf„r
, "normal");

236 i‡(
©¨i_ªndî_mode
 =
ATARI_RENDER_X125
 ) 
	`°r˝y
(
buf„r
, "x1.25");

237 
	`°r˝y
(
buf„r
, "max");

239 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 13);

240 
	`p•_sdl_back2_¥öt
(190, 
y
, 
buf„r
, 
cﬁ‹
);

242 i‡(
míu_id
 =
MENU_SET_FLICKER_MODE
) {

244 i‡(
©¨i_Êickî_mode
 =
ATARI_FLICKER_NONE
Ë
	`°r˝y
(
buf„r
, "none");

246 i‡(
©¨i_Êickî_mode
 =
ATARI_FLICKER_SIMPLE
Ë
	`°r˝y
(
buf„r
, "simple");

248 i‡(
©¨i_Êickî_mode
 =
ATARI_FLICKER_PHOSPHOR
Ë
	`°r˝y
(
buf„r
, "phosphor");

249 
	`°r˝y
(
buf„r
, "average");

251 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 13);

252 
	`p•_sdl_back2_¥öt
(190, 
y
, 
buf„r
, 
cﬁ‹
);

254 i‡(
míu_id
 =
MENU_SET_CLOCK
) {

255 
	`•rötf
(
buf„r
,"%d", 
p•_˝u_˛ock
);

256 
	`°rög_fûl_wôh_•a˚
(
buf„r
, 4);

257 
	`p•_sdl_back2_¥öt
(190, 
y
, 
buf„r
, 
cﬁ‹
);

258 
y
 +
y_°ï
;

260 i‡(
míu_id
 =
MENU_SET_RESET
) {

261 
y
 +
y_°ï
;

264 
y
 +
y_°ï
;

267 
	`p•_míu_di•œy_ßve_«me
();

268 
	}
}

271 
	#MAX_CLOCK_VALUES
 5

	)

272 
	g˛ock_vÆues
[
MAX_CLOCK_VALUES
] = { 133, 222, 266, 300, 333 };

275 
	$p•_£âögs_míu_˛ock
(
°ï
)

277 
ödex
;

278 
ödex
 = 0; index < 
MAX_CLOCK_VALUES
; index++) {

279 i‡(
p•_˝u_˛ock
 =
˛ock_vÆues
[
ödex
]) ;

281 i‡(
°ï
 > 0) {

282 
ödex
++;

283 i‡(
ödex
 >
MAX_CLOCK_VALUES
) index = 0;

284 
p•_˝u_˛ock
 = 
˛ock_vÆues
[
ödex
];

287 
ödex
--;

289 i‡(
ödex
 < 0Ëödex = 
MAX_CLOCK_VALUES
 - 1;

290 
p•_˝u_˛ock
 = 
˛ock_vÆues
[
ödex
];

292 
	}
}

295 
	$p•_£âögs_míu_ªndî
(
°ï
)

297 i‡(
°ï
 > 0) {

298 i‡(
©¨i_ªndî_mode
 < 
ATARI_LAST_RENDER
)átari_render_mode++;

299 
©¨i_ªndî_mode
 = 0;

301 i‡(
©¨i_ªndî_mode
 > 0)átari_render_mode--;

302 
©¨i_ªndî_mode
 = 
ATARI_LAST_RENDER
;

304 
	}
}

307 
	$p•_£âögs_míu_Êickî
(
°ï
)

309 i‡(
°ï
 > 0) {

310 i‡(
©¨i_Êickî_mode
 < 
ATARI_LAST_FLICKER
)átari_flicker_mode++;

311 
©¨i_Êickî_mode
 = 0;

313 i‡(
©¨i_Êickî_mode
 > 0)átari_flicker_mode--;

314 
©¨i_Êickî_mode
 = 
ATARI_LAST_FLICKER
;

316 
	}
}

319 
	$p•_£âögs_míu_autofúe
(
°ï
)

321 i‡(
°ï
 > 0) {

322 i‡(
©¨i_auto_fúe_≥riod
 < 19)átari_auto_fire_period++;

324 i‡(
©¨i_auto_fúe_≥riod
 > 0)átari_auto_fire_period--;

326 
	}
}

329 
	$p•_£âögs_míu_∑ddÀ_•ìd
(
°ï
)

331 i‡(
°ï
 > 0) {

332 i‡(
©¨i_∑ddÀ_•ìd
 < 3)átari_paddle_speed++;

333 
©¨i_∑ddÀ_•ìd
 = 1;

335 i‡(
©¨i_∑ddÀ_•ìd
 > 1)átari_paddle_speed--;

336 
©¨i_∑ddÀ_•ìd
 = 3;

338 
	}
}

341 
	$p•_£âögs_míu_skù_Âs
(
°ï
)

343 i‡(
°ï
 > 0) {

344 i‡(
©¨i_skù_Âs
 < 25)átari_skip_fps++;

346 i‡(
©¨i_skù_Âs
 > 0)átari_skip_fps--;

348 
	}
}

351 
	$p•_£âögs_míu_limôî
(
°ï
)

353 i‡(
°ï
 > 0) {

354 i‡(
©¨i_•ìd_limôî
 < 60)átari_speed_limiter++;

355 
©¨i_•ìd_limôî
 = 0;

357 i‡(
©¨i_•ìd_limôî
 > 0)átari_speed_limiter--;

358 
©¨i_•ìd_limôî
 = 60;

360 
	}
}

363 
	$p•_£âögs_míu_öô
()

365 
©¨i_¢d_íabÀ
 = 
ATARI
.atari_snd_enable;

366 
©¨i_ªndî_mode
 = 
ATARI
.atari_render_mode;

367 
©¨i_vsync
 = 
ATARI
.atari_vsync;

368 
©¨i_Êickî_mode
 = 
ATARI
.atari_flicker_mode;

369 
©¨i_∑ddÀ_•ìd
 = 
ATARI
.atari_paddle_speed;

370 
©¨i_∑ddÀ_íabÀ
 = 
ATARI
.
©¨i_∑ddÀ_•ìd
;

371 
©¨i_•ìd_limôî
 = 
ATARI
.atari_speed_limiter;

372 
©¨i_võw_Âs
 = 
ATARI
.atari_view_fps;

373 
©¨i_skù_Âs
 = 
ATARI
.
p•_skù_max_‰ame
;

374 
p•_˝u_˛ock
 = 
ATARI
.psp_cpu_clock;

375 
p•_ªvî£_™Æog
 = 
ATARI
.psp_reverse_analog;

376 
p•_a˘ive_joy°ick
 = 
ATARI
.psp_active_joystick;

377 
p•_di•œy_Ã
 = 
ATARI
.psp_display_lr;

378 
©¨i_auto_fúe_≥riod
 = 
ATARI
.atari_auto_fire_period;

379 
©¨i_auto_fúe_mode
 = 
ATARI
.
©¨i_auto_fúe
;

380 
	}
}

383 
	$p•_£âögs_míu_lﬂd
(
f‹m©
)

385 
ªt
;

387 
ªt
 = 
	`p•_fmgr_míu
(
f‹m©
);

388 i‡(
ªt
 == 1)

390 
	`p•_di•œy_s¸ìn_£âögs_míu
();

391 
	`p•_sdl_back2_¥öt
(270, 80, "FileÜoaded !",

392 
PSP_MENU_NOTE_COLOR
);

393 
p•_míu_dúty
 = 1;

394 
	`p•_sdl_Êù
();

395 
	`¶ìp
(1);

396 
	`p•_£âögs_míu_öô
();

399 i‡(
ªt
 == -1)

401 
	`p•_di•œy_s¸ìn_£âögs_míu
();

402 
	`p•_sdl_back2_¥öt
(270, 80, "Can'tÜoad file !",

403 
PSP_MENU_WARNING_COLOR
);

404 
p•_míu_dúty
 = 1;

405 
	`p•_sdl_Êù
();

406 
	`¶ìp
(1);

408 
	}
}

411 
	$p•_£âögs_míu_vÆid©e
()

414 
ATARI
.
©¨i_¢d_íabÀ
 =átari_snd_enable;

415 
ATARI
.
©¨i_ªndî_mode
 =átari_render_mode;

416 
ATARI
.
©¨i_vsync
 =átari_vsync;

417 
ATARI
.
©¨i_Êickî_mode
 =átari_flicker_mode;

418 
ATARI
.
©¨i_∑ddÀ_íabÀ
 =átari_paddle_enable;

419 
ATARI
.
©¨i_∑ddÀ_•ìd
 =átari_paddle_speed;

420 
ATARI
.
©¨i_•ìd_limôî
 =átari_speed_limiter;

421 
ATARI
.
©¨i_võw_Âs
 =átari_view_fps;

422 
ATARI
.
p•_˝u_˛ock
 =Ösp_cpu_clock;

423 
ATARI
.
p•_ªvî£_™Æog
 =Ösp_reverse_analog;

424 
ATARI
.
p•_a˘ive_joy°ick
 =Ösp_active_joystick;

425 
ATARI
.
p•_skù_max_‰ame
 = 
©¨i_skù_Âs
;

426 
ATARI
.
p•_skù_cur_‰ame
 = 0;

427 
ATARI
.
p•_di•œy_Ã
 =Ösp_display_lr;

429 
ATARI
.
©¨i_auto_fúe_≥riod
 =átari_auto_fire_period;

430 i‡(
©¨i_auto_fúe_mode
 !
ATARI
.
©¨i_auto_fúe
) {

431 
	`kbd_ch™ge_auto_fúe
(
©¨i_auto_fúe_mode
);

433 
	`s˚PowîSëClockFªquícy
(
ATARI
.
p•_˝u_˛ock
, ATARI.psp_cpu_clock, ATARI.psp_cpu_clock/2);

434 
	}
}

437 
	$p•_£âögs_míu_ßve_c⁄fig
()

439 
îr‹
;

441 
	`p•_£âögs_míu_vÆid©e
();

442 
îr‹
 = 
	`©¨i_ßve_£âögs
();

444 i‡(! 
îr‹
)

446 
	`p•_di•œy_s¸ìn_£âögs_míu
();

447 
	`p•_sdl_back2_¥öt
(270, 80, "File saved !",

448 
PSP_MENU_NOTE_COLOR
);

449 
p•_míu_dúty
 = 1;

450 
	`p•_sdl_Êù
();

451 
	`¶ìp
(1);

455 
	`p•_di•œy_s¸ìn_£âögs_míu
();

456 
	`p•_sdl_back2_¥öt
(270, 80, "Can't save file !",

457 
PSP_MENU_WARNING_COLOR
);

458 
p•_míu_dúty
 = 1;

459 
	`p•_sdl_Êù
();

460 
	`¶ìp
(1);

462 
	}
}

465 
	$p•_£âögs_míu_exô
()

467 
S˚CålD©a
 
c
;

469 
	`p•_di•œy_s¸ìn_£âögs_míu
();

470 
	`p•_sdl_back2_¥öt
(270, 80, "¥es†XÅÿc⁄fúm !", 
PSP_MENU_WARNING_COLOR
);

471 
p•_míu_dúty
 = 1;

472 
	`p•_sdl_Êù
();

474 
	`p•_kbd_waô_no_buâ⁄
();

478 
	`s˚CålPìkBuf„rPosôive
(&
c
, 1);

479 
c
.
Buâ⁄s
 &
PSP_ALL_BUTTON_MASK
;

481 i‡(
c
.
Buâ⁄s
 & 
PSP_CTRL_CROSS
Ë
	`p•_sdl_exô
(0);

483 } 
c
.
Buâ⁄s
 == 0);

485 
	`p•_kbd_waô_no_buâ⁄
();

488 
	}
}

491 
	$p•_£âögs_míu_ßve
()

493 
îr‹
;

495 
	`p•_£âögs_míu_vÆid©e
();

496 
îr‹
 = 
	`©¨i_ßve_£âögs
();

498 i‡(! 
îr‹
)

500 
	`p•_di•œy_s¸ìn_£âögs_míu
();

501 
	`p•_sdl_back2_¥öt
(270, 80, "File saved !",

502 
PSP_MENU_NOTE_COLOR
);

503 
p•_míu_dúty
 = 1;

504 
	`p•_sdl_Êù
();

505 
	`¶ìp
(1);

509 
	`p•_di•œy_s¸ìn_£âögs_míu
();

510 
	`p•_sdl_back2_¥öt
(270, 80, "Can't save file !",

511 
PSP_MENU_WARNING_COLOR
);

512 
p•_míu_dúty
 = 1;

513 
	`p•_sdl_Êù
();

514 
	`¶ìp
(1);

516 
	}
}

519 
	$p•_£âögs_míu_ª£t
()

521 
	`p•_di•œy_s¸ìn_£âögs_míu
();

522 
	`p•_sdl_back2_¥öt
(270, 80, "Reset Settings !",

523 
PSP_MENU_WARNING_COLOR
);

524 
p•_míu_dúty
 = 1;

525 
	`p•_sdl_Êù
();

526 
	`©¨i_deÁu…_£âögs
();

527 
	`p•_£âögs_míu_öô
();

528 
	`¶ìp
(1);

529 
	}
}

532 
	$p•_£âögs_míu
()

534 
S˚CålD©a
 
c
;

535 
√w_∑d
;

536 
ﬁd_∑d
;

537 
œ°_time
;

538 
íd_míu
;

540 
	`p•_kbd_waô_no_buâ⁄
();

542 
ﬁd_∑d
 = 0;

543 
œ°_time
 = 0;

544 
íd_míu
 = 0;

546 
	`p•_£âögs_míu_öô
();

548 
p•_míu_dúty
 = 1;

550 ! 
íd_míu
)

552 
	`p•_di•œy_s¸ìn_£âögs_míu
();

553 
	`p•_sdl_Êù
();

557 
	`s˚CålRódBuf„rPosôive
(&
c
, 1);

558 
c
.
Buâ⁄s
 &
PSP_ALL_BUTTON_MASK
;

560 #ifde‡
USE_PSP_IRKEYB


561 
	`p•_úkeyb_£t_p•_key
(&
c
);

563 i‡(
c
.
Buâ⁄s
) ;

566 
√w_∑d
 = 
c
.
Buâ⁄s
;

568 i‡((
ﬁd_∑d
 !
√w_∑d
Ë|| ((
c
.
TimeSèmp
 - 
œ°_time
Ë> 
PSP_MENU_MIN_TIME
)) {

569 
œ°_time
 = 
c
.
TimeSèmp
;

570 
ﬁd_∑d
 = 
√w_∑d
;

574 i‡((
c
.
Buâ⁄s
 & (
PSP_CTRL_LTRIGGER
|
PSP_CTRL_RTRIGGER
|
PSP_CTRL_START
)) ==

575 (
PSP_CTRL_LTRIGGER
|
PSP_CTRL_RTRIGGER
|
PSP_CTRL_START
)) {

577 
	`p•_sdl_exô
(0);

579 i‡((
c
.
Buâ⁄s
 & 
PSP_CTRL_LTRIGGER
) == PSP_CTRL_LTRIGGER) {

580 
	`p•_keybﬂrd_míu
();

581 
íd_míu
 = 1;

583 i‡((
c
.
Buâ⁄s
 & 
PSP_CTRL_RTRIGGER
) == PSP_CTRL_RTRIGGER) {

584 
	`p•_£âögs_míu_ª£t
();

585 
íd_míu
 = 1;

587 i‡((
√w_∑d
 & 
PSP_CTRL_CROSS
 ) ||

588 (
√w_∑d
 & 
PSP_CTRL_CIRCLE
) ||

589 (
√w_∑d
 & 
PSP_CTRL_RIGHT
 ) ||

590 (
√w_∑d
 & 
PSP_CTRL_LEFT
 ))

592 
°ï
;

594 i‡(
√w_∑d
 & 
PSP_CTRL_LEFT
Ë
°ï
 = -1;

596 i‡(
√w_∑d
 & 
PSP_CTRL_RIGHT
Ë
°ï
 = 1;

597 
°ï
 = 0;

599 
cur_míu_id
 )

601 
MENU_SET_SOUND
 : 
©¨i_¢d_íabÀ
 = !átari_snd_enable;

603 
MENU_SET_SPEED_LIMIT
 : 
	`p•_£âögs_míu_limôî
–
°ï
 );

605 
MENU_SET_SKIP_FPS
 : 
	`p•_£âögs_míu_skù_Âs
–
°ï
 );

607 
MENU_SET_ANALOG
 : 
p•_ªvî£_™Æog
 = !Ösp_reverse_analog;

609 
MENU_SET_JOYSTICK
 : 
p•_a˘ive_joy°ick
 = !Ösp_active_joystick;

611 
MENU_SET_FLICKER_MODE
 : 
	`p•_£âögs_míu_Êickî
–
°ï
 );

613 
MENU_SET_PADDLE
 : 
©¨i_∑ddÀ_íabÀ
 = !átari_paddle_enable;

615 
MENU_SET_VIEW_FPS
 : 
©¨i_võw_Âs
 = !átari_view_fps;

617 
MENU_SET_DISPLAY_LR
 : 
p•_di•œy_Ã
 = !Ösp_display_lr;

619 
MENU_SET_PADDLE_SPEED
 : 
	`p•_£âögs_míu_∑ddÀ_•ìd
–
°ï
 );

621 
MENU_SET_AUTOFIRE_T
 : 
	`p•_£âögs_míu_autofúe
–
°ï
 );

623 
MENU_SET_AUTOFIRE_M
 : 
©¨i_auto_fúe_mode
 = !átari_auto_fire_mode;

625 
MENU_SET_RENDER
 : 
	`p•_£âögs_míu_ªndî
–
°ï
 );

627 
MENU_SET_VSYNC
 : 
©¨i_vsync
 = !átari_vsync;

629 
MENU_SET_CLOCK
 : 
	`p•_£âögs_míu_˛ock
–
°ï
 );

631 
MENU_SET_LOAD
 : 
	`p•_£âögs_míu_lﬂd
(
FMGR_FORMAT_SET
);

632 
p•_míu_dúty
 = 1;

633 
ﬁd_∑d
 = 
√w_∑d
 = 0;

635 
MENU_SET_SAVE
 : 
	`p•_£âögs_míu_ßve
();

636 
p•_míu_dúty
 = 1;

637 
ﬁd_∑d
 = 
√w_∑d
 = 0;

639 
MENU_SET_RESET
 : 
	`p•_£âögs_míu_ª£t
();

642 
MENU_SET_BACK
 : 
íd_míu
 = 1;

647 if(
√w_∑d
 & 
PSP_CTRL_UP
) {

649 i‡(
cur_míu_id
 > 0) cur_menu_id--;

650 
cur_míu_id
 = 
MAX_MENU_SET_ITEM
-1;

653 if(
√w_∑d
 & 
PSP_CTRL_DOWN
) {

655 i‡(
cur_míu_id
 < (
MAX_MENU_SET_ITEM
-1)) cur_menu_id++;

656 
cur_míu_id
 = 0;

659 if(
√w_∑d
 & 
PSP_CTRL_SQUARE
) {

661 
íd_míu
 = -1;

663 if(
√w_∑d
 & 
PSP_CTRL_SELECT
) {

665 
íd_míu
 = 1;

669 i‡(
íd_míu
 > 0) {

670 
	`p•_£âögs_míu_vÆid©e
();

673 
	`p•_kbd_waô_no_buâ⁄
();

675 
	`p•_sdl_˛ór_s¸ìn
–
PSP_MENU_BLACK_COLOR
 );

676 
	`p•_sdl_Êù
();

677 
	`p•_sdl_˛ór_s¸ìn
–
PSP_MENU_BLACK_COLOR
 );

678 
	`p•_sdl_Êù
();

681 
	}
}

	@psp_menu_set.h

19 #i‚de‡
_PSP_MENU_SET_H_


20 
	#_PSP_MENU_SET_H_


	)

	@psp_sdl.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

20 
	~<SDL/SDL.h
>

21 
	~<SDL/SDL_mixî.h
>

22 
	~<SDL/SDL_image.h
>

23 
	~<p•˘æ.h
>

24 
	~<p•ty≥s.h
>

25 
	~<≤g.h
>

26 #i‚de‡
LINUX_MODE


27 
	~<p•gu.h
>

28 
	~<p•di•œy.h
>

29 
	~<p•πc.h
>

32 
	~"globÆ.h
"

33 
	~"Aèri.h
"

34 
	~"p•_sdl.h
"

35 
	~"p•_d™zeff.h
"

37 
p•_f⁄t
[];

39 
SDL_SurÁ˚
 *
	gback_surÁ˚
 = 
NULL
;

40 
SDL_SurÁ˚
 *
	gback2_surÁ˚
 = 
NULL
;

41 
SDL_SurÁ˚
 *
	gblô_surÁ˚
 = 
NULL
;

42 
SDL_SurÁ˚
 *
	g•œsh_surÁ˚
;

43 
SDL_SurÁ˚
 *
	gthumb_surÁ˚
;

44 
SDL_SurÁ˚
 *
	gßve_surÁ˚
;

46 
uöt


47 
	$p•_sdl_rgb
(
uch¨
 
R
, uch¨ 
G
, uch¨ 
B
)

49  
	`SDL_M≠RGB
(
back_surÁ˚
->
f‹m©
, 
R
,
G
,
B
);

50 
	}
}

52 
ush‹t
 *

53 
	$p•_sdl_gë_vøm_addr
(
uöt
 
x
, uöà
y
)

55 
ush‹t
 *
vøm
 = (ush‹à*)
back_surÁ˚
->
pixñs
;

56  
vøm
 + 
x
 + (
y
*
PSP_LINE_SIZE
);

57 
	}
}

59 
ush‹t
 *

60 
	$p•_sdl_gë_blô_addr
(
uöt
 
x
, uöà
y
)

62 
ush‹t
 *
vøm
 = (ush‹à*)
blô_surÁ˚
->
pixñs
;

63  
vøm
 + 
x
 + (
y
*
ATARI_WIDTH
);

64 
	}
}

66 
uöt


67 
	$p•_sdl_gë_blô_pôch
()

69  
ATARI_WIDTH
;

70 
	}
}

73 
	$loc_p•_debug
(*
fûe
, 
löe
, *
mesßge
)

75 
cuºít_löe
 = 0;

76 
cuºít_cﬁ
 = 10;

78 
buf„r
[128];

79 
cuºít_löe
 += 10;

80 i‡(
cuºít_löe
 > 250)

82 i‡(
cuºít_cﬁ
 == 200) {

83 
	`p•_sdl_˛ór_s¸ìn
(
	`p•_sdl_rgb
(0, 0, 0xff));

84 
cuºít_cﬁ
 = 10;

86 
cuºít_cﬁ
 = 200;

89 
cuºít_löe
 = 10;

91 
	`•rötf
(
buf„r
,"%s:%d %s", 
fûe
, 
löe
, 
mesßge
);

92 
	`p•_sdl_¥öt
(
cuºít_cﬁ
, 
cuºít_löe
, 
buf„r
, 
	`p•_sdl_rgb
(0xff,0xff,0xff) );

93 
	}
}

96 
	$p•_sdl_¥öt
(
x
,
y
, *
°r
, 
cﬁ‹
)

98 
ödex
;

99 
x0
 = 
x
;

101 
ödex
 = 0; 
°r
[index] != '\0'; index++) {

102 
	`p•_sdl_put_ch¨
(
x
, 
y
, 
cﬁ‹
, 0, 
°r
[
ödex
], 1, 0);

103 
x
 += 8;

104 i‡(
x
 >(
PSP_SDL_SCREEN_WIDTH
 - 8)) {

105 
x
 = 
x0
; 
y
++;

107 i‡(
y
 >(
PSP_SDL_SCREEN_HEIGHT
 - 8)) ;

109 
	}
}

112 
	$p•_sdl_˛ór_s¸ìn
(
cﬁ‹
)

114 
x
; 
y
;

115 
ush‹t
 *
vøm
 = 
	`p•_sdl_gë_vøm_addr
(0,0);

117 
y
 = 0; y < 
PSP_SDL_SCREEN_HEIGHT
; y++) {

118 
x
 = 0; x < 
PSP_SDL_SCREEN_WIDTH
; x++) {

119 
vøm
[
x
 + (
y
*
PSP_LINE_SIZE
)] = 
cﬁ‹
;

122 
	}
}

125 
	$p•_sdl_bœck_s¸ìn
()

127 
	`SDL_FûlRe˘
(
back_surÁ˚
,
NULL
,
	`SDL_M≠RGB
(back_surÁ˚->
f‹m©
,0x0,0x0,0x0));

128 
	`SDL_Flù
(
back_surÁ˚
);

129 
	`SDL_FûlRe˘
(
back_surÁ˚
,
NULL
,
	`SDL_M≠RGB
(back_surÁ˚->
f‹m©
,0x0,0x0,0x0));

130 
	`SDL_Flù
(
back_surÁ˚
);

131 
	}
}

134 
	$p•_sdl_˛ór_blô
(
cﬁ‹
)

136 i‡(
blô_surÁ˚
) {

137 
ush‹t
 *
vøm
 = (ush‹à*)
blô_surÁ˚
->
pixñs
;

138 
my_size
 = 
blô_surÁ˚
->
h
 * blô_surÁ˚->
w
;

139 
my_size
 > 0) {

140 
vøm
[--
my_size
] = 
cﬁ‹
;

143 
	}
}

146 
	$p•_sdl_døw_ª˘™gÀ
(
x
, 
y
, 
w
, 
h
, 
b‹dî
, 
mode
)

148 
ush‹t
 *
vøm
 = (ush‹à*)
	`p•_sdl_gë_vøm_addr
(
x
, 
y
);

149 
xo
, 
yo
;

150 i‡(
mode
 =
PSP_SDL_XOR
) {

151 
xo
 = 0; xÿ< 
w
; xo++) {

152 
vøm
[
xo
] ^
b‹dî
;

153 
vøm
[
xo
 + 
h
 * 
PSP_LINE_SIZE
] ^
b‹dî
;

155 
yo
 = 0; yÿ< 
h
; yo++) {

156 
vøm
[
yo
 * 
PSP_LINE_SIZE
] ^
b‹dî
;

157 
vøm
[
w
 + 
yo
 * 
PSP_LINE_SIZE
] ^
b‹dî
;

159 
vøm
[
w
 + 
h
 * 
PSP_LINE_SIZE
] ^
b‹dî
;

161 
xo
 = 0; xÿ< 
w
; xo++) {

162 
vøm
[
xo
] = 
b‹dî
;

163 
vøm
[
xo
 + 
h
 * 
PSP_LINE_SIZE
] = 
b‹dî
;

165 
yo
 = 0; yÿ< 
h
; yo++) {

166 
vøm
[
yo
 * 
PSP_LINE_SIZE
] = 
b‹dî
;

167 
vøm
[
w
 + 
yo
 * 
PSP_LINE_SIZE
] = 
b‹dî
;

169 
vøm
[
w
 + 
h
 * 
PSP_LINE_SIZE
] = 
b‹dî
;

171 
	}
}

174 
	$p•_sdl_fûl_ª˘™gÀ
(
x
, 
y
, 
w
, 
h
, 
cﬁ‹
, 
mode
)

176 
ush‹t
 *
vøm
 = (ush‹à*)
	`p•_sdl_gë_vøm_addr
(
x
, 
y
);

177 
xo
, 
yo
;

178 i‡(
mode
 =
PSP_SDL_XOR
) {

179 
xo
 = 0; xÿ<
w
; xo++) {

180 
yo
 = 0; yÿ<
h
; yo++) {

181 i‡–((
xo
 =0Ë&& ((
yo
 =0Ë|| (yÿ=
h
))) ||

182 ((
xo
 =
w
Ë&& ((
yo
 =0Ë|| (yÿ=
h
))) ) {

185 
vøm
[
xo
 + 
yo
 * 
PSP_LINE_SIZE
] ^
cﬁ‹
;

190 
xo
 = 0; xÿ<
w
; xo++) {

191 
yo
 = 0; yÿ<
h
; yo++) {

192 
vøm
[
xo
 + 
yo
 * 
PSP_LINE_SIZE
] = 
cﬁ‹
;

196 
	}
}

199 
	$p•_sdl_gë_back2_cﬁ‹
(
x
, 
y
)

201 
uch¨
 *
back2
 = (uch¨ *)
back2_surÁ˚
->
pixñs
;

202 
byãs_≥r_pixñs
 = 
back2_surÁ˚
->
f‹m©
->
ByãsPîPixñ
;

203 
pôch
 = 
back2_surÁ˚
->pitch;

204 
Uöt8
 
r
 = 
back2
[0 + (
y
 * 
pôch
Ë+ (
x
 * 
byãs_≥r_pixñs
)];

205 
Uöt8
 
g
 = 
back2
[1 + (
y
 * 
pôch
Ë+ (
x
 * 
byãs_≥r_pixñs
)];

206 
Uöt8
 
b
 = 
back2
[2 + (
y
 * 
pôch
Ë+ (
x
 * 
byãs_≥r_pixñs
)];

207 
cﬁ‹
 = 
	`p•_sdl_rgb
(
r
, 
g
, 
b
);

209  
cﬁ‹
;

210 
	}
}

213 
	$p•_sdl_back2_ª˘™gÀ
(
x
, 
y
, 
w
, 
h
)

215 i‡(! 
back2_surÁ˚
) {

216 
	`p•_sdl_fûl_ª˘™gÀ
(
x
, 
y
, 
w
, 
h
, 0x0, 0);

220 
ush‹t
 *
vøm
 = (ush‹à*)
	`p•_sdl_gë_vøm_addr
(
x
, 
y
);

222 
xo
, 
yo
;

223 
xo
 = 0; xÿ<
w
; xo++) {

224 
yo
 = 0; yÿ<
h
; yo++) {

225 
vøm
[
xo
 + 
yo
 * 
PSP_LINE_SIZE
] = 
	`p•_sdl_gë_back2_cﬁ‹
(
x
 + xo, 
y
 + yo);

228 
	}
}

231 
	$p•_sdl_put_ch¨
(
x
, 
y
, 
cﬁ‹
, 
bgcﬁ‹
, 
uch¨
 
c
, 
døwfg
, 
døwbg
)

233 
cx
;

234 
cy
;

235 
b
;

236 
ödex
;

238 
ush‹t
 *
vøm
 = (ush‹à*)
	`p•_sdl_gë_vøm_addr
(
x
, 
y
);

239 
ödex
 = ((
ush‹t
)
c
) * 8;

241 
cy
=0; cy<8; cy++) {

242 
b
=0x80;

243 
cx
=0; cx<8; cx++) {

244 i‡(
p•_f⁄t
[
ödex
] & 
b
) {

245 i‡(
døwfg
Ë
vøm
[
cx
 + 
cy
 * 
PSP_LINE_SIZE
] = 
cﬁ‹
;

247 i‡(
døwbg
Ë
vøm
[
cx
 + 
cy
 * 
PSP_LINE_SIZE
] = 
bgcﬁ‹
;

249 
b
 = b >> 1;

251 
ödex
++;

253 
	}
}

256 
	$p•_sdl_back2_put_ch¨
(
x
, 
y
, 
cﬁ‹
, 
uch¨
 
c
)

258 
cx
;

259 
cy
;

260 
bmask
;

261 
ödex
;

263 i‡(! 
back2_surÁ˚
) {

264 
	`p•_sdl_put_ch¨
(
x
, 
y
, 
cﬁ‹
, 0x0, 
c
, 1, 1);

268 
ush‹t
 *
vøm
 = (ush‹à*)
	`p•_sdl_gë_vøm_addr
(
x
, 
y
);

270 
ödex
 = ((
ush‹t
)
c
) * 8;

272 
cy
=0; cy<8; cy++) {

273 
bmask
=0x80;

274 
cx
=0; cx<8; cx++) {

275 i‡(
p•_f⁄t
[
ödex
] & 
bmask
) {

276 
vøm
[
cx
 + 
cy
 * 
PSP_LINE_SIZE
] = 
cﬁ‹
;

278 
vøm
[
cx
 + 
cy
 * 
PSP_LINE_SIZE
] = 
	`p•_sdl_gë_back2_cﬁ‹
(
x
 + cx, 
y
 + cy);

280 
bmask
 = bmask >> 1;

282 
ödex
++;

284 
	}
}

287 
	$p•_c⁄vît_utf8_to_iso_8859_1
(
c1
, 
c2
)

289 
ªs
 = 0;

290 i‡(
c1
 =0xc2Ë
ªs
 = 
c2
;

292 i‡(
c1
 =0xc3Ë
ªs
 = 
c2
 | 0x40;

293  
ªs
;

294 
	}
}

298 
	$p•_sdl_fûl_¥öt
(
x
,
y
,c⁄° *
°r
, 
cﬁ‹
, 
bgcﬁ‹
)

300 
ödex
;

301 
x0
 = 
x
;

303 
ödex
 = 0; 
°r
[index] != '\0'; index++) {

304 
uch¨
 
c
 = 
°r
[
ödex
];

305 i‡((
c
 == 0xc2) || (c == 0xc3)) {

306 
uch¨
 
√w_c
 = 
	`p•_c⁄vît_utf8_to_iso_8859_1
(
c
, 
°r
[
ödex
+1]);

307 i‡(
√w_c
Ë{ 
c
 =Çew_c; 
ödex
++; }

309 
	`p•_sdl_put_ch¨
(
x
, 
y
, 
cﬁ‹
, 
bgcﬁ‹
, 
c
, 1, 1);

310 
x
 += 8;

311 i‡(
x
 >(
PSP_SDL_SCREEN_WIDTH
 - 8)) {

312 
x
 = 
x0
; 
y
++;

314 i‡(
y
 >(
PSP_SDL_SCREEN_HEIGHT
 - 8)) ;

316 
	}
}

319 
	$p•_sdl_back2_¥öt
(
x
,
y
,c⁄° *
°r
, 
cﬁ‹
)

321 
ödex
;

322 
x0
 = 
x
;

324 
ödex
 = 0; 
°r
[index] != '\0'; index++) {

325 
uch¨
 
c
 = 
°r
[
ödex
];

326 i‡((
c
 == 0xc2) || (c == 0xc3)) {

327 
uch¨
 
√w_c
 = 
	`p•_c⁄vît_utf8_to_iso_8859_1
(
c
, 
°r
[
ödex
+1]);

328 i‡(
√w_c
Ë{ 
c
 =Çew_c; 
ödex
++; }

330 
	`p•_sdl_back2_put_ch¨
(
x
, 
y
, 
cﬁ‹
, 
c
);

331 
x
 += 8;

332 i‡(
x
 >(
PSP_SDL_SCREEN_WIDTH
 - 8)) {

333 
x
 = 
x0
; 
y
++;

335 i‡(
y
 >(
PSP_SDL_SCREEN_HEIGHT
 - 8)) ;

337 
	}
}

340 
	$p•_sdl_lock
()

342 
	`SDL_LockSurÁ˚
(
back_surÁ˚
);

343 
	}
}

346 
	$p•_sdl_lﬂd_background
()

348 
back2_surÁ˚
 = 
	`IMG_Lﬂd
("./background.png");

349 
thumb_surÁ˚
 = 
	`IMG_Lﬂd
("./thumb.png");

350 
	}
}

353 
	$p•_sdl_blô_background
()

355 
fú°
 = 1;

357 i‡(
fú°
 && (
back2_surÁ˚
 =
NULL
)) {

358 
	`p•_sdl_lﬂd_background
();

359 
fú°
 = 0;

361 i‡(
back2_surÁ˚
 !
NULL
) {

362 
	`SDL_BlôSurÁ˚
(
back2_surÁ˚
, 
NULL
, 
back_surÁ˚
, NULL);

364 
	`p•_sdl_˛ór_s¸ìn
(
	`p•_sdl_rgb
(0x00, 0x00, 0x00));

366 
	}
}

369 
	$p•_sdl_blô_thumb
(
d°_x
, 
d°_y
, 
SDL_SurÁ˚
* 
thumb_surÁ˚
)

371 
SDL_Re˘
 
d°Re˘
;

372 
d°Re˘
.
x
 = 
d°_x
;

373 
d°Re˘
.
y
 = 
d°_y
;

374 
d°Re˘
.
w
 = 
thumb_surÁ˚
->w;

375 
d°Re˘
.
h
 = 
thumb_surÁ˚
->h;

376 
	`SDL_BlôSurÁ˚
(
thumb_surÁ˚
, 
NULL
, 
back_surÁ˚
, &
d°Re˘
);

377 
	}
}

380 
	$p•_sdl_blô_•œsh
()

382 i‡(! 
•œsh_surÁ˚
) {

383 
•œsh_surÁ˚
 = 
	`IMG_Lﬂd
("./splash.png");

385 
	`SDL_BlôSurÁ˚
(
•œsh_surÁ˚
, 
NULL
, 
back_surÁ˚
, NULL);

386 
	}
}

389 
	$p•_sdl_di•œy_•œsh
()

391 
ödex
 = 0;

392 
S˚CålD©a
 
c
;

394 
	`p•_sdl_blô_•œsh
();

395 
	`p•_sdl_Êù
();

396 
	`p•_sdl_blô_•œsh
();

397 
	`p•_sdl_Êù
();

399 #i‚de‡
LINUX_MODE


400 
ödex
 < 50) {

401 
	`s˚CålPìkBuf„rPosôive
(&
c
, 1);

402 i‡(
c
.
Buâ⁄s
 & (
PSP_CTRL_START
|
PSP_CTRL_CROSS
)) ;

403 
	`s˚Kî√lDñayThªad
(100000);

404 
ödex
++;

407 
	`¶ìp
(2);

409 
	}
}

412 
	$p•_sdl_u∆ock
()

414 
	`SDL_U∆ockSurÁ˚
(
back_surÁ˚
);

415 
	}
}

418 
	$p•_sdl_Êù
()

420 
	`SDL_Flù
(
back_surÁ˚
);

421 
	}
}

423 
	#sy°emRedShi·
 (
back_surÁ˚
->
f‹m©
->
Rshi·
)

	)

424 
	#sy°emGªíShi·
 (
back_surÁ˚
->
f‹m©
->
Gshi·
)

	)

425 
	#sy°emBlueShi·
 (
back_surÁ˚
->
f‹m©
->
Bshi·
)

	)

426 
	#sy°emRedMask
 (
back_surÁ˚
->
f‹m©
->
Rmask
)

	)

427 
	#sy°emGªíMask
 (
back_surÁ˚
->
f‹m©
->
Gmask
)

	)

428 
	#sy°emBlueMask
 (
back_surÁ˚
->
f‹m©
->
Bmask
)

	)

431 
	$p•_sdl_ßve_≤g
(
SDL_SurÁ˚
* 
my_surÁ˚
, * 
fûíame
)

433 
w
 = 
my_surÁ˚
->w;

434 
h
 = 
my_surÁ˚
->h;

435 
u8
* 
pix
 = (u8*)
my_surÁ˚
->
pixñs
;

436 
u8
 
wrôeBuf„r
[512 * 3];

438 
FILE
 *
Â
 = 
	`f›í
(
fûíame
,"wb");

440 if(!
Â
)  0;

442 
≤g_°ru˘p
 
≤g_±r
 = 
	`≤g_¸óã_wrôe_°ru˘
(
PNG_LIBPNG_VER_STRING
,

443 
NULL
,

444 
NULL
,

445 
NULL
);

446 if(!
≤g_±r
) {

447 
	`f˛o£
(
Â
);

451 
≤g_öf›
 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

453 if(!
öfo_±r
) {

454 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
,
NULL
);

455 
	`f˛o£
(
Â
);

459 
	`≤g_öô_io
(
≤g_±r
,
Â
);

461 
	`≤g_£t_IHDR
(
≤g_±r
,

462 
öfo_±r
,

463 
w
,

464 
h
,

466 
PNG_COLOR_TYPE_RGB
,

467 
PNG_INTERLACE_NONE
,

468 
PNG_COMPRESSION_TYPE_DEFAULT
,

469 
PNG_FILTER_TYPE_DEFAULT
);

471 
	`≤g_wrôe_öfo
(
≤g_±r
,
öfo_±r
);

473 
u8
 *
b
 = 
wrôeBuf„r
;

475 
sizeX
 = 
w
;

476 
sizeY
 = 
h
;

477 
y
;

478 
x
;

480 
u16
 *
p
 = (u16 *)
pix
;

481 
y
 = 0; y < 
sizeY
; y++) {

482 
x
 = 0; x < 
sizeX
; x++) {

483 
u16
 
v
 = 
p
[
x
];

485 *
b
++ = ((
v
 & 
sy°emRedMask
 ) >> 
sy°emRedShi·
 ) << 3;

486 *
b
++ = ((
v
 & 
sy°emGªíMask
Ë>> 
sy°emGªíShi·
) << 2;

487 *
b
++ = ((
v
 & 
sy°emBlueMask
 ) >> 
sy°emBlueShi·
 ) << 3;

489 
p
 +
my_surÁ˚
->
pôch
 / 2;

490 
	`≤g_wrôe_row
(
≤g_±r
,
wrôeBuf„r
);

492 
b
 = 
wrôeBuf„r
;

495 
	`≤g_wrôe_íd
(
≤g_±r
, 
öfo_±r
);

497 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, &
öfo_±r
);

499 
	`f˛o£
(
Â
);

501 
	}
}

504 
	$p•_sdl_lﬂd_≤g
(
SDL_SurÁ˚
* 
my_surÁ˚
, * 
fûíame
)

506 
w
 = 
my_surÁ˚
->w;

507 
h
 = 
my_surÁ˚
->h;

508 
pôch
 = 
my_surÁ˚
->pitch / 2;

509 
u16
* 
pix
 = (u16*)
my_surÁ˚
->
pixñs
;

511 
FILE
 *
Â
 = 
	`f›í
(
fûíame
,"rb");

512 i‡(!
Â
)  0;

514 c⁄° 
size_t
 
nSigSize
 = 8;

515 
u8
 
sig«tuª
[
nSigSize
];

516 i‡(
	`‰ód
(
sig«tuª
, (
u8
), 
nSigSize
, 
Â
) !=ÇSigSize) {

517 
	`f˛o£
(
Â
);

521 i‡(!
	`≤g_check_sig
(
sig«tuª
, 
nSigSize
)) {

522 
	`f˛o£
(
Â
);

526 
≤g_°ru˘p
 
≤g_±r
 = 
	`≤g_¸óã_ªad_°ru˘
(
PNG_LIBPNG_VER_STRING
,

527 
NULL
,

528 
NULL
,

529 
NULL
);

530 if(!
≤g_±r
) {

531 
	`f˛o£
(
Â
);

535 
≤g_öfo
* 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

537 if(!
öfo_±r
) {

538 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, 
NULL
, NULL);

539 
	`f˛o£
(
Â
);

543 
	`≤g_öô_io
(
≤g_±r
, 
Â
);

544 
	`≤g_£t_sig_byãs
(
≤g_±r
, 
nSigSize
);

545 
	`≤g_ªad_≤g
(
≤g_±r
, 
öfo_±r
,

546 
PNG_TRANSFORM_STRIP_16
 | 
PNG_TRANSFORM_PACKING
 |

547 
PNG_TRANSFORM_EXPAND
 | 
PNG_TRANSFORM_BGR
 , 
NULL
);

551 
≤g_uöt_32
 
width
 = 
	`≤g_gë_image_height
(
≤g_±r
, 
öfo_±r
);

552 
≤g_uöt_32
 
height
 = 
	`≤g_gë_image_width
(
≤g_±r
, 
öfo_±r
);

553 
cﬁ‹_ty≥
 = 
	`≤g_gë_image_cﬁ‹
(
≤g_±r
, 
öfo_±r
);

555 i‡((
width
 > 
w
) ||

556 (
height
 > 
h
)) {

557 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

558 
	`f˛o£
(
Â
);

562 
≤g_byã
 **
pRowTabÀ
 = 
	`≤g_gë_rows
(
≤g_±r
, 
öfo_±r
);

563 
x
, 
y
;

564 
u8
 
r
, 
g
, 
b
;

566 
y
=0; y<
height
; y++) {

567 
≤g_byã
 *
pRow
 = 
pRowTabÀ
[
y
];

568 
x
=0; x<
width
; x++) {

569 
cﬁ‹_ty≥
) {

570 
PNG_COLOR_TYPE_GRAY
:

571 
r
 = 
g
 = 
b
 = *
pRow
++;

573 
PNG_COLOR_TYPE_GRAY_ALPHA
:

574 
r
 = 
g
 = 
b
 = 
pRow
[0];

575 
pRow
 += 2;

577 
PNG_COLOR_TYPE_RGB
:

578 
b
 = 
pRow
[0];

579 
g
 = 
pRow
[1];

580 
r
 = 
pRow
[2];

581 
pRow
 += 3;

583 
PNG_COLOR_TYPE_RGB_ALPHA
:

584 
b
 = 
pRow
[0];

585 
g
 = 
pRow
[1];

586 
r
 = 
pRow
[2];

587 
pRow
 += 4;

590 
r
 = 
g
 = 
b
 = 0;

594 
u16
 
v
 = (((
r
 >> 3Ë<< 
sy°emRedShi·
 ) & 
sy°emRedMask
) |

595 (((
g
 >> 2Ë<< 
sy°emGªíShi·
Ë& 
sy°emGªíMask
) |

596 (((
b
 >> 3Ë<< 
sy°emBlueShi·
 ) & 
sy°emBlueMask
);

597 *
pix
++
v
;

599 
pix
 +
pôch
 - 
width
;

601 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

602 
	`f˛o£
(
Â
);

605 
	}
}

608 
	$p•_sdl_ßve_s¸ìnshŸ_≤g
(*
fûíame
)

610  
	`p•_sdl_ßve_≤g
(
blô_surÁ˚
, 
fûíame
);

611 
	}
}

614 
	$p•_sdl_ßve_thumb_≤g
(
SDL_SurÁ˚
* 
my_surÁ˚
, * 
fûíame
)

616 
x
;

617 
y
;

618 
u16
* 
§c_pixñ
 = (u16*)
blô_surÁ˚
->
pixñs
;

619 
u16
* 
d°_pixñ
 = (u16*)
my_surÁ˚
->
pixñs
;

621 
y
 = 0; y < (
SNAP_HEIGHT
*2); y += 2) {

622 
x
 = 0; x < (
SNAP_WIDTH
*2); x += 2) {

623 *
d°_pixñ
++ = 
§c_pixñ
[
x
];

625 
§c_pixñ
 +(
ATARI_WIDTH
 * 2);

628  
	`p•_sdl_ßve_≤g
(
my_surÁ˚
, 
fûíame
);

629 
	}
}

632 
	$p•_sdl_lﬂd_thumb_≤g
(
SDL_SurÁ˚
* 
my_surÁ˚
, * 
fûíame
)

634  
	`p•_sdl_lﬂd_≤g
–
my_surÁ˚
, 
fûíame
);

635 
	}
}

638 
	$p•_sdl_ßve_s¸ìnshŸ
()

640 
TmpFûeName
[
MAX_PATH
];

642 
	`•rötf
(
TmpFûeName
,"%s/s¸/s¸ìnshŸ_%d.≤g", 
ATARI
.
©¨i_home_dú
, ATARI.
p•_s¸ìnshŸ_id
++);

643 i‡(
ATARI
.
p•_s¸ìnshŸ_id
 >= 10) ATARI.psp_screenshot_id = 0;

644 
	`p•_sdl_ßve_s¸ìnshŸ_≤g
(
TmpFûeName
);

645 
	}
}

649 
	$p•_sdl_öô
()

651 i‡(
	`SDL_Inô
(
SDL_INIT_VIDEO
) < 0) {

655 i‡(
	`SDL_InôSubSy°em
(
SDL_INIT_VIDEO
) < 0) {

659 #i‚de‡
LINUX_MODE


660 
back_surÁ˚
=
	`SDL_SëVideoMode
(
PSP_SDL_SCREEN_WIDTH
,
PSP_SDL_SCREEN_HEIGHT
, 16,

661 
SDL_ANYFORMAT
|
SDL_DOUBLEBUF
|
SDL_HWSURFACE
|
SDL_HWPALETTE
);

663 
back_surÁ˚
=
	`SDL_SëVideoMode
(
PSP_SDL_SCREEN_WIDTH
,
PSP_SDL_SCREEN_HEIGHT
, 16 ,

664 
SDL_DOUBLEBUF
|
SDL_HWSURFACE
);

667 i‡–!
back_surÁ˚
) {

671 #i‚de‡
LINUX_MODE


672 
	`p•_sdl_gu_öô
();

675 
blô_surÁ˚
 = 
	`SDL_Cª©eRGBSurÁ˚
(
SDL_SWSURFACE
,

676 
ATARI_WIDTH
, 
ATARI_HEIGHT
,

677 
back_surÁ˚
->
f‹m©
->
BôsPîPixñ
,

678 
back_surÁ˚
->
f‹m©
->
Rmask
,

679 
back_surÁ˚
->
f‹m©
->
Gmask
,

680 
back_surÁ˚
->
f‹m©
->
Bmask
, 0);

681 #i‚de‡
LINUX_MODE


683 
blô_surÁ˚
->
pixñs
 = (*)0x44088000;

686 
	`SDL_ShowCurs‹
(
SDL_DISABLE
);

688 
	`p•_sdl_di•œy_•œsh
();

691 
	`d™zeff_lﬂd
();

692 
	`d™zeff_£t_s¸ìn
(
back_surÁ˚
);

695 
Index
 = 0;

696 
Index
 = 0; Index < 
ATARI_MAX_SAVE_STATE
; Index++) {

697 
ATARI
.
©¨i_ßve_°©e
[
Index
].
surÁ˚
 =

698 
	`SDL_Cª©eRGBSurÁ˚
(
SDL_SWSURFACE
,

699 
SNAP_WIDTH
, 
SNAP_HEIGHT
,

700 
back_surÁ˚
->
f‹m©
->
BôsPîPixñ
,

701 
back_surÁ˚
->
f‹m©
->
Rmask
,

702 
back_surÁ˚
->
f‹m©
->
Gmask
,

703 
back_surÁ˚
->
f‹m©
->
Bmask
, 0);

705 
ßve_surÁ˚
 = 
	`SDL_Cª©eRGBSurÁ˚
(
SDL_SWSURFACE
,

706 
SNAP_WIDTH
, 
SNAP_HEIGHT
,

707 
back_surÁ˚
->
f‹m©
->
BôsPîPixñ
,

708 
back_surÁ˚
->
f‹m©
->
Rmask
,

709 
back_surÁ˚
->
f‹m©
->
Gmask
,

710 
back_surÁ˚
->
f‹m©
->
Bmask
, 0);

713 
	}
}

716 
	$p•_sdl_exô
(
°©us
)

718 
	`SDL_Clo£Audio
();

719 
	`SDL_Quô
();

721 
	`exô
(
°©us
);

722 
	}
}

	@psp_sdl.h

17 #i‚de‡
_PSP_SDL_H_


18 
	#_PSP_SDL_H_


	)

20 #ifde‡
__˝lu•lus


23 
	#p•_debug
(
m
Ë
	`loc_p•_debug
(
__FILE__
,
__LINE__
,m)

	)

25 #ifde‡
LINUX_MODE


26 
	#PSP_LINE_SIZE
 480

	)

28 
	#PSP_LINE_SIZE
 512

	)

31 
	#PSP_SDL_NOP
 0

	)

32 
	#PSP_SDL_XOR
 1

	)

34 
	#PSP_SDL_SCREEN_WIDTH
 480

	)

35 
	#PSP_SDL_SCREEN_HEIGHT
 272

	)

37 
	tuch¨
;

38 
	tuöt
;

39 
	tush‹t
;

41 
SDL_SurÁ˚
* 
back_surÁ˚
;

42 
SDL_SurÁ˚
* 
blô_surÁ˚
;

43 
SDL_SurÁ˚
* 
ßve_surÁ˚
;

44 
SDL_SurÁ˚
* 
thumb_surÁ˚
;

46 
p•_lﬂd_f⁄ts
();

47 
p•_¥öt_ãxt
(* 
°r
, 
cﬁour
, 
v
, 
h
);

49 
loc_p•_debug
(*
fûe
, 
löe
, *
mesßge
);

53 
p•_sdl_¥öt
(
x
,
y
, *
°r
, 
cﬁ‹
);

54 
p•_sdl_˛ór_s¸ìn
(
cﬁ‹
);

55 
p•_sdl_fûl_ª˘™gÀ
(
x
, 
y
, 
w
, 
h
, 
cﬁ‹
, 
mode
);

56 
p•_sdl_døw_ª˘™gÀ
(
x
, 
y
, 
w
, 
h
, 
b‹dî
, 
mode
);

57 
p•_sdl_put_ch¨
(
x
, 
y
, 
cﬁ‹
, 
bgcﬁ‹
, 
uch¨
 
c
, 
døwfg
, 
døwbg
);

58 
p•_sdl_fûl_¥öt
(
x
,
y
,c⁄° *
°r
, 
cﬁ‹
, 
bgcﬁ‹
);

59 
p•_sdl_Êù
();

61 
p•_sdl_gu_°ªtch
(
SDL_Re˘
* 
§cRe˘
, SDL_Re˘* 
d°Re˘
);

62 
p•_sdl_lock
();

63 
p•_sdl_u∆ock
();

64 
p•_sdl_öô
();

65 
p•_sdl_Êush
();

66 
p•_sdl_ßve_bmp
(*
fûíame
);

67 
p•_sdl_blô_background
();

68 
p•_sdl_exô
(
°©us
);

69 
p•_sdl_ßve_s¸ìnshŸ
();

70 
p•_sdl_lﬂd_thumb_≤g
(
SDL_SurÁ˚
* 
my_surÁ˚
, * 
fûíame
);

71 
p•_sdl_ßve_thumb_≤g
(
SDL_SurÁ˚
* 
my_surÁ˚
, * 
fûíame
);

72 
uöt
 
p•_sdl_rgb
(
uch¨
 
R
, uch¨ 
G
, uch¨ 
B
);

73 
p•_sdl_bœck_s¸ìn
();

74 
ush‹t
 * 
p•_sdl_gë_vøm_addr
(
uöt
 
x
, uöà
y
);

75 
ush‹t
 * 
p•_sdl_gë_blô_addr
(
uöt
 
x
, uöà
y
);

76 
uöt
 
p•_sdl_gë_blô_pôch
();

78 #ifde‡
__˝lu•lus


	@pspsdk_linux.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<SDL.h
>

4 
	~<SDL_evíts.h
>

5 
	~<°rög.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/°©.h
>

8 
	~<sys/mm™.h
>

9 
	~<f˙é.h
>

10 
	~<uni°d.h
>

12 
	~"p•sdk_löux.h
"

13 
	~"p•ty≥s.h
"

14 
	~"p•˘æ.h
"

17 
	#PSP_CTRL_UPRIGHT
 0x10000

	)

18 
	#PSP_CTRL_UPLEFT
 0x20000

	)

19 
	#PSP_CTRL_DOWNRIGHT
 0x40000

	)

20 
	#PSP_CTRL_DOWNLEFT
 0x80000

	)

23 
	gloc_La°EvítMask
 = 0;

24 
	gloc_CuºEvítMask
 = 0;

25 
	gloc_CuºEvítBuâ⁄s
 = 0;

26 
u32
 
	gloc_La°TimeSèmp
 = 0;

27 
u32
 
	gloc_CuºTimeSèmp
 = 0;

29 
	#PSP_MIN_TIME_REPEAT
 100000

	)

31 
ölöe
 

32 
	$s˚C⁄vîtMaskToBuâ⁄s
(
Mask
)

34 
Buâ⁄s
 = 
Mask
 & 
PSP_CTRL_MASK
;

35 i‡(
Mask
 & 
PSP_CTRL_UPLEFT
 ) 
Buâ⁄s
 |
PSP_CTRL_UP
|
PSP_CTRL_LEFT
;

36 i‡(
Mask
 & 
PSP_CTRL_UPRIGHT
Ë
Buâ⁄s
 |
PSP_CTRL_UP
|
PSP_CTRL_RIGHT
;

37 i‡(
Mask
 & 
PSP_CTRL_DOWNLEFT
 ) 
Buâ⁄s
 |
PSP_CTRL_DOWN
|
PSP_CTRL_LEFT
;

38 i‡(
Mask
 & 
PSP_CTRL_DOWNRIGHT
Ë
Buâ⁄s
 |
PSP_CTRL_DOWN
|
PSP_CTRL_RIGHT
;

39  
Buâ⁄s
;

40 
	}
}

44 
	$s˚CålPìkBuf„rPosôive
(
S˚CålD©a
* 
c
, 
v
)

46 
loc_lx
 = 128;

47 
loc_ly
 = 128;

49 
SDL_Evít
 
SDLEvít
;

51 
Evít
 = 0;

52 
Buâ⁄Pªss
 = 0;

53 
Buâ⁄Rñó£
 = 0;

54 
Mask
 = 0;

56 
	`mem£t
(
c
, 0x0, (
S˚CålD©a
));

57 
loc_CuºTimeSèmp
 = 
	`SDL_GëTicks
() * 1000;

59 i‡(
	`SDL_PﬁlEvít
(&
SDLEvít
)) {

60 
Evít
=((
SDL_KeybﬂrdEvít
*)(&
SDLEvít
))->
keysym
.
sˇncode
;

61 i‡(
SDLEvít
.
ty≥
==
SDL_KEYDOWN
) {

62 
Buâ⁄Pªss
 = 1;

64 i‡(
SDLEvít
.
ty≥
==
SDL_KEYUP
) {

65 
Buâ⁄Rñó£
 = 1;

67 
Evít
) {

68 
PSP_UP
 : 
Mask
 = 
PSP_CTRL_UP
;

70 
PSP_DOWN
 : 
Mask
 = 
PSP_CTRL_DOWN
;

72 
PSP_LEFT
 : 
Mask
 = 
PSP_CTRL_LEFT
;

74 
PSP_RIGHT
 : 
Mask
 = 
PSP_CTRL_RIGHT
;

76 
PSP_UPLEFT
 : 
Mask
 = 
PSP_CTRL_UPLEFT
;

78 
PSP_UPRIGHT
 : 
Mask
 = 
PSP_CTRL_UPRIGHT
;

80 
PSP_DOWNLEFT
 : 
Mask
 = 
PSP_CTRL_DOWNLEFT
;

82 
PSP_DOWNRIGHT
 : 
Mask
 = 
PSP_CTRL_DOWNRIGHT
;

84 
PSP_SQUARE
 : 
Mask
 = 
PSP_CTRL_SQUARE
;

86 
PSP_CIRCLE
 : 
Mask
 = 
PSP_CTRL_CIRCLE
;

88 
PSP_CROSS
 : 
Mask
 = 
PSP_CTRL_CROSS
;

90 
PSP_TRIANGLE
 : 
Mask
 = 
PSP_CTRL_TRIANGLE
;

92 
PSP_L
 : 
Mask
 = 
PSP_CTRL_LTRIGGER
;

94 
PSP_R
 : 
Mask
 = 
PSP_CTRL_RTRIGGER
;

96 
PSP_START
 : 
Mask
 = 
PSP_CTRL_START
;

98 
PSP_SELECT
 : 
Mask
 = 
PSP_CTRL_SELECT
;

100 
PSP_JOY_UP
 : i‡(
Buâ⁄Pªss
Ë
loc_ly
 = 0;

101 
loc_ly
 = 128;

103 
PSP_JOY_DOWN
 : i‡(
Buâ⁄Pªss
Ë
loc_ly
 = 255;

104 
loc_ly
 = 128;

106 
PSP_JOY_LEFT
 : i‡(
Buâ⁄Pªss
Ë
loc_lx
 = 0;

107 
loc_lx
 = 128;

109 
PSP_JOY_RIGHT
 : i‡(
Buâ⁄Pªss
Ë
loc_lx
 = 255;

110 
loc_lx
 = 128;

113 
loc_La°EvítMask
 = 
loc_CuºEvítMask
;

114 i‡(
Buâ⁄Pªss
) {

115 
loc_CuºEvítMask
 |
Mask
;

117 i‡(
Buâ⁄Rñó£
) {

118 
loc_CuºEvítMask
 &~
Mask
;

120 
loc_CuºEvítBuâ⁄s
 = 
	`s˚C⁄vîtMaskToBuâ⁄s
(
loc_CuºEvítMask
);

121 
c
->
Buâ⁄s
 = 
loc_CuºEvítBuâ⁄s
;

122 
c
->
TimeSèmp
 = 
loc_CuºTimeSèmp
;

124 
loc_La°TimeSèmp
 = 
loc_CuºTimeSèmp
;

127 
c
->
Buâ⁄s
 = 
loc_CuºEvítBuâ⁄s
;

128 
c
->
TimeSèmp
 = 
loc_CuºTimeSèmp
;

131 
c
->
Lx
 = 
loc_lx
;

132 
c
->
Ly
 = 
loc_ly
;

134  (
c
->
Buâ⁄s
 != 0);

135 
	}
}

138 
	$s˚CålRódBuf„rPosôive
(
S˚CålD©a
* 
c
, 
v
)

140 ! 
	`s˚CålPìkBuf„rPosôive
(
c
, 
v
));

142 
	}
}

146 
	$s˚PowîSëClockFªquícy
(
‰eq1
, 
‰eq2
, 
‰eq3
)

148 
	}
}

151 
	$p•DebugS¸ìnInô
()

153 
	}
}

156 
	$s˚Kî√lDñayThªad
(
uvÆue
)

158 
	`u¶ìp
(
uvÆue
 / 100);

159 
	}
}

162 
	$s˚Kî√lExôGame
(
°©us
)

164 
	`exô
(
°©us
);

165 
	}
}

168 
	$s˚Di•œyWaôVbœnkSèπ
()

170 
	}
}

	@pspsdk_linux.h

1 #i‚de‡
__SDL_JOY_H__


2 
	#__SDL_JOY_H__


	)

4 #ifde‡
__˝lu•lus


8 #ifde‡
LINUX_MODE


12 
	#PSP_UPLEFT
 79

13 
	#PSP_UP
 80

14 
	#PSP_UPRIGHT
 81

15 

	)

16 
	#PSP_LEFT
 83

17 
	#PSP_RIGHT
 85

18 

	)

19 
	#PSP_DOWNLEFT
 87

20 
	#PSP_DOWN
 88

21 
	#PSP_DOWNRIGHT
 89

22 

	)

23 
	#PSP_TRIANGLE
 25

	)

24 
	#PSP_SQUARE
 38

	)

25 
	#PSP_CROSS
 53

	)

26 
	#PSP_CIRCLE
 40

	)

28 
	#PSP_L
 46

29 
	#PSP_R
 27

30 
	#PSP_FIRE
 65

31 
	#PSP_START
 36

32 
	#PSP_SELECT
 39

33 

	)

34 
	#PSP_JOY_UP
 98

	)

35 
	#PSP_JOY_DOWN
 104

	)

36 
	#PSP_JOY_LEFT
 100

	)

37 
	#PSP_JOY_RIGHT
 102

	)

41 
	#PSP_NOEVENT
 -1

	)

43 
	#DELAY_KEY_FIRST
 250

	)

44 
	#DELAY_KEY_REPEAT
 80

	)

47 #ifde‡
__˝lu•lus


	@/usr/include/SDL/SDL.h

27 #i‚de‡
_SDL_H


28 
	#_SDL_H


	)

30 
	~"SDL_maö.h
"

31 
	~"SDL_°döc.h
"

32 
	~"SDL_audio.h
"

33 
	~"SDL_cdrom.h
"

34 
	~"SDL_˝uöfo.h
"

35 
	~"SDL_ídün.h
"

36 
	~"SDL_îr‹.h
"

37 
	~"SDL_evíts.h
"

38 
	~"SDL_lﬂdso.h
"

39 
	~"SDL_muãx.h
"

40 
	~"SDL_rw›s.h
"

41 
	~"SDL_thªad.h
"

42 
	~"SDL_timî.h
"

43 
	~"SDL_video.h
"

44 
	~"SDL_vîsi⁄.h
"

46 
	~"begö_code.h
"

48 #ifde‡
__˝lu•lus


61 
	#SDL_INIT_TIMER
 0x00000001

	)

62 
	#SDL_INIT_AUDIO
 0x00000010

	)

63 
	#SDL_INIT_VIDEO
 0x00000020

	)

64 
	#SDL_INIT_CDROM
 0x00000100

	)

65 
	#SDL_INIT_JOYSTICK
 0x00000200

	)

66 
	#SDL_INIT_NOPARACHUTE
 0x00100000

	)

67 
	#SDL_INIT_EVENTTHREAD
 0x01000000

	)

68 
	#SDL_INIT_EVERYTHING
 0x0000FFFF

	)

76 
DECLSPEC
 
SDLCALL
 
SDL_Inô
(
Uöt32
 
Êags
);

79 
DECLSPEC
 
SDLCALL
 
SDL_InôSubSy°em
(
Uöt32
 
Êags
);

82 
DECLSPEC
 
SDLCALL
 
SDL_QuôSubSy°em
(
Uöt32
 
Êags
);

88 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_WasInô
(Uöt32 
Êags
);

93 
DECLSPEC
 
SDLCALL
 
SDL_Quô
();

96 #ifde‡
__˝lu•lus


99 
	~"˛o£_code.h
"

	@/usr/include/SDL/SDL_image.h

24 #i‚de‡
_SDL_IMAGE_H


25 
	#_SDL_IMAGE_H


	)

27 
	~"SDL.h
"

28 
	~"SDL_vîsi⁄.h
"

29 
	~"begö_code.h
"

32 #ifde‡
__˝lu•lus


38 
	#SDL_IMAGE_MAJOR_VERSION
 1

	)

39 
	#SDL_IMAGE_MINOR_VERSION
 2

	)

40 
	#SDL_IMAGE_PATCHLEVEL
 12

	)

45 
	#SDL_IMAGE_VERSION
(
X
) \

47 (
X
)->
maj‹
 = 
SDL_IMAGE_MAJOR_VERSION
; \

48 (
X
)->
mö‹
 = 
SDL_IMAGE_MINOR_VERSION
; \

49 (
X
)->
∑tch
 = 
SDL_IMAGE_PATCHLEVEL
; \

50 }

	)

56 
DECLSPEC
 c⁄° 
SDL_vîsi⁄
 * 
SDLCALL
 
IMG_Löked_Vîsi⁄
();

60 
	gIMG_INIT_JPG
 = 0x00000001,

61 
	gIMG_INIT_PNG
 = 0x00000002,

62 
	gIMG_INIT_TIF
 = 0x00000004,

63 
	gIMG_INIT_WEBP
 = 0x00000008

64 } 
	tIMG_InôFœgs
;

70 
DECLSPEC
 
SDLCALL
 
IMG_Inô
(
Êags
);

73 
DECLSPEC
 
SDLCALL
 
IMG_Quô
();

83 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdTy≥d_RW
(
SDL_RW›s
 *
§c
, 
‰ì§c
, *
ty≥
);

85 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_Lﬂd
(c⁄° *
fûe
);

86 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_Lﬂd_RW
(
SDL_RW›s
 *
§c
, 
‰ì§c
);

91 
DECLSPEC
 
SDLCALL
 
IMG_InvîtAÕha
(
⁄
);

94 
DECLSPEC
 
SDLCALL
 
IMG_isICO
(
SDL_RW›s
 *
§c
);

95 
DECLSPEC
 
SDLCALL
 
IMG_isCUR
(
SDL_RW›s
 *
§c
);

96 
DECLSPEC
 
SDLCALL
 
IMG_isBMP
(
SDL_RW›s
 *
§c
);

97 
DECLSPEC
 
SDLCALL
 
IMG_isGIF
(
SDL_RW›s
 *
§c
);

98 
DECLSPEC
 
SDLCALL
 
IMG_isJPG
(
SDL_RW›s
 *
§c
);

99 
DECLSPEC
 
SDLCALL
 
IMG_isLBM
(
SDL_RW›s
 *
§c
);

100 
DECLSPEC
 
SDLCALL
 
IMG_isPCX
(
SDL_RW›s
 *
§c
);

101 
DECLSPEC
 
SDLCALL
 
IMG_isPNG
(
SDL_RW›s
 *
§c
);

102 
DECLSPEC
 
SDLCALL
 
IMG_isPNM
(
SDL_RW›s
 *
§c
);

103 
DECLSPEC
 
SDLCALL
 
IMG_isTIF
(
SDL_RW›s
 *
§c
);

104 
DECLSPEC
 
SDLCALL
 
IMG_isXCF
(
SDL_RW›s
 *
§c
);

105 
DECLSPEC
 
SDLCALL
 
IMG_isXPM
(
SDL_RW›s
 *
§c
);

106 
DECLSPEC
 
SDLCALL
 
IMG_isXV
(
SDL_RW›s
 *
§c
);

107 
DECLSPEC
 
SDLCALL
 
IMG_isWEBP
(
SDL_RW›s
 *
§c
);

110 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdICO_RW
(
SDL_RW›s
 *
§c
);

111 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdCUR_RW
(
SDL_RW›s
 *
§c
);

112 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdBMP_RW
(
SDL_RW›s
 *
§c
);

113 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdGIF_RW
(
SDL_RW›s
 *
§c
);

114 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdJPG_RW
(
SDL_RW›s
 *
§c
);

115 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdLBM_RW
(
SDL_RW›s
 *
§c
);

116 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdPCX_RW
(
SDL_RW›s
 *
§c
);

117 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdPNG_RW
(
SDL_RW›s
 *
§c
);

118 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdPNM_RW
(
SDL_RW›s
 *
§c
);

119 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdTGA_RW
(
SDL_RW›s
 *
§c
);

120 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdTIF_RW
(
SDL_RW›s
 *
§c
);

121 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdXCF_RW
(
SDL_RW›s
 *
§c
);

122 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdXPM_RW
(
SDL_RW›s
 *
§c
);

123 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdXV_RW
(
SDL_RW›s
 *
§c
);

124 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_LﬂdWEBP_RW
(
SDL_RW›s
 *
§c
);

126 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
IMG_RódXPMFromAºay
(**
xpm
);

129 
	#IMG_SëEº‹
 
SDL_SëEº‹


	)

130 
	#IMG_GëEº‹
 
SDL_GëEº‹


	)

133 #ifde‡
__˝lu•lus


136 
	~"˛o£_code.h
"

	@/usr/include/SDL/SDL_ttf.h

27 #i‚de‡
_SDL_TTF_H


28 
	#_SDL_TTF_H


	)

30 
	~"SDL.h
"

31 
	~"begö_code.h
"

34 #ifde‡
__˝lu•lus


40 
	#SDL_TTF_MAJOR_VERSION
 2

	)

41 
	#SDL_TTF_MINOR_VERSION
 0

	)

42 
	#SDL_TTF_PATCHLEVEL
 11

	)

47 
	#SDL_TTF_VERSION
(
X
) \

49 (
X
)->
maj‹
 = 
SDL_TTF_MAJOR_VERSION
; \

50 (
X
)->
mö‹
 = 
SDL_TTF_MINOR_VERSION
; \

51 (
X
)->
∑tch
 = 
SDL_TTF_PATCHLEVEL
; \

52 }

	)

55 
	#TTF_MAJOR_VERSION
 
SDL_TTF_MAJOR_VERSION


	)

56 
	#TTF_MINOR_VERSION
 
SDL_TTF_MINOR_VERSION


	)

57 
	#TTF_PATCHLEVEL
 
SDL_TTF_PATCHLEVEL


	)

58 
	#TTF_VERSION
(
X
Ë
	`SDL_TTF_VERSION
(X)

	)

64 
DECLSPEC
 c⁄° 
SDL_vîsi⁄
 * 
SDLCALL
 
TTF_Löked_Vîsi⁄
();

67 
	#UNICODE_BOM_NATIVE
 0xFEFF

	)

68 
	#UNICODE_BOM_SWAPPED
 0xFFFE

	)

74 
DECLSPEC
 
SDLCALL
 
TTF_ByãSw≠≥dUNICODE
(
sw≠≥d
);

77 
_TTF_F⁄t
 
	tTTF_F⁄t
;

80 
DECLSPEC
 
SDLCALL
 
TTF_Inô
();

86 
DECLSPEC
 
TTF_F⁄t
 * 
SDLCALL
 
TTF_O≥nF⁄t
(c⁄° *
fûe
, 
±size
);

87 
DECLSPEC
 
TTF_F⁄t
 * 
SDLCALL
 
TTF_O≥nF⁄tIndex
(c⁄° *
fûe
, 
±size
, 
ödex
);

88 
DECLSPEC
 
TTF_F⁄t
 * 
SDLCALL
 
TTF_O≥nF⁄tRW
(
SDL_RW›s
 *
§c
, 
‰ì§c
, 
±size
);

89 
DECLSPEC
 
TTF_F⁄t
 * 
SDLCALL
 
TTF_O≥nF⁄tIndexRW
(
SDL_RW›s
 *
§c
, 
‰ì§c
, 
±size
, 
ödex
);

92 
	#TTF_STYLE_NORMAL
 0x00

	)

93 
	#TTF_STYLE_BOLD
 0x01

	)

94 
	#TTF_STYLE_ITALIC
 0x02

	)

95 
	#TTF_STYLE_UNDERLINE
 0x04

	)

96 
	#TTF_STYLE_STRIKETHROUGH
 0x08

	)

97 
DECLSPEC
 
SDLCALL
 
TTF_GëF⁄tStyÀ
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

98 
DECLSPEC
 
SDLCALL
 
TTF_SëF⁄tStyÀ
(
TTF_F⁄t
 *
f⁄t
, 
°yÀ
);

99 
DECLSPEC
 
SDLCALL
 
TTF_GëF⁄tOuéöe
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

100 
DECLSPEC
 
SDLCALL
 
TTF_SëF⁄tOuéöe
(
TTF_F⁄t
 *
f⁄t
, 
ouéöe
);

103 
	#TTF_HINTING_NORMAL
 0

	)

104 
	#TTF_HINTING_LIGHT
 1

	)

105 
	#TTF_HINTING_MONO
 2

	)

106 
	#TTF_HINTING_NONE
 3

	)

107 
DECLSPEC
 
SDLCALL
 
TTF_GëF⁄tHötög
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

108 
DECLSPEC
 
SDLCALL
 
TTF_SëF⁄tHötög
(
TTF_F⁄t
 *
f⁄t
, 
hötög
);

111 
DECLSPEC
 
SDLCALL
 
TTF_F⁄tHeight
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

116 
DECLSPEC
 
SDLCALL
 
TTF_F⁄tAs˚¡
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

121 
DECLSPEC
 
SDLCALL
 
TTF_F⁄tDes˚¡
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

124 
DECLSPEC
 
SDLCALL
 
TTF_F⁄tLöeSkù
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

127 
DECLSPEC
 
SDLCALL
 
TTF_GëF⁄tKînög
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

128 
DECLSPEC
 
SDLCALL
 
TTF_SëF⁄tKînög
(
TTF_F⁄t
 *
f⁄t
, 
Ælowed
);

131 
DECLSPEC
 
SDLCALL
 
TTF_F⁄tFa˚s
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

134 
DECLSPEC
 
SDLCALL
 
TTF_F⁄tFa˚IsFixedWidth
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

135 
DECLSPEC
 * 
SDLCALL
 
TTF_F⁄tFa˚FamûyName
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

136 
DECLSPEC
 * 
SDLCALL
 
TTF_F⁄tFa˚StyÀName
(c⁄° 
TTF_F⁄t
 *
f⁄t
);

139 
DECLSPEC
 
SDLCALL
 
TTF_GlyphIsProvided
(c⁄° 
TTF_F⁄t
 *
f⁄t
, 
Uöt16
 
ch
);

145 
DECLSPEC
 
SDLCALL
 
TTF_GlyphMërics
(
TTF_F⁄t
 *
f⁄t
, 
Uöt16
 
ch
,

146 *
möx
, *
maxx
,

147 *
möy
, *
maxy
, *
adv™˚
);

150 
DECLSPEC
 
SDLCALL
 
TTF_SizeText
(
TTF_F⁄t
 *
f⁄t
, c⁄° *
ãxt
, *
w
, *
h
);

151 
DECLSPEC
 
SDLCALL
 
TTF_SizeUTF8
(
TTF_F⁄t
 *
f⁄t
, c⁄° *
ãxt
, *
w
, *
h
);

152 
DECLSPEC
 
SDLCALL
 
TTF_SizeUNICODE
(
TTF_F⁄t
 *
f⁄t
, c⁄° 
Uöt16
 *
ãxt
, *
w
, *
h
);

160 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîText_Sﬁid
(
TTF_F⁄t
 *
f⁄t
,

161 c⁄° *
ãxt
, 
SDL_Cﬁ‹
 
fg
);

162 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîUTF8_Sﬁid
(
TTF_F⁄t
 *
f⁄t
,

163 c⁄° *
ãxt
, 
SDL_Cﬁ‹
 
fg
);

164 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîUNICODE_Sﬁid
(
TTF_F⁄t
 *
f⁄t
,

165 c⁄° 
Uöt16
 *
ãxt
, 
SDL_Cﬁ‹
 
fg
);

174 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîGlyph_Sﬁid
(
TTF_F⁄t
 *
f⁄t
,

175 
Uöt16
 
ch
, 
SDL_Cﬁ‹
 
fg
);

182 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîText_Shaded
(
TTF_F⁄t
 *
f⁄t
,

183 c⁄° *
ãxt
, 
SDL_Cﬁ‹
 
fg
, SDL_Cﬁ‹ 
bg
);

184 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîUTF8_Shaded
(
TTF_F⁄t
 *
f⁄t
,

185 c⁄° *
ãxt
, 
SDL_Cﬁ‹
 
fg
, SDL_Cﬁ‹ 
bg
);

186 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîUNICODE_Shaded
(
TTF_F⁄t
 *
f⁄t
,

187 c⁄° 
Uöt16
 *
ãxt
, 
SDL_Cﬁ‹
 
fg
, SDL_Cﬁ‹ 
bg
);

196 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîGlyph_Shaded
(
TTF_F⁄t
 *
f⁄t
,

197 
Uöt16
 
ch
, 
SDL_Cﬁ‹
 
fg
, SDL_Cﬁ‹ 
bg
);

203 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîText_BÀnded
(
TTF_F⁄t
 *
f⁄t
,

204 c⁄° *
ãxt
, 
SDL_Cﬁ‹
 
fg
);

205 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîUTF8_BÀnded
(
TTF_F⁄t
 *
f⁄t
,

206 c⁄° *
ãxt
, 
SDL_Cﬁ‹
 
fg
);

207 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîUNICODE_BÀnded
(
TTF_F⁄t
 *
f⁄t
,

208 c⁄° 
Uöt16
 *
ãxt
, 
SDL_Cﬁ‹
 
fg
);

216 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
TTF_RídîGlyph_BÀnded
(
TTF_F⁄t
 *
f⁄t
,

217 
Uöt16
 
ch
, 
SDL_Cﬁ‹
 
fg
);

220 
	#TTF_RídîText
(
f⁄t
, 
ãxt
, 
fg
, 
bg
) \

221 
	`TTF_RídîText_Shaded
(
f⁄t
, 
ãxt
, 
fg
, 
bg
)

	)

222 
	#TTF_RídîUTF8
(
f⁄t
, 
ãxt
, 
fg
, 
bg
) \

223 
	`TTF_RídîUTF8_Shaded
(
f⁄t
, 
ãxt
, 
fg
, 
bg
)

	)

224 
	#TTF_RídîUNICODE
(
f⁄t
, 
ãxt
, 
fg
, 
bg
) \

225 
	`TTF_RídîUNICODE_Shaded
(
f⁄t
, 
ãxt
, 
fg
, 
bg
)

	)

228 
DECLSPEC
 
SDLCALL
 
TTF_Clo£F⁄t
(
TTF_F⁄t
 *
f⁄t
);

231 
DECLSPEC
 
SDLCALL
 
TTF_Quô
();

234 
DECLSPEC
 
SDLCALL
 
TTF_WasInô
();

237 
DECLSPEC
 
TTF_GëF⁄tKînögSize
(
TTF_F⁄t
 *
f⁄t
, 
¥ev_ödex
, 
ödex
);

240 
	#TTF_SëEº‹
 
SDL_SëEº‹


	)

241 
	#TTF_GëEº‹
 
SDL_GëEº‹


	)

244 #ifde‡
__˝lu•lus


247 
	~"˛o£_code.h
"

	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

110 
f˙é
 (
__fd
, 
__cmd
, ...);

118 #i‚de‡
__USE_FILE_OFFSET64


119 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

121 #ifde‡
__REDIRECT


122 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

123 
	`__n⁄nuŒ
 ((1));

125 
	#›í
 
›í64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__USE_ATFILE


142 #i‚de‡
__USE_FILE_OFFSET64


143 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

144 
	`__n⁄nuŒ
 ((2));

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

148 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

150 
	#›í©
 
›í©64


	)

153 #ifde‡
__USE_LARGEFILE64


154 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

155 
	`__n⁄nuŒ
 ((2));

164 #i‚de‡
__USE_FILE_OFFSET64


165 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__REDIRECT


168 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

169 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

171 
	#¸ót
 
¸ót64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

179 && !
deföed
 
__USE_POSIX
))

188 
	#F_ULOCK
 0

	)

189 
	#F_LOCK
 1

	)

190 
	#F_TLOCK
 2

	)

191 
	#F_TEST
 3

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

199 
	#lockf
 
lockf64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

207 #ifde‡
__USE_XOPEN2K


210 #i‚de‡
__USE_FILE_OFFSET64


211 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

212 
__advi£
Ë
__THROW
;

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

216 
__off64_t
 
__Àn
, 
__advi£
),

217 
posix_Ádvi£64
);

219 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

222 #ifde‡
__USE_LARGEFILE64


223 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

224 
__advi£
Ë
__THROW
;

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

237 
__off64_t
 
__Àn
),

238 
posix_ÁŒoˇã64
);

240 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

243 #ifde‡
__USE_LARGEFILE64


244 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

251 && 
deföed
 
__va_¨g_∑ck_Àn


252 
	~<bôs/f˙é2.h
>

255 
__END_DECLS


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	~<°dio.h
>

27 
	#__mÆloc_±r_t
 *

	)

30 
	#__mÆloc_size_t
 
size_t


	)

31 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

33 #ifde‡
__GNUC__


35 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

38 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

42 
	#__MALLOC_P
(
¨gs
Ë
	)
args

43 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

48 
__BEGIN_DECLS


51 *
mÆloc
 
__MALLOC_P
 ((
size_t
 
__size
)Ë
__©åibuã_mÆloc__
 
__wur
;

54 *
ˇŒoc
 
__MALLOC_P
 ((
size_t
 
__nmemb
, size_à
__size
))

55 
__©åibuã_mÆloc__
 
__wur
;

62 *
ªÆloc
 
__MALLOC_P
 ((*
__±r
, 
size_t
 
__size
))

63 
__©åibuã_w¨n_unu£d_ªsu…__
;

66 
‰ì
 
__MALLOC_P
 ((*
__±r
));

69 
c‰ì
 
__MALLOC_P
 ((*
__±r
));

72 *
memÆign
 
__MALLOC_P
 ((
size_t
 
__Æignmít
, size_à
__size
))

73 
__©åibuã_mÆloc__
 
__wur
;

76 *
vÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

77 
__©åibuã_mÆloc__
 
__wur
;

81 * 
pvÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

82 
__©åibuã_mÆloc__
 
__wur
;

86 *(*
__m‹ec‹e
Ë
__MALLOC_PMT
 ((
±rdiff_t
 
__size
));

89 *
__deÁu…_m‹ec‹e
 
__MALLOC_P
 ((
±rdiff_t
 
__size
))

90 
__©åibuã_mÆloc__
;

94 
	smÆlöfo
 {

95 
	m¨ía
;

96 
	m‹dblks
;

97 
	msmblks
;

98 
	mhblks
;

99 
	mhblkhd
;

100 
	musmblks
;

101 
	mfsmblks
;

102 
	mu‹dblks
;

103 
	mf‹dblks
;

104 
	mkìpco°
;

108 
mÆlöfo
 mÆlöfÿ
__MALLOC_P
 (());

111 #i‚de‡
M_MXFAST


112 
	#M_MXFAST
 1

	)

114 #i‚de‡
M_NLBLKS


115 
	#M_NLBLKS
 2

	)

117 #i‚de‡
M_GRAIN


118 
	#M_GRAIN
 3

	)

120 #i‚de‡
M_KEEP


121 
	#M_KEEP
 4

	)

125 
	#M_TRIM_THRESHOLD
 -1

	)

126 
	#M_TOP_PAD
 -2

	)

127 
	#M_MMAP_THRESHOLD
 -3

	)

128 
	#M_MMAP_MAX
 -4

	)

129 
	#M_CHECK_ACTION
 -5

	)

130 
	#M_PERTURB
 -6

	)

131 
	#M_ARENA_TEST
 -7

	)

132 
	#M_ARENA_MAX
 -8

	)

135 
mÆl›t
 
__MALLOC_P
 ((
__∑øm
, 
__vÆ
));

139 
mÆloc_åim
 
__MALLOC_P
 ((
size_t
 
__∑d
));

143 
size_t
 
mÆloc_ußbÀ_size
 
__MALLOC_P
 ((*
__±r
));

146 
mÆloc_°©s
 
__MALLOC_P
 (());

149 
mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
);

152 *
mÆloc_gë_°©e
 
__MALLOC_P
 (());

156 
mÆloc_£t_°©e
 
__MALLOC_P
 ((*
__±r
));

161 (*
__mÆloc_öôülize_hook
Ë
	`__MALLOC_PMT
 (());

163 (*
__‰ì_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
,

164 
__c⁄°
 
__mÆloc_±r_t
));

165 *(*
__mÆloc_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__size
,

166 
__c⁄°
 
__mÆloc_±r_t
));

167 *(*
__ªÆloc_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
, 
size_t
 
__size
,

168 
__c⁄°
 
__mÆloc_±r_t
));

169 *(*
__memÆign_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__Æignmít
,

170 
size_t
 
__size
,

171 
__c⁄°
 
__mÆloc_±r_t
));

172 (*
__a·î_m‹ec‹e_hook
Ë
	`__MALLOC_PMT
 (());

175 
__mÆloc_check_öô
 
	`__MALLOC_P
 (());

178 
__END_DECLS


	@/usr/include/png.h

480 #i‚de‡
PNG_H


481 
	#PNG_H


	)

490 
	#PNG_LIBPNG_VER_STRING
 "1.2.49"

	)

491 
	#PNG_HEADER_VERSION_STRING
 \

492 "Üib≤g vîsi⁄ 1.2.49 - M¨ch 29, 2012\n"

	)

494 
	#PNG_LIBPNG_VER_SONUM
 0

	)

495 
	#PNG_LIBPNG_VER_DLLNUM
 13

	)

498 
	#PNG_LIBPNG_VER_MAJOR
 1

	)

499 
	#PNG_LIBPNG_VER_MINOR
 2

	)

500 
	#PNG_LIBPNG_VER_RELEASE
 49

	)

505 
	#PNG_LIBPNG_VER_BUILD
 0

	)

508 
	#PNG_LIBPNG_BUILD_ALPHA
 1

	)

509 
	#PNG_LIBPNG_BUILD_BETA
 2

	)

510 
	#PNG_LIBPNG_BUILD_RC
 3

	)

511 
	#PNG_LIBPNG_BUILD_STABLE
 4

	)

512 
	#PNG_LIBPNG_BUILD_RELEASE_STATUS_MASK
 7

	)

515 
	#PNG_LIBPNG_BUILD_PATCH
 8

	)

517 
	#PNG_LIBPNG_BUILD_PRIVATE
 16

	)

519 
	#PNG_LIBPNG_BUILD_SPECIAL
 32

	)

522 
	#PNG_LIBPNG_BUILD_BASE_TYPE
 
PNG_LIBPNG_BUILD_STABLE


	)

530 
	#PNG_LIBPNG_VER
 10249

	)

532 #i‚de‡
PNG_VERSION_INFO_ONLY


534 
	~"zlib.h
"

538 
	~"≤gc⁄f.h
"

553 #ifde‡
PNG_USER_PRIVATEBUILD


554 
	#PNG_LIBPNG_BUILD_TYPE
 \

555 (
PNG_LIBPNG_BUILD_BASE_TYPE
 | 
PNG_LIBPNG_BUILD_PRIVATE
)

	)

557 #ifde‡
PNG_LIBPNG_SPECIALBUILD


558 
	#PNG_LIBPNG_BUILD_TYPE
 \

559 (
PNG_LIBPNG_BUILD_BASE_TYPE
 | 
PNG_LIBPNG_BUILD_SPECIAL
)

	)

561 
	#PNG_LIBPNG_BUILD_TYPE
 (
PNG_LIBPNG_BUILD_BASE_TYPE
)

	)

565 #i‚de‡
PNG_VERSION_INFO_ONLY


568 #ifde‡
__˝lu•lus


578 #i‚de‡
PNG_NO_TYPECAST_NULL


579 
	#öt_p_NULL
 (*)
NULL


	)

580 
	#≤g_byãp_NULL
 (
≤g_byãp
)
NULL


	)

581 
	#≤g_byãµ_NULL
 (
≤g_byãµ
)
NULL


	)

582 
	#≤g_doubÀp_NULL
 (
≤g_doubÀp
)
NULL


	)

583 
	#≤g_îr‹_±r_NULL
 (
≤g_îr‹_±r
)
NULL


	)

584 
	#≤g_Êush_±r_NULL
 (
≤g_Êush_±r
)
NULL


	)

585 
	#≤g_‰ì_±r_NULL
 (
≤g_‰ì_±r
)
NULL


	)

586 
	#≤g_öf›p_NULL
 (
≤g_öf›p
)
NULL


	)

587 
	#≤g_mÆloc_±r_NULL
 (
≤g_mÆloc_±r
)
NULL


	)

588 
	#≤g_ªad_°©us_±r_NULL
 (
≤g_ªad_°©us_±r
)
NULL


	)

589 
	#≤g_rw_±r_NULL
 (
≤g_rw_±r
)
NULL


	)

590 
	#≤g_°ru˘p_NULL
 (
≤g_°ru˘p
)
NULL


	)

591 
	#≤g_uöt_16p_NULL
 (
≤g_uöt_16p
)
NULL


	)

592 
	#≤g_voidp_NULL
 (
≤g_voidp
)
NULL


	)

593 
	#≤g_wrôe_°©us_±r_NULL
 (
≤g_wrôe_°©us_±r
)
NULL


	)

595 
	#öt_p_NULL
 
NULL


	)

596 
	#≤g_byãp_NULL
 
NULL


	)

597 
	#≤g_byãµ_NULL
 
NULL


	)

598 
	#≤g_doubÀp_NULL
 
NULL


	)

599 
	#≤g_îr‹_±r_NULL
 
NULL


	)

600 
	#≤g_Êush_±r_NULL
 
NULL


	)

601 
	#≤g_‰ì_±r_NULL
 
NULL


	)

602 
	#≤g_öf›p_NULL
 
NULL


	)

603 
	#≤g_mÆloc_±r_NULL
 
NULL


	)

604 
	#≤g_ªad_°©us_±r_NULL
 
NULL


	)

605 
	#≤g_rw_±r_NULL
 
NULL


	)

606 
	#≤g_°ru˘p_NULL
 
NULL


	)

607 
	#≤g_uöt_16p_NULL
 
NULL


	)

608 
	#≤g_voidp_NULL
 
NULL


	)

609 
	#≤g_wrôe_°©us_±r_NULL
 
NULL


	)

613 #i‡!
deföed
(
PNG_NO_EXTERN
Ë|| deföed(
PNG_ALWAYS_EXTERN
)

617 #ifde‡
PNG_USE_GLOBAL_ARRAYS


618 
PNG_EXPORT_VAR
 (
PNG_CONST
 Ë
≤g_lib≤g_vî
[18];

621 
	#≤g_lib≤g_vî
 
	`≤g_gë_hódî_vî
(
NULL
)

	)

624 #ifde‡
PNG_USE_GLOBAL_ARRAYS


627 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_°¨t
[7];

628 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_öc
[7];

629 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_y°¨t
[7];

630 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_yöc
[7];

631 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_mask
[7];

632 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_d•_mask
[7];

644 
	s≤g_cﬁ‹_°ru˘


646 
≤g_byã
 
ªd
;

647 
≤g_byã
 
gªí
;

648 
≤g_byã
 
blue
;

649 } 
	t≤g_cﬁ‹
;

650 
≤g_cﬁ‹
 
	tFAR
 * 
	t≤g_cﬁ‹p
;

651 
≤g_cﬁ‹
 
	tFAR
 * FAR * 
	t≤g_cﬁ‹µ
;

653 
	s≤g_cﬁ‹_16_°ru˘


655 
≤g_byã
 
ödex
;

656 
≤g_uöt_16
 
ªd
;

657 
≤g_uöt_16
 
gªí
;

658 
≤g_uöt_16
 
blue
;

659 
≤g_uöt_16
 
gøy
;

660 } 
	t≤g_cﬁ‹_16
;

661 
≤g_cﬁ‹_16
 
	tFAR
 * 
	t≤g_cﬁ‹_16p
;

662 
≤g_cﬁ‹_16
 
	tFAR
 * FAR * 
	t≤g_cﬁ‹_16µ
;

664 
	s≤g_cﬁ‹_8_°ru˘


666 
≤g_byã
 
ªd
;

667 
≤g_byã
 
gªí
;

668 
≤g_byã
 
blue
;

669 
≤g_byã
 
gøy
;

670 
≤g_byã
 
Æpha
;

671 } 
	t≤g_cﬁ‹_8
;

672 
≤g_cﬁ‹_8
 
	tFAR
 * 
	t≤g_cﬁ‹_8p
;

673 
≤g_cﬁ‹_8
 
	tFAR
 * FAR * 
	t≤g_cﬁ‹_8µ
;

679 
	s≤g_sPLT_íåy_°ru˘


681 
≤g_uöt_16
 
ªd
;

682 
≤g_uöt_16
 
gªí
;

683 
≤g_uöt_16
 
blue
;

684 
≤g_uöt_16
 
Æpha
;

685 
≤g_uöt_16
 
‰equícy
;

686 } 
	t≤g_sPLT_íåy
;

687 
≤g_sPLT_íåy
 
	tFAR
 * 
	t≤g_sPLT_íåyp
;

688 
≤g_sPLT_íåy
 
	tFAR
 * FAR * 
	t≤g_sPLT_íåyµ
;

695 
	s≤g_sPLT_°ru˘


697 
≤g_ch¨p
 
«me
;

698 
≤g_byã
 
dïth
;

699 
≤g_sPLT_íåyp
 
íåõs
;

700 
≤g_öt_32
 
√¡rõs
;

701 } 
	t≤g_sPLT_t
;

702 
≤g_sPLT_t
 
	tFAR
 * 
	t≤g_sPLT_ç
;

703 
≤g_sPLT_t
 
	tFAR
 * FAR * 
	t≤g_sPLT_çp
;

705 #ifde‡
PNG_TEXT_SUPPORTED


714 
	s≤g_ãxt_°ru˘


716 
com¥essi⁄
;

721 
≤g_ch¨p
 
key
;

722 
≤g_ch¨p
 
ãxt
;

724 
≤g_size_t
 
ãxt_Àngth
;

725 #ifde‡
PNG_iTXt_SUPPORTED


726 
≤g_size_t
 
ôxt_Àngth
;

727 
≤g_ch¨p
 
œng
;

729 
≤g_ch¨p
 
œng_key
;

732 } 
	t≤g_ãxt
;

733 
≤g_ãxt
 
	tFAR
 * 
	t≤g_ãxç
;

734 
≤g_ãxt
 
	tFAR
 * FAR * 
	t≤g_ãxçp
;

740 
	#PNG_TEXT_COMPRESSION_NONE_WR
 -3

	)

741 
	#PNG_TEXT_COMPRESSION_zTXt_WR
 -2

	)

742 
	#PNG_TEXT_COMPRESSION_NONE
 -1

	)

743 
	#PNG_TEXT_COMPRESSION_zTXt
 0

	)

744 
	#PNG_ITXT_COMPRESSION_NONE
 1

	)

745 
	#PNG_ITXT_COMPRESSION_zTXt
 2

	)

746 
	#PNG_TEXT_COMPRESSION_LAST
 3

	)

754 
	s≤g_time_°ru˘


756 
≤g_uöt_16
 
yór
;

757 
≤g_byã
 
m⁄th
;

758 
≤g_byã
 
day
;

759 
≤g_byã
 
hour
;

760 
≤g_byã
 
möuã
;

761 
≤g_byã
 
£c⁄d
;

762 } 
	t≤g_time
;

763 
≤g_time
 
	tFAR
 * 
	t≤g_timï
;

764 
≤g_time
 
	tFAR
 * FAR * 
	t≤g_timïp
;

766 #i‡
deföed
(
PNG_UNKNOWN_CHUNKS_SUPPORTED
) || \

767 
deföed
(
PNG_HANDLE_AS_UNKNOWN_SUPPORTED
)

773 
	#PNG_CHUNK_NAME_LENGTH
 5

	)

774 
	s≤g_unknown_chunk_t


776 
≤g_byã
 
«me
[
PNG_CHUNK_NAME_LENGTH
];

777 
≤g_byã
 *
d©a
;

778 
≤g_size_t
 
size
;

781 
≤g_byã
 
loˇti⁄
;

783 
	t≤g_unknown_chunk
;

784 
≤g_unknown_chunk
 
	tFAR
 * 
	t≤g_unknown_chunkp
;

785 
≤g_unknown_chunk
 
	tFAR
 * FAR * 
	t≤g_unknown_chunkµ
;

827 
	s≤g_öfo_°ru˘


830 
≤g_uöt_32
 
width
 
PNG_DEPSTRUCT
;

831 
≤g_uöt_32
 
height
 
PNG_DEPSTRUCT
;

832 
≤g_uöt_32
 
vÆid
 
PNG_DEPSTRUCT
;

833 
≤g_uöt_32
 
rowbyãs
 
PNG_DEPSTRUCT
;

834 
≤g_cﬁ‹p
 
∑Àâe
 
PNG_DEPSTRUCT
;

835 
≤g_uöt_16
 
num_∑Àâe
 
PNG_DEPSTRUCT
;

836 
≤g_uöt_16
 
num_å™s
 
PNG_DEPSTRUCT
;

837 
≤g_byã
 
bô_dïth
 
PNG_DEPSTRUCT
;

838 
≤g_byã
 
cﬁ‹_ty≥
 
PNG_DEPSTRUCT
;

840 
≤g_byã
 
com¥essi⁄_ty≥
 
PNG_DEPSTRUCT
;

841 
≤g_byã
 
fûãr_ty≥
 
PNG_DEPSTRUCT
;

842 
≤g_byã
 
öãæa˚_ty≥
 
PNG_DEPSTRUCT
;

845 
≤g_byã
 
ch™√ls
 
PNG_DEPSTRUCT
;

846 
≤g_byã
 
pixñ_dïth
 
PNG_DEPSTRUCT
;

847 
≤g_byã
 
•¨e_byã
 
PNG_DEPSTRUCT
;

848 
≤g_byã
 
sig«tuª
[8] 
PNG_DEPSTRUCT
;

856 #i‡
deföed
(
PNG_gAMA_SUPPORTED
Ë&& deföed(
PNG_FLOATING_POINT_SUPPORTED
)

861 
gamma
 
PNG_DEPSTRUCT
;

864 #ifde‡
PNG_sRGB_SUPPORTED


867 
≤g_byã
 
§gb_öã¡
 
PNG_DEPSTRUCT
;

870 #ifde‡
PNG_TEXT_SUPPORTED


879 
num_ãxt
 
PNG_DEPSTRUCT
;

880 
max_ãxt
 
PNG_DEPSTRUCT
;

881 
≤g_ãxç
 
ãxt
 
PNG_DEPSTRUCT
;

884 #ifde‡
PNG_tIME_SUPPORTED


888 
≤g_time
 
mod_time
 
PNG_DEPSTRUCT
;

891 #ifde‡
PNG_sBIT_SUPPORTED


898 
≤g_cﬁ‹_8
 
sig_bô
 
PNG_DEPSTRUCT
;

901 #i‡
deföed
(
PNG_tRNS_SUPPORTED
Ë|| deföed(
PNG_READ_EXPAND_SUPPORTED
) || \

902 
deföed
(
PNG_READ_BACKGROUND_SUPPORTED
)

912 
≤g_byãp
 
å™s
 
PNG_DEPSTRUCT
;

913 
≤g_cﬁ‹_16
 
å™s_vÆues
 
PNG_DEPSTRUCT
;

916 #i‡
deföed
(
PNG_bKGD_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

923 
≤g_cﬁ‹_16
 
background
 
PNG_DEPSTRUCT
;

926 #ifde‡
PNG_oFFs_SUPPORTED


932 
≤g_öt_32
 
x_off£t
 
PNG_DEPSTRUCT
;

933 
≤g_öt_32
 
y_off£t
 
PNG_DEPSTRUCT
;

934 
≤g_byã
 
off£t_unô_ty≥
 
PNG_DEPSTRUCT
;

937 #ifde‡
PNG_pHYs_SUPPORTED


942 
≤g_uöt_32
 
x_pixñs_≥r_unô
 
PNG_DEPSTRUCT
;

943 
≤g_uöt_32
 
y_pixñs_≥r_unô
 
PNG_DEPSTRUCT
;

944 
≤g_byã
 
phys_unô_ty≥
 
PNG_DEPSTRUCT
;

947 #ifde‡
PNG_hIST_SUPPORTED


954 
≤g_uöt_16p
 
hi°
 
PNG_DEPSTRUCT
;

957 #ifde‡
PNG_cHRM_SUPPORTED


964 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


965 
x_whôe
 
PNG_DEPSTRUCT
;

966 
y_whôe
 
PNG_DEPSTRUCT
;

967 
x_ªd
 
PNG_DEPSTRUCT
;

968 
y_ªd
 
PNG_DEPSTRUCT
;

969 
x_gªí
 
PNG_DEPSTRUCT
;

970 
y_gªí
 
PNG_DEPSTRUCT
;

971 
x_blue
 
PNG_DEPSTRUCT
;

972 
y_blue
 
PNG_DEPSTRUCT
;

976 #ifde‡
PNG_pCAL_SUPPORTED


988 
≤g_ch¨p
 
pˇl_puΩo£
 
PNG_DEPSTRUCT
;

989 
≤g_öt_32
 
pˇl_X0
 
PNG_DEPSTRUCT
;

990 
≤g_öt_32
 
pˇl_X1
 
PNG_DEPSTRUCT
;

991 
≤g_ch¨p
 
pˇl_unôs
 
PNG_DEPSTRUCT
;

992 
≤g_ch¨µ
 
pˇl_∑øms
 
PNG_DEPSTRUCT
;

993 
≤g_byã
 
pˇl_ty≥
 
PNG_DEPSTRUCT
;

994 
≤g_byã
 
pˇl_≈¨ams
 
PNG_DEPSTRUCT
;

998 #ifde‡
PNG_FREE_ME_SUPPORTED


999 
≤g_uöt_32
 
‰ì_me
 
PNG_DEPSTRUCT
;

1002 #i‡
deföed
(
PNG_UNKNOWN_CHUNKS_SUPPORTED
) || \

1003 
deföed
(
PNG_HANDLE_AS_UNKNOWN_SUPPORTED
)

1005 
≤g_unknown_chunkp
 
unknown_chunks
 
PNG_DEPSTRUCT
;

1006 
≤g_size_t
 
unknown_chunks_num
 
PNG_DEPSTRUCT
;

1009 #ifde‡
PNG_iCCP_SUPPORTED


1011 
≤g_ch¨p
 
ic˝_«me
 
PNG_DEPSTRUCT
;

1012 
≤g_ch¨p
 
ic˝_¥ofûe
 
PNG_DEPSTRUCT
;

1014 
≤g_uöt_32
 
ic˝_¥oÊí
 
PNG_DEPSTRUCT
;

1015 
≤g_byã
 
ic˝_com¥essi⁄
 
PNG_DEPSTRUCT
;

1018 #ifde‡
PNG_sPLT_SUPPORTED


1020 
≤g_sPLT_ç
 
•…_∑Àâes
 
PNG_DEPSTRUCT
;

1021 
≤g_uöt_32
 
•…_∑Àâes_num
 
PNG_DEPSTRUCT
;

1024 #ifde‡
PNG_sCAL_SUPPORTED


1032 
≤g_byã
 
sˇl_unô
 
PNG_DEPSTRUCT
;

1033 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1034 
sˇl_pixñ_width
 
PNG_DEPSTRUCT
;

1035 
sˇl_pixñ_height
 
PNG_DEPSTRUCT
;

1037 #ifde‡
PNG_FIXED_POINT_SUPPORTED


1038 
≤g_ch¨p
 
sˇl_s_width
 
PNG_DEPSTRUCT
;

1039 
≤g_ch¨p
 
sˇl_s_height
 
PNG_DEPSTRUCT
;

1043 #ifde‡
PNG_INFO_IMAGE_SUPPORTED


1046 
≤g_byãµ
 
row_poöãrs
 
PNG_DEPSTRUCT
;

1049 #i‡
deföed
(
PNG_FIXED_POINT_SUPPORTED
Ë&& deföed(
PNG_gAMA_SUPPORTED
)

1050 
≤g_fixed_poöt
 
öt_gamma
 
PNG_DEPSTRUCT
;

1053 #i‡
deföed
(
PNG_cHRM_SUPPORTED
Ë&& deföed(
PNG_FIXED_POINT_SUPPORTED
)

1054 
≤g_fixed_poöt
 
öt_x_whôe
 
PNG_DEPSTRUCT
;

1055 
≤g_fixed_poöt
 
öt_y_whôe
 
PNG_DEPSTRUCT
;

1056 
≤g_fixed_poöt
 
öt_x_ªd
 
PNG_DEPSTRUCT
;

1057 
≤g_fixed_poöt
 
öt_y_ªd
 
PNG_DEPSTRUCT
;

1058 
≤g_fixed_poöt
 
öt_x_gªí
 
PNG_DEPSTRUCT
;

1059 
≤g_fixed_poöt
 
öt_y_gªí
 
PNG_DEPSTRUCT
;

1060 
≤g_fixed_poöt
 
öt_x_blue
 
PNG_DEPSTRUCT
;

1061 
≤g_fixed_poöt
 
öt_y_blue
 
PNG_DEPSTRUCT
;

1064 } 
	t≤g_öfo
;

1066 
≤g_öfo
 
	tFAR
 * 
	t≤g_öf›
;

1067 
≤g_öfo
 
	tFAR
 * FAR * 
	t≤g_öf›p
;

1070 
	#PNG_UINT_31_MAX
 ((
≤g_uöt_32
)0x7fffffffL)

	)

1071 
	#PNG_UINT_32_MAX
 ((
≤g_uöt_32
)(-1))

	)

1072 
	#PNG_SIZE_MAX
 ((
≤g_size_t
)(-1))

	)

1073 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

1075 
	#PNG_MAX_UINT
 
PNG_UINT_31_MAX


	)

1080 
	#PNG_COLOR_MASK_PALETTE
 1

	)

1081 
	#PNG_COLOR_MASK_COLOR
 2

	)

1082 
	#PNG_COLOR_MASK_ALPHA
 4

	)

1085 
	#PNG_COLOR_TYPE_GRAY
 0

	)

1086 
	#PNG_COLOR_TYPE_PALETTE
 (
PNG_COLOR_MASK_COLOR
 | 
PNG_COLOR_MASK_PALETTE
)

	)

1087 
	#PNG_COLOR_TYPE_RGB
 (
PNG_COLOR_MASK_COLOR
)

	)

1088 
	#PNG_COLOR_TYPE_RGB_ALPHA
 (
PNG_COLOR_MASK_COLOR
 | 
PNG_COLOR_MASK_ALPHA
)

	)

1089 
	#PNG_COLOR_TYPE_GRAY_ALPHA
 (
PNG_COLOR_MASK_ALPHA
)

	)

1091 
	#PNG_COLOR_TYPE_RGBA
 
PNG_COLOR_TYPE_RGB_ALPHA


	)

1092 
	#PNG_COLOR_TYPE_GA
 
PNG_COLOR_TYPE_GRAY_ALPHA


	)

1095 
	#PNG_COMPRESSION_TYPE_BASE
 0

	)

1096 
	#PNG_COMPRESSION_TYPE_DEFAULT
 
PNG_COMPRESSION_TYPE_BASE


	)

1099 
	#PNG_FILTER_TYPE_BASE
 0

	)

1100 
	#PNG_INTRAPIXEL_DIFFERENCING
 64

	)

1101 
	#PNG_FILTER_TYPE_DEFAULT
 
PNG_FILTER_TYPE_BASE


	)

1104 
	#PNG_INTERLACE_NONE
 0

	)

1105 
	#PNG_INTERLACE_ADAM7
 1

	)

1106 
	#PNG_INTERLACE_LAST
 2

	)

1109 
	#PNG_OFFSET_PIXEL
 0

	)

1110 
	#PNG_OFFSET_MICROMETER
 1

	)

1111 
	#PNG_OFFSET_LAST
 2

	)

1114 
	#PNG_EQUATION_LINEAR
 0

	)

1115 
	#PNG_EQUATION_BASE_E
 1

	)

1116 
	#PNG_EQUATION_ARBITRARY
 2

	)

1117 
	#PNG_EQUATION_HYPERBOLIC
 3

	)

1118 
	#PNG_EQUATION_LAST
 4

	)

1121 
	#PNG_SCALE_UNKNOWN
 0

	)

1122 
	#PNG_SCALE_METER
 1

	)

1123 
	#PNG_SCALE_RADIAN
 2

	)

1124 
	#PNG_SCALE_LAST
 3

	)

1127 
	#PNG_RESOLUTION_UNKNOWN
 0

	)

1128 
	#PNG_RESOLUTION_METER
 1

	)

1129 
	#PNG_RESOLUTION_LAST
 2

	)

1132 
	#PNG_sRGB_INTENT_PERCEPTUAL
 0

	)

1133 
	#PNG_sRGB_INTENT_RELATIVE
 1

	)

1134 
	#PNG_sRGB_INTENT_SATURATION
 2

	)

1135 
	#PNG_sRGB_INTENT_ABSOLUTE
 3

	)

1136 
	#PNG_sRGB_INTENT_LAST
 4

	)

1139 
	#PNG_KEYWORD_MAX_LENGTH
 79

	)

1142 
	#PNG_MAX_PALETTE_LENGTH
 256

	)

1149 
	#PNG_INFO_gAMA
 0x0001

	)

1150 
	#PNG_INFO_sBIT
 0x0002

	)

1151 
	#PNG_INFO_cHRM
 0x0004

	)

1152 
	#PNG_INFO_PLTE
 0x0008

	)

1153 
	#PNG_INFO_tRNS
 0x0010

	)

1154 
	#PNG_INFO_bKGD
 0x0020

	)

1155 
	#PNG_INFO_hIST
 0x0040

	)

1156 
	#PNG_INFO_pHYs
 0x0080

	)

1157 
	#PNG_INFO_oFFs
 0x0100

	)

1158 
	#PNG_INFO_tIME
 0x0200

	)

1159 
	#PNG_INFO_pCAL
 0x0400

	)

1160 
	#PNG_INFO_sRGB
 0x0800

	)

1161 
	#PNG_INFO_iCCP
 0x1000

	)

1162 
	#PNG_INFO_sPLT
 0x2000

	)

1163 
	#PNG_INFO_sCAL
 0x4000

	)

1164 
	#PNG_INFO_IDAT
 0x8000L

	)

1170 
	s≤g_row_öfo_°ru˘


1172 
≤g_uöt_32
 
width
;

1173 
≤g_uöt_32
 
rowbyãs
;

1174 
≤g_byã
 
cﬁ‹_ty≥
;

1175 
≤g_byã
 
bô_dïth
;

1176 
≤g_byã
 
ch™√ls
;

1177 
≤g_byã
 
pixñ_dïth
;

1178 } 
	t≤g_row_öfo
;

1180 
≤g_row_öfo
 
	tFAR
 * 
	t≤g_row_öf›
;

1181 
≤g_row_öfo
 
	tFAR
 * FAR * 
	t≤g_row_öf›p
;

1189 
≤g_°ru˘_def
 
	t≤g_°ru˘
;

1190 
≤g_°ru˘
 
	tFAR
 * 
	t≤g_°ru˘p
;

1192 (
PNGAPI
 *
	t≤g_îr‹_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_c⁄°_ch¨p
));

1193 (
PNGAPI
 *
	t≤g_rw_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_byãp
, 
	t≤g_size_t
));

1194 (
PNGAPI
 *
	t≤g_Êush_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
));

1195 (
PNGAPI
 *
	t≤g_ªad_°©us_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_uöt_32
,

1197 (
PNGAPI
 *
	t≤g_wrôe_°©us_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_uöt_32
,

1200 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


1201 (
PNGAPI
 *
	t≤g_¥ogªssive_öfo_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_öf›
));

1202 (
PNGAPI
 *
	t≤g_¥ogªssive_íd_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_öf›
));

1203 (
PNGAPI
 *
	t≤g_¥ogªssive_row_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_byãp
,

1204 
	t≤g_uöt_32
, ));

1207 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

1208 
deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
) || \

1209 
deföed
(
PNG_LEGACY_SUPPORTED
)

1210 (
PNGAPI
 *
	t≤g_u£r_å™sf‹m_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
,

1211 
	t≤g_row_öf›
, 
	t≤g_byãp
));

1214 #ifde‡
PNG_USER_CHUNKS_SUPPORTED


1215 (
PNGAPI
 *
	t≤g_u£r_chunk_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_unknown_chunkp
));

1217 #ifde‡
PNG_UNKNOWN_CHUNKS_SUPPORTED


1218 (
PNGAPI
 *
	t≤g_unknown_chunk_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
));

1222 
	#PNG_TRANSFORM_IDENTITY
 0x0000

	)

1223 
	#PNG_TRANSFORM_STRIP_16
 0x0001

	)

1224 
	#PNG_TRANSFORM_STRIP_ALPHA
 0x0002

	)

1225 
	#PNG_TRANSFORM_PACKING
 0x0004

	)

1226 
	#PNG_TRANSFORM_PACKSWAP
 0x0008

	)

1227 
	#PNG_TRANSFORM_EXPAND
 0x0010

	)

1228 
	#PNG_TRANSFORM_INVERT_MONO
 0x0020

	)

1229 
	#PNG_TRANSFORM_SHIFT
 0x0040

	)

1230 
	#PNG_TRANSFORM_BGR
 0x0080

	)

1231 
	#PNG_TRANSFORM_SWAP_ALPHA
 0x0100

	)

1232 
	#PNG_TRANSFORM_SWAP_ENDIAN
 0x0200

	)

1233 
	#PNG_TRANSFORM_INVERT_ALPHA
 0x0400

	)

1234 
	#PNG_TRANSFORM_STRIP_FILLER
 0x0800

	)

1236 
	#PNG_TRANSFORM_STRIP_FILLER_BEFORE
 0x0800

	)

1237 
	#PNG_TRANSFORM_STRIP_FILLER_AFTER
 0x1000

	)

1239 
	#PNG_TRANSFORM_GRAY_TO_RGB
 0x2000

	)

1242 
	#PNG_FLAG_MNG_EMPTY_PLTE
 0x01

	)

1243 
	#PNG_FLAG_MNG_FILTER_64
 0x04

	)

1244 
	#PNG_ALL_MNG_FEATURES
 0x05

	)

1246 
≤g_voidp
 (*
	t≤g_mÆloc_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_size_t
));

1247 (*
≤g_‰ì_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_voidp
));

1256 
	s≤g_°ru˘_def


1258 #ifde‡
PNG_SETJMP_SUPPORTED


1259 
jmp_buf
 
jmpbuf
;

1261 
≤g_îr‹_±r
 
îr‹_‚
 
PNG_DEPSTRUCT
;

1262 
≤g_îr‹_±r
 
w¨nög_‚
 
PNG_DEPSTRUCT
;

1263 
≤g_voidp
 
îr‹_±r
 
PNG_DEPSTRUCT
;

1264 
≤g_rw_±r
 
wrôe_d©a_‚
 
PNG_DEPSTRUCT
;

1265 
≤g_rw_±r
 
ªad_d©a_‚
 
PNG_DEPSTRUCT
;

1266 
≤g_voidp
 
io_±r
 
PNG_DEPSTRUCT
;

1268 #ifde‡
PNG_READ_USER_TRANSFORM_SUPPORTED


1269 
≤g_u£r_å™sf‹m_±r
 
ªad_u£r_å™sf‹m_‚
 
PNG_DEPSTRUCT
;

1272 #ifde‡
PNG_WRITE_USER_TRANSFORM_SUPPORTED


1273 
≤g_u£r_å™sf‹m_±r
 
wrôe_u£r_å™sf‹m_‚
 
PNG_DEPSTRUCT
;

1277 #ifde‡
PNG_USER_TRANSFORM_PTR_SUPPORTED


1278 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

1279 
deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
)

1280 
≤g_voidp
 
u£r_å™sf‹m_±r
 
PNG_DEPSTRUCT
;

1281 
≤g_byã
 
u£r_å™sf‹m_dïth
 
PNG_DEPSTRUCT
;

1282 
≤g_byã
 
u£r_å™sf‹m_ch™√ls
 
PNG_DEPSTRUCT
;

1286 
≤g_uöt_32
 
mode
 
PNG_DEPSTRUCT
;

1287 
≤g_uöt_32
 
Êags
 
PNG_DEPSTRUCT
;

1288 
≤g_uöt_32
 
å™sf‹m©i⁄s
 
PNG_DEPSTRUCT
;

1290 
z_°ªam
 
z°ªam
 
PNG_DEPSTRUCT
;

1291 
≤g_byãp
 
zbuf
 
PNG_DEPSTRUCT
;

1292 
≤g_size_t
 
zbuf_size
 
PNG_DEPSTRUCT
;

1293 
zlib_Àvñ
 
PNG_DEPSTRUCT
;

1294 
zlib_mëhod
 
PNG_DEPSTRUCT
;

1295 
zlib_wödow_bôs
 
PNG_DEPSTRUCT
;

1296 
zlib_mem_Àvñ
 
PNG_DEPSTRUCT
;

1297 
zlib_°øãgy
 
PNG_DEPSTRUCT
;

1299 
≤g_uöt_32
 
width
 
PNG_DEPSTRUCT
;

1300 
≤g_uöt_32
 
height
 
PNG_DEPSTRUCT
;

1301 
≤g_uöt_32
 
num_rows
 
PNG_DEPSTRUCT
;

1302 
≤g_uöt_32
 
u§_width
 
PNG_DEPSTRUCT
;

1303 
≤g_uöt_32
 
rowbyãs
 
PNG_DEPSTRUCT
;

1305 
≤g_size_t
 
úowbyãs
 
PNG_DEPSTRUCT
;

1308 #ifde‡
PNG_USER_LIMITS_SUPPORTED


1312 
≤g_uöt_32
 
u£r_chunk_ˇche_max
 
PNG_DEPSTRUCT
;

1314 
≤g_uöt_32
 
iwidth
 
PNG_DEPSTRUCT
;

1315 
≤g_uöt_32
 
row_numbî
 
PNG_DEPSTRUCT
;

1316 
≤g_byãp
 
¥ev_row
 
PNG_DEPSTRUCT
;

1317 
≤g_byãp
 
row_buf
 
PNG_DEPSTRUCT
;

1318 #i‚de‡
PNG_NO_WRITE_FILTER


1319 
≤g_byãp
 
sub_row
 
PNG_DEPSTRUCT
;

1320 
≤g_byãp
 
up_row
 
PNG_DEPSTRUCT
;

1321 
≤g_byãp
 
avg_row
 
PNG_DEPSTRUCT
;

1322 
≤g_byãp
 
∑ëh_row
 
PNG_DEPSTRUCT
;

1324 
≤g_row_öfo
 
row_öfo
 
PNG_DEPSTRUCT
;

1326 
≤g_uöt_32
 
id©_size
 
PNG_DEPSTRUCT
;

1327 
≤g_uöt_32
 
¸c
 
PNG_DEPSTRUCT
;

1328 
≤g_cﬁ‹p
 
∑Àâe
 
PNG_DEPSTRUCT
;

1329 
≤g_uöt_16
 
num_∑Àâe
 
PNG_DEPSTRUCT
;

1330 
≤g_uöt_16
 
num_å™s
 
PNG_DEPSTRUCT
;

1331 
≤g_byã
 
chunk_«me
[5] 
PNG_DEPSTRUCT
;

1332 
≤g_byã
 
com¥essi⁄
 
PNG_DEPSTRUCT
;

1333 
≤g_byã
 
fûãr
 
PNG_DEPSTRUCT
;

1334 
≤g_byã
 
öãæa˚d
 
PNG_DEPSTRUCT
;

1335 
≤g_byã
 
∑ss
 
PNG_DEPSTRUCT
;

1336 
≤g_byã
 
do_fûãr
 
PNG_DEPSTRUCT
;

1337 
≤g_byã
 
cﬁ‹_ty≥
 
PNG_DEPSTRUCT
;

1338 
≤g_byã
 
bô_dïth
 
PNG_DEPSTRUCT
;

1339 
≤g_byã
 
u§_bô_dïth
 
PNG_DEPSTRUCT
;

1340 
≤g_byã
 
pixñ_dïth
 
PNG_DEPSTRUCT
;

1341 
≤g_byã
 
ch™√ls
 
PNG_DEPSTRUCT
;

1342 
≤g_byã
 
u§_ch™√ls
 
PNG_DEPSTRUCT
;

1343 
≤g_byã
 
sig_byãs
 
PNG_DEPSTRUCT
;

1345 #i‡
deföed
(
PNG_READ_FILLER_SUPPORTED
Ë|| deföed(
PNG_WRITE_FILLER_SUPPORTED
)

1346 #ifde‡
PNG_LEGACY_SUPPORTED


1347 
≤g_byã
 
fûÀr
 
PNG_DEPSTRUCT
;

1349 
≤g_uöt_16
 
fûÀr
 
PNG_DEPSTRUCT
;

1353 #ifde‡
PNG_bKGD_SUPPORTED


1354 
≤g_byã
 
background_gamma_ty≥
 
PNG_DEPSTRUCT
;

1355 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1356 
background_gamma
 
PNG_DEPSTRUCT
;

1358 
≤g_cﬁ‹_16
 
background
 
PNG_DEPSTRUCT
;

1359 #ifde‡
PNG_READ_GAMMA_SUPPORTED


1360 
≤g_cﬁ‹_16
 
background_1
 
PNG_DEPSTRUCT
;

1364 #ifde‡
PNG_WRITE_FLUSH_SUPPORTED


1365 
≤g_Êush_±r
 
ouçut_Êush_‚
 
PNG_DEPSTRUCT
;

1366 
≤g_uöt_32
 
Êush_di°
 
PNG_DEPSTRUCT
;

1367 
≤g_uöt_32
 
Êush_rows
 
PNG_DEPSTRUCT
;

1370 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

1371 
gamma_shi·
 
PNG_DEPSTRUCT
;

1372 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1373 
gamma
 
PNG_DEPSTRUCT
;

1374 
s¸ìn_gamma
 
PNG_DEPSTRUCT
;

1378 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

1379 
≤g_byãp
 
gamma_èbÀ
 
PNG_DEPSTRUCT
;

1380 
≤g_byãp
 
gamma_‰om_1
 
PNG_DEPSTRUCT
;

1381 
≤g_byãp
 
gamma_to_1
 
PNG_DEPSTRUCT
;

1382 
≤g_uöt_16µ
 
gamma_16_èbÀ
 
PNG_DEPSTRUCT
;

1383 
≤g_uöt_16µ
 
gamma_16_‰om_1
 
PNG_DEPSTRUCT
;

1384 
≤g_uöt_16µ
 
gamma_16_to_1
 
PNG_DEPSTRUCT
;

1387 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
Ë|| deföed(
PNG_sBIT_SUPPORTED
)

1388 
≤g_cﬁ‹_8
 
sig_bô
 
PNG_DEPSTRUCT
;

1391 #i‡
deföed
(
PNG_READ_SHIFT_SUPPORTED
Ë|| deföed(
PNG_WRITE_SHIFT_SUPPORTED
)

1392 
≤g_cﬁ‹_8
 
shi·
 
PNG_DEPSTRUCT
;

1395 #i‡
deföed
(
PNG_tRNS_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
) \

1396 || 
deföed
(
PNG_READ_EXPAND_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

1397 
≤g_byãp
 
å™s
 
PNG_DEPSTRUCT
;

1398 
≤g_cﬁ‹_16
 
å™s_vÆues
 
PNG_DEPSTRUCT
;

1401 
≤g_ªad_°©us_±r
 
ªad_row_‚
 
PNG_DEPSTRUCT
;

1402 
≤g_wrôe_°©us_±r
 
wrôe_row_‚
 
PNG_DEPSTRUCT
;

1403 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


1404 
≤g_¥ogªssive_öfo_±r
 
öfo_‚
 
PNG_DEPSTRUCT
;

1405 
≤g_¥ogªssive_row_±r
 
row_‚
 
PNG_DEPSTRUCT
;

1406 
≤g_¥ogªssive_íd_±r
 
íd_‚
 
PNG_DEPSTRUCT
;

1407 
≤g_byãp
 
ßve_buf„r_±r
 
PNG_DEPSTRUCT
;

1408 
≤g_byãp
 
ßve_buf„r
 
PNG_DEPSTRUCT
;

1409 
≤g_byãp
 
cuºít_buf„r_±r
 
PNG_DEPSTRUCT
;

1410 
≤g_byãp
 
cuºít_buf„r
 
PNG_DEPSTRUCT
;

1411 
≤g_uöt_32
 
push_Àngth
 
PNG_DEPSTRUCT
;

1412 
≤g_uöt_32
 
skù_Àngth
 
PNG_DEPSTRUCT
;

1413 
≤g_size_t
 
ßve_buf„r_size
 
PNG_DEPSTRUCT
;

1414 
≤g_size_t
 
ßve_buf„r_max
 
PNG_DEPSTRUCT
;

1415 
≤g_size_t
 
buf„r_size
 
PNG_DEPSTRUCT
;

1416 
≤g_size_t
 
cuºít_buf„r_size
 
PNG_DEPSTRUCT
;

1417 
¥o˚ss_mode
 
PNG_DEPSTRUCT
;

1418 
cur_∑Àâe
 
PNG_DEPSTRUCT
;

1420 #ifde‡
PNG_TEXT_SUPPORTED


1421 
≤g_size_t
 
cuºít_ãxt_size
 
PNG_DEPSTRUCT
;

1422 
≤g_size_t
 
cuºít_ãxt_À·
 
PNG_DEPSTRUCT
;

1423 
≤g_ch¨p
 
cuºít_ãxt
 
PNG_DEPSTRUCT
;

1424 
≤g_ch¨p
 
cuºít_ãxt_±r
 
PNG_DEPSTRUCT
;

1428 #i‡
deföed
(
__TURBOC__
Ë&& !deföed(
_Wödows
Ë&& !deföed(
__FLAT__
)

1430 
≤g_byãµ
 
off£t_èbÀ_±r
 
PNG_DEPSTRUCT
;

1431 
≤g_byãp
 
off£t_èbÀ
 
PNG_DEPSTRUCT
;

1432 
≤g_uöt_16
 
off£t_èbÀ_numbî
 
PNG_DEPSTRUCT
;

1433 
≤g_uöt_16
 
off£t_èbÀ_cou¡
 
PNG_DEPSTRUCT
;

1434 
≤g_uöt_16
 
off£t_èbÀ_cou¡_‰ì
 
PNG_DEPSTRUCT
;

1437 #ifde‡
PNG_READ_DITHER_SUPPORTED


1438 
≤g_byãp
 
∑Àâe_lookup
 
PNG_DEPSTRUCT
;

1439 
≤g_byãp
 
dôhî_ödex
 
PNG_DEPSTRUCT
;

1442 #i‡
deföed
(
PNG_READ_DITHER_SUPPORTED
Ë|| deföed(
PNG_hIST_SUPPORTED
)

1443 
≤g_uöt_16p
 
hi°
 
PNG_DEPSTRUCT
;

1446 #ifde‡
PNG_WRITE_WEIGHTED_FILTER_SUPPORTED


1447 
≤g_byã
 
heuri°ic_mëhod
 
PNG_DEPSTRUCT
;

1448 
≤g_byã
 
num_¥ev_fûãrs
 
PNG_DEPSTRUCT
;

1449 
≤g_byãp
 
¥ev_fûãrs
 
PNG_DEPSTRUCT
;

1450 
≤g_uöt_16p
 
fûãr_weights
 
PNG_DEPSTRUCT
;

1451 
≤g_uöt_16p
 
öv_fûãr_weights
 
PNG_DEPSTRUCT
;

1452 
≤g_uöt_16p
 
fûãr_co°s
 
PNG_DEPSTRUCT
;

1453 
≤g_uöt_16p
 
öv_fûãr_co°s
 
PNG_DEPSTRUCT
;

1456 #ifde‡
PNG_TIME_RFC1123_SUPPORTED


1457 
≤g_ch¨p
 
time_buf„r
 
PNG_DEPSTRUCT
;

1462 #ifde‡
PNG_FREE_ME_SUPPORTED


1463 
≤g_uöt_32
 
‰ì_me
 
PNG_DEPSTRUCT
;

1466 #ifde‡
PNG_USER_CHUNKS_SUPPORTED


1467 
≤g_voidp
 
u£r_chunk_±r
 
PNG_DEPSTRUCT
;

1468 
≤g_u£r_chunk_±r
 
ªad_u£r_chunk_‚
 
PNG_DEPSTRUCT
;

1471 #ifde‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


1472 
num_chunk_li°
 
PNG_DEPSTRUCT
;

1473 
≤g_byãp
 
chunk_li°
 
PNG_DEPSTRUCT
;

1477 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


1478 
≤g_byã
 
rgb_to_gøy_°©us
 
PNG_DEPSTRUCT
;

1480 
≤g_uöt_16
 
rgb_to_gøy_ªd_c€ff
 
PNG_DEPSTRUCT
;

1481 
≤g_uöt_16
 
rgb_to_gøy_gªí_c€ff
 
PNG_DEPSTRUCT
;

1482 
≤g_uöt_16
 
rgb_to_gøy_blue_c€ff
 
PNG_DEPSTRUCT
;

1486 #i‡
deföed
(
PNG_MNG_FEATURES_SUPPORTED
) || \

1487 
deföed
(
PNG_READ_EMPTY_PLTE_SUPPORTED
) || \

1488 
deföed
(
PNG_WRITE_EMPTY_PLTE_SUPPORTED
)

1490 #ifde‡
PNG_1_0_X


1491 
≤g_byã
 
mng_„©uªs_≥rmôãd
 
PNG_DEPSTRUCT
;

1493 
≤g_uöt_32
 
mng_„©uªs_≥rmôãd
 
PNG_DEPSTRUCT
;

1498 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

1499 
≤g_fixed_poöt
 
öt_gamma
 
PNG_DEPSTRUCT
;

1503 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


1504 
≤g_byã
 
fûãr_ty≥
 
PNG_DEPSTRUCT
;

1507 #ifde‡
PNG_1_0_X


1509 
≤g_uöt_32
 
row_buf_size
 
PNG_DEPSTRUCT
;

1513 #ifde‡
PNG_ASSEMBLER_CODE_SUPPORTED


1514 #i‚de‡
PNG_1_0_X


1515 #ifde‡
PNG_MMX_CODE_SUPPORTED


1516 
≤g_byã
 
mmx_bôdïth_thªshﬁd
 
PNG_DEPSTRUCT
;

1517 
≤g_uöt_32
 
mmx_rowbyãs_thªshﬁd
 
PNG_DEPSTRUCT
;

1519 
≤g_uöt_32
 
asm_Êags
 
PNG_DEPSTRUCT
;

1524 #ifde‡
PNG_USER_MEM_SUPPORTED


1525 
≤g_voidp
 
mem_±r
 
PNG_DEPSTRUCT
;

1526 
≤g_mÆloc_±r
 
mÆloc_‚
 
PNG_DEPSTRUCT
;

1527 
≤g_‰ì_±r
 
‰ì_‚
 
PNG_DEPSTRUCT
;

1531 
≤g_byãp
 
big_row_buf
 
PNG_DEPSTRUCT
;

1533 #ifde‡
PNG_READ_DITHER_SUPPORTED


1535 
≤g_byãp
 
dôhî_s‹t
 
PNG_DEPSTRUCT
;

1536 
≤g_byãp
 
ödex_to_∑Àâe
 
PNG_DEPSTRUCT
;

1538 
≤g_byãp
 
∑Àâe_to_ödex
 
PNG_DEPSTRUCT
;

1543 
≤g_byã
 
com¥essi⁄_ty≥
 
PNG_DEPSTRUCT
;

1545 #ifde‡
PNG_USER_LIMITS_SUPPORTED


1546 
≤g_uöt_32
 
u£r_width_max
 
PNG_DEPSTRUCT
;

1547 
≤g_uöt_32
 
u£r_height_max
 
PNG_DEPSTRUCT
;

1551 #ifde‡
PNG_UNKNOWN_CHUNKS_SUPPORTED


1553 
≤g_unknown_chunk
 
unknown_chunk
 
PNG_DEPSTRUCT
;

1557 
≤g_uöt_32
 
ﬁd_big_row_buf_size
 
PNG_DEPSTRUCT
;

1558 
≤g_uöt_32
 
ﬁd_¥ev_row_size
 
PNG_DEPSTRUCT
;

1561 
≤g_ch¨p
 
chunkd©a
 
PNG_DEPSTRUCT
;

1570 
≤g_°ru˘p
 
	tvîsi⁄_1_2_49
;

1572 
≤g_°ru˘
 
	tFAR
 * FAR * 
	t≤g_°ru˘µ
;

1581 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_ac˚ss_vîsi⁄_numbî
Ë
PNGARG
(());

1586 
PNG_EXPORT
(,
≤g_£t_sig_byãs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1587 
num_byãs
));

1594 
PNG_EXPORT
(,
≤g_sig_cmp
Ë
PNGARG
((
≤g_byãp
 
sig
, 
≤g_size_t
 
°¨t
,

1595 
≤g_size_t
 
num_to_check
));

1600 
PNG_EXPORT
(,
≤g_check_sig
Ë
PNGARG
((
≤g_byãp
 
sig
, 
num
)Ë
PNG_DEPRECATED
;

1603 
PNG_EXPORT
(
≤g_°ru˘p
,
≤g_¸óã_ªad_°ru˘
)

1604 
PNGARG
((
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

1605 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
)Ë
PNG_ALLOCATED
;

1608 
PNG_EXPORT
(
≤g_°ru˘p
,
≤g_¸óã_wrôe_°ru˘
)

1609 
PNGARG
((
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

1610 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
)Ë
PNG_ALLOCATED
;

1612 #ifde‡
PNG_WRITE_SUPPORTED


1613 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_com¥essi⁄_buf„r_size
)

1614 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1617 #ifde‡
PNG_WRITE_SUPPORTED


1618 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_buf„r_size
)

1619 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_32
 
size
));

1623 
PNG_EXPORT
(,
≤g_ª£t_z°ªam
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1626 #ifde‡
PNG_USER_MEM_SUPPORTED


1627 
PNG_EXPORT
(
≤g_°ru˘p
,
≤g_¸óã_ªad_°ru˘_2
)

1628 
PNGARG
((
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

1629 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
, 
≤g_voidp
 
mem_±r
,

1630 
≤g_mÆloc_±r
 
mÆloc_‚
, 
≤g_‰ì_±r
 
‰ì_‚
)Ë
PNG_ALLOCATED
;

1631 
PNG_EXPORT
(
≤g_°ru˘p
,
≤g_¸óã_wrôe_°ru˘_2
)

1632 
PNGARG
((
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

1633 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
, 
≤g_voidp
 
mem_±r
,

1634 
≤g_mÆloc_±r
 
mÆloc_‚
, 
≤g_‰ì_±r
 
‰ì_‚
)Ë
PNG_ALLOCATED
;

1638 
PNG_EXPORT
(,
≤g_wrôe_chunk
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1639 
≤g_byãp
 
chunk_«me
,Öng_byã∞
d©a
, 
≤g_size_t
 
Àngth
));

1642 
PNG_EXPORT
(,
≤g_wrôe_chunk_°¨t
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1643 
≤g_byãp
 
chunk_«me
, 
≤g_uöt_32
 
Àngth
));

1646 
PNG_EXPORT
(,
≤g_wrôe_chunk_d©a
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1647 
≤g_byãp
 
d©a
, 
≤g_size_t
 
Àngth
));

1650 
PNG_EXPORT
(,
≤g_wrôe_chunk_íd
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1653 
PNG_EXPORT
(
≤g_öf›
,
≤g_¸óã_öfo_°ru˘
)

1654 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
PNG_ALLOCATED
;

1656 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

1658 
PNG_EXPORT
(,
≤g_öfo_öô
Ë
PNGARG
((
≤g_öf›
 
öfo_±r
))

1659 
PNG_DEPRECATED
;

1660 #unde‡
≤g_öfo_öô


1661 
	#≤g_öfo_öô
(
öfo_±r
Ë
	`≤g_öfo_öô_3
(&info_ptr,\

1662 
	`≤g_sizeof
(
≤g_öfo
));

	)

1665 
PNG_EXPORT
(,
≤g_öfo_öô_3
Ë
PNGARG
((
≤g_öf›p
 
öfo_±r
,

1666 
≤g_size_t
 
≤g_öfo_°ru˘_size
));

1669 
PNG_EXPORT
(,
≤g_wrôe_öfo_bef‹e_PLTE
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1670 
≤g_öf›
 
öfo_±r
));

1671 
PNG_EXPORT
(,
≤g_wrôe_öfo
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1672 
≤g_öf›
 
öfo_±r
));

1674 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


1676 
PNG_EXPORT
(,
≤g_ªad_öfo
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1677 
≤g_öf›
 
öfo_±r
));

1680 #ifde‡
PNG_TIME_RFC1123_SUPPORTED


1681 
PNG_EXPORT
(
≤g_ch¨p
,
≤g_c⁄vît_to_rfc1123
)

1682 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_timï
 
±ime
));

1685 #ifde‡
PNG_CONVERT_tIME_SUPPORTED


1687 
PNG_EXPORT
(,
≤g_c⁄vît_‰om_°ru˘_tm
Ë
PNGARG
((
≤g_timï
 
±ime
,

1688 
tm
 
FAR
 * 
âime
));

1691 
PNG_EXPORT
(,
≤g_c⁄vît_‰om_time_t
Ë
PNGARG
((
≤g_timï
 
±ime
,

1692 
time_t
 
âime
));

1695 #ifde‡
PNG_READ_EXPAND_SUPPORTED


1697 
PNG_EXPORT
(,
≤g_£t_ex∑nd
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1698 #i‚de‡
PNG_1_0_X


1699 
PNG_EXPORT
(,
≤g_£t_ex∑nd_gøy_1_2_4_to_8
Ë
PNGARG
((
≤g_°ru˘p


1700 
≤g_±r
));

1702 
PNG_EXPORT
(,
≤g_£t_∑Àâe_to_rgb
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1703 
PNG_EXPORT
(,
≤g_£t_tRNS_to_Æpha
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1704 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

1706 
PNG_EXPORT
(,
≤g_£t_gøy_1_2_4_to_8
Ë
PNGARG
((
≤g_°ru˘p


1707 
≤g_±r
)Ë
PNG_DEPRECATED
;

1711 #i‡
deföed
(
PNG_READ_BGR_SUPPORTED
Ë|| deföed(
PNG_WRITE_BGR_SUPPORTED
)

1713 
PNG_EXPORT
(,
≤g_£t_bgr
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1716 #ifde‡
PNG_READ_GRAY_TO_RGB_SUPPORTED


1718 
PNG_EXPORT
(,
≤g_£t_gøy_to_rgb
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1721 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


1723 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1724 
PNG_EXPORT
(,
≤g_£t_rgb_to_gøy
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1725 
îr‹_a˘i⁄
, 
ªd
, 
gªí
 ));

1727 
PNG_EXPORT
(,
≤g_£t_rgb_to_gøy_fixed
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1728 
îr‹_a˘i⁄
, 
≤g_fixed_poöt
 
ªd
,Öng_fixed_poöà
gªí
 ));

1729 
PNG_EXPORT
(
≤g_byã
,
≤g_gë_rgb_to_gøy_°©us
Ë
PNGARG
((
≤g_°ru˘p


1730 
≤g_±r
));

1733 
PNG_EXPORT
(,
≤g_buûd_gøysˇÀ_∑Àâe
Ë
PNGARG
((
bô_dïth
,

1734 
≤g_cﬁ‹p
 
∑Àâe
));

1736 #ifde‡
PNG_READ_STRIP_ALPHA_SUPPORTED


1737 
PNG_EXPORT
(,
≤g_£t_°rù_Æpha
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1740 #i‡
deföed
(
PNG_READ_SWAP_ALPHA_SUPPORTED
) || \

1741 
deföed
(
PNG_WRITE_SWAP_ALPHA_SUPPORTED
)

1742 
PNG_EXPORT
(,
≤g_£t_sw≠_Æpha
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1745 #i‡
deföed
(
PNG_READ_INVERT_ALPHA_SUPPORTED
) || \

1746 
deföed
(
PNG_WRITE_INVERT_ALPHA_SUPPORTED
)

1747 
PNG_EXPORT
(,
≤g_£t_övît_Æpha
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1750 #i‡
deföed
(
PNG_READ_FILLER_SUPPORTED
Ë|| deföed(
PNG_WRITE_FILLER_SUPPORTED
)

1752 
PNG_EXPORT
(,
≤g_£t_fûÀr
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1753 
≤g_uöt_32
 
fûÀr
, 
Êags
));

1755 
	#PNG_FILLER_BEFORE
 0

	)

1756 
	#PNG_FILLER_AFTER
 1

	)

1758 #i‚de‡
PNG_1_0_X


1759 
PNG_EXPORT
(,
≤g_£t_add_Æpha
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1760 
≤g_uöt_32
 
fûÀr
, 
Êags
));

1764 #i‡
deföed
(
PNG_READ_SWAP_SUPPORTED
Ë|| deföed(
PNG_WRITE_SWAP_SUPPORTED
)

1766 
PNG_EXPORT
(,
≤g_£t_sw≠
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1769 #i‡
deföed
(
PNG_READ_PACK_SUPPORTED
Ë|| deföed(
PNG_WRITE_PACK_SUPPORTED
)

1771 
PNG_EXPORT
(,
≤g_£t_∑ckög
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1774 #i‡
deföed
(
PNG_READ_PACKSWAP_SUPPORTED
Ë|| deföed(
PNG_WRITE_PACKSWAP_SUPPORTED
)

1776 
PNG_EXPORT
(,
≤g_£t_∑cksw≠
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1779 #i‡
deföed
(
PNG_READ_SHIFT_SUPPORTED
Ë|| deföed(
PNG_WRITE_SHIFT_SUPPORTED
)

1781 
PNG_EXPORT
(,
≤g_£t_shi·
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1782 
≤g_cﬁ‹_8p
 
åue_bôs
));

1785 #i‡
deföed
(
PNG_READ_INTERLACING_SUPPORTED
) || \

1786 
deföed
(
PNG_WRITE_INTERLACING_SUPPORTED
)

1788 
PNG_EXPORT
(,
≤g_£t_öãæa˚_h™dlög
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1791 #i‡
deföed
(
PNG_READ_INVERT_SUPPORTED
Ë|| deföed(
PNG_WRITE_INVERT_SUPPORTED
)

1793 
PNG_EXPORT
(,
≤g_£t_övît_m⁄o
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1796 #ifde‡
PNG_READ_BACKGROUND_SUPPORTED


1798 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1799 
PNG_EXPORT
(,
≤g_£t_background
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1800 
≤g_cﬁ‹_16p
 
background_cﬁ‹
, 
background_gamma_code
,

1801 
√ed_ex∑nd
, 
background_gamma
));

1803 
	#PNG_BACKGROUND_GAMMA_UNKNOWN
 0

	)

1804 
	#PNG_BACKGROUND_GAMMA_SCREEN
 1

	)

1805 
	#PNG_BACKGROUND_GAMMA_FILE
 2

	)

1806 
	#PNG_BACKGROUND_GAMMA_UNIQUE
 3

	)

1809 #ifde‡
PNG_READ_16_TO_8_SUPPORTED


1811 
PNG_EXPORT
(,
≤g_£t_°rù_16
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1814 #ifde‡
PNG_READ_DITHER_SUPPORTED


1816 
PNG_EXPORT
(,
≤g_£t_dôhî
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1817 
≤g_cﬁ‹p
 
∑Àâe
, 
num_∑Àâe
, 
maximum_cﬁ‹s
,

1818 
≤g_uöt_16p
 
hi°ogøm
, 
fuŒ_dôhî
));

1821 #ifde‡
PNG_READ_GAMMA_SUPPORTED


1823 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1824 
PNG_EXPORT
(,
≤g_£t_gamma
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1825 
s¸ìn_gamma
, 
deÁu…_fûe_gamma
));

1829 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

1830 #i‡
deföed
(
PNG_READ_EMPTY_PLTE_SUPPORTED
) || \

1831 
deföed
(
PNG_WRITE_EMPTY_PLTE_SUPPORTED
)

1834 
PNG_EXPORT
(,
≤g_≥rmô_em±y_∂ã
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1835 
em±y_∂ã_≥rmôãd
)Ë
PNG_DEPRECATED
;

1839 #ifde‡
PNG_WRITE_FLUSH_SUPPORTED


1841 
PNG_EXPORT
(,
≤g_£t_Êush
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
ƒows
));

1843 
PNG_EXPORT
(,
≤g_wrôe_Êush
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1847 
PNG_EXPORT
(,
≤g_°¨t_ªad_image
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1850 
PNG_EXPORT
(,
≤g_ªad_upd©e_öfo
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1851 
≤g_öf›
 
öfo_±r
));

1853 #i‚de‡
PNG_NO_SEQUENTIAL_READ_SUPPORTED


1855 
PNG_EXPORT
(,
≤g_ªad_rows
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1856 
≤g_byãµ
 
row
,Öng_byãµ 
di•œy_row
, 
≤g_uöt_32
 
num_rows
));

1859 #i‚de‡
PNG_NO_SEQUENTIAL_READ_SUPPORTED


1861 
PNG_EXPORT
(,
≤g_ªad_row
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1862 
≤g_byãp
 
row
,

1863 
≤g_byãp
 
di•œy_row
));

1866 #i‚de‡
PNG_NO_SEQUENTIAL_READ_SUPPORTED


1868 
PNG_EXPORT
(,
≤g_ªad_image
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1869 
≤g_byãµ
 
image
));

1873 
PNG_EXPORT
(,
≤g_wrôe_row
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1874 
≤g_byãp
 
row
));

1877 
PNG_EXPORT
(,
≤g_wrôe_rows
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1878 
≤g_byãµ
 
row
, 
≤g_uöt_32
 
num_rows
));

1881 
PNG_EXPORT
(,
≤g_wrôe_image
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1882 
≤g_byãµ
 
image
));

1885 
PNG_EXPORT
(,
≤g_wrôe_íd
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1886 
≤g_öf›
 
öfo_±r
));

1888 #i‚de‡
PNG_NO_SEQUENTIAL_READ_SUPPORTED


1890 
PNG_EXPORT
(,
≤g_ªad_íd
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1891 
≤g_öf›
 
öfo_±r
));

1895 
PNG_EXPORT
(,
≤g_de°roy_öfo_°ru˘
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1896 
≤g_öf›p
 
öfo_±r_±r
));

1899 
PNG_EXPORT
(,
≤g_de°roy_ªad_°ru˘
Ë
PNGARG
((
≤g_°ru˘µ


1900 
≤g_±r_±r
, 
≤g_öf›p
 
öfo_±r_±r
,Öng_öf›∞
íd_öfo_±r_±r
));

1904 
PNG_EXPORT
(,
≤g_ªad_de°roy
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

1905 
≤g_öf›
 
íd_öfo_±r
));

1908 
PNG_EXPORT
(,
≤g_de°roy_wrôe_°ru˘
)

1909 
PNGARG
((
≤g_°ru˘µ
 
≤g_±r_±r
, 
≤g_öf›p
 
öfo_±r_±r
));

1913 
PNG_EXPORT
(,
≤g_wrôe_de°roy
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1916 
PNG_EXPORT
(,
≤g_£t_¸c_a˘i⁄
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1917 
¸ô_a˘i⁄
, 
™cû_a˘i⁄
));

1928 
	#PNG_CRC_DEFAULT
 0

	)

1929 
	#PNG_CRC_ERROR_QUIT
 1

	)

1930 
	#PNG_CRC_WARN_DISCARD
 2

	)

1931 
	#PNG_CRC_WARN_USE
 3

	)

1932 
	#PNG_CRC_QUIET_USE
 4

	)

1933 
	#PNG_CRC_NO_CHANGE
 5

	)

1946 
PNG_EXPORT
(,
≤g_£t_fûãr
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
mëhod
,

1947 
fûãrs
));

1954 
	#PNG_NO_FILTERS
 0x00

	)

1955 
	#PNG_FILTER_NONE
 0x08

	)

1956 
	#PNG_FILTER_SUB
 0x10

	)

1957 
	#PNG_FILTER_UP
 0x20

	)

1958 
	#PNG_FILTER_AVG
 0x40

	)

1959 
	#PNG_FILTER_PAETH
 0x80

	)

1960 
	#PNG_ALL_FILTERS
 (
PNG_FILTER_NONE
 | 
PNG_FILTER_SUB
 | 
PNG_FILTER_UP
 | \

1961 
PNG_FILTER_AVG
 | 
PNG_FILTER_PAETH
)

	)

1966 
	#PNG_FILTER_VALUE_NONE
 0

	)

1967 
	#PNG_FILTER_VALUE_SUB
 1

	)

1968 
	#PNG_FILTER_VALUE_UP
 2

	)

1969 
	#PNG_FILTER_VALUE_AVG
 3

	)

1970 
	#PNG_FILTER_VALUE_PAETH
 4

	)

1971 
	#PNG_FILTER_VALUE_LAST
 5

	)

1973 #i‡
deföed
(
PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
)

2002 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2003 
PNG_EXPORT
(,
≤g_£t_fûãr_heuri°ics
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2004 
heuri°ic_mëhod
, 
num_weights
, 
≤g_doubÀp
 
fûãr_weights
,

2005 
≤g_doubÀp
 
fûãr_co°s
));

2012 
	#PNG_FILTER_HEURISTIC_DEFAULT
 0

	)

2013 
	#PNG_FILTER_HEURISTIC_UNWEIGHTED
 1

	)

2014 
	#PNG_FILTER_HEURISTIC_WEIGHTED
 2

	)

2015 
	#PNG_FILTER_HEURISTIC_LAST
 3

	)

2024 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_Àvñ
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2025 
Àvñ
));

2027 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_mem_Àvñ
)

2028 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
mem_Àvñ
));

2030 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_°øãgy
)

2031 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
°øãgy
));

2033 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_wödow_bôs
)

2034 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
wödow_bôs
));

2036 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_mëhod
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2037 
mëhod
));

2048 #ifde‡
PNG_STDIO_SUPPORTED


2050 
PNG_EXPORT
(,
≤g_öô_io
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_FILE_p
 
Â
));

2061 
PNG_EXPORT
(,
≤g_£t_îr‹_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2062 
≤g_voidp
 
îr‹_±r
, 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨nög_‚
));

2065 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_îr‹_±r
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2077 
PNG_EXPORT
(,
≤g_£t_wrôe_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2078 
≤g_voidp
 
io_±r
, 
≤g_rw_±r
 
wrôe_d©a_‚
, 
≤g_Êush_±r
 
ouçut_Êush_‚
));

2081 
PNG_EXPORT
(,
≤g_£t_ªad_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2082 
≤g_voidp
 
io_±r
, 
≤g_rw_±r
 
ªad_d©a_‚
));

2085 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_io_±r
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2087 
PNG_EXPORT
(,
≤g_£t_ªad_°©us_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2088 
≤g_ªad_°©us_±r
 
ªad_row_‚
));

2090 
PNG_EXPORT
(,
≤g_£t_wrôe_°©us_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2091 
≤g_wrôe_°©us_±r
 
wrôe_row_‚
));

2093 #ifde‡
PNG_USER_MEM_SUPPORTED


2095 
PNG_EXPORT
(,
≤g_£t_mem_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2096 
≤g_voidp
 
mem_±r
, 
≤g_mÆloc_±r
 
mÆloc_‚
, 
≤g_‰ì_±r
 
‰ì_‚
));

2098 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_mem_±r
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2101 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

2102 
deföed
(
PNG_LEGACY_SUPPORTED
)

2103 
PNG_EXPORT
(,
≤g_£t_ªad_u£r_å™sf‹m_‚
Ë
PNGARG
((
≤g_°ru˘p


2104 
≤g_±r
, 
≤g_u£r_å™sf‹m_±r
 
ªad_u£r_å™sf‹m_‚
));

2107 #i‡
deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
) || \

2108 
deföed
(
PNG_LEGACY_SUPPORTED
)

2109 
PNG_EXPORT
(,
≤g_£t_wrôe_u£r_å™sf‹m_‚
Ë
PNGARG
((
≤g_°ru˘p


2110 
≤g_±r
, 
≤g_u£r_å™sf‹m_±r
 
wrôe_u£r_å™sf‹m_‚
));

2113 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

2114 
deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
) || \

2115 
deföed
(
PNG_LEGACY_SUPPORTED
)

2116 
PNG_EXPORT
(,
≤g_£t_u£r_å™sf‹m_öfo
Ë
PNGARG
((
≤g_°ru˘p


2117 
≤g_±r
, 
≤g_voidp
 
u£r_å™sf‹m_±r
, 
u£r_å™sf‹m_dïth
,

2118 
u£r_å™sf‹m_ch™√ls
));

2120 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_u£r_å™sf‹m_±r
)

2121 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2124 #ifde‡
PNG_USER_CHUNKS_SUPPORTED


2125 
PNG_EXPORT
(,
≤g_£t_ªad_u£r_chunk_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2126 
≤g_voidp
 
u£r_chunk_±r
, 
≤g_u£r_chunk_±r
 
ªad_u£r_chunk_‚
));

2127 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_u£r_chunk_±r
Ë
PNGARG
((
≤g_°ru˘p


2128 
≤g_±r
));

2131 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


2135 
PNG_EXPORT
(,
≤g_£t_¥ogªssive_ªad_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2136 
≤g_voidp
 
¥ogªssive_±r
,

2137 
≤g_¥ogªssive_öfo_±r
 
öfo_‚
, 
≤g_¥ogªssive_row_±r
 
row_‚
,

2138 
≤g_¥ogªssive_íd_±r
 
íd_‚
));

2141 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_¥ogªssive_±r
)

2142 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2145 
PNG_EXPORT
(,
≤g_¥o˚ss_d©a
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2146 
≤g_öf›
 
öfo_±r
, 
≤g_byãp
 
buf„r
, 
≤g_size_t
 
buf„r_size
));

2151 
PNG_EXPORT
(,
≤g_¥ogªssive_comböe_row
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2152 
≤g_byãp
 
ﬁd_row
,Öng_byã∞
√w_row
));

2155 
PNG_EXPORT
(
≤g_voidp
,
≤g_mÆloc
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2156 
≤g_uöt_32
 
size
)Ë
PNG_ALLOCATED
;

2158 #ifde‡
PNG_1_0_X


2159 
	#≤g_mÆloc_w¨n
 
≤g_mÆloc


	)

2162 
PNG_EXPORT
(
≤g_voidp
,
≤g_mÆloc_w¨n
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2163 
≤g_uöt_32
 
size
)Ë
PNG_ALLOCATED
;

2167 
PNG_EXPORT
(,
≤g_‰ì
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_voidp
 
±r
));

2169 #ifde‡
PNG_1_0_X


2171 
PNG_EXPORT
(
voidpf
,
≤g_zÆloc
Ë
PNGARG
((voidp‡
≤g_±r
, 
uI¡
 
ôems
,

2172 
uI¡
 
size
));

2175 
PNG_EXPORT
(,
≤g_z‰ì
Ë
PNGARG
((
voidpf
 
≤g_±r
, voidp‡
±r
));

2179 
PNG_EXPORT
(,
≤g_‰ì_d©a
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2180 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
‰ì_me
, 
num
));

2181 #ifde‡
PNG_FREE_ME_SUPPORTED


2185 
PNG_EXPORT
(,
≤g_d©a_‰ìr
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2186 
≤g_öf›
 
öfo_±r
, 
‰ìr
, 
≤g_uöt_32
 
mask
));

2189 
	#PNG_DESTROY_WILL_FREE_DATA
 1

	)

2190 
	#PNG_SET_WILL_FREE_DATA
 1

	)

2191 
	#PNG_USER_WILL_FREE_DATA
 2

	)

2193 
	#PNG_FREE_HIST
 0x0008

	)

2194 
	#PNG_FREE_ICCP
 0x0010

	)

2195 
	#PNG_FREE_SPLT
 0x0020

	)

2196 
	#PNG_FREE_ROWS
 0x0040

	)

2197 
	#PNG_FREE_PCAL
 0x0080

	)

2198 
	#PNG_FREE_SCAL
 0x0100

	)

2199 
	#PNG_FREE_UNKN
 0x0200

	)

2200 
	#PNG_FREE_LIST
 0x0400

	)

2201 
	#PNG_FREE_PLTE
 0x1000

	)

2202 
	#PNG_FREE_TRNS
 0x2000

	)

2203 
	#PNG_FREE_TEXT
 0x4000

	)

2204 
	#PNG_FREE_ALL
 0x7fff

	)

2205 
	#PNG_FREE_MUL
 0x4220

	)

2207 #ifde‡
PNG_USER_MEM_SUPPORTED


2208 
PNG_EXPORT
(
≤g_voidp
,
≤g_mÆloc_deÁu…
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2209 
≤g_uöt_32
 
size
)Ë
PNG_ALLOCATED
;

2210 
PNG_EXPORT
(,
≤g_‰ì_deÁu…
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2211 
≤g_voidp
 
±r
));

2214 
PNG_EXPORT
(
≤g_voidp
,
≤g_mem˝y_check
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2215 
≤g_voidp
 
s1
,Öng_void∞
s2
, 
≤g_uöt_32
 
size
)Ë
PNG_DEPRECATED
;

2217 
PNG_EXPORT
(
≤g_voidp
,
≤g_mem£t_check
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2218 
≤g_voidp
 
s1
, 
vÆue
, 
≤g_uöt_32
 
size
)Ë
PNG_DEPRECATED
;

2220 #i‡
deföed
(
USE_FAR_KEYWORD
)

2221 *
≤g_Ár_to_√¨
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,
≤g_voidp
 
±r
,

2222 
check
));

2225 #i‚de‡
PNG_NO_ERROR_TEXT


2227 
PNG_EXPORT
(,
≤g_îr‹
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2228 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
)Ë
PNG_NORETURN
;

2231 
PNG_EXPORT
(,
≤g_chunk_îr‹
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2232 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
)Ë
PNG_NORETURN
;

2235 
PNG_EXPORT
(,
≤g_îr
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
PNG_NORETURN
;

2238 #i‚de‡
PNG_NO_WARNINGS


2240 
PNG_EXPORT
(,
≤g_w¨nög
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2241 
≤g_c⁄°_ch¨p
 
w¨nög_mesßge
));

2243 #ifde‡
PNG_READ_SUPPORTED


2245 
PNG_EXPORT
(,
≤g_chunk_w¨nög
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2246 
≤g_c⁄°_ch¨p
 
w¨nög_mesßge
));

2263 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_vÆid
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2264 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Êag
));

2267 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_rowbyãs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2268 
≤g_öf›
 
öfo_±r
));

2270 #ifde‡
PNG_INFO_IMAGE_SUPPORTED


2274 
PNG_EXPORT
(
≤g_byãµ
,
≤g_gë_rows
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2275 
≤g_öf›
 
öfo_±r
));

2279 
PNG_EXPORT
(,
≤g_£t_rows
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2280 
≤g_öf›
 
öfo_±r
, 
≤g_byãµ
 
row_poöãrs
));

2284 
PNG_EXPORT
(
≤g_byã
,
≤g_gë_ch™√ls
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2285 
≤g_öf›
 
öfo_±r
));

2287 #ifde‡
PNG_EASY_ACCESS_SUPPORTED


2289 
PNG_EXPORT
(
≤g_uöt_32
, 
≤g_gë_image_width
Ë
PNGARG
((
≤g_°ru˘p


2290 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2293 
PNG_EXPORT
(
≤g_uöt_32
, 
≤g_gë_image_height
Ë
PNGARG
((
≤g_°ru˘p


2294 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2297 
PNG_EXPORT
(
≤g_byã
, 
≤g_gë_bô_dïth
Ë
PNGARG
((
≤g_°ru˘p


2298 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2301 
PNG_EXPORT
(
≤g_byã
, 
≤g_gë_cﬁ‹_ty≥
Ë
PNGARG
((
≤g_°ru˘p


2302 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2305 
PNG_EXPORT
(
≤g_byã
, 
≤g_gë_fûãr_ty≥
Ë
PNGARG
((
≤g_°ru˘p


2306 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2309 
PNG_EXPORT
(
≤g_byã
, 
≤g_gë_öãæa˚_ty≥
Ë
PNGARG
((
≤g_°ru˘p


2310 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2313 
PNG_EXPORT
(
≤g_byã
, 
≤g_gë_com¥essi⁄_ty≥
Ë
PNGARG
((
≤g_°ru˘p


2314 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2317 
PNG_EXPORT
(
≤g_uöt_32
, 
≤g_gë_pixñs_≥r_mëî
Ë
PNGARG
((
≤g_°ru˘p


2318 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2319 
PNG_EXPORT
(
≤g_uöt_32
, 
≤g_gë_x_pixñs_≥r_mëî
Ë
PNGARG
((
≤g_°ru˘p


2320 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2321 
PNG_EXPORT
(
≤g_uöt_32
, 
≤g_gë_y_pixñs_≥r_mëî
Ë
PNGARG
((
≤g_°ru˘p


2322 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2325 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2326 
PNG_EXPORT
(, 
≤g_gë_pixñ_a•e˘_øtio
Ë
PNGARG
((
≤g_°ru˘p


2327 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2331 
PNG_EXPORT
(
≤g_öt_32
, 
≤g_gë_x_off£t_pixñs
Ë
PNGARG
((
≤g_°ru˘p


2332 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2333 
PNG_EXPORT
(
≤g_öt_32
, 
≤g_gë_y_off£t_pixñs
Ë
PNGARG
((
≤g_°ru˘p


2334 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2335 
PNG_EXPORT
(
≤g_öt_32
, 
≤g_gë_x_off£t_mi¸⁄s
Ë
PNGARG
((
≤g_°ru˘p


2336 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2337 
PNG_EXPORT
(
≤g_öt_32
, 
≤g_gë_y_off£t_mi¸⁄s
Ë
PNGARG
((
≤g_°ru˘p


2338 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2343 
PNG_EXPORT
(
≤g_byãp
,
≤g_gë_sig«tuª
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2344 
≤g_öf›
 
öfo_±r
));

2346 #ifde‡
PNG_bKGD_SUPPORTED


2347 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_bKGD
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2348 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹_16p
 *
background
));

2351 #ifde‡
PNG_bKGD_SUPPORTED


2352 
PNG_EXPORT
(,
≤g_£t_bKGD
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2353 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹_16p
 
background
));

2356 #ifde‡
PNG_cHRM_SUPPORTED


2357 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2358 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_cHRM
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2359 
≤g_öf›
 
öfo_±r
, *
whôe_x
, *
whôe_y
, *
ªd_x
,

2360 *
ªd_y
, *
gªí_x
, *
gªí_y
, *
blue_x
,

2361 *
blue_y
));

2363 #ifde‡
PNG_FIXED_POINT_SUPPORTED


2364 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_cHRM_fixed
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2365 
≤g_öf›
 
öfo_±r
, 
≤g_fixed_poöt
 *
öt_whôe_x
,Öng_fixed_point

2366 *
öt_whôe_y
, 
≤g_fixed_poöt
 *
öt_ªd_x
,Öng_fixed_poöà*
öt_ªd_y
,

2367 
≤g_fixed_poöt
 *
öt_gªí_x
,Öng_fixed_poöà*
öt_gªí_y
,Öng_fixed_point

2368 *
öt_blue_x
, 
≤g_fixed_poöt
 *
öt_blue_y
));

2372 #ifde‡
PNG_cHRM_SUPPORTED


2373 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2374 
PNG_EXPORT
(,
≤g_£t_cHRM
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2375 
≤g_öf›
 
öfo_±r
, 
whôe_x
, 
whôe_y
, 
ªd_x
,

2376 
ªd_y
, 
gªí_x
, 
gªí_y
, 
blue_x
, 
blue_y
));

2378 #ifde‡
PNG_FIXED_POINT_SUPPORTED


2379 
PNG_EXPORT
(,
≤g_£t_cHRM_fixed
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2380 
≤g_öf›
 
öfo_±r
, 
≤g_fixed_poöt
 
öt_whôe_x
,Öng_fixed_poöà
öt_whôe_y
,

2381 
≤g_fixed_poöt
 
öt_ªd_x
,Öng_fixed_poöà
öt_ªd_y
,Öng_fixed_point

2382 
öt_gªí_x
, 
≤g_fixed_poöt
 
öt_gªí_y
,Öng_fixed_poöà
öt_blue_x
,

2383 
≤g_fixed_poöt
 
öt_blue_y
));

2387 #ifde‡
PNG_gAMA_SUPPORTED


2388 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2389 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_gAMA
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2390 
≤g_öf›
 
öfo_±r
, *
fûe_gamma
));

2392 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_gAMA_fixed
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2393 
≤g_öf›
 
öfo_±r
, 
≤g_fixed_poöt
 *
öt_fûe_gamma
));

2396 #ifde‡
PNG_gAMA_SUPPORTED


2397 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2398 
PNG_EXPORT
(,
≤g_£t_gAMA
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2399 
≤g_öf›
 
öfo_±r
, 
fûe_gamma
));

2401 
PNG_EXPORT
(,
≤g_£t_gAMA_fixed
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2402 
≤g_öf›
 
öfo_±r
, 
≤g_fixed_poöt
 
öt_fûe_gamma
));

2405 #ifde‡
PNG_hIST_SUPPORTED


2406 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_hIST
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2407 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_16p
 *
hi°
));

2410 #ifde‡
PNG_hIST_SUPPORTED


2411 
PNG_EXPORT
(,
≤g_£t_hIST
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2412 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_16p
 
hi°
));

2415 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_IHDR
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2416 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 *
width
,Öng_uöt_32 *
height
,

2417 *
bô_dïth
, *
cﬁ‹_ty≥
, *
öãæa˚_mëhod
,

2418 *
com¥essi⁄_mëhod
, *
fûãr_mëhod
));

2420 
PNG_EXPORT
(,
≤g_£t_IHDR
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2421 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
width
,Öng_uöt_32 
height
, 
bô_dïth
,

2422 
cﬁ‹_ty≥
, 
öãæa˚_mëhod
, 
com¥essi⁄_mëhod
,

2423 
fûãr_mëhod
));

2425 #ifde‡
PNG_oFFs_SUPPORTED


2426 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_oFFs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2427 
≤g_öf›
 
öfo_±r
, 
≤g_öt_32
 *
off£t_x
,Öng_öt_32 *
off£t_y
,

2428 *
unô_ty≥
));

2431 #ifde‡
PNG_oFFs_SUPPORTED


2432 
PNG_EXPORT
(,
≤g_£t_oFFs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2433 
≤g_öf›
 
öfo_±r
, 
≤g_öt_32
 
off£t_x
,Öng_öt_32 
off£t_y
,

2434 
unô_ty≥
));

2437 #ifde‡
PNG_pCAL_SUPPORTED


2438 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_pCAL
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2439 
≤g_öf›
 
öfo_±r
, 
≤g_ch¨p
 *
puΩo£
, 
≤g_öt_32
 *
X0
,Öng_öt_32 *
X1
,

2440 *
ty≥
, *
≈¨ams
, 
≤g_ch¨p
 *
unôs
, 
≤g_ch¨µ
 *
∑øms
));

2443 #ifde‡
PNG_pCAL_SUPPORTED


2444 
PNG_EXPORT
(,
≤g_£t_pCAL
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2445 
≤g_öf›
 
öfo_±r
, 
≤g_ch¨p
 
puΩo£
, 
≤g_öt_32
 
X0
,Öng_öt_32 
X1
,

2446 
ty≥
, 
≈¨ams
, 
≤g_ch¨p
 
unôs
, 
≤g_ch¨µ
 
∑øms
));

2449 #ifde‡
PNG_pHYs_SUPPORTED


2450 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_pHYs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2451 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 *
ªs_x
,Öng_uöt_32 *
ªs_y
, *
unô_ty≥
));

2454 #ifde‡
PNG_pHYs_SUPPORTED


2455 
PNG_EXPORT
(,
≤g_£t_pHYs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2456 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
ªs_x
,Öng_uöt_32 
ªs_y
, 
unô_ty≥
));

2459 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_PLTE
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2460 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹p
 *
∑Àâe
, *
num_∑Àâe
));

2462 
PNG_EXPORT
(,
≤g_£t_PLTE
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2463 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹p
 
∑Àâe
, 
num_∑Àâe
));

2465 #ifde‡
PNG_sBIT_SUPPORTED


2466 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_sBIT
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2467 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹_8p
 *
sig_bô
));

2470 #ifde‡
PNG_sBIT_SUPPORTED


2471 
PNG_EXPORT
(,
≤g_£t_sBIT
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2472 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹_8p
 
sig_bô
));

2475 #ifde‡
PNG_sRGB_SUPPORTED


2476 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_sRGB
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2477 
≤g_öf›
 
öfo_±r
, *
öã¡
));

2480 #ifde‡
PNG_sRGB_SUPPORTED


2481 
PNG_EXPORT
(,
≤g_£t_sRGB
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2482 
≤g_öf›
 
öfo_±r
, 
öã¡
));

2483 
PNG_EXPORT
(,
≤g_£t_sRGB_gAMA_™d_cHRM
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2484 
≤g_öf›
 
öfo_±r
, 
öã¡
));

2487 #ifde‡
PNG_iCCP_SUPPORTED


2488 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_iCCP
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2489 
≤g_öf›
 
öfo_±r
, 
≤g_ch¨µ
 
«me
, *
com¥essi⁄_ty≥
,

2490 
≤g_ch¨µ
 
¥ofûe
, 
≤g_uöt_32
 *
¥oÊí
));

2494 #ifde‡
PNG_iCCP_SUPPORTED


2495 
PNG_EXPORT
(,
≤g_£t_iCCP
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2496 
≤g_öf›
 
öfo_±r
, 
≤g_ch¨p
 
«me
, 
com¥essi⁄_ty≥
,

2497 
≤g_ch¨p
 
¥ofûe
, 
≤g_uöt_32
 
¥oÊí
));

2501 #ifde‡
PNG_sPLT_SUPPORTED


2502 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_sPLT
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2503 
≤g_öf›
 
öfo_±r
, 
≤g_sPLT_çp
 
íåõs
));

2506 #ifde‡
PNG_sPLT_SUPPORTED


2507 
PNG_EXPORT
(,
≤g_£t_sPLT
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2508 
≤g_öf›
 
öfo_±r
, 
≤g_sPLT_ç
 
íåõs
, 
√¡rõs
));

2511 #ifde‡
PNG_TEXT_SUPPORTED


2513 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_ãxt
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2514 
≤g_öf›
 
öfo_±r
, 
≤g_ãxç
 *
ãxt_±r
, *
num_ãxt
));

2525 #ifde‡
PNG_TEXT_SUPPORTED


2526 
PNG_EXPORT
(,
≤g_£t_ãxt
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2527 
≤g_öf›
 
öfo_±r
, 
≤g_ãxç
 
ãxt_±r
, 
num_ãxt
));

2530 #ifde‡
PNG_tIME_SUPPORTED


2531 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_tIME
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2532 
≤g_öf›
 
öfo_±r
, 
≤g_timï
 *
mod_time
));

2535 #ifde‡
PNG_tIME_SUPPORTED


2536 
PNG_EXPORT
(,
≤g_£t_tIME
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2537 
≤g_öf›
 
öfo_±r
, 
≤g_timï
 
mod_time
));

2540 #ifde‡
PNG_tRNS_SUPPORTED


2541 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_tRNS
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2542 
≤g_öf›
 
öfo_±r
, 
≤g_byãp
 *
å™s
, *
num_å™s
,

2543 
≤g_cﬁ‹_16p
 *
å™s_vÆues
));

2546 #ifde‡
PNG_tRNS_SUPPORTED


2547 
PNG_EXPORT
(,
≤g_£t_tRNS
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2548 
≤g_öf›
 
öfo_±r
, 
≤g_byãp
 
å™s
, 
num_å™s
,

2549 
≤g_cﬁ‹_16p
 
å™s_vÆues
));

2552 #ifde‡
PNG_tRNS_SUPPORTED


2555 #ifde‡
PNG_sCAL_SUPPORTED


2556 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2557 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_sCAL
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2558 
≤g_öf›
 
öfo_±r
, *
unô
, *
width
, *
height
));

2560 #ifde‡
PNG_FIXED_POINT_SUPPORTED


2561 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_sCAL_s
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2562 
≤g_öf›
 
öfo_±r
, *
unô
, 
≤g_ch¨µ
 
swidth
,Öng_ch¨µ 
sheight
));

2567 #ifde‡
PNG_sCAL_SUPPORTED


2568 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2569 
PNG_EXPORT
(,
≤g_£t_sCAL
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2570 
≤g_öf›
 
öfo_±r
, 
unô
, 
width
, 
height
));

2572 #ifde‡
PNG_FIXED_POINT_SUPPORTED


2573 
PNG_EXPORT
(,
≤g_£t_sCAL_s
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2574 
≤g_öf›
 
öfo_±r
, 
unô
, 
≤g_ch¨p
 
swidth
,Öng_ch¨∞
sheight
));

2579 #ifde‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


2589 
PNG_EXPORT
(, 
≤g_£t_kìp_unknown_chunks
Ë
PNGARG
((
≤g_°ru˘p


2590 
≤g_±r
, 
kìp
, 
≤g_byãp
 
chunk_li°
, 
num_chunks
));

2591 
PNG_EXPORT
(,
≤g_h™dÀ_as_unknown
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp


2592 
chunk_«me
));

2594 #ifde‡
PNG_UNKNOWN_CHUNKS_SUPPORTED


2595 
PNG_EXPORT
(, 
≤g_£t_unknown_chunks
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2596 
≤g_öf›
 
öfo_±r
, 
≤g_unknown_chunkp
 
unknowns
, 
num_unknowns
));

2597 
PNG_EXPORT
(, 
≤g_£t_unknown_chunk_loˇti⁄
)

2598 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
, 
chunk
, 
loˇti⁄
));

2599 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_unknown_chunks
Ë
PNGARG
((
≤g_°ru˘p


2600 
≤g_±r
, 
≤g_öf›
 
öfo_±r
, 
≤g_unknown_chunkµ
 
íåõs
));

2607 
PNG_EXPORT
(, 
≤g_£t_övÆid
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2608 
≤g_öf›
 
öfo_±r
, 
mask
));

2610 #ifde‡
PNG_INFO_IMAGE_SUPPORTED


2612 
PNG_EXPORT
(, 
≤g_ªad_≤g
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2613 
≤g_öf›
 
öfo_±r
,

2614 
å™sf‹ms
,

2615 
≤g_voidp
 
∑øms
));

2616 
PNG_EXPORT
(, 
≤g_wrôe_≤g
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2617 
≤g_öf›
 
öfo_±r
,

2618 
å™sf‹ms
,

2619 
≤g_voidp
 
∑øms
));

2627 #ifde‡
PNG_DEBUG


2628 #i‡(
PNG_DEBUG
 > 0)

2629 #i‡!
deföed
(
PNG_DEBUG_FILE
Ë&& deföed(
_MSC_VER
)

2630 
	~<¸tdbg.h
>

2631 #i‡(
PNG_DEBUG
 > 1)

2632 #i‚de‡
_DEBUG


2633 
	#_DEBUG


	)

2635 #i‚de‡
≤g_debug


2636 
	#≤g_debug
(
l
,
m
Ë
	`_RPT0
(
_CRT_WARN
,m 
PNG_STRING_NEWLINE
)

	)

2638 #i‚de‡
≤g_debug1


2639 
	#≤g_debug1
(
l
,
m
,
p1
Ë
	`_RPT1
(
_CRT_WARN
,m 
PNG_STRING_NEWLINE
,p1)

	)

2641 #i‚de‡
≤g_debug2


2642 
	#≤g_debug2
(
l
,
m
,
p1
,
p2
Ë
	`_RPT2
(
_CRT_WARN
,m 
PNG_STRING_NEWLINE
,p1,p2)

	)

2646 #i‚de‡
PNG_DEBUG_FILE


2647 
	#PNG_DEBUG_FILE
 
°dîr


	)

2650 #i‡(
PNG_DEBUG
 > 1)

2654 #ifde‡
__STDC__


2655 #i‚de‡
≤g_debug


2656 
	#≤g_debug
(
l
,
m
) \

2658 
num_èbs
=
l
; \

2659 
	`Ârötf
(
PNG_DEBUG_FILE
,"%s"
m
 
PNG_STRING_NEWLINE
,(
num_èbs
==1 ? "\t" : \

2660 (
num_èbs
==2 ? "\t\t":(num_tabs>2 ? "\t\t\t":"")))); \

2661 }

	)

2663 #i‚de‡
≤g_debug1


2664 
	#≤g_debug1
(
l
,
m
,
p1
) \

2666 
num_èbs
=
l
; \

2667 
	`Ârötf
(
PNG_DEBUG_FILE
,"%s"
m
 
PNG_STRING_NEWLINE
,(
num_èbs
==1 ? "\t" : \

2668 (
num_èbs
==2 ? "\t\t":“um_èbs>2 ? "\t\t\t":""))),
p1
); \

2669 }

	)

2671 #i‚de‡
≤g_debug2


2672 
	#≤g_debug2
(
l
,
m
,
p1
,
p2
) \

2674 
num_èbs
=
l
; \

2675 
	`Ârötf
(
PNG_DEBUG_FILE
,"%s"
m
 
PNG_STRING_NEWLINE
,(
num_èbs
==1 ? "\t" : \

2676 (
num_èbs
==2 ? "\t\t":“um_èbs>2 ? "\t\t\t":""))),
p1
,
p2
); \

2677 }

	)

2680 #i‚de‡
≤g_debug


2681 
	#≤g_debug
(
l
,
m
) \

2683 
num_èbs
=
l
; \

2684 
f‹m©
[256]; \

2685 
	`¢¥ötf
(
f‹m©
,256,"%s%s%s",(
num_èbs
==1 ? "\t" : \

2686 (
num_èbs
==2 ? "\t\t":(num_tabs>2 ? "\t\t\t":""))), \

2687 
m
,
PNG_STRING_NEWLINE
); \

2688 
	`Ârötf
(
PNG_DEBUG_FILE
,
f‹m©
); \

2689 }

	)

2691 #i‚de‡
≤g_debug1


2692 
	#≤g_debug1
(
l
,
m
,
p1
) \

2694 
num_èbs
=
l
; \

2695 
f‹m©
[256]; \

2696 
	`¢¥ötf
(
f‹m©
,256,"%s%s%s",(
num_èbs
==1 ? "\t" : \

2697 (
num_èbs
==2 ? "\t\t":(num_tabs>2 ? "\t\t\t":""))), \

2698 
m
,
PNG_STRING_NEWLINE
); \

2699 
	`Ârötf
(
PNG_DEBUG_FILE
,
f‹m©
,
p1
); \

2700 }

	)

2702 #i‚de‡
≤g_debug2


2703 
	#≤g_debug2
(
l
,
m
,
p1
,
p2
) \

2705 
num_èbs
=
l
; \

2706 
f‹m©
[256]; \

2707 
	`¢¥ötf
(
f‹m©
,256,"%s%s%s",(
num_èbs
==1 ? "\t" : \

2708 (
num_èbs
==2 ? "\t\t":(num_tabs>2 ? "\t\t\t":""))), \

2709 
m
,
PNG_STRING_NEWLINE
); \

2710 
	`Ârötf
(
PNG_DEBUG_FILE
,
f‹m©
,
p1
,
p2
); \

2711 }

	)

2719 #i‚de‡
≤g_debug


2720 
	#≤g_debug
(
l
, 
m
)

	)

2722 #i‚de‡
≤g_debug1


2723 
	#≤g_debug1
(
l
, 
m
, 
p1
)

	)

2725 #i‚de‡
≤g_debug2


2726 
	#≤g_debug2
(
l
, 
m
, 
p1
, 
p2
)

	)

2729 
PNG_EXPORT
(
≤g_ch¨p
,
≤g_gë_c›yright
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2730 
PNG_EXPORT
(
≤g_ch¨p
,
≤g_gë_hódî_vî
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2731 
PNG_EXPORT
(
≤g_ch¨p
,
≤g_gë_hódî_vîsi⁄
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2732 
PNG_EXPORT
(
≤g_ch¨p
,
≤g_gë_lib≤g_vî
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2734 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


2735 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_≥rmô_mng_„©uªs
Ë
PNGARG
((
≤g_°ru˘p


2736 
≤g_±r
, 
≤g_uöt_32
 
mng_„©uªs_≥rmôãd
));

2740 
	#PNG_HANDLE_CHUNK_AS_DEFAULT
 0

	)

2741 
	#PNG_HANDLE_CHUNK_NEVER
 1

	)

2742 
	#PNG_HANDLE_CHUNK_IF_SAFE
 2

	)

2743 
	#PNG_HANDLE_CHUNK_ALWAYS
 3

	)

2746 #ifde‡
PNG_ASSEMBLER_CODE_SUPPORTED


2747 #ifde‡
PNG_MMX_CODE_SUPPORTED


2748 
	#PNG_ASM_FLAG_MMX_SUPPORT_COMPILED
 0x01

	)

2749 
	#PNG_ASM_FLAG_MMX_SUPPORT_IN_CPU
 0x02

	)

2750 
	#PNG_ASM_FLAG_MMX_READ_COMBINE_ROW
 0x04

	)

2751 
	#PNG_ASM_FLAG_MMX_READ_INTERLACE
 0x08

	)

2752 
	#PNG_ASM_FLAG_MMX_READ_FILTER_SUB
 0x10

	)

2753 
	#PNG_ASM_FLAG_MMX_READ_FILTER_UP
 0x20

	)

2754 
	#PNG_ASM_FLAG_MMX_READ_FILTER_AVG
 0x40

	)

2755 
	#PNG_ASM_FLAG_MMX_READ_FILTER_PAETH
 0x80

	)

2756 
	#PNG_ASM_FLAGS_INITIALIZED
 0x80000000

	)

2758 
	#PNG_MMX_READ_FLAGS
 ( 
PNG_ASM_FLAG_MMX_READ_COMBINE_ROW
 \

2759 | 
PNG_ASM_FLAG_MMX_READ_INTERLACE
 \

2760 | 
PNG_ASM_FLAG_MMX_READ_FILTER_SUB
 \

2761 | 
PNG_ASM_FLAG_MMX_READ_FILTER_UP
 \

2762 | 
PNG_ASM_FLAG_MMX_READ_FILTER_AVG
 \

2763 | 
PNG_ASM_FLAG_MMX_READ_FILTER_PAETH
 )

	)

2764 
	#PNG_MMX_WRITE_FLAGS
 ( 0 )

	)

2766 
	#PNG_MMX_FLAGS
 ( 
PNG_ASM_FLAG_MMX_SUPPORT_COMPILED
 \

2767 | 
PNG_ASM_FLAG_MMX_SUPPORT_IN_CPU
 \

2768 | 
PNG_MMX_READ_FLAGS
 \

2769 | 
PNG_MMX_WRITE_FLAGS
 )

	)

2771 
	#PNG_SELECT_READ
 1

	)

2772 
	#PNG_SELECT_WRITE
 2

	)

2775 #i‚de‡
PNG_1_0_X


2777 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_mmx_Êagmask
)

2778 
PNGARG
((
Êag_£À˘
, *
compûîID
));

2781 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_asm_Êagmask
)

2782 
PNGARG
((
Êag_£À˘
));

2785 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_asm_Êags
)

2786 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2789 
PNG_EXPORT
(
≤g_byã
,
≤g_gë_mmx_bôdïth_thªshﬁd
)

2790 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2793 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_mmx_rowbyãs_thªshﬁd
)

2794 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2797 
PNG_EXPORT
(,
≤g_£t_asm_Êags
)

2798 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_32
 
asm_Êags
));

2801 
PNG_EXPORT
(,
≤g_£t_mmx_thªshﬁds
)

2802 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byã
 
mmx_bôdïth_thªshﬁd
,

2803 
≤g_uöt_32
 
mmx_rowbyãs_thªshﬁd
));

2807 #i‚de‡
PNG_1_0_X


2809 
PNG_EXPORT
(,
≤g_mmx_suµ‹t
Ë
PNGARG
(());

2816 #ifde‡
PNG_ERROR_NUMBERS_SUPPORTED


2817 
PNG_EXPORT
(,
≤g_£t_°rù_îr‹_numbîs
Ë
PNGARG
((
≤g_°ru˘p


2818 
≤g_±r
, 
≤g_uöt_32
 
°rù_mode
));

2822 #ifde‡
PNG_SET_USER_LIMITS_SUPPORTED


2823 
PNG_EXPORT
(,
≤g_£t_u£r_limôs
Ë
PNGARG
((
≤g_°ru˘p


2824 
≤g_±r
, 
≤g_uöt_32
 
u£r_width_max
,Öng_uöt_32 
u£r_height_max
));

2825 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_u£r_width_max
Ë
PNGARG
((
≤g_°ru˘p


2826 
≤g_±r
));

2827 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_u£r_height_max
Ë
PNGARG
((
≤g_°ru˘p


2828 
≤g_±r
));

2834 #ifde‡
PNG_READ_COMPOSITE_NODIV_SUPPORTED


2849 
	#≤g_composôe
(
composôe
, 
fg
, 
Æpha
, 
bg
) \

2850 { 
≤g_uöt_16
 
ãmp
 = (≤g_uöt_16)(’ng_uöt_16)(
fg
Ë* (≤g_uöt_16)(
Æpha
) \

2851 + (
≤g_uöt_16
)(
bg
)*(png_uint_16)(255 - \

2852 (
≤g_uöt_16
)(
Æpha
)) + (png_uint_16)128); \

2853 (
composôe
Ë(
≤g_byã
)((
ãmp
 + (ãm∞>> 8)Ë>> 8); }

	)

2855 
	#≤g_composôe_16
(
composôe
, 
fg
, 
Æpha
, 
bg
) \

2856 { 
≤g_uöt_32
 
ãmp
 = (≤g_uöt_32)(’ng_uöt_32)(
fg
Ë* (≤g_uöt_32)(
Æpha
) \

2857 + (
≤g_uöt_32
)(
bg
)*(png_uint_32)(65535L - \

2858 (
≤g_uöt_32
)(
Æpha
)) + (png_uint_32)32768L); \

2859 (
composôe
Ë(
≤g_uöt_16
)((
ãmp
 + (ãm∞>> 16)Ë>> 16); }

	)

2863 
	#≤g_composôe
(
composôe
, 
fg
, 
Æpha
, 
bg
) \

2864 (
composôe
Ë(
≤g_byã
)(((
≤g_uöt_16
)(
fg
Ë* (≤g_uöt_16)(
Æpha
) + \

2865 (
≤g_uöt_16
)(
bg
Ë* (≤g_uöt_16)(255 - (≤g_uöt_16)(
Æpha
)) + \

2866 (
≤g_uöt_16
)127Ë/ 255)

	)

2868 
	#≤g_composôe_16
(
composôe
, 
fg
, 
Æpha
, 
bg
) \

2869 (
composôe
Ë(
≤g_uöt_16
)(((
≤g_uöt_32
)(
fg
Ë* (≤g_uöt_32)(
Æpha
) + \

2870 (
≤g_uöt_32
)(
bg
)*’ng_uöt_32)(65535L - (≤g_uöt_32)(
Æpha
)) + \

2871 (
≤g_uöt_32
)32767Ë/ (≤g_uöt_32)65535L)

	)

2883 #ifde‡
PNG_READ_BIG_ENDIAN_SUPPORTED


2884 
	#≤g_gë_uöt_32
(
buf
Ë–*((
≤g_uöt_32p
Ë(buf)))

	)

2885 
	#≤g_gë_uöt_16
(
buf
Ë–*((
≤g_uöt_16p
Ë(buf)))

	)

2886 
	#≤g_gë_öt_32
(
buf
Ë–*((
≤g_öt_32p
Ë(buf)))

	)

2888 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_uöt_32
Ë
PNGARG
((
≤g_byãp
 
buf
));

2889 
PNG_EXPORT
(
≤g_uöt_16
,
≤g_gë_uöt_16
Ë
PNGARG
((
≤g_byãp
 
buf
));

2890 
PNG_EXPORT
(
≤g_öt_32
,
≤g_gë_öt_32
Ë
PNGARG
((
≤g_byãp
 
buf
));

2892 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_uöt_31
)

2893 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
buf
));

2898 
PNG_EXPORT
(,
≤g_ßve_uöt_32
)

2899 
PNGARG
((
≤g_byãp
 
buf
, 
≤g_uöt_32
 
i
));

2900 
PNG_EXPORT
(,
≤g_ßve_öt_32
)

2901 
PNGARG
((
≤g_byãp
 
buf
, 
≤g_öt_32
 
i
));

2907 
PNG_EXPORT
(,
≤g_ßve_uöt_16
)

2908 
PNGARG
((
≤g_byãp
 
buf
, 
i
));

2923 
	#PNG_HAVE_IHDR
 0x01

	)

2924 
	#PNG_HAVE_PLTE
 0x02

	)

2925 
	#PNG_HAVE_IDAT
 0x04

	)

2926 
	#PNG_AFTER_IDAT
 0x08

	)

2927 
	#PNG_HAVE_IEND
 0x10

	)

2929 #ifde‡
PNG_INTERNAL


2934 
	#PNG_HAVE_gAMA
 0x20

	)

2935 
	#PNG_HAVE_cHRM
 0x40

	)

2936 
	#PNG_HAVE_sRGB
 0x80

	)

2937 
	#PNG_HAVE_CHUNK_HEADER
 0x100

	)

2938 
	#PNG_WROTE_tIME
 0x200

	)

2939 
	#PNG_WROTE_INFO_BEFORE_PLTE
 0x400

	)

2940 
	#PNG_BACKGROUND_IS_GRAY
 0x800

	)

2941 
	#PNG_HAVE_PNG_SIGNATURE
 0x1000

	)

2942 
	#PNG_HAVE_CHUNK_AFTER_IDAT
 0x2000

	)

2945 
	#PNG_BGR
 0x0001

	)

2946 
	#PNG_INTERLACE
 0x0002

	)

2947 
	#PNG_PACK
 0x0004

	)

2948 
	#PNG_SHIFT
 0x0008

	)

2949 
	#PNG_SWAP_BYTES
 0x0010

	)

2950 
	#PNG_INVERT_MONO
 0x0020

	)

2951 
	#PNG_DITHER
 0x0040

	)

2952 
	#PNG_BACKGROUND
 0x0080

	)

2953 
	#PNG_BACKGROUND_EXPAND
 0x0100

	)

2955 
	#PNG_16_TO_8
 0x0400

	)

2956 
	#PNG_RGBA
 0x0800

	)

2957 
	#PNG_EXPAND
 0x1000

	)

2958 
	#PNG_GAMMA
 0x2000

	)

2959 
	#PNG_GRAY_TO_RGB
 0x4000

	)

2960 
	#PNG_FILLER
 0x8000L

	)

2961 
	#PNG_PACKSWAP
 0x10000L

	)

2962 
	#PNG_SWAP_ALPHA
 0x20000L

	)

2963 
	#PNG_STRIP_ALPHA
 0x40000L

	)

2964 
	#PNG_INVERT_ALPHA
 0x80000L

	)

2965 
	#PNG_USER_TRANSFORM
 0x100000L

	)

2966 
	#PNG_RGB_TO_GRAY_ERR
 0x200000L

	)

2967 
	#PNG_RGB_TO_GRAY_WARN
 0x400000L

	)

2968 
	#PNG_RGB_TO_GRAY
 0x600000L

	)

2970 
	#PNG_ADD_ALPHA
 0x1000000L

	)

2971 
	#PNG_EXPAND_tRNS
 0x2000000L

	)

2972 
	#PNG_PREMULTIPLY_ALPHA
 0x4000000L

	)

2980 
	#PNG_STRUCT_PNG
 0x0001

	)

2981 
	#PNG_STRUCT_INFO
 0x0002

	)

2984 
	#PNG_WEIGHT_SHIFT
 8

	)

2985 
	#PNG_WEIGHT_FACTOR
 (1<<(
PNG_WEIGHT_SHIFT
))

	)

2986 
	#PNG_COST_SHIFT
 3

	)

2987 
	#PNG_COST_FACTOR
 (1<<(
PNG_COST_SHIFT
))

	)

2990 
	#PNG_FLAG_ZLIB_CUSTOM_STRATEGY
 0x0001

	)

2991 
	#PNG_FLAG_ZLIB_CUSTOM_LEVEL
 0x0002

	)

2992 
	#PNG_FLAG_ZLIB_CUSTOM_MEM_LEVEL
 0x0004

	)

2993 
	#PNG_FLAG_ZLIB_CUSTOM_WINDOW_BITS
 0x0008

	)

2994 
	#PNG_FLAG_ZLIB_CUSTOM_METHOD
 0x0010

	)

2995 
	#PNG_FLAG_ZLIB_FINISHED
 0x0020

	)

2996 
	#PNG_FLAG_ROW_INIT
 0x0040

	)

2997 
	#PNG_FLAG_FILLER_AFTER
 0x0080

	)

2998 
	#PNG_FLAG_CRC_ANCILLARY_USE
 0x0100

	)

2999 
	#PNG_FLAG_CRC_ANCILLARY_NOWARN
 0x0200

	)

3000 
	#PNG_FLAG_CRC_CRITICAL_USE
 0x0400

	)

3001 
	#PNG_FLAG_CRC_CRITICAL_IGNORE
 0x0800

	)

3002 
	#PNG_FLAG_FREE_PLTE
 0x1000

	)

3003 
	#PNG_FLAG_FREE_TRNS
 0x2000

	)

3004 
	#PNG_FLAG_FREE_HIST
 0x4000

	)

3005 
	#PNG_FLAG_KEEP_UNKNOWN_CHUNKS
 0x8000L

	)

3006 
	#PNG_FLAG_KEEP_UNSAFE_CHUNKS
 0x10000L

	)

3007 
	#PNG_FLAG_LIBRARY_MISMATCH
 0x20000L

	)

3008 
	#PNG_FLAG_STRIP_ERROR_NUMBERS
 0x40000L

	)

3009 
	#PNG_FLAG_STRIP_ERROR_TEXT
 0x80000L

	)

3010 
	#PNG_FLAG_MALLOC_NULL_MEM_OK
 0x100000L

	)

3011 
	#PNG_FLAG_ADD_ALPHA
 0x200000L

	)

3012 
	#PNG_FLAG_STRIP_ALPHA
 0x400000L

	)

3022 
	#PNG_FLAG_CRC_ANCILLARY_MASK
 (
PNG_FLAG_CRC_ANCILLARY_USE
 | \

3023 
PNG_FLAG_CRC_ANCILLARY_NOWARN
)

	)

3025 
	#PNG_FLAG_CRC_CRITICAL_MASK
 (
PNG_FLAG_CRC_CRITICAL_USE
 | \

3026 
PNG_FLAG_CRC_CRITICAL_IGNORE
)

	)

3028 
	#PNG_FLAG_CRC_MASK
 (
PNG_FLAG_CRC_ANCILLARY_MASK
 | \

3029 
PNG_FLAG_CRC_CRITICAL_MASK
)

	)

3033 
	#PNG_COLOR_DIST
(
c1
, 
c2
Ë(
	`abs
(()((c1).
ªd
) - ()((c2).red)) + \

3034 
	`abs
(()((
c1
).
gªí
Ë- ()((
c2
).green)) + \

3035 
	`abs
(()((
c1
).
blue
Ë- ()((
c2
).blue)))

	)

3038 
	#PNG_ROWBYTES
(
pixñ_bôs
, 
width
) \

3039 ((
pixñ_bôs
) >= 8 ? \

3040 ((
width
Ë* (((
≤g_uöt_32
)(
pixñ_bôs
)) >> 3)) : \

3041 (–((
width
Ë* ((
≤g_uöt_32
)(
pixñ_bôs
))Ë+ 7Ë>> 3Ë)

	)

3048 
	#PNG_OUT_OF_RANGE
(
vÆue
, 
idól
, 
dñè
) \

3049 –(
vÆue
Ë< (
idól
)-(
dñè
Ë|| (vÆueË> (idól)+(dñèË)

	)

3052 #i‡!
deföed
(
PNG_NO_EXTERN
Ë|| deföed(
PNG_ALWAYS_EXTERN
)

3054 #ifde‡
PNG_USE_GLOBAL_ARRAYS


3055 
PNG_EXPORT_VAR
 (
PNG_CONST
 
≤g_byã
 
FARDATA
Ë
	g≤g_sig
[8];

3064 
	#PNG_IHDR
 
≤g_byã
 
≤g_IHDR
[5] = { 73, 72, 68, 82, '\0'}

	)

3065 
	#PNG_IDAT
 
≤g_byã
 
≤g_IDAT
[5] = { 73, 68, 65, 84, '\0'}

	)

3066 
	#PNG_IEND
 
≤g_byã
 
≤g_IEND
[5] = { 73, 69, 78, 68, '\0'}

	)

3067 
	#PNG_PLTE
 
≤g_byã
 
≤g_PLTE
[5] = { 80, 76, 84, 69, '\0'}

	)

3068 
	#PNG_bKGD
 
≤g_byã
 
≤g_bKGD
[5] = { 98, 75, 71, 68, '\0'}

	)

3069 
	#PNG_cHRM
 
≤g_byã
 
≤g_cHRM
[5] = { 99, 72, 82, 77, '\0'}

	)

3070 
	#PNG_gAMA
 
≤g_byã
 
≤g_gAMA
[5] = {103, 65, 77, 65, '\0'}

	)

3071 
	#PNG_hIST
 
≤g_byã
 
≤g_hIST
[5] = {104, 73, 83, 84, '\0'}

	)

3072 
	#PNG_iCCP
 
≤g_byã
 
≤g_iCCP
[5] = {105, 67, 67, 80, '\0'}

	)

3073 
	#PNG_iTXt
 
≤g_byã
 
≤g_iTXt
[5] = {105, 84, 88, 116, '\0'}

	)

3074 
	#PNG_oFFs
 
≤g_byã
 
≤g_oFFs
[5] = {111, 70, 70, 115, '\0'}

	)

3075 
	#PNG_pCAL
 
≤g_byã
 
≤g_pCAL
[5] = {112, 67, 65, 76, '\0'}

	)

3076 
	#PNG_sCAL
 
≤g_byã
 
≤g_sCAL
[5] = {115, 67, 65, 76, '\0'}

	)

3077 
	#PNG_pHYs
 
≤g_byã
 
≤g_pHYs
[5] = {112, 72, 89, 115, '\0'}

	)

3078 
	#PNG_sBIT
 
≤g_byã
 
≤g_sBIT
[5] = {115, 66, 73, 84, '\0'}

	)

3079 
	#PNG_sPLT
 
≤g_byã
 
≤g_sPLT
[5] = {115, 80, 76, 84, '\0'}

	)

3080 
	#PNG_sRGB
 
≤g_byã
 
≤g_sRGB
[5] = {115, 82, 71, 66, '\0'}

	)

3081 
	#PNG_tEXt
 
≤g_byã
 
≤g_tEXt
[5] = {116, 69, 88, 116, '\0'}

	)

3082 
	#PNG_tIME
 
≤g_byã
 
≤g_tIME
[5] = {116, 73, 77, 69, '\0'}

	)

3083 
	#PNG_tRNS
 
≤g_byã
 
≤g_tRNS
[5] = {116, 82, 78, 83, '\0'}

	)

3084 
	#PNG_zTXt
 
≤g_byã
 
≤g_zTXt
[5] = {122, 84, 88, 116, '\0'}

	)

3086 #ifde‡
PNG_USE_GLOBAL_ARRAYS


3087 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_IHDR
[5];

3088 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_IDAT
[5];

3089 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_IEND
[5];

3090 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_PLTE
[5];

3091 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_bKGD
[5];

3092 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_cHRM
[5];

3093 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_gAMA
[5];

3094 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_hIST
[5];

3095 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_iCCP
[5];

3096 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_iTXt
[5];

3097 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_oFFs
[5];

3098 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_pCAL
[5];

3099 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_sCAL
[5];

3100 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_pHYs
[5];

3101 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_sBIT
[5];

3102 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_sPLT
[5];

3103 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_sRGB
[5];

3104 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_tEXt
[5];

3105 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_tIME
[5];

3106 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_tRNS
[5];

3107 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_zTXt
[5];

3110 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

3114 
PNG_EXPORT
(,
≤g_ªad_öô
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
))

3115 
PNG_DEPRECATED
;

3116 #unde‡
≤g_ªad_öô


3117 
	#≤g_ªad_öô
(
≤g_±r
Ë
	`≤g_ªad_öô_3
(&png_ptr, \

3118 
PNG_LIBPNG_VER_STRING
, 
	`≤g_sizeof
(
≤g_°ru˘
));

	)

3121 
PNG_EXPORT
(,
≤g_ªad_öô_3
Ë
PNGARG
((
≤g_°ru˘µ
 
±r_±r
,

3122 
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_size_t
 
≤g_°ru˘_size
));

3123 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

3124 
PNG_EXPORT
(,
≤g_ªad_öô_2
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3125 
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_size_t
 
≤g_°ru˘_size
,Öng_size_t

3126 
≤g_öfo_size
));

3129 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

3133 
PNG_EXPORT
(,
≤g_wrôe_öô
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
))

3134 
PNG_DEPRECATED
;

3135 #unde‡
≤g_wrôe_öô


3136 
	#≤g_wrôe_öô
(
≤g_±r
Ë
	`≤g_wrôe_öô_3
(&png_ptr, \

3137 
PNG_LIBPNG_VER_STRING
, 
	`≤g_sizeof
(
≤g_°ru˘
));

	)

3140 
PNG_EXPORT
(,
≤g_wrôe_öô_3
Ë
PNGARG
((
≤g_°ru˘µ
 
±r_±r
,

3141 
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_size_t
 
≤g_°ru˘_size
));

3142 
PNG_EXPORT
(,
≤g_wrôe_öô_2
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3143 
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_size_t
 
≤g_°ru˘_size
,Öng_size_t

3144 
≤g_öfo_size
));

3147 
PNG_EXTERN
 
≤g_voidp
 
≤g_¸óã_°ru˘
 
PNGARG
((
ty≥
)Ë
	gPNG_PRIVATE
;

3150 
PNG_EXTERN
 
≤g_de°roy_°ru˘
 
PNGARG
((
≤g_voidp
 
°ru˘_±r
)Ë
	gPNG_PRIVATE
;

3152 
PNG_EXTERN
 
≤g_voidp
 
≤g_¸óã_°ru˘_2
 
PNGARG
((
ty≥
, 
≤g_mÆloc_±r


3153 
mÆloc_‚
, 
≤g_voidp
 
mem_±r
)Ë
	gPNG_PRIVATE
;

3154 
PNG_EXTERN
 
≤g_de°roy_°ru˘_2
 
PNGARG
((
≤g_voidp
 
°ru˘_±r
,

3155 
≤g_‰ì_±r
 
‰ì_‚
, 
≤g_voidp
 
mem_±r
)Ë
	gPNG_PRIVATE
;

3158 
PNG_EXTERN
 
≤g_öfo_de°roy
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3159 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3161 #i‚de‡
PNG_1_0_X


3163 
PNG_EXTERN
 
voidpf
 
≤g_zÆloc
 
PNGARG
((voidp‡
≤g_±r
, 
uI¡
 
ôems
,

3164 
uI¡
 
size
)Ë
	gPNG_PRIVATE
;

3167 
PNG_EXTERN
 
≤g_z‰ì
 
PNGARG
((
voidpf
 
≤g_±r
, voidp‡
±r
)Ë
	gPNG_PRIVATE
;

3169 #ifde‡
PNG_SIZE_T


3171 
PNG_EXTERN
 
≤g_size_t
 
PNGAPI
 
≤g_c⁄vît_size
 
PNGARG
((
size_t
 
size
))

3172 
	gPNG_PRIVATE
;

3179 
PNG_EXTERN
 
PNGAPI
 
≤g_deÁu…_ªad_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3180 
≤g_byãp
 
d©a
, 
≤g_size_t
 
Àngth
)Ë
	gPNG_PRIVATE
;

3182 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


3183 
PNG_EXTERN
 
PNGAPI
 
≤g_push_fûl_buf„r
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3184 
≤g_byãp
 
buf„r
, 
≤g_size_t
 
Àngth
)Ë
	gPNG_PRIVATE
;

3187 
PNG_EXTERN
 
PNGAPI
 
≤g_deÁu…_wrôe_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3188 
≤g_byãp
 
d©a
, 
≤g_size_t
 
Àngth
)Ë
	gPNG_PRIVATE
;

3190 #ifde‡
PNG_WRITE_FLUSH_SUPPORTED


3191 #ifde‡
PNG_STDIO_SUPPORTED


3192 
PNG_EXTERN
 
PNGAPI
 
≤g_deÁu…_Êush
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
))

3193 
	gPNG_PRIVATE
;

3197 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


3198 
PNG_EXTERN
 
≤g_push_fûl_buf„r
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3199 
≤g_byãp
 
buf„r
, 
≤g_size_t
 
Àngth
)Ë
	gPNG_PRIVATE
;

3204 
PNG_EXTERN
 
≤g_ª£t_¸c
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3207 
PNG_EXTERN
 
≤g_wrôe_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
,

3208 
≤g_size_t
 
Àngth
)Ë
	gPNG_PRIVATE
;

3211 
PNG_EXTERN
 
≤g_ªad_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
,

3212 
≤g_size_t
 
Àngth
)Ë
	gPNG_PRIVATE
;

3215 
PNG_EXTERN
 
≤g_¸c_ªad
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
buf
,

3216 
≤g_size_t
 
Àngth
)Ë
	gPNG_PRIVATE
;

3219 #i‡
deföed
(
PNG_zTXt_SUPPORTED
Ë|| deföed(
PNG_iTXt_SUPPORTED
) || \

3220 
deföed
(
PNG_iCCP_SUPPORTED
Ë|| deföed(
PNG_sPLT_SUPPORTED
)

3221 
PNG_EXTERN
 
≤g_decom¥ess_chunk
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3222 
comp_ty≥
, 
≤g_size_t
 
chunkÀngth
,

3223 
≤g_size_t
 
¥efix_Àngth
,Öng_size_à*
d©a_Àngth
)Ë
	gPNG_PRIVATE
;

3227 
PNG_EXTERN
 
≤g_¸c_föish
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_32
 
skù
)

3228 
PNG_PRIVATE
);

3231 
PNG_EXTERN
 
≤g_¸c_îr‹
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3237 
PNG_EXTERN
 
≤g_ˇlcuœã_¸c
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
±r
,

3238 
≤g_size_t
 
Àngth
)Ë
	gPNG_PRIVATE
;

3240 #ifde‡
PNG_WRITE_FLUSH_SUPPORTED


3241 
PNG_EXTERN
 
≤g_Êush
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3245 
PNG_EXTERN
 
≤g_wrôe_sig
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3252 
PNG_EXTERN
 
≤g_wrôe_IHDR
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_32
 
width
,

3253 
≤g_uöt_32
 
height
,

3254 
bô_dïth
, 
cﬁ‹_ty≥
, 
com¥essi⁄_mëhod
, 
fûãr_mëhod
,

3255 
öãæa˚_mëhod
)Ë
	gPNG_PRIVATE
;

3257 
PNG_EXTERN
 
≤g_wrôe_PLTE
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_cﬁ‹p
 
∑Àâe
,

3258 
≤g_uöt_32
 
num_∑l
)Ë
	gPNG_PRIVATE
;

3260 
PNG_EXTERN
 
≤g_wrôe_IDAT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
,

3261 
≤g_size_t
 
Àngth
)Ë
	gPNG_PRIVATE
;

3263 
PNG_EXTERN
 
≤g_wrôe_IEND
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3265 #ifde‡
PNG_WRITE_gAMA_SUPPORTED


3266 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


3267 
PNG_EXTERN
 
≤g_wrôe_gAMA
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
fûe_gamma
))

3268 
	gPNG_PRIVATE
;

3270 #ifde‡
PNG_FIXED_POINT_SUPPORTED


3271 
PNG_EXTERN
 
≤g_wrôe_gAMA_fixed
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3272 
≤g_fixed_poöt
 
fûe_gamma
)Ë
	gPNG_PRIVATE
;

3276 #ifde‡
PNG_WRITE_sBIT_SUPPORTED


3277 
PNG_EXTERN
 
≤g_wrôe_sBIT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_cﬁ‹_8p
 
sbô
,

3278 
cﬁ‹_ty≥
)Ë
	gPNG_PRIVATE
;

3281 #ifde‡
PNG_WRITE_cHRM_SUPPORTED


3282 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


3283 
PNG_EXTERN
 
≤g_wrôe_cHRM
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3284 
whôe_x
, 
whôe_y
,

3285 
ªd_x
, 
ªd_y
, 
gªí_x
, 
gªí_y
,

3286 
blue_x
, 
blue_y
)Ë
	gPNG_PRIVATE
;

3288 #ifde‡
PNG_FIXED_POINT_SUPPORTED


3289 
PNG_EXTERN
 
≤g_wrôe_cHRM_fixed
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3290 
≤g_fixed_poöt
 
öt_whôe_x
,Öng_fixed_poöà
öt_whôe_y
,

3291 
≤g_fixed_poöt
 
öt_ªd_x
,Öng_fixed_poöà
öt_ªd_y
,Öng_fixed_point

3292 
öt_gªí_x
, 
≤g_fixed_poöt
 
öt_gªí_y
,Öng_fixed_poöà
öt_blue_x
,

3293 
≤g_fixed_poöt
 
öt_blue_y
)Ë
	gPNG_PRIVATE
;

3297 #ifde‡
PNG_WRITE_sRGB_SUPPORTED


3298 
PNG_EXTERN
 
≤g_wrôe_sRGB
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3299 
öã¡
)Ë
	gPNG_PRIVATE
;

3302 #ifde‡
PNG_WRITE_iCCP_SUPPORTED


3303 
PNG_EXTERN
 
≤g_wrôe_iCCP
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3304 
≤g_ch¨p
 
«me
, 
com¥essi⁄_ty≥
,

3305 
≤g_ch¨p
 
¥ofûe
, 
¥oÊí
)Ë
	gPNG_PRIVATE
;

3309 #ifde‡
PNG_WRITE_sPLT_SUPPORTED


3310 
PNG_EXTERN
 
≤g_wrôe_sPLT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3311 
≤g_sPLT_ç
 
∑Àâe
)Ë
	gPNG_PRIVATE
;

3314 #ifde‡
PNG_WRITE_tRNS_SUPPORTED


3315 
PNG_EXTERN
 
≤g_wrôe_tRNS
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
å™s
,

3316 
≤g_cﬁ‹_16p
 
vÆues
, 
numbî
, 
cﬁ‹_ty≥
)Ë
	gPNG_PRIVATE
;

3319 #ifde‡
PNG_WRITE_bKGD_SUPPORTED


3320 
PNG_EXTERN
 
≤g_wrôe_bKGD
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3321 
≤g_cﬁ‹_16p
 
vÆues
, 
cﬁ‹_ty≥
)Ë
	gPNG_PRIVATE
;

3324 #ifde‡
PNG_WRITE_hIST_SUPPORTED


3325 
PNG_EXTERN
 
≤g_wrôe_hIST
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_16p
 
hi°
,

3326 
num_hi°
)Ë
	gPNG_PRIVATE
;

3329 #i‡
deföed
(
PNG_WRITE_TEXT_SUPPORTED
Ë|| deföed(
PNG_WRITE_pCAL_SUPPORTED
) || \

3330 
deföed
(
PNG_WRITE_iCCP_SUPPORTED
Ë|| deföed(
PNG_WRITE_sPLT_SUPPORTED
)

3331 
PNG_EXTERN
 
≤g_size_t
 
≤g_check_keyw‹d
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3332 
≤g_ch¨p
 
key
, 
≤g_ch¨µ
 
√w_key
)Ë
	gPNG_PRIVATE
;

3335 #ifde‡
PNG_WRITE_tEXt_SUPPORTED


3336 
PNG_EXTERN
 
≤g_wrôe_tEXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_ch¨p
 
key
,

3337 
≤g_ch¨p
 
ãxt
, 
≤g_size_t
 
ãxt_Àn
)Ë
	gPNG_PRIVATE
;

3340 #ifde‡
PNG_WRITE_zTXt_SUPPORTED


3341 
PNG_EXTERN
 
≤g_wrôe_zTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_ch¨p
 
key
,

3342 
≤g_ch¨p
 
ãxt
, 
≤g_size_t
 
ãxt_Àn
, 
com¥essi⁄
)Ë
	gPNG_PRIVATE
;

3345 #ifde‡
PNG_WRITE_iTXt_SUPPORTED


3346 
PNG_EXTERN
 
≤g_wrôe_iTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3347 
com¥essi⁄
, 
≤g_ch¨p
 
key
,Öng_ch¨∞
œng
,Öng_ch¨∞
œng_key
,

3348 
≤g_ch¨p
 
ãxt
)Ë
	gPNG_PRIVATE
;

3351 #ifde‡
PNG_TEXT_SUPPORTED


3352 
PNG_EXTERN
 
≤g_£t_ãxt_2
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3353 
≤g_öf›
 
öfo_±r
, 
≤g_ãxç
 
ãxt_±r
, 
num_ãxt
)Ë
	gPNG_PRIVATE
;

3356 #ifde‡
PNG_WRITE_oFFs_SUPPORTED


3357 
PNG_EXTERN
 
≤g_wrôe_oFFs
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3358 
≤g_öt_32
 
x_off£t
,Öng_öt_32 
y_off£t
, 
unô_ty≥
)Ë
	gPNG_PRIVATE
;

3361 #ifde‡
PNG_WRITE_pCAL_SUPPORTED


3362 
PNG_EXTERN
 
≤g_wrôe_pCAL
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_ch¨p
 
puΩo£
,

3363 
≤g_öt_32
 
X0
,Öng_öt_32 
X1
, 
ty≥
, 
≈¨ams
,

3364 
≤g_ch¨p
 
unôs
, 
≤g_ch¨µ
 
∑øms
)Ë
	gPNG_PRIVATE
;

3367 #ifde‡
PNG_WRITE_pHYs_SUPPORTED


3368 
PNG_EXTERN
 
≤g_wrôe_pHYs
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3369 
≤g_uöt_32
 
x_pixñs_≥r_unô
,Öng_uöt_32 
y_pixñs_≥r_unô
,

3370 
unô_ty≥
)Ë
	gPNG_PRIVATE
;

3373 #ifde‡
PNG_WRITE_tIME_SUPPORTED


3374 
PNG_EXTERN
 
≤g_wrôe_tIME
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3375 
≤g_timï
 
mod_time
)Ë
	gPNG_PRIVATE
;

3378 #ifde‡
PNG_WRITE_sCAL_SUPPORTED


3379 #i‡
deföed
(
PNG_FLOATING_POINT_SUPPORTED
Ë&& !deföed(
PNG_NO_STDIO
)

3380 
PNG_EXTERN
 
≤g_wrôe_sCAL
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3381 
unô
, 
width
, 
height
)Ë
	gPNG_PRIVATE
;

3383 #ifde‡
PNG_FIXED_POINT_SUPPORTED


3384 
PNG_EXTERN
 
≤g_wrôe_sCAL_s
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3385 
unô
, 
≤g_ch¨p
 
width
,Öng_ch¨∞
height
)Ë
	gPNG_PRIVATE
;

3391 
PNG_EXTERN
 
≤g_wrôe_föish_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3394 
PNG_EXTERN
 
≤g_wrôe_°¨t_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3396 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3397 
PNG_EXTERN
 
≤g_buûd_gamma_èbÀ
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3401 
PNG_EXTERN
 
≤g_comböe_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
row
,

3402 
mask
)Ë
	gPNG_PRIVATE
;

3404 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


3410 
PNG_EXTERN
 
≤g_do_ªad_öãæa˚
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3415 #ifde‡
PNG_WRITE_INTERLACING_SUPPORTED


3417 
PNG_EXTERN
 
≤g_do_wrôe_öãæa˚
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3418 
≤g_byãp
 
row
, 
∑ss
)Ë
	gPNG_PRIVATE
;

3422 
PNG_EXTERN
 
≤g_ªad_fûãr_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3423 
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,Öng_byã∞
¥ev_row
,

3424 
fûãr
)Ë
	gPNG_PRIVATE
;

3427 
PNG_EXTERN
 
≤g_wrôe_föd_fûãr
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3428 
≤g_row_öf›
 
row_öfo
)Ë
	gPNG_PRIVATE
;

3431 
PNG_EXTERN
 
≤g_wrôe_fûãªd_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3432 
≤g_byãp
 
fûãªd_row
)Ë
	gPNG_PRIVATE
;

3434 
PNG_EXTERN
 
≤g_ªad_föish_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3437 
PNG_EXTERN
 
≤g_ªad_°¨t_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3439 
PNG_EXTERN
 
≤g_ªad_å™sf‹m_öfo
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3440 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3443 #ifde‡
PNG_READ_FILLER_SUPPORTED


3444 
PNG_EXTERN
 
≤g_do_ªad_fûÀr
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3445 
≤g_byãp
 
row
, 
≤g_uöt_32
 
fûÀr
,Öng_uöt_32 
Êags
)Ë
	gPNG_PRIVATE
;

3448 #ifde‡
PNG_READ_SWAP_ALPHA_SUPPORTED


3449 
PNG_EXTERN
 
≤g_do_ªad_sw≠_Æpha
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3450 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3453 #ifde‡
PNG_WRITE_SWAP_ALPHA_SUPPORTED


3454 
PNG_EXTERN
 
≤g_do_wrôe_sw≠_Æpha
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3455 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3458 #ifde‡
PNG_READ_INVERT_ALPHA_SUPPORTED


3459 
PNG_EXTERN
 
≤g_do_ªad_övît_Æpha
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3460 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3463 #ifde‡
PNG_WRITE_INVERT_ALPHA_SUPPORTED


3464 
PNG_EXTERN
 
≤g_do_wrôe_övît_Æpha
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3465 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3468 #i‡
deföed
(
PNG_WRITE_FILLER_SUPPORTED
) || \

3469 
deföed
(
PNG_READ_STRIP_ALPHA_SUPPORTED
)

3470 
PNG_EXTERN
 
≤g_do_°rù_fûÀr
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3471 
≤g_byãp
 
row
, 
≤g_uöt_32
 
Êags
)Ë
	gPNG_PRIVATE
;

3474 #i‡
deföed
(
PNG_READ_SWAP_SUPPORTED
Ë|| deföed(
PNG_WRITE_SWAP_SUPPORTED
)

3475 
PNG_EXTERN
 
≤g_do_sw≠
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3476 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3479 #i‡
deföed
(
PNG_READ_PACKSWAP_SUPPORTED
Ë|| deföed(
PNG_WRITE_PACKSWAP_SUPPORTED
)

3480 
PNG_EXTERN
 
≤g_do_∑cksw≠
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3481 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3484 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


3485 
PNG_EXTERN
 
≤g_do_rgb_to_gøy
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_row_öf›


3486 
row_öfo
, 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3489 #ifde‡
PNG_READ_GRAY_TO_RGB_SUPPORTED


3490 
PNG_EXTERN
 
≤g_do_gøy_to_rgb
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3491 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3494 #ifde‡
PNG_READ_PACK_SUPPORTED


3495 
PNG_EXTERN
 
≤g_do_u≈ack
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3496 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3499 #ifde‡
PNG_READ_SHIFT_SUPPORTED


3500 
PNG_EXTERN
 
≤g_do_unshi·
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3501 
≤g_cﬁ‹_8p
 
sig_bôs
)Ë
	gPNG_PRIVATE
;

3504 #i‡
deföed
(
PNG_READ_INVERT_SUPPORTED
Ë|| deföed(
PNG_WRITE_INVERT_SUPPORTED
)

3505 
PNG_EXTERN
 
≤g_do_övît
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3506 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3509 #ifde‡
PNG_READ_16_TO_8_SUPPORTED


3510 
PNG_EXTERN
 
≤g_do_ch›
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3511 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3514 #ifde‡
PNG_READ_DITHER_SUPPORTED


3515 
PNG_EXTERN
 
≤g_do_dôhî
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3516 
≤g_byãp
 
row
,Öng_byã∞
∑Àâe_lookup
,

3517 
≤g_byãp
 
dôhî_lookup
)Ë
	gPNG_PRIVATE
;

3519 #ifde‡
PNG_CORRECT_PALETTE_SUPPORTED


3520 
PNG_EXTERN
 
≤g_c‹ª˘_∑Àâe
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3521 
≤g_cﬁ‹p
 
∑Àâe
, 
num_∑Àâe
)Ë
	gPNG_PRIVATE
;

3525 #i‡
deföed
(
PNG_READ_BGR_SUPPORTED
Ë|| deföed(
PNG_WRITE_BGR_SUPPORTED
)

3526 
PNG_EXTERN
 
≤g_do_bgr
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3527 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3530 #ifde‡
PNG_WRITE_PACK_SUPPORTED


3531 
PNG_EXTERN
 
≤g_do_∑ck
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3532 
≤g_byãp
 
row
, 
≤g_uöt_32
 
bô_dïth
)Ë
	gPNG_PRIVATE
;

3535 #ifde‡
PNG_WRITE_SHIFT_SUPPORTED


3536 
PNG_EXTERN
 
≤g_do_shi·
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3537 
≤g_cﬁ‹_8p
 
bô_dïth
)Ë
	gPNG_PRIVATE
;

3540 #ifde‡
PNG_READ_BACKGROUND_SUPPORTED


3541 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3542 
PNG_EXTERN
 
≤g_do_background
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3543 
≤g_cﬁ‹_16p
 
å™s_vÆues
,Öng_cﬁ‹_16∞
background
,

3544 
≤g_cﬁ‹_16p
 
background_1
,

3545 
≤g_byãp
 
gamma_èbÀ
,Öng_byã∞
gamma_‰om_1
,Öng_byã∞
gamma_to_1
,

3546 
≤g_uöt_16µ
 
gamma_16
,Öng_uöt_16µ 
gamma_16_‰om_1
,

3547 
≤g_uöt_16µ
 
gamma_16_to_1
, 
gamma_shi·
)Ë
	gPNG_PRIVATE
;

3549 
PNG_EXTERN
 
≤g_do_background
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3550 
≤g_cﬁ‹_16p
 
å™s_vÆues
,Öng_cﬁ‹_16∞
background
)Ë
	gPNG_PRIVATE
;

3554 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3555 
PNG_EXTERN
 
≤g_do_gamma
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3556 
≤g_byãp
 
gamma_èbÀ
, 
≤g_uöt_16µ
 
gamma_16_èbÀ
,

3557 
gamma_shi·
)Ë
	gPNG_PRIVATE
;

3560 #ifde‡
PNG_READ_EXPAND_SUPPORTED


3561 
PNG_EXTERN
 
≤g_do_ex∑nd_∑Àâe
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3562 
≤g_byãp
 
row
, 
≤g_cﬁ‹p
 
∑Àâe
,Öng_byã∞
å™s
,

3563 
num_å™s
)Ë
	gPNG_PRIVATE
;

3564 
PNG_EXTERN
 
≤g_do_ex∑nd
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3565 
≤g_byãp
 
row
, 
≤g_cﬁ‹_16p
 
å™s_vÆue
)Ë
	gPNG_PRIVATE
;

3573 
PNG_EXTERN
 
≤g_h™dÀ_IHDR
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3574 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3575 
PNG_EXTERN
 
≤g_h™dÀ_PLTE
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3576 
≤g_uöt_32
 
Àngth
));

3577 
PNG_EXTERN
 
≤g_h™dÀ_IEND
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3578 
≤g_uöt_32
 
Àngth
));

3580 #ifde‡
PNG_READ_bKGD_SUPPORTED


3581 
PNG_EXTERN
 
≤g_h™dÀ_bKGD
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3582 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3585 #ifde‡
PNG_READ_cHRM_SUPPORTED


3586 
PNG_EXTERN
 
≤g_h™dÀ_cHRM
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3587 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3590 #ifde‡
PNG_READ_gAMA_SUPPORTED


3591 
PNG_EXTERN
 
≤g_h™dÀ_gAMA
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3592 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3595 #ifde‡
PNG_READ_hIST_SUPPORTED


3596 
PNG_EXTERN
 
≤g_h™dÀ_hIST
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3597 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3600 #ifde‡
PNG_READ_iCCP_SUPPORTED


3601 
≤g_h™dÀ_iCCP
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3602 
≤g_uöt_32
 
Àngth
));

3605 #ifde‡
PNG_READ_iTXt_SUPPORTED


3606 
PNG_EXTERN
 
≤g_h™dÀ_iTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3607 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3610 #ifde‡
PNG_READ_oFFs_SUPPORTED


3611 
PNG_EXTERN
 
≤g_h™dÀ_oFFs
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3612 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3615 #ifde‡
PNG_READ_pCAL_SUPPORTED


3616 
PNG_EXTERN
 
≤g_h™dÀ_pCAL
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3617 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3620 #ifde‡
PNG_READ_pHYs_SUPPORTED


3621 
PNG_EXTERN
 
≤g_h™dÀ_pHYs
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3622 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3625 #ifde‡
PNG_READ_sBIT_SUPPORTED


3626 
PNG_EXTERN
 
≤g_h™dÀ_sBIT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3627 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3630 #ifde‡
PNG_READ_sCAL_SUPPORTED


3631 
PNG_EXTERN
 
≤g_h™dÀ_sCAL
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3632 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3635 #ifde‡
PNG_READ_sPLT_SUPPORTED


3636 
≤g_h™dÀ_sPLT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3637 
≤g_uöt_32
 
Àngth
)Ë
PNG_PRIVATE
;

3640 #ifde‡
PNG_READ_sRGB_SUPPORTED


3641 
PNG_EXTERN
 
≤g_h™dÀ_sRGB
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3642 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3645 #ifde‡
PNG_READ_tEXt_SUPPORTED


3646 
PNG_EXTERN
 
≤g_h™dÀ_tEXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3647 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3650 #ifde‡
PNG_READ_tIME_SUPPORTED


3651 
PNG_EXTERN
 
≤g_h™dÀ_tIME
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3652 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3655 #ifde‡
PNG_READ_tRNS_SUPPORTED


3656 
PNG_EXTERN
 
≤g_h™dÀ_tRNS
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3657 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3660 #ifde‡
PNG_READ_zTXt_SUPPORTED


3661 
PNG_EXTERN
 
≤g_h™dÀ_zTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3662 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3665 
PNG_EXTERN
 
≤g_h™dÀ_unknown
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3666 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3668 
PNG_EXTERN
 
≤g_check_chunk_«me
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3669 
≤g_byãp
 
chunk_«me
)Ë
	gPNG_PRIVATE
;

3672 
PNG_EXTERN
 
≤g_do_ªad_å™sf‹m©i⁄s


3673 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3674 
PNG_EXTERN
 
≤g_do_wrôe_å™sf‹m©i⁄s


3675 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3677 
PNG_EXTERN
 
≤g_öô_ªad_å™sf‹m©i⁄s


3678 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3680 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


3681 
PNG_EXTERN
 
≤g_push_ªad_chunk
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3682 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3683 
PNG_EXTERN
 
≤g_push_ªad_sig
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3684 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3685 
PNG_EXTERN
 
≤g_push_check_¸c
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3686 
PNG_EXTERN
 
≤g_push_¸c_skù
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3687 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3688 
PNG_EXTERN
 
≤g_push_¸c_föish
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3689 
PNG_EXTERN
 
≤g_push_ßve_buf„r
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3690 
PNG_EXTERN
 
≤g_push_ª°‹e_buf„r
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3691 
≤g_byãp
 
buf„r
, 
≤g_size_t
 
buf„r_Àngth
)Ë
	gPNG_PRIVATE
;

3692 
PNG_EXTERN
 
≤g_push_ªad_IDAT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3693 
PNG_EXTERN
 
≤g_¥o˚ss_IDAT_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3694 
≤g_byãp
 
buf„r
, 
≤g_size_t
 
buf„r_Àngth
)Ë
	gPNG_PRIVATE
;

3695 
PNG_EXTERN
 
≤g_push_¥o˚ss_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3696 
PNG_EXTERN
 
≤g_push_h™dÀ_unknown
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3697 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3698 
PNG_EXTERN
 
≤g_push_have_öfo
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3699 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3700 
PNG_EXTERN
 
≤g_push_have_íd
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3701 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3702 
PNG_EXTERN
 
≤g_push_have_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3703 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3704 
PNG_EXTERN
 
≤g_push_ªad_íd
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3705 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3706 
PNG_EXTERN
 
≤g_¥o˚ss_some_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3707 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3708 
PNG_EXTERN
 
≤g_ªad_push_föish_row


3709 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3710 #ifde‡
PNG_READ_tEXt_SUPPORTED


3711 
PNG_EXTERN
 
≤g_push_h™dÀ_tEXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3712 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3713 
PNG_EXTERN
 
≤g_push_ªad_tEXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3714 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3716 #ifde‡
PNG_READ_zTXt_SUPPORTED


3717 
PNG_EXTERN
 
≤g_push_h™dÀ_zTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3718 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3719 
PNG_EXTERN
 
≤g_push_ªad_zTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3720 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3722 #ifde‡
PNG_READ_iTXt_SUPPORTED


3723 
PNG_EXTERN
 
≤g_push_h™dÀ_iTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3724 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3725 
PNG_EXTERN
 
≤g_push_ªad_iTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3726 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3731 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


3732 
PNG_EXTERN
 
≤g_do_ªad_öå≠ixñ
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3733 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3734 
PNG_EXTERN
 
≤g_do_wrôe_öå≠ixñ
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3735 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3738 #ifde‡
PNG_ASSEMBLER_CODE_SUPPORTED


3739 #ifde‡
PNG_MMX_CODE_SUPPORTED


3741 
PNG_EXTERN
 
≤g_öô_mmx_Êags
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3747 #i‡
deföed
(
PNG_INCH_CONVERSIONS
Ë&& deföed(
PNG_FLOATING_POINT_SUPPORTED
)

3748 
PNG_EXTERN
 
≤g_uöt_32
 
≤g_gë_pixñs_≥r_öch
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3749 
≤g_öf›
 
öfo_±r
));

3751 
PNG_EXTERN
 
≤g_uöt_32
 
≤g_gë_x_pixñs_≥r_öch
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3752 
≤g_öf›
 
öfo_±r
));

3754 
PNG_EXTERN
 
≤g_uöt_32
 
≤g_gë_y_pixñs_≥r_öch
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3755 
≤g_öf›
 
öfo_±r
));

3757 
PNG_EXTERN
 
≤g_gë_x_off£t_öches
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3758 
≤g_öf›
 
öfo_±r
));

3760 
PNG_EXTERN
 
≤g_gë_y_off£t_öches
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3761 
≤g_öf›
 
öfo_±r
));

3763 #ifde‡
PNG_pHYs_SUPPORTED


3764 
PNG_EXTERN
 
≤g_uöt_32
 
≤g_gë_pHYs_dpi
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3765 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 *
ªs_x
,Öng_uöt_32 *
ªs_y
, *
unô_ty≥
));

3770 
PNG_EXTERN
 
≤g_uöt_32
 
≤g_ªad_chunk_hódî


3771 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3774 #ifde‡
PNG_cHRM_SUPPORTED


3775 
PNG_EXTERN
 
≤g_check_cHRM_fixed
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3776 
≤g_fixed_poöt
 
öt_whôe_x
,Öng_fixed_poöà
öt_whôe_y
,

3777 
≤g_fixed_poöt
 
öt_ªd_x
,Öng_fixed_poöà
öt_ªd_y
,Öng_fixed_point

3778 
öt_gªí_x
, 
≤g_fixed_poöt
 
öt_gªí_y
,Öng_fixed_poöà
öt_blue_x
,

3779 
≤g_fixed_poöt
 
öt_blue_y
)Ë
	gPNG_PRIVATE
;

3782 #ifde‡
PNG_cHRM_SUPPORTED


3783 #ifde‡
PNG_CHECK_cHRM_SUPPORTED


3785 
PNG_EXTERN
 
≤g_64bô_¥odu˘
 
PNGARG
((
v1
, 
v2
,

3786 *
hi_¥odu˘
, *
lo_¥odu˘
)Ë
	gPNG_PRIVATE
;

3791 
PNG_EXTERN
 
≤g_check_IHDR
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3792 
≤g_uöt_32
 
width
,Öng_uöt_32 
height
, 
bô_dïth
,

3793 
cﬁ‹_ty≥
, 
öãæa˚_ty≥
, 
com¥essi⁄_ty≥
,

3794 
fûãr_ty≥
)Ë
	gPNG_PRIVATE
;

3797 
PNG_EXTERN
 
≤g_voidp
 
≤g_ˇŒoc
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3798 
≤g_uöt_32
 
size
));

3804 #ifde‡
__˝lu•lus


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

169 
	#°dö
 
°dö


	)

170 
	#°dout
 
°dout


	)

171 
	#°dîr
 
°dîr


	)

173 
__BEGIN_NAMESPACE_STD


175 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

177 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

178 
__END_NAMESPACE_STD


180 #ifde‡
__USE_ATFILE


182 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

183 
__c⁄°
 *
__√w
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


191 #i‚de‡
__USE_FILE_OFFSET64


192 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

194 #ifde‡
__REDIRECT


195 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

197 
	#tmpfûe
 
tmpfûe64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

206 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

207 
__END_NAMESPACE_STD


209 #ifde‡
__USE_MISC


212 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

216 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


224 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

225 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

229 
__BEGIN_NAMESPACE_STD


234 
	`f˛o£
 (
FILE
 *
__°ªam
);

239 
	`fÊush
 (
FILE
 *
__°ªam
);

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_MISC


249 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

252 #ifde‡
__USE_GNU


259 
	`f˛o£Æl
 ();

263 
__BEGIN_NAMESPACE_STD


264 #i‚de‡
__USE_FILE_OFFSET64


269 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

270 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

275 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

276 
__c⁄°
 *
__ª°ri˘
 
__modes
,

277 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

279 #ifde‡
__REDIRECT


280 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

281 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

282 
__wur
;

283 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

284 
__c⁄°
 *
__ª°ri˘
 
__modes
,

285 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

286 
__wur
;

288 
	#f›í
 
f›í64


	)

289 
	#‰e›í
 
‰e›í64


	)

292 
__END_NAMESPACE_STD


293 #ifde‡
__USE_LARGEFILE64


294 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

295 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

296 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 #ifdef 
__USE_POSIX


303 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

306 #ifdef 
__USE_GNU


309 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

310 
__c⁄°
 *
__ª°ri˘
 
__modes
,

311 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

314 #ifde‡
__USE_XOPEN2K8


316 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

317 
__THROW
 
__wur
;

322 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

326 
__BEGIN_NAMESPACE_STD


329 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

333 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

334 
__modes
, 
size_t
 
__n
Ë
__THROW
;

335 
__END_NAMESPACE_STD


337 #ifdef 
__USE_BSD


340 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

341 
size_t
 
__size
Ë
__THROW
;

344 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

348 
__BEGIN_NAMESPACE_STD


353 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

354 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

359 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	$•rötf
 (*
__ª°ri˘
 
__s
,

362 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

368 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

369 
_G_va_li°
 
__¨g
);

374 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

376 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

377 
_G_va_li°
 
__¨g
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


381 
__BEGIN_NAMESPACE_C99


383 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

384 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

385 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

387 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

389 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

390 
__END_NAMESPACE_C99


393 #ifde‡
__USE_GNU


396 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

397 
_G_va_li°
 
__¨g
)

398 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

399 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

400 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

401 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

402 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

403 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

404 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

436 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

451 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

458 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

486 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (
__c⁄°
 *
__ª°ri˘
 
__s
,

506 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

516 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

632 *
	$gës
 (*
__s
Ë
__wur
;

633 
__END_NAMESPACE_STD


635 #ifde‡
__USE_GNU


642 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

643 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

647 #ifdef 
__USE_XOPEN2K8


658 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

659 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

660 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

661 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

662 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

677 
__BEGIN_NAMESPACE_STD


682 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

688 
	`puts
 (
__c⁄°
 *
__s
);

695 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

702 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

708 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

709 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

710 
__END_NAMESPACE_STD


712 #ifde‡
__USE_GNU


719 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

720 
FILE
 *
__ª°ri˘
 
__°ªam
);

723 #ifde‡
__USE_MISC


730 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

731 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

732 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

737 
__BEGIN_NAMESPACE_STD


742 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

747 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`ªwöd
 (
FILE
 *
__°ªam
);

753 
__END_NAMESPACE_STD


760 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


761 #i‚de‡
__USE_FILE_OFFSET64


766 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

771 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

773 #ifde‡
__REDIRECT


774 
	`__REDIRECT
 (
f£eko
,

775 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

776 
f£eko64
);

777 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

779 
	#f£eko
 
f£eko64


	)

780 
	#·ñlo
 
·ñlo64


	)

785 
__BEGIN_NAMESPACE_STD


786 #i‚de‡
__USE_FILE_OFFSET64


791 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

796 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

798 #ifde‡
__REDIRECT


799 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

800 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

801 
	`__REDIRECT
 (
f£ços
,

802 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

804 
	#fgëpos
 
fgëpos64


	)

805 
	#f£ços
 
f£ços64


	)

808 
__END_NAMESPACE_STD


810 #ifde‡
__USE_LARGEFILE64


811 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

812 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

813 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

814 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

817 
__BEGIN_NAMESPACE_STD


819 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

821 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

823 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

824 
__END_NAMESPACE_STD


826 #ifde‡
__USE_MISC


828 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

829 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
__BEGIN_NAMESPACE_STD


839 
	`≥º‹
 (
__c⁄°
 *
__s
);

840 
__END_NAMESPACE_STD


846 
	~<bôs/sys_îæi°.h
>

849 #ifdef 
__USE_POSIX


851 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

854 #ifde‡
__USE_MISC


856 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

860 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

861 
deföed
 
__USE_MISC
)

866 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

872 
	`p˛o£
 (
FILE
 *
__°ªam
);

876 #ifdef 
__USE_POSIX


878 *
	$˘îmid
 (*
__s
Ë
__THROW
;

882 #ifde‡
__USE_XOPEN


884 *
	`cu£rid
 (*
__s
);

888 #ifdef 
__USE_GNU


889 
ob°ack
;

892 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

893 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

894 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

895 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

896 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

897 
_G_va_li°
 
__¨gs
)

898 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

902 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


906 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

910 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

913 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


920 
	#__√ed_gë›t


	)

921 
	~<gë›t.h
>

926 #ifde‡
__USE_EXTERN_INLINES


927 
	~<bôs/°dio.h
>

929 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


930 
	~<bôs/°dio2.h
>

932 #ifde‡
__LDBL_COMPAT


933 
	~<bôs/°dio-ldbl.h
>

936 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

444 || 
deföed
 
__USE_BSD


449 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

450 
__THROW
;

457 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

466 
	`∑u£
 ();

470 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

471 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

473 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


475 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

480 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

481 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

485 #ifde‡
__USE_ATFILE


488 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

489 
__gid_t
 
__group
, 
__Êag
)

490 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

494 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

508 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

510 #ifdef 
__USE_GNU


514 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

517 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

518 || 
deföed
 
__USE_BSD


522 *
	$gëwd
 (*
__buf
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

528 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

531 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

533 #ifde‡
__USE_GNU


536 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

540 **
__ívú⁄
;

541 #ifde‡
__USE_GNU


542 **
ívú⁄
;

548 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

549 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 #ifde‡
__USE_XOPEN2K8


554 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

555 
__THROW
 
	`__n⁄nuŒ
 ((2));

560 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifde‡
__USE_GNU


587 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

588 *
__c⁄°
 
__ívp
[])

589 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

593 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


595 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

600 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

606 
	~<bôs/c⁄‚ame.h
>

609 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

610 
__THROW
 
	`__n⁄nuŒ
 ((1));

613 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

616 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

618 #ifdef 
__USE_POSIX2


620 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

625 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

628 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

632 #i‚de‡
__FAVOR_BSD


633 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

635 #ifde‡
__REDIRECT_NTH


636 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

638 
	#gëpgΩ
 
__gëpgid


	)

643 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

644 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


645 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

652 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

654 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


665 #i‚de‡
__FAVOR_BSD


669 
	$£çgΩ
 (Ë
__THROW
;

674 #ifde‡
__REDIRECT_NTH


675 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

677 
	#£çgΩ
 
£çgid


	)

686 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

688 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


690 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

694 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

697 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

700 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

708 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

710 #ifdef 
__USE_GNU


712 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

719 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

721 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


724 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


729 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

736 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

738 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


741 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

744 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


746 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

749 #ifde‡
__USE_GNU


752 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

753 
__THROW
;

757 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

758 
__THROW
;

762 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

763 
__THROW
;

767 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

768 
__THROW
;

775 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

777 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

778 || 
deföed
 
__USE_BSD


783 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 *
	$ây«me
 (
__fd
Ë
__THROW
;

793 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

794 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

798 
	$ißây
 (
__fd
Ë
__THROW
;

800 #i‡
deföed
 
__USE_BSD
 \

801 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

804 
	$ây¶Ÿ
 (Ë
__THROW
;

809 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 #ifde‡
__USE_ATFILE


815 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

816 
__c⁄°
 *
__to
, 
__Êags
)

817 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

820 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


822 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

828 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

829 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

833 #ifde‡
__USE_ATFILE


835 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

836 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

839 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

840 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

841 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

845 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

847 #ifde‡
__USE_ATFILE


849 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

850 
__THROW
 
	`__n⁄nuŒ
 ((2));

854 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

858 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

861 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

868 *
	`gëlogö
 ();

869 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


876 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

879 #ifdef 
__USE_BSD


881 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #ifdef 
__USE_POSIX2


889 
	#__√ed_gë›t


	)

890 
	~<gë›t.h
>

894 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


898 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

902 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

905 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

906 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

910 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

916 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

925 
	$vh™gup
 (Ë
__THROW
;

928 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

936 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

937 
size_t
 
__off£t
, 
__sˇÀ
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

948 *
	$gëu£rshñl
 (Ë
__THROW
;

949 
	$ídu£rshñl
 (Ë
__THROW
;

950 
	$£tu£rshñl
 (Ë
__THROW
;

956 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

960 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

963 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

967 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

971 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


976 
	`fsync
 (
__fd
);

980 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


983 
	`gëho°id
 ();

986 
	$sync
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


992 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

997 
	$gëdèbÀsize
 (Ë
__THROW
;

1003 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1006 #i‚de‡
__USE_FILE_OFFSET64


1007 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1010 #ifde‡
__REDIRECT_NTH


1011 
	`__REDIRECT_NTH
 (
åunˇã
,

1012 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1013 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1015 
	#åunˇã
 
åunˇã64


	)

1018 #ifde‡
__USE_LARGEFILE64


1019 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1025 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1028 #i‚de‡
__USE_FILE_OFFSET64


1029 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1031 #ifde‡
__REDIRECT_NTH


1032 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1033 
·runˇã64
Ë
__wur
;

1035 
	#·runˇã
 
·runˇã64


	)

1038 #ifde‡
__USE_LARGEFILE64


1039 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1045 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1046 || 
deföed
 
__USE_MISC


1050 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1056 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1060 #ifde‡
__USE_MISC


1071 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1076 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1088 
	#F_ULOCK
 0

	)

1089 
	#F_LOCK
 1

	)

1090 
	#F_TLOCK
 2

	)

1091 
	#F_TEST
 3

	)

1093 #i‚de‡
__USE_FILE_OFFSET64


1094 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__REDIRECT


1097 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1098 
lockf64
Ë
__wur
;

1100 
	#lockf
 
lockf64


	)

1103 #ifde‡
__USE_LARGEFILE64


1104 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1109 #ifde‡
__USE_GNU


1114 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1115 (
__exãnsi⁄__
 \

1116 ({ 
__ªsu…
; \

1117 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1118 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1119 
__ªsu…
; 
	}
}))

	)

1122 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1125 
fd©async
 (
__fûdes
);

1131 #ifdef 
__USE_XOPEN


1133 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1138 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1145 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1146 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1152 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1154 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1159 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1160 
	~<bôs/uni°d.h
>

1163 
__END_DECLS


	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.7"

	)

41 
	#ZLIB_VERNUM
 0x1270

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 7

	)

45 
	#ZLIB_VER_SUBREVISION
 0

	)

80 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

81 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

83 
öã∫Æ_°©e
;

85 
	sz_°ªam_s
 {

86 
z_c⁄°
 
Byãf
 *
√xt_ö
;

87 
uI¡
 
avaû_ö
;

88 
uL⁄g
 
tŸÆ_ö
;

90 
Byãf
 *
√xt_out
;

91 
uI¡
 
avaû_out
;

92 
uL⁄g
 
tŸÆ_out
;

94 
z_c⁄°
 *
msg
;

95 
öã∫Æ_°©e
 
FAR
 *
°©e
;

97 
Æloc_func
 
zÆloc
;

98 
‰ì_func
 
z‰ì
;

99 
voidpf
 
›aque
;

101 
d©a_ty≥
;

102 
uL⁄g
 
adÀr
;

103 
uL⁄g
 
ª£rved
;

104 } 
	tz_°ªam
;

106 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

112 
	sgz_hódî_s
 {

113 
ãxt
;

114 
uL⁄g
 
time
;

115 
xÊags
;

116 
os
;

117 
Byãf
 *
exåa
;

118 
uI¡
 
exåa_Àn
;

119 
uI¡
 
exåa_max
;

120 
Byãf
 *
«me
;

121 
uI¡
 
«me_max
;

122 
Byãf
 *
commít
;

123 
uI¡
 
comm_max
;

124 
h¸c
;

125 
d⁄e
;

127 } 
	tgz_hódî
;

129 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

164 
	#Z_NO_FLUSH
 0

	)

165 
	#Z_PARTIAL_FLUSH
 1

	)

166 
	#Z_SYNC_FLUSH
 2

	)

167 
	#Z_FULL_FLUSH
 3

	)

168 
	#Z_FINISH
 4

	)

169 
	#Z_BLOCK
 5

	)

170 
	#Z_TREES
 6

	)

173 
	#Z_OK
 0

	)

174 
	#Z_STREAM_END
 1

	)

175 
	#Z_NEED_DICT
 2

	)

176 
	#Z_ERRNO
 (-1)

	)

177 
	#Z_STREAM_ERROR
 (-2)

	)

178 
	#Z_DATA_ERROR
 (-3)

	)

179 
	#Z_MEM_ERROR
 (-4)

	)

180 
	#Z_BUF_ERROR
 (-5)

	)

181 
	#Z_VERSION_ERROR
 (-6)

	)

186 
	#Z_NO_COMPRESSION
 0

	)

187 
	#Z_BEST_SPEED
 1

	)

188 
	#Z_BEST_COMPRESSION
 9

	)

189 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

192 
	#Z_FILTERED
 1

	)

193 
	#Z_HUFFMAN_ONLY
 2

	)

194 
	#Z_RLE
 3

	)

195 
	#Z_FIXED
 4

	)

196 
	#Z_DEFAULT_STRATEGY
 0

	)

199 
	#Z_BINARY
 0

	)

200 
	#Z_TEXT
 1

	)

201 
	#Z_ASCII
 
Z_TEXT


	)

202 
	#Z_UNKNOWN
 2

	)

205 
	#Z_DEFLATED
 8

	)

208 
	#Z_NULL
 0

	)

210 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

216 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

246 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

353 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

392 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

508 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

587 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

588 c⁄° 
Byãf
 *
di˘i⁄¨y
,

589 
uI¡
 
di˘Lígth
));

631 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

632 
z_°ªamp
 
sour˚
));

649 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

660 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

661 
Àvñ
,

662 
°øãgy
));

681 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

682 
good_Àngth
,

683 
max_œzy
,

684 
ni˚_Àngth
,

685 
max_chaö
));

698 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

699 
uL⁄g
 
sour˚Lí
));

713 
ZEXTERN
 
ZEXPORT
 
deÊ©ePídög
 
OF
((
z_°ªamp
 
°rm
,

714 *
≥ndög
,

715 *
bôs
));

728 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

729 
bôs
,

730 
vÆue
));

745 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

746 
gz_hódîp
 
hód
));

819 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

820 c⁄° 
Byãf
 *
di˘i⁄¨y
,

821 
uI¡
 
di˘Lígth
));

842 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

861 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

862 
z_°ªamp
 
sour˚
));

877 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

887 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

888 
wödowBôs
));

899 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

900 
bôs
,

901 
vÆue
));

920 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

948 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

949 
gz_hódîp
 
hód
));

1010 (*
ö_func
Ë
	tOF
((
	tFAR
 *, FAR * FAR *));

1011 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

1013 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

1014 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

1015 
out_func
 
out
, 
FAR
 *
out_desc
));

1082 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1090 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1131 #i‚de‡
Z_SOLO


1143 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1144 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1157 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1158 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1159 
Àvñ
));

1173 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1180 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1181 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1207 
gzFûe_s
 *
	tgzFûe
;

1247 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1270 
ZEXTERN
 
ZEXPORT
 
gzbuf„r
 
OF
((
gzFûe
 
fûe
, 
size
));

1287 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1296 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1324 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1325 
voidpc
 
buf
, 
Àn
));

1332 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
Z_ARG
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1347 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1355 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1368 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1374 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1383 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1395 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1430 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1458 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1473 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1494 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1507 
ZEXTERN
 
ZEXPORT
 
gz˛o£_r
 
OF
((
gzFûe
 
fûe
));

1508 
ZEXTERN
 
ZEXPORT
 
gz˛o£_w
 
OF
((
gzFûe
 
fûe
));

1519 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1535 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1552 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1583 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1616 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1617 c⁄° *
vîsi⁄
, 
°ªam_size
));

1618 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1619 c⁄° *
vîsi⁄
, 
°ªam_size
));

1620 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1621 
wödowBôs
, 
memLevñ
,

1622 
°øãgy
, c⁄° *
vîsi⁄
,

1623 
°ªam_size
));

1624 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1625 c⁄° *
vîsi⁄
, 
°ªam_size
));

1626 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1627 
FAR
 *
wödow
,

1628 c⁄° *
vîsi⁄
,

1629 
°ªam_size
));

1630 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1631 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1632 
	#öÊ©eInô
(
°rm
) \

1633 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1634 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1635 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1636 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1637 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1638 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1639 ()(
z_°ªam
))

	)

1640 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1641 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1642 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1644 #i‚de‡
Z_SOLO


1653 
	sgzFûe_s
 {

1654 
have
;

1655 *
√xt
;

1656 
z_off64_t
 
pos
;

1658 
ZEXTERN
 
ZEXPORT
 
gzgëc_
 
OF
((
gzFûe
 
fûe
));

1659 #ifde‡
Z_PREFIX_SET


1660 #unde‡
z_gzgëc


1661 
	#z_gzgëc
(
g
) \

1662 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1664 
	#gzgëc
(
g
) \

1665 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1674 #ifde‡
Z_LARGE64


1675 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1676 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1677 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1678 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1679 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1680 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1683 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& deföed(
Z_WANT64
)

1684 #ifde‡
Z_PREFIX_SET


1685 
	#z_gz›í
 
z_gz›í64


	)

1686 
	#z_gz£ek
 
z_gz£ek64


	)

1687 
	#z_gzãŒ
 
z_gzãŒ64


	)

1688 
	#z_gzoff£t
 
z_gzoff£t64


	)

1689 
	#z_adÀr32_comböe
 
z_adÀr32_comböe64


	)

1690 
	#z_¸c32_comböe
 
z_¸c32_comböe64


	)

1692 
	#gz›í
 
gz›í64


	)

1693 
	#gz£ek
 
gz£ek64


	)

1694 
	#gzãŒ
 
gzãŒ64


	)

1695 
	#gzoff£t
 
gzoff£t64


	)

1696 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1697 
	#¸c32_comböe
 
¸c32_comböe64


	)

1699 #i‚de‡
Z_LARGE64


1700 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1701 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off_t, ));

1702 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1703 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1704 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1705 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1708 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1709 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1710 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1711 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t
 
OF
((
gzFûe
));

1712 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1713 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1718 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1719 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1724 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1725 
	söã∫Æ_°©e
 {
dummy
;};

1729 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1730 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1731 
ZEXTERN
 c⁄° 
z_¸c_t
 
FAR
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1732 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1733 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1734 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1735 #i‡
deföed
(
_WIN32
Ë&& !deföed(
Z_SOLO
)

1736 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í_w
 
OF
((c⁄° 
wch¨_t
 *
∑th
,

1737 c⁄° *
mode
));

1740 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC99


98 #unde‡
__USE_ISOC95


99 #unde‡
__USE_POSIX


100 #unde‡
__USE_POSIX2


101 #unde‡
__USE_POSIX199309


102 #unde‡
__USE_POSIX199506


103 #unde‡
__USE_XOPEN


104 #unde‡
__USE_XOPEN_EXTENDED


105 #unde‡
__USE_UNIX98


106 #unde‡
__USE_XOPEN2K


107 #unde‡
__USE_XOPEN2KXSI


108 #unde‡
__USE_XOPEN2K8


109 #unde‡
__USE_XOPEN2K8XSI


110 #unde‡
__USE_LARGEFILE


111 #unde‡
__USE_LARGEFILE64


112 #unde‡
__USE_FILE_OFFSET64


113 #unde‡
__USE_BSD


114 #unde‡
__USE_SVID


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__FAVOR_BSD


121 #unde‡
__KERNEL_STRICT_NAMES


125 #i‚de‡
_LOOSE_KERNEL_NAMES


126 
	#__KERNEL_STRICT_NAMES


	)

130 
	#__USE_ANSI
 1

	)

139 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


140 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

141 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

143 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

148 #i‡
deföed
 
_BSD_SOURCE
 && \

149 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

150 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

151 
	#__FAVOR_BSD
 1

	)

155 #ifde‡
_GNU_SOURCE


156 #unde‡
_ISOC95_SOURCE


157 
	#_ISOC95_SOURCE
 1

	)

158 #unde‡
_ISOC99_SOURCE


159 
	#_ISOC99_SOURCE
 1

	)

160 #unde‡
_POSIX_SOURCE


161 
	#_POSIX_SOURCE
 1

	)

162 #unde‡
_POSIX_C_SOURCE


163 
	#_POSIX_C_SOURCE
 200809L

	)

164 #unde‡
_XOPEN_SOURCE


165 
	#_XOPEN_SOURCE
 700

	)

166 #unde‡
_XOPEN_SOURCE_EXTENDED


167 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

168 #unde‡
_LARGEFILE64_SOURCE


169 
	#_LARGEFILE64_SOURCE
 1

	)

170 #unde‡
_BSD_SOURCE


171 
	#_BSD_SOURCE
 1

	)

172 #unde‡
_SVID_SOURCE


173 
	#_SVID_SOURCE
 1

	)

174 #unde‡
_ATFILE_SOURCE


175 
	#_ATFILE_SOURCE
 1

	)

180 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

181 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

182 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

183 
	#_BSD_SOURCE
 1

	)

184 
	#_SVID_SOURCE
 1

	)

191 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

192 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

193 
	#__USE_ISOC99
 1

	)

197 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

198 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

199 
	#__USE_ISOC95
 1

	)

204 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

205 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

206 
	#_POSIX_SOURCE
 1

	)

207 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

208 
	#_POSIX_C_SOURCE
 2

	)

209 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

210 
	#_POSIX_C_SOURCE
 199506L

	)

211 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

212 
	#_POSIX_C_SOURCE
 200112L

	)

214 
	#_POSIX_C_SOURCE
 200809L

	)

216 
	#__USE_POSIX_IMPLICITLY
 1

	)

219 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX
 1

	)

223 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


224 
	#__USE_POSIX2
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

228 
	#__USE_POSIX199309
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

232 
	#__USE_POSIX199506
 1

	)

235 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

236 
	#__USE_XOPEN2K
 1

	)

237 #unde‡
__USE_ISOC95


238 
	#__USE_ISOC95
 1

	)

239 #unde‡
__USE_ISOC99


240 
	#__USE_ISOC99
 1

	)

243 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

244 
	#__USE_XOPEN2K8
 1

	)

245 #unde‡
_ATFILE_SOURCE


246 
	#_ATFILE_SOURCE
 1

	)

249 #ifdef 
_XOPEN_SOURCE


250 
	#__USE_XOPEN
 1

	)

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

252 
	#__USE_XOPEN_EXTENDED
 1

	)

253 
	#__USE_UNIX98
 1

	)

254 #unde‡
_LARGEFILE_SOURCE


255 
	#_LARGEFILE_SOURCE
 1

	)

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

258 
	#__USE_XOPEN2K8
 1

	)

259 
	#__USE_XOPEN2K8XSI
 1

	)

261 
	#__USE_XOPEN2K
 1

	)

262 
	#__USE_XOPEN2KXSI
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #ifde‡
_XOPEN_SOURCE_EXTENDED


270 
	#__USE_XOPEN_EXTENDED
 1

	)

275 #ifde‡
_LARGEFILE_SOURCE


276 
	#__USE_LARGEFILE
 1

	)

279 #ifde‡
_LARGEFILE64_SOURCE


280 
	#__USE_LARGEFILE64
 1

	)

283 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

284 
	#__USE_FILE_OFFSET64
 1

	)

287 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


288 
	#__USE_MISC
 1

	)

291 #ifdef 
_BSD_SOURCE


292 
	#__USE_BSD
 1

	)

295 #ifdef 
_SVID_SOURCE


296 
	#__USE_SVID
 1

	)

299 #ifdef 
_ATFILE_SOURCE


300 
	#__USE_ATFILE
 1

	)

303 #ifdef 
_GNU_SOURCE


304 
	#__USE_GNU
 1

	)

307 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


308 
	#__USE_REENTRANT
 1

	)

311 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

312 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

313 #i‡
_FORTIFY_SOURCE
 > 1

314 
	#__USE_FORTIFY_LEVEL
 2

	)

316 
	#__USE_FORTIFY_LEVEL
 1

	)

319 
	#__USE_FORTIFY_LEVEL
 0

	)

323 
	~<bôs/¥edefs.h
>

326 
	#__STDC_ISO_10646__
 200009L

	)

334 #unde‡
__GNU_LIBRARY__


335 
	#__GNU_LIBRARY__
 6

	)

339 
	#__GLIBC__
 2

	)

340 
	#__GLIBC_MINOR__
 13

	)

342 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

343 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

346 #i‡
deföed
 
__GNUC__
 \

347 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

348 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

349 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

350 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

354 #i‚de‡
__ASSEMBLER__


355 #i‚de‡
_SYS_CDEFS_H


356 
	~<sys/cdefs.h
>

361 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


362 
	#__USE_LARGEFILE
 1

	)

363 
	#__USE_LARGEFILE64
 1

	)

369 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

370 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

371 && 
deföed
 
	g__exã∫_ölöe


372 
	#__USE_EXTERN_INLINES
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/pngconf.h

20 #i‚de‡
PNGCONF_H


21 
	#PNGCONF_H


	)

23 
	#PNG_1_2_X


	)

29 #ifde‡
PNG_USER_CONFIG


30 #i‚de‡
PNG_USER_PRIVATEBUILD


31 
	#PNG_USER_PRIVATEBUILD


	)

33 
	~"≤gu§.h
"

37 #ifde‡
PNG_CONFIGURE_LIBPNG


38 #ifde‡
HAVE_CONFIG_H


39 
	~"c⁄fig.h
"

64 #ifde‡
__STDC__


65 #ifde‡
SPECIALBUILD


66 #¥agm®
mesßge
("PNG_LIBPNG_SPECIALBUILD (and deprecated SPECIALBUILD)\
Çow LIBPNGÑeserved macros. Use PNG_USER_PRIVATEBUILD instead.")

70 #ifde‡
PRIVATEBUILD


71 #¥agm®
mesßge
("PRIVATEBUILD is deprecated.\
 PNG_USER_PRIVATEBUILD instead.")

73 
	#PNG_USER_PRIVATEBUILD
 
PRIVATEBUILD


	)

77 #i‚de‡
PNG_VERSION_INFO_ONLY


83 #i‡!
deföed
(
PNG_NO_WARN_UNINITIALIZED_ROW
) && \

84 !
	$deföed
(
PNG_WARN_UNINITIALIZED_ROW
)

85 
	#PNG_WARN_UNINITIALIZED_ROW
 1

	)

102 #i‚de‡
PNG_ZBUF_SIZE


103 
	#PNG_ZBUF_SIZE
 8192

	)

108 #i‚de‡
PNG_NO_READ_SUPPORTED


109 
	#PNG_READ_SUPPORTED


	)

114 #i‚de‡
PNG_NO_WRITE_SUPPORTED


115 
	#PNG_WRITE_SUPPORTED


	)

119 #ifde‡
PNG_ALLOW_BENIGN_ERRORS


120 
	#≤g_bíign_îr‹
 
≤g_w¨nög


	)

121 
	#≤g_chunk_bíign_îr‹
 
≤g_chunk_w¨nög


	)

123 #i‚de‡
PNG_BENIGN_ERRORS_SUPPORTED


124 
	#≤g_bíign_îr‹
 
≤g_îr‹


	)

125 
	#≤g_chunk_bíign_îr‹
 
≤g_chunk_îr‹


	)

130 #i‡!
	`deföed
(
PNG_NO_WARNINGS
Ë&& !deföed(
PNG_WARNINGS_SUPPORTED
)

131 
	#PNG_WARNINGS_SUPPORTED


	)

134 #i‡!
	`deföed
(
PNG_NO_ERROR_TEXT
Ë&& !deföed(
PNG_ERROR_TEXT_SUPPORTED
)

135 
	#PNG_ERROR_TEXT_SUPPORTED


	)

138 #i‡!
	`deföed
(
PNG_NO_CHECK_cHRM
Ë&& !deföed(
PNG_CHECK_cHRM_SUPPORTED
)

139 
	#PNG_CHECK_cHRM_SUPPORTED


	)

145 #i‡!
	`deföed
(
PNG_1_0_X
Ë&& !deföed(
PNG_NO_MNG_FEATURES
)

146 #i‚de‡
PNG_MNG_FEATURES_SUPPORTED


147 
	#PNG_MNG_FEATURES_SUPPORTED


	)

151 #i‚de‡
PNG_NO_FLOATING_POINT_SUPPORTED


152 #i‚de‡
PNG_FLOATING_POINT_SUPPORTED


153 
	#PNG_FLOATING_POINT_SUPPORTED


	)

165 #i‡
	`deföed
(
MAXSEG_64K
Ë&& !deföed(
PNG_MAX_MALLOC_64K
)

166 
	#PNG_MAX_MALLOC_64K


	)

202 #ifde‡
__CYGWIN__


203 #ifde‡
ALL_STATIC


204 #ifde‡
PNG_BUILD_DLL


205 #unde‡
PNG_BUILD_DLL


207 #ifde‡
PNG_USE_DLL


208 #unde‡
PNG_USE_DLL


210 #ifde‡
PNG_DLL


211 #unde‡
PNG_DLL


213 #i‚de‡
PNG_STATIC


214 
	#PNG_STATIC


	)

217 #ifde‡
PNG_BUILD_DLL


218 #ifde‡
PNG_STATIC


219 #unde‡
PNG_STATIC


221 #ifde‡
PNG_USE_DLL


222 #unde‡
PNG_USE_DLL


224 #i‚de‡
PNG_DLL


225 
	#PNG_DLL


	)

228 #ifde‡
PNG_STATIC


229 #ifde‡
PNG_USE_DLL


230 #unde‡
PNG_USE_DLL


232 #ifde‡
PNG_DLL


233 #unde‡
PNG_DLL


236 #i‚de‡
PNG_USE_DLL


237 
	#PNG_USE_DLL


	)

239 #i‚de‡
PNG_DLL


240 
	#PNG_DLL


	)

260 #i‡!
	`deföed
(
PNG_NO_STDIO
Ë&& !deföed(
PNG_STDIO_SUPPORTED
)

261 
	#PNG_STDIO_SUPPORTED


	)

264 #ifde‡
_WIN32_WCE


265 
	~<wödows.h
>

267 
	#PNG_NO_CONSOLE_IO


	)

269 
	#PNG_ABORT
(Ë
	`exô
(-1)

	)

270 #ifde‡
PNG_DEBUG


271 #unde‡
PNG_DEBUG


275 #ifde‡
PNG_BUILD_DLL


276 #i‚de‡
PNG_CONSOLE_IO_SUPPORTED


277 #i‚de‡
PNG_NO_CONSOLE_IO


278 
	#PNG_NO_CONSOLE_IO


	)

283 #ifde‡
PNG_NO_STDIO


284 #i‚de‡
PNG_NO_CONSOLE_IO


285 
	#PNG_NO_CONSOLE_IO


	)

287 #ifde‡
PNG_DEBUG


288 #i‡(
PNG_DEBUG
 > 0)

289 
	~<°dio.h
>

293 #i‚de‡
_WIN32_WCE


295 
	~<°dio.h
>

299 #i‡!(
deföed
 
PNG_NO_CONSOLE_IO
Ë&& !
	`deföed
(
PNG_CONSOLE_IO_SUPPORTED
)

300 
	#PNG_CONSOLE_IO_SUPPORTED


	)

310 #i‚de‡
PNGARG


312 #ifde‡
OF


313 
	#PNGARG
(
¨gli°
Ë
	`OF
◊rgli°)

	)

316 #ifde‡
_NO_PROTO


317 
	#PNGARG
(
¨gli°
Ë()

	)

318 #i‚de‡
PNG_TYPECAST_NULL


319 
	#PNG_TYPECAST_NULL


	)

322 
	#PNGARG
(
¨gli°
Ë
	)
arglist

334 #i‚de‡
MACOS


335 #i‡(
	`deföed
(
__MWERKS__
Ë&& deföed(
macötosh
)Ë|| deföed(
≠∂ec
) || \

336 
	`deföed
(
THINK_C
Ë|| deföed(
__SC__
Ë|| 
	$deföed
(
TARGET_OS_MAC
)

337 
	#MACOS


	)

342 #i‡!
	`deföed
(
MACOS
Ë&& !deföed(
RISCOS
Ë&& !deföed(
_WIN32_WCE
)

343 
	~<sys/ty≥s.h
>

346 #i‡!
	`deföed
(
PNG_SETJMP_NOT_SUPPORTED
Ë&& !deföed(
PNG_NO_SETJMP_SUPPORTED
)

347 
	#PNG_SETJMP_SUPPORTED


	)

350 #ifde‡
PNG_SETJMP_SUPPORTED


361 #i‚de‡
PNG_SKIP_SETJMP_CHECK


362 #ifde‡
__löux__


363 #ifde‡
_BSD_SOURCE


364 
	#PNG_SAVE_BSD_SOURCE


	)

365 #unde‡
_BSD_SOURCE


367 #ifde‡
_SETJMP_H


371 
__≤gc⁄f
.
h__
 
ö
 
lib≤g
 
Æªady
 
ö˛udes
 
£tjmp
.
h
;

372 
__d⁄t__
 
ö˛ude
 
ô
 
agaö
.;

378 
	~<£tjmp.h
>

380 #ifde‡
__löux__


381 #ifde‡
PNG_SAVE_BSD_SOURCE


382 #i‚de‡
_BSD_SOURCE


383 
	#_BSD_SOURCE


	)

385 #unde‡
PNG_SAVE_BSD_SOURCE


390 #ifde‡
BSD


391 
	~<°rögs.h
>

393 
	~<°rög.h
>

397 #ifde‡
PNG_INTERNAL


399 
	~<°dlib.h
>

408 
	#PNG_EXTERN


	)

414 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


415 #ifde‡
MACOS


420 #i‡!
	`deföed
(
__MATH_H__
Ë&& !deföed(
__MATH_H
Ë&& !deföed(
__cm©h__
)

421 
	~<Â.h
>

424 
	~<m©h.h
>

426 #i‡
	`deföed
(
_AMIGA
Ë&& deföed(
__SASC
Ë&& deföed(
_M68881
)

430 
	~<m68881.h
>

435 #i‡(
	`deföed
(
__MWERKS__
Ë&& deföed(
WIN32
)Ë|| deföed(
__STDC__
)

436 
	#PNG_ALWAYS_EXTERN


	)

440 #i‡
	`deföed
(
__TURBOC__
Ë&& deföed(
__MSDOS__
)

441 
	~<mem.h
>

442 
	~<Æloc.h
>

446 #i‡
	`deföed
(
_MSC_VER
Ë&& (deföed(
WIN32
Ë|| deföed(
_Wödows
) || \

447 
	`deföed
(
_WINDOWS
Ë|| deföed(
_WIN32
Ë|| 
	$deföed
(
__WIN32__
))

448 
	~<mÆloc.h
>

455 #i‚de‡
PNG_DITHER_RED_BITS


456 
	#PNG_DITHER_RED_BITS
 5

	)

458 #i‚de‡
PNG_DITHER_GREEN_BITS


459 
	#PNG_DITHER_GREEN_BITS
 5

	)

461 #i‚de‡
PNG_DITHER_BLUE_BITS


462 
	#PNG_DITHER_BLUE_BITS
 5

	)

472 #i‚de‡
PNG_MAX_GAMMA_8


473 
	#PNG_MAX_GAMMA_8
 11

	)

479 #i‚de‡
PNG_GAMMA_THRESHOLD


480 
	#PNG_GAMMA_THRESHOLD
 0.05

	)

490 #i‚de‡
PNG_NO_CONST


491 
	#PNG_CONST
 c⁄°

	)

493 
	#PNG_CONST


	)

529 #i‡
	`deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

530 #i‚de‡
PNG_NO_iTXt_SUPPORTED


531 
	#PNG_NO_iTXt_SUPPORTED


	)

533 #i‚de‡
PNG_NO_READ_iTXt


534 
	#PNG_NO_READ_iTXt


	)

536 #i‚de‡
PNG_NO_WRITE_iTXt


537 
	#PNG_NO_WRITE_iTXt


	)

541 #i‡!
	`deföed
(
PNG_NO_iTXt_SUPPORTED
)

542 #i‡!
	`deföed
(
PNG_READ_iTXt_SUPPORTED
Ë&& !deföed(
PNG_NO_READ_iTXt
)

543 
	#PNG_READ_iTXt


	)

545 #i‡!
	`deföed
(
PNG_WRITE_iTXt_SUPPORTED
Ë&& !deföed(
PNG_NO_WRITE_iTXt
)

546 
	#PNG_WRITE_iTXt


	)

556 #ifde‡
PNG_LEGACY_SUPPORTED


557 
	#PNG_NO_FREE_ME


	)

558 
	#PNG_NO_READ_UNKNOWN_CHUNKS


	)

559 
	#PNG_NO_WRITE_UNKNOWN_CHUNKS


	)

560 
	#PNG_NO_HANDLE_AS_UNKNOWN


	)

561 
	#PNG_NO_READ_USER_CHUNKS


	)

562 
	#PNG_NO_READ_iCCP


	)

563 
	#PNG_NO_WRITE_iCCP


	)

564 
	#PNG_NO_READ_iTXt


	)

565 
	#PNG_NO_WRITE_iTXt


	)

566 
	#PNG_NO_READ_sCAL


	)

567 
	#PNG_NO_WRITE_sCAL


	)

568 
	#PNG_NO_READ_sPLT


	)

569 
	#PNG_NO_WRITE_sPLT


	)

570 
	#PNG_NO_INFO_IMAGE


	)

571 
	#PNG_NO_READ_RGB_TO_GRAY


	)

572 
	#PNG_NO_READ_USER_TRANSFORM


	)

573 
	#PNG_NO_WRITE_USER_TRANSFORM


	)

574 
	#PNG_NO_USER_MEM


	)

575 
	#PNG_NO_READ_EMPTY_PLTE


	)

576 
	#PNG_NO_MNG_FEATURES


	)

577 
	#PNG_NO_FIXED_POINT_SUPPORTED


	)

581 #i‡!
	`deföed
(
PNG_FLOATING_POINT_SUPPORTED
) || \

582 !
	$deföed
(
PNG_NO_FIXED_POINT_SUPPORTED
)

583 
	#PNG_FIXED_POINT_SUPPORTED


	)

586 #i‚de‡
PNG_NO_FREE_ME


587 
	#PNG_FREE_ME_SUPPORTED


	)

590 #ifde‡
PNG_READ_SUPPORTED


592 #i‡!
	`deföed
(
PNG_READ_TRANSFORMS_NOT_SUPPORTED
) && \

593 !
	$deföed
(
PNG_NO_READ_TRANSFORMS
)

594 
	#PNG_READ_TRANSFORMS_SUPPORTED


	)

597 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


598 #i‚de‡
PNG_NO_READ_EXPAND


599 
	#PNG_READ_EXPAND_SUPPORTED


	)

601 #i‚de‡
PNG_NO_READ_SHIFT


602 
	#PNG_READ_SHIFT_SUPPORTED


	)

604 #i‚de‡
PNG_NO_READ_PACK


605 
	#PNG_READ_PACK_SUPPORTED


	)

607 #i‚de‡
PNG_NO_READ_BGR


608 
	#PNG_READ_BGR_SUPPORTED


	)

610 #i‚de‡
PNG_NO_READ_SWAP


611 
	#PNG_READ_SWAP_SUPPORTED


	)

613 #i‚de‡
PNG_NO_READ_PACKSWAP


614 
	#PNG_READ_PACKSWAP_SUPPORTED


	)

616 #i‚de‡
PNG_NO_READ_INVERT


617 
	#PNG_READ_INVERT_SUPPORTED


	)

619 #i‚de‡
PNG_NO_READ_DITHER


620 
	#PNG_READ_DITHER_SUPPORTED


	)

622 #i‚de‡
PNG_NO_READ_BACKGROUND


623 
	#PNG_READ_BACKGROUND_SUPPORTED


	)

625 #i‚de‡
PNG_NO_READ_16_TO_8


626 
	#PNG_READ_16_TO_8_SUPPORTED


	)

628 #i‚de‡
PNG_NO_READ_FILLER


629 
	#PNG_READ_FILLER_SUPPORTED


	)

631 #i‚de‡
PNG_NO_READ_GAMMA


632 
	#PNG_READ_GAMMA_SUPPORTED


	)

634 #i‚de‡
PNG_NO_READ_GRAY_TO_RGB


635 
	#PNG_READ_GRAY_TO_RGB_SUPPORTED


	)

637 #i‚de‡
PNG_NO_READ_SWAP_ALPHA


638 
	#PNG_READ_SWAP_ALPHA_SUPPORTED


	)

640 #i‚de‡
PNG_NO_READ_INVERT_ALPHA


641 
	#PNG_READ_INVERT_ALPHA_SUPPORTED


	)

643 #i‚de‡
PNG_NO_READ_STRIP_ALPHA


644 
	#PNG_READ_STRIP_ALPHA_SUPPORTED


	)

646 #i‚de‡
PNG_NO_READ_USER_TRANSFORM


647 
	#PNG_READ_USER_TRANSFORM_SUPPORTED


	)

649 #i‚de‡
PNG_NO_READ_RGB_TO_GRAY


650 
	#PNG_READ_RGB_TO_GRAY_SUPPORTED


	)

655 #i‡!
	`deföed
(
PNG_NO_PROGRESSIVE_READ
) && \

656 !
	$deföed
(
PNG_PROGRESSIVE_READ_NOT_SUPPORTED
)

657 
	#PNG_PROGRESSIVE_READ_SUPPORTED


	)

660 
	#PNG_READ_INTERLACING_SUPPORTED


	)

663 #i‡!
	`deföed
(
PNG_NO_SEQUENTIAL_READ
) && \

664 !
	`deföed
(
PNG_SEQUENTIAL_READ_SUPPORTED
) && \

665 !
	$deföed
(
PNG_NO_SEQUENTIAL_READ_SUPPORTED
)

666 
	#PNG_SEQUENTIAL_READ_SUPPORTED


	)

669 
	#PNG_READ_INTERLACING_SUPPORTED


	)

671 #i‚de‡
PNG_NO_READ_COMPOSITE_NODIV


672 #i‚de‡
PNG_NO_READ_COMPOSITED_NODIV


673 
	#PNG_READ_COMPOSITE_NODIV_SUPPORTED


	)

677 #i‡
	`deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

680 #i‚de‡
PNG_NO_READ_EMPTY_PLTE


681 
	#PNG_READ_EMPTY_PLTE_SUPPORTED


	)

687 #ifde‡
PNG_WRITE_SUPPORTED


689 #i‡!
	`deföed
(
PNG_WRITE_TRANSFORMS_NOT_SUPPORTED
) && \

690 !
	$deföed
(
PNG_NO_WRITE_TRANSFORMS
)

691 
	#PNG_WRITE_TRANSFORMS_SUPPORTED


	)

694 #ifde‡
PNG_WRITE_TRANSFORMS_SUPPORTED


695 #i‚de‡
PNG_NO_WRITE_SHIFT


696 
	#PNG_WRITE_SHIFT_SUPPORTED


	)

698 #i‚de‡
PNG_NO_WRITE_PACK


699 
	#PNG_WRITE_PACK_SUPPORTED


	)

701 #i‚de‡
PNG_NO_WRITE_BGR


702 
	#PNG_WRITE_BGR_SUPPORTED


	)

704 #i‚de‡
PNG_NO_WRITE_SWAP


705 
	#PNG_WRITE_SWAP_SUPPORTED


	)

707 #i‚de‡
PNG_NO_WRITE_PACKSWAP


708 
	#PNG_WRITE_PACKSWAP_SUPPORTED


	)

710 #i‚de‡
PNG_NO_WRITE_INVERT


711 
	#PNG_WRITE_INVERT_SUPPORTED


	)

713 #i‚de‡
PNG_NO_WRITE_FILLER


714 
	#PNG_WRITE_FILLER_SUPPORTED


	)

716 #i‚de‡
PNG_NO_WRITE_SWAP_ALPHA


717 
	#PNG_WRITE_SWAP_ALPHA_SUPPORTED


	)

719 #i‚de‡
PNG_1_0_X


720 #i‚de‡
PNG_NO_WRITE_INVERT_ALPHA


721 
	#PNG_WRITE_INVERT_ALPHA_SUPPORTED


	)

724 #i‚de‡
PNG_NO_WRITE_USER_TRANSFORM


725 
	#PNG_WRITE_USER_TRANSFORM_SUPPORTED


	)

729 #i‡!
	`deföed
(
PNG_NO_WRITE_INTERLACING_SUPPORTED
) && \

730 !
	$deföed
(
PNG_WRITE_INTERLACING_SUPPORTED
)

731 
	#PNG_WRITE_INTERLACING_SUPPORTED


	)

736 #i‡!
	`deföed
(
PNG_NO_WRITE_WEIGHTED_FILTER
) && \

737 !
	`deföed
(
PNG_WRITE_WEIGHTED_FILTER
) && \

738 
	$deföed
(
PNG_FLOATING_POINT_SUPPORTED
)

739 
	#PNG_WRITE_WEIGHTED_FILTER_SUPPORTED


	)

742 #i‚de‡
PNG_NO_WRITE_FLUSH


743 
	#PNG_WRITE_FLUSH_SUPPORTED


	)

746 #i‡
	`deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

748 #i‚de‡
PNG_NO_WRITE_EMPTY_PLTE


749 
	#PNG_WRITE_EMPTY_PLTE_SUPPORTED


	)

755 #i‚de‡
PNG_1_0_X


756 #i‚de‡
PNG_NO_ERROR_NUMBERS


757 
	#PNG_ERROR_NUMBERS_SUPPORTED


	)

761 #i‡
	`deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

762 
	$deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
)

763 #i‚de‡
PNG_NO_USER_TRANSFORM_PTR


764 
	#PNG_USER_TRANSFORM_PTR_SUPPORTED


	)

768 #i‚de‡
PNG_NO_STDIO


769 
	#PNG_TIME_RFC1123_SUPPORTED


	)

788 #i‡!
	`deföed
(
PNG_NO_EASY_ACCESS
Ë&& !deföed(
PNG_EASY_ACCESS_SUPPORTED
)

789 
	#PNG_EASY_ACCESS_SUPPORTED


	)

797 #i‡
	`deföed
(
PNG_READ_SUPPORTED
Ë&& !deföed(
PNG_NO_OPTIMIZED_CODE
)

798 #i‚de‡
PNG_OPTIMIZED_CODE_SUPPORTED


799 
	#PNG_OPTIMIZED_CODE_SUPPORTED


	)

803 #i‡
	`deföed
(
PNG_READ_SUPPORTED
Ë&& !deföed(
PNG_NO_ASSEMBLER_CODE
)

804 #i‚de‡
PNG_ASSEMBLER_CODE_SUPPORTED


805 
	#PNG_ASSEMBLER_CODE_SUPPORTED


	)

808 #i‡
	`deföed
(
__GNUC__
Ë&& deföed(
__x86_64__
) && (__GNUC__ < 4)

810 #i‡!
	`deföed
(
PNG_MMX_CODE_SUPPORTED
Ë&& !deföed(
PNG_NO_MMX_CODE
)

811 
	#PNG_NO_MMX_CODE


	)

815 #ifde‡
__APPLE__


816 #i‡!
	`deföed
(
PNG_MMX_CODE_SUPPORTED
Ë&& !deföed(
PNG_NO_MMX_CODE
)

817 
	#PNG_NO_MMX_CODE


	)

821 #i‡(
	`deföed
(
__MWERKS__
Ë&& ((__MWERKS__ < 0x0900Ë|| 
macötosh
))

822 #i‡!
	`deföed
(
PNG_MMX_CODE_SUPPORTED
Ë&& !deföed(
PNG_NO_MMX_CODE
)

823 
	#PNG_NO_MMX_CODE


	)

827 #i‡!
	`deföed
(
PNG_MMX_CODE_SUPPORTED
Ë&& !deföed(
PNG_NO_MMX_CODE
)

828 
	#PNG_MMX_CODE_SUPPORTED


	)

835 #i‚de‡
PNG_1_0_X


836 #i‡!
	`deföed
(
PNG_NO_USER_MEM
Ë&& !deföed(
PNG_USER_MEM_SUPPORTED
)

837 
	#PNG_USER_MEM_SUPPORTED


	)

842 #i‚de‡
PNG_1_0_X


843 #i‚de‡
PNG_SET_USER_LIMITS_SUPPORTED


844 #i‚de‡
PNG_NO_SET_USER_LIMITS


845 
	#PNG_SET_USER_LIMITS_SUPPORTED


	)

851 #i‚de‡
PNG_USER_LIMITS_SUPPORTED


852 #i‚de‡
PNG_NO_USER_LIMITS


853 
	#PNG_USER_LIMITS_SUPPORTED


	)

860 #i‚de‡
PNG_USER_WIDTH_MAX


861 
	#PNG_USER_WIDTH_MAX
 1000000L

	)

863 #i‚de‡
PNG_USER_HEIGHT_MAX


864 
	#PNG_USER_HEIGHT_MAX
 1000000L

	)

870 #i‚de‡
PNG_USER_CHUNK_CACHE_MAX


871 
	#PNG_USER_CHUNK_CACHE_MAX
 0

	)

875 #i‚de‡
PNG_USER_CHUNK_MALLOC_MAX


876 
	#PNG_USER_CHUNK_MALLOC_MAX
 0

	)

879 #i‚de‡
PNG_LITERAL_SHARP


880 
	#PNG_LITERAL_SHARP
 0x23

	)

882 #i‚de‡
PNG_LITERAL_LEFT_SQUARE_BRACKET


883 
	#PNG_LITERAL_LEFT_SQUARE_BRACKET
 0x5b

	)

885 #i‚de‡
PNG_LITERAL_RIGHT_SQUARE_BRACKET


886 
	#PNG_LITERAL_RIGHT_SQUARE_BRACKET
 0x5d

	)

890 #i‚de‡
PNG_STRING_NEWLINE


891 
	#PNG_STRING_NEWLINE
 "\n"

	)

918 #i‡!
	`deföed
(
PNG_NO_POINTER_INDEXING
) && \

919 !
	$deföed
(
PNG_POINTER_INDEXING_SUPPORTED
)

920 
	#PNG_POINTER_INDEXING_SUPPORTED


	)

935 #i‡
	`deföed
(
PNG_READ_SUPPORTED
) && \

936 !
	`deföed
(
PNG_READ_ANCILLARY_CHUNKS_NOT_SUPPORTED
) && \

937 !
	$deföed
(
PNG_NO_READ_ANCILLARY_CHUNKS
)

938 
	#PNG_READ_ANCILLARY_CHUNKS_SUPPORTED


	)

941 #i‡
	`deföed
(
PNG_WRITE_SUPPORTED
) && \

942 !
	`deföed
(
PNG_WRITE_ANCILLARY_CHUNKS_NOT_SUPPORTED
) && \

943 !
	$deföed
(
PNG_NO_WRITE_ANCILLARY_CHUNKS
)

944 
	#PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED


	)

947 #ifde‡
PNG_READ_ANCILLARY_CHUNKS_SUPPORTED


949 #ifde‡
PNG_NO_READ_TEXT


950 
	#PNG_NO_READ_iTXt


	)

951 
	#PNG_NO_READ_tEXt


	)

952 
	#PNG_NO_READ_zTXt


	)

954 #i‚de‡
PNG_NO_READ_bKGD


955 
	#PNG_READ_bKGD_SUPPORTED


	)

956 
	#PNG_bKGD_SUPPORTED


	)

958 #i‚de‡
PNG_NO_READ_cHRM


959 
	#PNG_READ_cHRM_SUPPORTED


	)

960 
	#PNG_cHRM_SUPPORTED


	)

962 #i‚de‡
PNG_NO_READ_gAMA


963 
	#PNG_READ_gAMA_SUPPORTED


	)

964 
	#PNG_gAMA_SUPPORTED


	)

966 #i‚de‡
PNG_NO_READ_hIST


967 
	#PNG_READ_hIST_SUPPORTED


	)

968 
	#PNG_hIST_SUPPORTED


	)

970 #i‚de‡
PNG_NO_READ_iCCP


971 
	#PNG_READ_iCCP_SUPPORTED


	)

972 
	#PNG_iCCP_SUPPORTED


	)

974 #i‚de‡
PNG_NO_READ_iTXt


975 #i‚de‡
PNG_READ_iTXt_SUPPORTED


976 
	#PNG_READ_iTXt_SUPPORTED


	)

978 #i‚de‡
PNG_iTXt_SUPPORTED


979 
	#PNG_iTXt_SUPPORTED


	)

982 #i‚de‡
PNG_NO_READ_oFFs


983 
	#PNG_READ_oFFs_SUPPORTED


	)

984 
	#PNG_oFFs_SUPPORTED


	)

986 #i‚de‡
PNG_NO_READ_pCAL


987 
	#PNG_READ_pCAL_SUPPORTED


	)

988 
	#PNG_pCAL_SUPPORTED


	)

990 #i‚de‡
PNG_NO_READ_sCAL


991 
	#PNG_READ_sCAL_SUPPORTED


	)

992 
	#PNG_sCAL_SUPPORTED


	)

994 #i‚de‡
PNG_NO_READ_pHYs


995 
	#PNG_READ_pHYs_SUPPORTED


	)

996 
	#PNG_pHYs_SUPPORTED


	)

998 #i‚de‡
PNG_NO_READ_sBIT


999 
	#PNG_READ_sBIT_SUPPORTED


	)

1000 
	#PNG_sBIT_SUPPORTED


	)

1002 #i‚de‡
PNG_NO_READ_sPLT


1003 
	#PNG_READ_sPLT_SUPPORTED


	)

1004 
	#PNG_sPLT_SUPPORTED


	)

1006 #i‚de‡
PNG_NO_READ_sRGB


1007 
	#PNG_READ_sRGB_SUPPORTED


	)

1008 
	#PNG_sRGB_SUPPORTED


	)

1010 #i‚de‡
PNG_NO_READ_tEXt


1011 
	#PNG_READ_tEXt_SUPPORTED


	)

1012 
	#PNG_tEXt_SUPPORTED


	)

1014 #i‚de‡
PNG_NO_READ_tIME


1015 
	#PNG_READ_tIME_SUPPORTED


	)

1016 
	#PNG_tIME_SUPPORTED


	)

1018 #i‚de‡
PNG_NO_READ_tRNS


1019 
	#PNG_READ_tRNS_SUPPORTED


	)

1020 
	#PNG_tRNS_SUPPORTED


	)

1022 #i‚de‡
PNG_NO_READ_zTXt


1023 
	#PNG_READ_zTXt_SUPPORTED


	)

1024 
	#PNG_zTXt_SUPPORTED


	)

1026 #i‚de‡
PNG_NO_READ_OPT_PLTE


1027 
	#PNG_READ_OPT_PLTE_SUPPORTED


	)

1029 #i‡
	`deföed
(
PNG_READ_iTXt_SUPPORTED
Ë|| deföed(
PNG_READ_tEXt_SUPPORTED
) || \

1030 
	$deföed
(
PNG_READ_zTXt_SUPPORTED
)

1031 
	#PNG_READ_TEXT_SUPPORTED


	)

1032 
	#PNG_TEXT_SUPPORTED


	)

1037 #i‚de‡
PNG_NO_READ_UNKNOWN_CHUNKS


1038 
	#PNG_READ_UNKNOWN_CHUNKS_SUPPORTED


	)

1039 #i‚de‡
PNG_UNKNOWN_CHUNKS_SUPPORTED


1040 
	#PNG_UNKNOWN_CHUNKS_SUPPORTED


	)

1043 #i‡!
	`deföed
(
PNG_NO_READ_USER_CHUNKS
) && \

1044 
	$deföed
(
PNG_READ_UNKNOWN_CHUNKS_SUPPORTED
)

1045 
	#PNG_READ_USER_CHUNKS_SUPPORTED


	)

1046 
	#PNG_USER_CHUNKS_SUPPORTED


	)

1047 #ifde‡
PNG_NO_READ_UNKNOWN_CHUNKS


1048 #unde‡
PNG_NO_READ_UNKNOWN_CHUNKS


1050 #ifde‡
PNG_NO_HANDLE_AS_UNKNOWN


1051 #unde‡
PNG_NO_HANDLE_AS_UNKNOWN


1055 #i‚de‡
PNG_NO_HANDLE_AS_UNKNOWN


1056 #i‚de‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


1057 
	#PNG_HANDLE_AS_UNKNOWN_SUPPORTED


	)

1061 #ifde‡
PNG_WRITE_SUPPORTED


1062 #ifde‡
PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED


1064 #ifde‡
PNG_NO_WRITE_TEXT


1065 
	#PNG_NO_WRITE_iTXt


	)

1066 
	#PNG_NO_WRITE_tEXt


	)

1067 
	#PNG_NO_WRITE_zTXt


	)

1069 #i‚de‡
PNG_NO_WRITE_bKGD


1070 
	#PNG_WRITE_bKGD_SUPPORTED


	)

1071 #i‚de‡
PNG_bKGD_SUPPORTED


1072 
	#PNG_bKGD_SUPPORTED


	)

1075 #i‚de‡
PNG_NO_WRITE_cHRM


1076 
	#PNG_WRITE_cHRM_SUPPORTED


	)

1077 #i‚de‡
PNG_cHRM_SUPPORTED


1078 
	#PNG_cHRM_SUPPORTED


	)

1081 #i‚de‡
PNG_NO_WRITE_gAMA


1082 
	#PNG_WRITE_gAMA_SUPPORTED


	)

1083 #i‚de‡
PNG_gAMA_SUPPORTED


1084 
	#PNG_gAMA_SUPPORTED


	)

1087 #i‚de‡
PNG_NO_WRITE_hIST


1088 
	#PNG_WRITE_hIST_SUPPORTED


	)

1089 #i‚de‡
PNG_hIST_SUPPORTED


1090 
	#PNG_hIST_SUPPORTED


	)

1093 #i‚de‡
PNG_NO_WRITE_iCCP


1094 
	#PNG_WRITE_iCCP_SUPPORTED


	)

1095 #i‚de‡
PNG_iCCP_SUPPORTED


1096 
	#PNG_iCCP_SUPPORTED


	)

1099 #i‚de‡
PNG_NO_WRITE_iTXt


1100 #i‚de‡
PNG_WRITE_iTXt_SUPPORTED


1101 
	#PNG_WRITE_iTXt_SUPPORTED


	)

1103 #i‚de‡
PNG_iTXt_SUPPORTED


1104 
	#PNG_iTXt_SUPPORTED


	)

1107 #i‚de‡
PNG_NO_WRITE_oFFs


1108 
	#PNG_WRITE_oFFs_SUPPORTED


	)

1109 #i‚de‡
PNG_oFFs_SUPPORTED


1110 
	#PNG_oFFs_SUPPORTED


	)

1113 #i‚de‡
PNG_NO_WRITE_pCAL


1114 
	#PNG_WRITE_pCAL_SUPPORTED


	)

1115 #i‚de‡
PNG_pCAL_SUPPORTED


1116 
	#PNG_pCAL_SUPPORTED


	)

1119 #i‚de‡
PNG_NO_WRITE_sCAL


1120 
	#PNG_WRITE_sCAL_SUPPORTED


	)

1121 #i‚de‡
PNG_sCAL_SUPPORTED


1122 
	#PNG_sCAL_SUPPORTED


	)

1125 #i‚de‡
PNG_NO_WRITE_pHYs


1126 
	#PNG_WRITE_pHYs_SUPPORTED


	)

1127 #i‚de‡
PNG_pHYs_SUPPORTED


1128 
	#PNG_pHYs_SUPPORTED


	)

1131 #i‚de‡
PNG_NO_WRITE_sBIT


1132 
	#PNG_WRITE_sBIT_SUPPORTED


	)

1133 #i‚de‡
PNG_sBIT_SUPPORTED


1134 
	#PNG_sBIT_SUPPORTED


	)

1137 #i‚de‡
PNG_NO_WRITE_sPLT


1138 
	#PNG_WRITE_sPLT_SUPPORTED


	)

1139 #i‚de‡
PNG_sPLT_SUPPORTED


1140 
	#PNG_sPLT_SUPPORTED


	)

1143 #i‚de‡
PNG_NO_WRITE_sRGB


1144 
	#PNG_WRITE_sRGB_SUPPORTED


	)

1145 #i‚de‡
PNG_sRGB_SUPPORTED


1146 
	#PNG_sRGB_SUPPORTED


	)

1149 #i‚de‡
PNG_NO_WRITE_tEXt


1150 
	#PNG_WRITE_tEXt_SUPPORTED


	)

1151 #i‚de‡
PNG_tEXt_SUPPORTED


1152 
	#PNG_tEXt_SUPPORTED


	)

1155 #i‚de‡
PNG_NO_WRITE_tIME


1156 
	#PNG_WRITE_tIME_SUPPORTED


	)

1157 #i‚de‡
PNG_tIME_SUPPORTED


1158 
	#PNG_tIME_SUPPORTED


	)

1161 #i‚de‡
PNG_NO_WRITE_tRNS


1162 
	#PNG_WRITE_tRNS_SUPPORTED


	)

1163 #i‚de‡
PNG_tRNS_SUPPORTED


1164 
	#PNG_tRNS_SUPPORTED


	)

1167 #i‚de‡
PNG_NO_WRITE_zTXt


1168 
	#PNG_WRITE_zTXt_SUPPORTED


	)

1169 #i‚de‡
PNG_zTXt_SUPPORTED


1170 
	#PNG_zTXt_SUPPORTED


	)

1173 #i‡
	`deföed
(
PNG_WRITE_iTXt_SUPPORTED
Ë|| deföed(
PNG_WRITE_tEXt_SUPPORTED
) || \

1174 
	$deföed
(
PNG_WRITE_zTXt_SUPPORTED
)

1175 
	#PNG_WRITE_TEXT_SUPPORTED


	)

1176 #i‚de‡
PNG_TEXT_SUPPORTED


1177 
	#PNG_TEXT_SUPPORTED


	)

1181 #ifde‡
PNG_WRITE_tIME_SUPPORTED


1182 #i‚de‡
PNG_NO_CONVERT_tIME


1183 #i‚de‡
_WIN32_WCE


1185 #i‚de‡
PNG_CONVERT_tIME_SUPPORTED


1186 
	#PNG_CONVERT_tIME_SUPPORTED


	)

1194 #i‡!
	`deföed
(
PNG_NO_WRITE_FILTER
Ë&& !deföed(
PNG_WRITE_FILTER_SUPPORTED
)

1195 
	#PNG_WRITE_FILTER_SUPPORTED


	)

1198 #i‚de‡
PNG_NO_WRITE_UNKNOWN_CHUNKS


1199 
	#PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED


	)

1200 #i‚de‡
PNG_UNKNOWN_CHUNKS_SUPPORTED


1201 
	#PNG_UNKNOWN_CHUNKS_SUPPORTED


	)

1205 #i‚de‡
PNG_NO_HANDLE_AS_UNKNOWN


1206 #i‚de‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


1207 
	#PNG_HANDLE_AS_UNKNOWN_SUPPORTED


	)

1216 #i‚de‡
PNG_NO_INFO_IMAGE


1217 
	#PNG_INFO_IMAGE_SUPPORTED


	)

1221 #ifde‡
PNG_CONVERT_tIME_SUPPORTED


1223 
	~<time.h
>

1235 
	t≤g_uöt_32
;

1236 
	t≤g_öt_32
;

1237 
	t≤g_uöt_16
;

1238 
	t≤g_öt_16
;

1239 
	t≤g_byã
;

1243 #ifde‡
PNG_SIZE_T


1244 
PNG_SIZE_T
 
	t≤g_size_t
;

1245 
	#≤g_sizeof
(
x
Ë
	`≤g_c⁄vît_size
((x))

	)

1247 
size_t
 
	t≤g_size_t
;

1248 
	#≤g_sizeof
(
x
Ë(x)

	)

1262 #ifde‡
__BORLANDC__


1263 #i‡
	`deföed
(
__LARGE__
Ë|| deföed(
__HUGE__
Ë|| deföed(
__COMPACT__
)

1264 
	#LDATA
 1

	)

1266 
	#LDATA
 0

	)

1269 #i‡!
	`deföed
(
__WIN32__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__CYGWIN__
)

1270 
	#PNG_MAX_MALLOC_64K


	)

1271 #i‡(
LDATA
 != 1)

1272 #i‚de‡
FAR


1273 
	#FAR
 
__Ár


	)

1275 
	#USE_FAR_KEYWORD


	)

1292 #ifde‡
FAR


1293 #ifde‡
M_I86MM


1294 
	#USE_FAR_KEYWORD


	)

1295 
	#FARDATA
 
FAR


	)

1296 
	~<dos.h
>

1301 #i‚de‡
FAR


1302 
	#FAR


	)

1306 #i‚de‡
FARDATA


1307 
	#FARDATA


	)

1312 
≤g_öt_32
 
	t≤g_fixed_poöt
;

1315 
	tFAR
 * 
	t≤g_voidp
;

1316 
≤g_byã
 
	tFAR
 * 
	t≤g_byãp
;

1317 
≤g_uöt_32
 
	tFAR
 * 
	t≤g_uöt_32p
;

1318 
≤g_öt_32
 
	tFAR
 * 
	t≤g_öt_32p
;

1319 
≤g_uöt_16
 
	tFAR
 * 
	t≤g_uöt_16p
;

1320 
≤g_öt_16
 
	tFAR
 * 
	t≤g_öt_16p
;

1321 
PNG_CONST
 
	tFAR
 * 
	t≤g_c⁄°_ch¨p
;

1322 
	tFAR
 * 
	t≤g_ch¨p
;

1323 
≤g_fixed_poöt
 
	tFAR
 * 
	t≤g_fixed_poöt_p
;

1325 #i‚de‡
PNG_NO_STDIO


1326 #ifde‡
_WIN32_WCE


1327 
HANDLE
 
	t≤g_FILE_p
;

1329 
FILE
 * 
	t≤g_FILE_p
;

1333 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1334 
	tFAR
 * 
	t≤g_doubÀp
;

1338 
≤g_byã
 
	tFAR
 * FAR * 
	t≤g_byãµ
;

1339 
≤g_uöt_32
 
	tFAR
 * FAR * 
	t≤g_uöt_32µ
;

1340 
≤g_öt_32
 
	tFAR
 * FAR * 
	t≤g_öt_32µ
;

1341 
≤g_uöt_16
 
	tFAR
 * FAR * 
	t≤g_uöt_16µ
;

1342 
≤g_öt_16
 
	tFAR
 * FAR * 
	t≤g_öt_16µ
;

1343 
PNG_CONST
 
	tFAR
 * FAR * 
	t≤g_c⁄°_ch¨µ
;

1344 
	tFAR
 * FAR * 
	t≤g_ch¨µ
;

1345 
≤g_fixed_poöt
 
	tFAR
 * FAR * 
	t≤g_fixed_poöt_µ
;

1346 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1347 
	tFAR
 * FAR * 
	t≤g_doubÀµ
;

1351 
	tFAR
 * FAR * FAR * 
	t≤g_ch¨µp
;

1353 #i‡
	`deföed
(
PNG_1_0_X
Ë|| deföed(
PNG_1_2_X
)

1360 
ch¨f
 * 
	t≤g_zch¨p
;

1361 
ch¨f
 * 
	tFAR
 * 
	t≤g_zch¨µ
;

1362 
z_°ªam
 
	tFAR
 * 
	t≤g_z°ªamp
;

1383 #i‡!
	`deföed
(
PNG_DLL
Ë&& (deföed(
PNG_BUILD_DLL
Ë|| deföed(
PNG_USE_DLL
))

1384 
	#PNG_DLL


	)

1390 #ifde‡
__CYGWIN__


1391 #i‚de‡
PNG_STATIC


1392 #ifde‡
PNG_USE_GLOBAL_ARRAYS


1393 #unde‡
PNG_USE_GLOBAL_ARRAYS


1395 #i‚de‡
PNG_USE_LOCAL_ARRAYS


1396 
	#PNG_USE_LOCAL_ARRAYS


	)

1399 #i‡
	`deföed
(
PNG_USE_LOCAL_ARRAYS
Ë|| deföed(
PNG_NO_GLOBAL_ARRAYS
)

1400 #ifde‡
PNG_USE_GLOBAL_ARRAYS


1401 #unde‡
PNG_USE_GLOBAL_ARRAYS


1405 #i‡!
	`deföed
(
PNG_USE_LOCAL_ARRAYS
Ë&& !deföed(
PNG_USE_GLOBAL_ARRAYS
)

1406 
	#PNG_USE_LOCAL_ARRAYS


	)

1414 #i‡!
	`deföed
(
PNG_USE_LOCAL_ARRAYS
Ë&& !deföed(
PNG_USE_GLOBAL_ARRAYS
)

1415 #i‡
	`deföed
(
PNG_NO_GLOBAL_ARRAYS
) || \

1416 (
	`deföed
(
__GNUC__
Ë&& deföed(
PNG_DLL
)Ë|| 
	$deföed
(
_MSC_VER
)

1417 
	#PNG_USE_LOCAL_ARRAYS


	)

1419 
	#PNG_USE_GLOBAL_ARRAYS


	)

1423 #ifde‡
__CYGWIN__


1424 #unde‡
PNGAPI


1425 
	#PNGAPI
 
__cde˛


	)

1426 #unde‡
PNG_IMPEXP


1427 
	#PNG_IMPEXP


	)

1437 #i‡
	`deföed
(
__MINGW32__
Ë&& !deföed(
PNG_MODULEDEF
)

1438 #i‚de‡
PNG_NO_MODULEDEF


1439 
	#PNG_NO_MODULEDEF


	)

1443 #i‡!
	`deföed
(
PNG_IMPEXP
Ë&& deföed(
PNG_BUILD_DLL
Ë&& !deföed(
PNG_NO_MODULEDEF
)

1444 
	#PNG_IMPEXP


	)

1447 #i‡
	`deföed
(
PNG_DLL
Ë|| deföed(
_DLL
Ë|| deföed(
__DLL__
 ) || \

1448 (–
	`deföed
(
_Wödows
Ë|| deföed(
_WINDOWS
) || \

1449 
	`deföed
(
WIN32
Ë|| deföed(
_WIN32
Ë|| 
	$deföed
(
__WIN32__
) ))

1451 #i‚de‡
PNGAPI


1452 #i‡
	`deföed
(
__GNUC__
Ë|| (deföed (
_MSC_VER
) && (_MSC_VER >= 800))

1453 
	#PNGAPI
 
__cde˛


	)

1455 
	#PNGAPI
 
_cde˛


	)

1459 #i‡!
	`deföed
(
PNG_IMPEXP
Ë&& (!deföed(
PNG_DLL
) || \

1461 
	#PNG_IMPEXP


	)

1464 #i‚de‡
PNG_IMPEXP


1466 
	#PNG_EXPORT_TYPE1
(
ty≥
,
symbﬁ
Ë
PNG_IMPEXP
Åy≥ 
PNGAPI
 
	)
symbol

1467 
	#PNG_EXPORT_TYPE2
(
ty≥
,
symbﬁ
Ëty≥ 
PNG_IMPEXP
 
PNGAPI
 
	)
symbol

1470 #i‡
	`deföed
(
_MSC_VER
Ë|| deföed(
__BORLANDC__
)

1471 #i‡(
_MSC_VER
 >800Ë|| (
__BORLANDC__
 >= 0x500)

1472 
	#PNG_EXPORT
 
PNG_EXPORT_TYPE1


	)

1474 
	#PNG_EXPORT
 
PNG_EXPORT_TYPE2


	)

1475 #ifde‡
PNG_BUILD_DLL


1476 
	#PNG_IMPEXP
 
__exp‹t


	)

1478 
	#PNG_IMPEXP


	)

1481 
C
++ 
	`˛as£s
 (=
huge
) */

1485 #i‚de‡
PNG_IMPEXP


1486 #ifde‡
PNG_BUILD_DLL


1487 
	#PNG_IMPEXP
 
	`__de˛•ec
(
dŒexp‹t
)

	)

1489 
	#PNG_IMPEXP
 
	`__de˛•ec
(
dŒimp‹t
)

	)

1494 #i‡(
	`deföed
(
__IBMC__
Ë|| deföed(
__IBMCPP__
)Ë&& deföed(
__OS2__
)

1495 #i‚de‡
PNGAPI


1496 
	#PNGAPI
 
_Sy°em


	)

1504 #i‚de‡
PNGAPI


1505 
	#PNGAPI


	)

1507 #i‚de‡
PNG_IMPEXP


1508 
	#PNG_IMPEXP


	)

1511 #ifde‡
PNG_BUILDSYMS


1512 #i‚de‡
PNG_EXPORT


1513 
	#PNG_EXPORT
(
ty≥
,
symbﬁ
Ë
PNG_FUNCTION_EXPORT
 symbﬁ 
END


	)

1515 #ifde‡
PNG_USE_GLOBAL_ARRAYS


1516 #i‚de‡
PNG_EXPORT_VAR


1517 
	#PNG_EXPORT_VAR
(
ty≥
Ë
PNG_DATA_EXPORT


	)

1522 #i‚de‡
PNG_EXPORT


1523 
	#PNG_EXPORT
(
ty≥
,
symbﬁ
Ë
PNG_IMPEXP
Åy≥ 
PNGAPI
 
	)
symbol

1526 #ifde‡
PNG_USE_GLOBAL_ARRAYS


1527 #i‚de‡
PNG_EXPORT_VAR


1528 
	#PNG_EXPORT_VAR
(
ty≥
Ë
PNG_IMPEXP
 
	)
type

1532 #ifde‡
PNG_PEDANTIC_WARNINGS


1533 #i‚de‡
PNG_PEDANTIC_WARNINGS_SUPPORTED


1534 
	#PNG_PEDANTIC_WARNINGS_SUPPORTED


	)

1538 #ifde‡
PNG_PEDANTIC_WARNINGS_SUPPORTED


1544 #ifde‡
__GNUC__


1545 #i‚de‡
PNG_USE_RESULT


1546 
	#PNG_USE_RESULT
 
	`__©åibuã__
((
__w¨n_unu£d_ªsu…__
))

	)

1548 #i‚de‡
PNG_NORETURN


1549 
	#PNG_NORETURN
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

1551 #i‚de‡
PNG_ALLOCATED


1552 
	#PNG_ALLOCATED
 
	`__©åibuã__
((
__mÆloc__
))

	)

1559 #i‚de‡
PNG_DEPRECATED


1560 
	#PNG_DEPRECATED
 
	`__©åibuã__
((
__dïªˇãd__
))

	)

1562 #i‚de‡
PNG_DEPSTRUCT


1563 
	#PNG_DEPSTRUCT
 
	`__©åibuã__
((
__dïªˇãd__
))

	)

1565 #i‚de‡
PNG_PRIVATE


1567 
	#PNG_PRIVATE
 \

1568 
	`__©åibuã__
((
	`w¨nög
("Thi†fun˘i⁄ i†nŸÉxp‹ãd byÜib≤g.")))

	)

1570 
	#PNG_PRIVATE
 \

1571 
	`__©åibuã__
((
__dïªˇãd__
))

	)

1577 #i‚de‡
PNG_DEPRECATED


1578 
	#PNG_DEPRECATED


	)

1580 #i‚de‡
PNG_USE_RESULT


1581 
	#PNG_USE_RESULT


	)

1583 #i‚de‡
PNG_NORETURN


1584 
	#PNG_NORETURN


	)

1586 #i‚de‡
PNG_ALLOCATED


1587 
	#PNG_ALLOCATED


	)

1589 #i‚de‡
PNG_DEPSTRUCT


1590 
	#PNG_DEPSTRUCT


	)

1592 #i‚de‡
PNG_PRIVATE


1593 
	#PNG_PRIVATE


	)

1600 #i‚de‡
PNG_ABORT


1601 
	#PNG_ABORT
(Ë
	`ab‹t
()

	)

1604 #ifde‡
PNG_SETJMP_SUPPORTED


1605 
	#≤g_jmpbuf
(
≤g_±r
Ë(’ng_±r)->
jmpbuf
)

	)

1607 
	#≤g_jmpbuf
(
≤g_±r
) \

1608 (
LIBPNG_WAS_COMPILED_WITH__PNG_SETJMP_NOT_SUPPORTED
)

	)

1611 #ifde‡
USE_FAR_KEYWORD


1613 
	#CHECK
 1

	)

1614 
	#NOCHECK
 0

	)

1615 
	#CVT_PTR
(
±r
Ë(
	`≤g_Ár_to_√¨
(
≤g_±r
,±r,
CHECK
))

	)

1616 
	#CVT_PTR_NOCHECK
(
±r
Ë(
	`≤g_Ár_to_√¨
(
≤g_±r
,±r,
NOCHECK
))

	)

1617 
	#≤g_¢¥ötf
 
_f¢¥ötf


	)

1618 
	#≤g_°æí
 
_f°æí


	)

1619 
	#≤g_memcmp
 
_fmemcmp


	)

1620 
	#≤g_mem˝y
 
_fmem˝y


	)

1621 
	#≤g_mem£t
 
_fmem£t


	)

1623 
	#CVT_PTR
(
±r
Ë’å)

	)

1624 
	#CVT_PTR_NOCHECK
(
±r
Ë’å)

	)

1625 #i‚de‡
PNG_NO_SNPRINTF


1626 #ifde‡
_MSC_VER


1627 
	#≤g_¢¥ötf
 
_¢¥ötf


	)

1628 
	#≤g_¢¥ötf2
 
_¢¥ötf


	)

1629 
	#≤g_¢¥ötf6
 
_¢¥ötf


	)

1631 
	#≤g_¢¥ötf
 
¢¥ötf


	)

1632 
	#≤g_¢¥ötf2
 
¢¥ötf


	)

1633 
	#≤g_¢¥ötf6
 
¢¥ötf


	)

1642 
	#≤g_¢¥ötf
(
s1
,
n
,
fmt
,
x1
Ë
	`•rötf
(s1,fmt,x1)

	)

1643 
	#≤g_¢¥ötf2
(
s1
,
n
,
fmt
,
x1
,
x2
Ë
	`•rötf
(s1,fmt,x1,x2)

	)

1644 
	#≤g_¢¥ötf6
(
s1
,
n
,
fmt
,
x1
,
x2
,
x3
,
x4
,
x5
,
x6
) \

1645 
	`•rötf
(
s1
,
fmt
,
x1
,
x2
,
x3
,
x4
,
x5
,
x6
)

	)

1647 
	#≤g_°æí
 
°æí


	)

1648 
	#≤g_memcmp
 
memcmp


	)

1649 
	#≤g_mem˝y
 
mem˝y


	)

1650 
	#≤g_mem£t
 
mem£t


	)

1657 #i‡(
PNG_ZBUF_SIZE
 > 65536LË&& 
	`deföed
(
PNG_MAX_MALLOC_64K
)

1658 #unde‡
PNG_ZBUF_SIZE


1659 
	#PNG_ZBUF_SIZE
 65536L

	)

	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


18 
	#Z_PREFIX_SET


	)

21 
	#_di°_code
 
z__di°_code


	)

22 
	#_Àngth_code
 
z__Àngth_code


	)

23 
	#_å_Æign
 
z__å_Æign


	)

24 
	#_å_Êush_block
 
z__å_Êush_block


	)

25 
	#_å_öô
 
z__å_öô


	)

26 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

27 
	#_å_èŒy
 
z__å_èŒy


	)

28 
	#adÀr32
 
z_adÀr32


	)

29 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

30 
	#adÀr32_comböe64
 
z_adÀr32_comböe64


	)

31 #i‚de‡
Z_SOLO


32 
	#com¥ess
 
z_com¥ess


	)

33 
	#com¥ess2
 
z_com¥ess2


	)

34 
	#com¥essBound
 
z_com¥essBound


	)

36 
	#¸c32
 
z_¸c32


	)

37 
	#¸c32_comböe
 
z_¸c32_comböe


	)

38 
	#¸c32_comböe64
 
z_¸c32_comböe64


	)

39 
	#deÊ©e
 
z_deÊ©e


	)

40 
	#deÊ©eBound
 
z_deÊ©eBound


	)

41 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

42 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

43 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

44 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

45 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

46 
	#deÊ©ePídög
 
z_deÊ©ePídög


	)

47 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

48 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

49 
	#deÊ©eRe£tKìp
 
z_deÊ©eRe£tKìp


	)

50 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

51 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

52 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

53 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

54 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

55 #i‚de‡
Z_SOLO


56 
	#gz_îr‹
 
z_gz_îr‹


	)

57 
	#gz_ötmax
 
z_gz_ötmax


	)

58 
	#gz_°rwöîr‹
 
z_gz_°rwöîr‹


	)

59 
	#gzbuf„r
 
z_gzbuf„r


	)

60 
	#gz˛óªº
 
z_gz˛óªº


	)

61 
	#gz˛o£
 
z_gz˛o£


	)

62 
	#gz˛o£_r
 
z_gz˛o£_r


	)

63 
	#gz˛o£_w
 
z_gz˛o£_w


	)

64 
	#gzdúe˘
 
z_gzdúe˘


	)

65 
	#gzd›í
 
z_gzd›í


	)

66 
	#gzeof
 
z_gzeof


	)

67 
	#gzîr‹
 
z_gzîr‹


	)

68 
	#gzÊush
 
z_gzÊush


	)

69 
	#gzgëc
 
z_gzgëc


	)

70 
	#gzgëc_
 
z_gzgëc_


	)

71 
	#gzgës
 
z_gzgës


	)

72 
	#gzoff£t
 
z_gzoff£t


	)

73 
	#gzoff£t64
 
z_gzoff£t64


	)

74 
	#gz›í
 
z_gz›í


	)

75 
	#gz›í64
 
z_gz›í64


	)

76 #ifde‡
_WIN32


77 
	#gz›í_w
 
z_gz›í_w


	)

79 
	#gz¥ötf
 
z_gz¥ötf


	)

80 
	#gzputc
 
z_gzputc


	)

81 
	#gzputs
 
z_gzputs


	)

82 
	#gzªad
 
z_gzªad


	)

83 
	#gzªwöd
 
z_gzªwöd


	)

84 
	#gz£ek
 
z_gz£ek


	)

85 
	#gz£ek64
 
z_gz£ek64


	)

86 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

87 
	#gzãŒ
 
z_gzãŒ


	)

88 
	#gzãŒ64
 
z_gzãŒ64


	)

89 
	#gzungëc
 
z_gzungëc


	)

90 
	#gzwrôe
 
z_gzwrôe


	)

92 
	#öÊ©e
 
z_öÊ©e


	)

93 
	#öÊ©eBack
 
z_öÊ©eBack


	)

94 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

95 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

96 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

97 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

98 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

99 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

100 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

101 
	#öÊ©eM¨k
 
z_öÊ©eM¨k


	)

102 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

103 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

104 
	#öÊ©eRe£t2
 
z_öÊ©eRe£t2


	)

105 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

106 
	#öÊ©eSync
 
z_öÊ©eSync


	)

107 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

108 
	#öÊ©eUndîmöe
 
z_öÊ©eUndîmöe


	)

109 
	#öÊ©eRe£tKìp
 
z_öÊ©eRe£tKìp


	)

110 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

111 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

112 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

113 #i‚de‡
Z_SOLO


114 
	#uncom¥ess
 
z_uncom¥ess


	)

116 
	#zEº‹
 
z_zEº‹


	)

117 #i‚de‡
Z_SOLO


118 
	#zˇŒoc
 
z_zˇŒoc


	)

119 
	#zc‰ì
 
z_zc‰ì


	)

121 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

122 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

125 
	#Byã
 
z_Byã


	)

126 
	#Byãf
 
z_Byãf


	)

127 
	#Æloc_func
 
z_Æloc_func


	)

128 
	#ch¨f
 
z_ch¨f


	)

129 
	#‰ì_func
 
z_‰ì_func


	)

130 #i‚de‡
Z_SOLO


131 
	#gzFûe
 
z_gzFûe


	)

133 
	#gz_hódî
 
z_gz_hódî


	)

134 
	#gz_hódîp
 
z_gz_hódîp


	)

135 
	#ö_func
 
z_ö_func


	)

136 
	#ötf
 
z_ötf


	)

137 
	#out_func
 
z_out_func


	)

138 
	#uI¡
 
z_uI¡


	)

139 
	#uI¡f
 
z_uI¡f


	)

140 
	#uL⁄g
 
z_uL⁄g


	)

141 
	#uL⁄gf
 
z_uL⁄gf


	)

142 
	#voidp
 
z_voidp


	)

143 
	#voidpc
 
z_voidpc


	)

144 
	#voidpf
 
z_voidpf


	)

147 
	#gz_hódî_s
 
z_gz_hódî_s


	)

148 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

152 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

153 
	#MSDOS


	)

155 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

156 
	#OS2


	)

158 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

159 
	#WINDOWS


	)

161 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

162 #i‚de‡
WIN32


163 
	#WIN32


	)

166 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

167 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

168 #i‚de‡
SYS16BIT


169 
	#SYS16BIT


	)

178 #ifde‡
SYS16BIT


179 
	#MAXSEG_64K


	)

181 #ifde‡
MSDOS


182 
	#UNALIGNED_OK


	)

185 #ifde‡
__STDC_VERSION__


186 #i‚de‡
STDC


187 
	#STDC


	)

189 #i‡
__STDC_VERSION__
 >= 199901L

190 #i‚de‡
STDC99


191 
	#STDC99


	)

195 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

196 
	#STDC


	)

198 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

199 
	#STDC


	)

201 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

202 
	#STDC


	)

204 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

205 
	#STDC


	)

208 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

209 
	#STDC


	)

212 #i‚de‡
STDC


214 c⁄°

	)

218 #i‡
deföed
(
ZLIB_CONST
Ë&& !deföed(
z_c⁄°
)

219 
	#z_c⁄°
 c⁄°

	)

221 
	#z_c⁄°


	)

225 #i‡
deföed
(
__MWERKS__
)||deföed(
≠∂ec
)||deföed(
THINK_C
)||deföed(
__SC__
)

226 
	#NO_DUMMY_DECL


	)

230 #i‚de‡
MAX_MEM_LEVEL


231 #ifde‡
MAXSEG_64K


232 
	#MAX_MEM_LEVEL
 8

	)

234 
	#MAX_MEM_LEVEL
 9

	)

243 #i‚de‡
MAX_WBITS


244 
	#MAX_WBITS
 15

	)

262 #i‚de‡
OF


263 #ifde‡
STDC


264 
	#OF
(
¨gs
Ë
	)
args

266 
	#OF
(
¨gs
Ë()

	)

270 #i‚de‡
Z_ARG


271 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

272 
	#Z_ARG
(
¨gs
Ë
	)
args

274 
	#Z_ARG
(
¨gs
Ë()

	)

284 #ifde‡
SYS16BIT


285 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

287 
	#SMALL_MEDIUM


	)

288 #ifde‡
_MSC_VER


289 
	#FAR
 
_Ár


	)

291 
	#FAR
 
Ár


	)

294 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

296 
	#SMALL_MEDIUM


	)

297 #ifde‡
__BORLANDC__


298 
	#FAR
 
_Ár


	)

300 
	#FAR
 
Ár


	)

305 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

309 #ifde‡
ZLIB_DLL


310 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

311 #ifde‡
ZLIB_INTERNAL


312 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

314 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

322 #ifde‡
ZLIB_WINAPI


323 #ifde‡
FAR


324 #unde‡
FAR


326 
	~<wödows.h
>

329 
	#ZEXPORT
 
WINAPI


	)

330 #ifde‡
WIN32


331 
	#ZEXPORTVA
 
WINAPIV


	)

333 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

338 #i‡
deföed
 (
__BEOS__
)

339 #ifde‡
ZLIB_DLL


340 #ifde‡
ZLIB_INTERNAL


341 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

342 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

344 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

345 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

350 #i‚de‡
ZEXTERN


351 
	#ZEXTERN
 

	)

353 #i‚de‡
ZEXPORT


354 
	#ZEXPORT


	)

356 #i‚de‡
ZEXPORTVA


357 
	#ZEXPORTVA


	)

360 #i‚de‡
FAR


361 
	#FAR


	)

364 #i‡!
deföed
(
__MACTYPES__
)

365 
	tByã
;

367 
	tuI¡
;

368 
	tuL⁄g
;

370 #ifde‡
SMALL_MEDIUM


372 
	#Byãf
 
Byã
 
FAR


	)

374 
Byã
 
	tFAR
 
	tByãf
;

376 
	tFAR
 
	tch¨f
;

377 
	tFAR
 
	tötf
;

378 
uI¡
 
	tFAR
 
	tuI¡f
;

379 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

381 #ifde‡
STDC


382 c⁄° *
	tvoidpc
;

383 
	tFAR
 *
	tvoidpf
;

384 *
	tvoidp
;

386 
Byã
 c⁄° *
	tvoidpc
;

387 
Byã
 
	tFAR
 *
	tvoidpf
;

388 
Byã
 *
	tvoidp
;

391 
	#Z_U4
 

	)

393 #i‡!
deföed
(
Z_U4
Ë&& !deföed(
Z_SOLO
Ë&& deföed(
STDC
)

394 
	~<limôs.h
>

395 #i‡(
UINT_MAX
 == 0xffffffffUL)

396 
	#Z_U4
 

	)

398 #i‡(
ULONG_MAX
 == 0xffffffffUL)

399 
	#Z_U4
 

	)

401 #i‡(
USHRT_MAX
 == 0xffffffffUL)

402 
	#Z_U4
 

	)

408 #ifde‡
Z_U4


409 
Z_U4
 
	tz_¸c_t
;

411 
	tz_¸c_t
;

415 
	#Z_HAVE_UNISTD_H


	)

419 
	#Z_HAVE_STDARG_H


	)

422 #ifde‡
STDC


423 #i‚de‡
Z_SOLO


424 
	~<sys/ty≥s.h
>

428 #ifde‡
_WIN32


429 
	~<°ddef.h
>

438 #i‡
deföed
(
LARGEFILE64_SOURCE
Ë&& -
_LARGEFILE64_SOURCE
 - -1 == 1

439 #unde‡
_LARGEFILE64_SOURCE


442 #i‡
deföed
(
__WATCOMC__
Ë&& !deföed(
Z_HAVE_UNISTD_H
)

443 
	#Z_HAVE_UNISTD_H


	)

445 #i‚de‡
Z_SOLO


446 #i‡
deföed
(
Z_HAVE_UNISTD_H
Ë|| deföed(
LARGEFILE64_SOURCE
)

447 
	~<uni°d.h
>

448 #ifde‡
VMS


449 
	~<unixio.h
>

451 #i‚de‡
z_off_t


452 
	#z_off_t
 
off_t


	)

457 #i‡
deföed
(
_LFS64_LARGEFILE
) && _LFS64_LARGEFILE-0

458 
	#Z_LFS64


	)

461 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë&& deföed(
Z_LFS64
)

462 
	#Z_LARGE64


	)

465 #i‡
deföed
(
_FILE_OFFSET_BITS
Ë&& _FILE_OFFSET_BITS-0 =64 && deföed(
Z_LFS64
)

466 
	#Z_WANT64


	)

469 #i‡!
deföed
(
SEEK_SET
Ë&& !deföed(
Z_SOLO
)

470 
	#SEEK_SET
 0

	)

471 
	#SEEK_CUR
 1

	)

472 
	#SEEK_END
 2

	)

475 #i‚de‡
z_off_t


476 
	#z_off_t
 

	)

479 #i‡!
deföed
(
_WIN32
Ë&& deföed(
Z_LARGE64
)

480 
	#z_off64_t
 
off64_t


	)

482 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
Z_SOLO
)

483 
	#z_off64_t
 
__öt64


	)

485 
	#z_off64_t
 
z_off_t


	)

490 #i‡
deföed
(
__MVS__
)

491 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

492 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

493 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

494 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

495 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

496 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

497 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

498 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

499 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

500 #¥agm®
m≠
(
com¥essBound
,"CMBND")

501 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

502 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

503 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!
deföed
 
__NO_LONG_DOUBLE_MATH
 \

102 || 
deföed
 
__LDBL_COMPAT
 \

103 || !
deföed
 
_LIBC
)

104 #ifde‡
__LDBL_COMPAT


106 #ifde‡
__USE_ISOC99


107 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

108 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

109 #ifde‡
__REDIRECT_NTH


110 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

111 
__∆dbl_√xâow¨df
)

112 
	`__©åibuã__
 ((
__c⁄°__
));

113 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

114 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

115 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

116 (
__x
, 
__y
),

117 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

122 #i‡
deföed
 
__LDBL_COMPAT
 || deföed 
__NO_LONG_DOUBLE_MATH


124 #unde‡
__MATHDECL_1


125 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

126 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

127 
¨gs
, 
Æüs
)

	)

128 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

129 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

134 #i‚de‡
_Ml⁄g_doubÀ_


135 
	#_Ml⁄g_doubÀ_
 

	)

137 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

138 #ifde‡
__STDC__


139 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

141 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

143 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

144 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

145 
	~<bôs/m©hˇŒs.h
>

146 #unde‡
_MdoubÀ_


147 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


148 #unde‡
_MdoubÀ_END_NAMESPACE


149 #unde‡
__MATH_PRECNAME


154 #unde‡
__MATHDECL_1


155 #unde‡
__MATHDECL


156 #unde‡
__MATHCALL


159 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


161 
signgam
;

166 #ifde‡
__USE_ISOC99


204 
FP_NAN
,

205 
	#FP_NAN
 
FP_NAN


	)

206 
FP_INFINITE
,

207 
	#FP_INFINITE
 
FP_INFINITE


	)

208 
FP_ZERO
,

209 
	#FP_ZERO
 
FP_ZERO


	)

210 
FP_SUBNORMAL
,

211 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

212 
FP_NORMAL


213 
	#FP_NORMAL
 
FP_NORMAL


	)

217 #ifde‡
__NO_LONG_DOUBLE_MATH


218 
	#Â˛assify
(
x
) \

219 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

221 
	#Â˛assify
(
x
) \

222 ( (
x
) ==  () \

223 ? 
	`__Â˛assifyf
 (
x
) \

224 :  (
x
) ==  () \

225 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

229 #ifde‡
__NO_LONG_DOUBLE_MATH


230 
	#signbô
(
x
) \

231 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

233 
	#signbô
(
x
) \

234 ( (
x
) ==  () \

235 ? 
	`__signbôf
 (
x
) \

236 :  (
x
) ==  () \

237 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

241 #ifde‡
__NO_LONG_DOUBLE_MATH


242 
	#isföôe
(
x
) \

243 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

245 
	#isföôe
(
x
) \

246 ( (
x
) ==  () \

247 ? 
	`__föôef
 (
x
) \

248 :  (
x
) ==  () \

249 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

253 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

257 #ifde‡
__NO_LONG_DOUBLE_MATH


258 
	#i¢™
(
x
) \

259 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

261 
	#i¢™
(
x
) \

262 ( (
x
) ==  () \

263 ? 
	`__i¢™f
 (
x
) \

264 :  (
x
) ==  () \

265 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

269 #ifde‡
__NO_LONG_DOUBLE_MATH


270 
	#isöf
(
x
) \

271 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

273 
	#isöf
(
x
) \

274 ( (
x
) ==  () \

275 ? 
	`__isöff
 (
x
) \

276 :  (
x
) ==  () \

277 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

281 
	#MATH_ERRNO
 1

	)

282 
	#MATH_ERREXCEPT
 2

	)

287 #i‚de‡
__FAST_MATH__


288 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

293 #ifdef 
__USE_MISC


297 
_IEEE_
 = -1,

298 
_SVID_
,

299 
_XOPEN_
,

300 
_POSIX_
,

301 
_ISOC_


302 } 
	t_LIB_VERSION_TYPE
;

307 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

311 #ifde‡
__USE_SVID


317 #ifde‡
__˝lu•lus


318 
__ex˚±i⁄


320 
ex˚±i⁄


323 
ty≥
;

324 *
«me
;

325 
¨g1
;

326 
¨g2
;

327 
ªtvÆ
;

328 
	}
};

330 #ifde‡
__˝lu•lus


331 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

333 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

336 
	#X_TLOSS
 1.41484755040568800000e+16

	)

339 
	#DOMAIN
 1

	)

340 
	#SING
 2

	)

341 
	#OVERFLOW
 3

	)

342 
	#UNDERFLOW
 4

	)

343 
	#TLOSS
 5

	)

344 
	#PLOSS
 6

	)

347 
	#HUGE
 3.40282347e+38F

	)

351 #ifde‡
__USE_XOPEN


353 
	#MAXFLOAT
 3.40282347e+38F

	)

360 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


361 
	#M_E
 2.7182818284590452354

	)

362 
	#M_LOG2E
 1.4426950408889634074

	)

363 
	#M_LOG10E
 0.43429448190325182765

	)

364 
	#M_LN2
 0.69314718055994530942

	)

365 
	#M_LN10
 2.30258509299404568402

	)

366 
	#M_PI
 3.14159265358979323846

	)

367 
	#M_PI_2
 1.57079632679489661923

	)

368 
	#M_PI_4
 0.78539816339744830962

	)

369 
	#M_1_PI
 0.31830988618379067154

	)

370 
	#M_2_PI
 0.63661977236758134308

	)

371 
	#M_2_SQRTPI
 1.12837916709551257390

	)

372 
	#M_SQRT2
 1.41421356237309504880

	)

373 
	#M_SQRT1_2
 0.70710678118654752440

	)

379 #ifde‡
__USE_GNU


380 
	#M_El
 2.7182818284590452353602874713526625L

	)

381 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

382 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

383 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

384 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

385 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

386 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

387 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

388 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

389 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

390 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

391 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

392 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

399 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


400 
	#__NO_MATH_INLINES
 1

	)

403 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

410 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

411 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

412 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

413 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

414 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

415 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

419 #ifde‡
__USE_EXTERN_INLINES


420 
	~<bôs/m©hölöe.h
>

423 #ifde‡
__USE_ISOC99


427 #i‚de‡
isgª©î


428 
	#isgª©î
(
x
, 
y
) \

429 (
__exãnsi⁄__
 \

430 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

431 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

435 #i‚de‡
isgª©îequÆ


436 
	#isgª©îequÆ
(
x
, 
y
) \

437 (
__exãnsi⁄__
 \

438 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

439 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

443 #i‚de‡
i¶ess


444 
	#i¶ess
(
x
, 
y
) \

445 (
__exãnsi⁄__
 \

446 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

447 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

451 #i‚de‡
i¶es£quÆ


452 
	#i¶es£quÆ
(
x
, 
y
) \

453 (
__exãnsi⁄__
 \

454 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

455 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

459 #i‚de‡
i¶essgª©î


460 
	#i¶essgª©î
(
x
, 
y
) \

461 (
__exãnsi⁄__
 \

462 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

463 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

467 #i‚de‡
isun‹dîed


468 
	#isun‹dîed
(
u
, 
v
) \

469 (
__exãnsi⁄__
 \

470 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

471 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

476 
	g__END_DECLS


	@/usr/include/setjmp.h

23 #i‚def 
_SETJMP_H


24 
	#_SETJMP_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/£tjmp.h
>

31 
	~<bôs/sig£t.h
>

35 
	s__jmp_buf_èg


41 
__jmp_buf
 
	m__jmpbuf
;

42 
	m__mask_was_ßved
;

43 
__sig£t_t
 
	m__ßved_mask
;

47 
__BEGIN_NAMESPACE_STD


49 
__jmp_buf_èg
 
	tjmp_buf
[1];

53 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROW
;

55 
__END_NAMESPACE_STD


60 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROW
;

62 #i‚def 
__FAVOR_BSD


65 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROW
;

69 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

74 
	#£tjmp
(
ív
Ë
	`£tjmp
 (ív)

	)

78 
__BEGIN_NAMESPACE_STD


82 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

83 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_NAMESPACE_STD


87 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


91 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

92 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

96 #ifdef 
__USE_POSIX


100 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

104 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

110 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

111 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

116 #i‡
__USE_FORTIFY_LEVEL
 > 0

117 
	~<bôs/£tjmp2.h
>

120 
__END_DECLS


	@/usr/include/strings.h

20 #i‚def 
_STRINGS_H


21 
	#_STRINGS_H
 1

	)

26 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


28 
	~<„©uªs.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

33 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

34 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

37 
	g__BEGIN_DECLS


39 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


41 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

42 
__THROW
 
__©åibuã_puª__
;

45 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

48 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

51 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


54 *
	`ödex
 (*
__s
, 
__c
)

55 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

56 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

57 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

59 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


60 
__exã∫_Æways_ölöe
 *

61 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
__exã∫_Æways_ölöe
 
__c⁄°
 *

67 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


69  
	`__buûtö_ödex
 (
__s
, 
__c
);

72 
	}
}

74 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

75 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

79 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


82 *
	`rödex
 (*
__s
, 
__c
)

83 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

84 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

85 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

87 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


88 
__exã∫_Æways_ölöe
 *

89 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
__exã∫_Æways_ölöe
 
__c⁄°
 *

95 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


97  
	`__buûtö_rödex
 (
__s
, 
__c
);

100 
	}
}

102 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


110 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

114 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

115 
__THROW
 
__©åibuã_puª__
;

118 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

119 
__THROW
 
__©åibuã_puª__
;

121 #ifdef 
__USE_XOPEN2K8


125 
	~<xloˇÀ.h
>

129 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

130 
__loˇÀ_t
 
__loc
)

131 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

134 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

663 ...), 
__isoc99_swsˇnf
)

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
195
3750
Atari.cpp
Atari.h
common/Array.hxx
common/FrameBufferSoft.cpp
common/FrameBufferSoft.hxx
common/GuiUtils.hxx
common/Snapshot.cpp
common/Snapshot.hxx
common/SoundNull.cpp
common/SoundNull.hxx
common/SoundSDL.cpp
common/SoundSDL.hxx
common/StringList.hxx
common/Version.hxx
common/mainSDL.cpp
emucore/Booster.cpp
emucore/Booster.hxx
emucore/Cart.cpp
emucore/Cart.hxx
emucore/Cart2K.cpp
emucore/Cart2K.hxx
emucore/Cart3E.cpp
emucore/Cart3E.hxx
emucore/Cart3F.cpp
emucore/Cart3F.hxx
emucore/Cart4K.cpp
emucore/Cart4K.hxx
emucore/CartAR.cpp
emucore/CartAR.hxx
emucore/CartCV.cpp
emucore/CartCV.hxx
emucore/CartDPC.cpp
emucore/CartDPC.hxx
emucore/CartE0.cpp
emucore/CartE0.hxx
emucore/CartE7.cpp
emucore/CartE7.hxx
emucore/CartF4.cpp
emucore/CartF4.hxx
emucore/CartF4SC.cpp
emucore/CartF4SC.hxx
emucore/CartF6.cpp
emucore/CartF6.hxx
emucore/CartF6SC.cpp
emucore/CartF6SC.hxx
emucore/CartF8.cpp
emucore/CartF8.hxx
emucore/CartF8SC.cpp
emucore/CartF8SC.hxx
emucore/CartFASC.cpp
emucore/CartFASC.hxx
emucore/CartFE.cpp
emucore/CartFE.hxx
emucore/CartMB.cpp
emucore/CartMB.hxx
emucore/CartMC.cpp
emucore/CartMC.hxx
emucore/CartUA.cpp
emucore/CartUA.hxx
emucore/Console.cpp
emucore/Console.hxx
emucore/Control.cpp
emucore/Control.hxx
emucore/DefProps.hxx
emucore/Deserializer.cpp
emucore/Deserializer.hxx
emucore/Device.cpp
emucore/Device.hxx
emucore/Driving.cpp
emucore/Driving.hxx
emucore/Event.cpp
emucore/Event.hxx
emucore/EventHandler.cpp
emucore/EventHandler.hxx
emucore/EventStreamer.cpp
emucore/EventStreamer.hxx
emucore/FSNode.cpp
emucore/FSNode.hxx
emucore/FrameBuffer.cpp
emucore/FrameBuffer.hxx
emucore/Joystick.cpp
emucore/Joystick.hxx
emucore/Keyboard.cpp
emucore/Keyboard.hxx
emucore/M6502.cpp
emucore/M6502.hxx
emucore/M6502Hi.cpp
emucore/M6502Hi.hxx
emucore/M6502Low.cpp
emucore/M6502Low.hxx
emucore/M6532.cpp
emucore/M6532.hxx
emucore/MD5.cpp
emucore/MD5.hxx
emucore/MediaFactory.cpp
emucore/MediaFactory.hxx
emucore/MediaSrc.cpp
emucore/MediaSrc.hxx
emucore/NullDev.cpp
emucore/NullDev.hxx
emucore/OSystem.cpp
emucore/OSystem.hxx
emucore/Paddles.cpp
emucore/Paddles.hxx
emucore/Props.cpp
emucore/Props.hxx
emucore/PropsSet.cpp
emucore/PropsSet.hxx
emucore/Random.cpp
emucore/Random.hxx
emucore/Serializer.cpp
emucore/Serializer.hxx
emucore/Settings.cpp
emucore/Settings.hxx
emucore/Sound.hxx
emucore/Switches.cpp
emucore/Switches.hxx
emucore/System.cpp
emucore/System.hxx
emucore/TIA.cpp
emucore/TIA.hxx
emucore/TIASnd.cpp
emucore/TIASnd.hxx
emucore/bspf.hxx
emucore/unzip.c
emucore/unzip.h
global.h
psp/FSNodePSP.cpp
psp/FrameBufferPSP.cpp
psp/FrameBufferPSP.hxx
psp/OSystemPSP.cpp
psp/OSystemPSP.hxx
psp/SettingsPSP.cpp
psp/SettingsPSP.hxx
psp/pspstdint.h
psp_battery.c
psp_battery.h
psp_danzeff.c
psp_danzeff.h
psp_fmgr.c
psp_fmgr.h
psp_font.c
psp_gu.c
psp_gu.h
psp_irkeyb.c
psp_irkeyb.h
psp_kbd.c
psp_kbd.h
psp_main.cpp
psp_menu.c
psp_menu.h
psp_menu_help.c
psp_menu_help.h
psp_menu_kbd.c
psp_menu_kbd.h
psp_menu_set.c
psp_menu_set.h
psp_sdl.c
psp_sdl.h
pspsdk_linux.c
pspsdk_linux.h
/usr/include/SDL/SDL.h
/usr/include/SDL/SDL_image.h
/usr/include/SDL/SDL_ttf.h
/usr/include/assert.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/malloc.h
/usr/include/png.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/zlib.h
/usr/include/alloca.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/pngconf.h
/usr/include/stdint.h
/usr/include/xlocale.h
/usr/include/zconf.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/limits.h
/usr/include/math.h
/usr/include/setjmp.h
/usr/include/strings.h
/usr/include/endian.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
